[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "![Our Logo](https://i.ibb.co/VxzKbbz/a1.png)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "This document guides you through the process of using this project directory."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/cheatlogs/CheatLogs.java` file, right-click it, and choose `Run CheatLogs.main()`. If the setup is correct, you should see something like the image below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "![CheatLogs welcome screen](https://i.ibb.co/L6LmYGZ/mainMenu.png)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "* There are a number of JUnit tests that are provided for you to test the various features of CheatLogs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "`/docs` folder contains a few important documents featuring different aspects of this project."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "theopin": 8,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    compile group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.18\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    mainClassName \u003d \"cheatlogs.CheatLogs\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    archiveBaseName \u003d \"CheatLogs\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "-": 44,
      "adhy-p": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://via.placeholder.com/100.png?text\u003dPhoto\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Tolentino Abner Jr Morales| [Github](https://github.com/abnermtj) | [Portfolio](docs/team/abner.md) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://avatars2.githubusercontent.com/u/60168552?s\u003d400\u0026u\u003d70ed3bb19e26b16aadf133b9ff21ee01345defff\u0026v\u003d4\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Aldo Maximillian | [Github](https://github.com/domaxi) | [Portfolio](docs/team/aldomax.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://avatars0.githubusercontent.com/u/60382521?s\u003d400\u0026u\u003dcf1fd251902a9305731ac4732d85abb1f83c6755\u0026v\u003d4\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Toh Yong Xiang Brandon | [Github](https://github.com/brandontoh) | [Portfolio](docs/team/TohYongXiangBrandon.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://avatars1.githubusercontent.com/u/54772103?s\u003d460\u0026u\u003daaf323e6171a155d2080ea54e18a429e81d8bb55\u0026v\u003d4\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Hubertus Adhy Pratama Setiawan | [Github](https://github.com/adhy-p) | [Portfolio](docs/team/adhy-p.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca href\u003d\"url\"\u003e\u003cimg src\u003d\"https://via.placeholder.com/100.png?text\u003dPhoto\" style\u003d\"vertical-align:middle\" height\u003d\"50\" width\u003d\"50\"\u003e\u003c/a\u003e | Theodore Pinto | [Github](https://github.com/theopin) | [Portfolio](docs/team/theopin.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "abnermtj": 5,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003e  CheatLogs Developer Guide \u003c/h1\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![Our Logo](https://i.ibb.co/VxzKbbz/a1.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Welcome to the official developer guide of CheatLogs, a free and open-source cheatsheet manager with blazing fast organization, editing and searching via both a command-line interface (CLI) and a graphical user interface (GUI) ."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "The table of contents below lets you easily access the documentation for CheatLogs\u0027s architecture and feature design/implmentation details."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e \u003cfont size \u003d \"5\" \u003e:bulb: Here are some patterns you will come across and their definitions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e ------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e|Pattern|Definition|"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e|--|--|"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e| :bulb: |Tip on current section  |"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e|:exclamation:|Warning of potential error|"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e|\u003cfont size\u003d\"3\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e| Returns to table of contents on left click|"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e|**bold**|Key terms specific to CheatLogs|"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e|*italics*|Files|"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e|`Snippets`|Typed input or output going into or out of CheatLogs|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "# Table of Contents"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "* [1. Introduction](#introduction)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [2. Purpose](#purpose)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [3. Setting Up, Getting Started](#setting-up-getting-started)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [3.1. Prerequisites](#prerequisites)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [3.2. Running the Project](#running-the-project)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [3.3 Importing into IntelliJ [optional]](#importing-into-intellij)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [4. Design](#design)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [4.1. Architecture](#architecture)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [4.2. Components](#components)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        * [4.2.1. User Interface](#user-interface)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        * [4.2.2. Command Parser](#command-parser)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        * [4.2.3. Command](#command)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.1. Add](#add)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.2. Edit](#edit)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.3. View](view)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.4. Exit](#exit)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.5. List](#list)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.6. Find](#find)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.7. Setting](#setting)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.8. Delete](#delete)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.9. Clear](#clear)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.10. Favourite](#favourite)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            * [4.2.3.11. Exit](#help)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        * [4.2.4. Cheat Sheet Management](#cheat-sheet-management)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        * [4.2.5. Data Storage](#data-storage)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [5. Implementation](#implementation)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [5.1. Parsing of Data to Construct Commands](#parsing-of-data-to-construct-commands)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [5.2. Editing Feature](#editing-feature)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [5.3. Sorting Feature](#sorting-feature)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [5.4. Storage \u0026 Reading of Cheatsheet files](#storage-reading-of-cheatsheet-files)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [5.5. Colour coding for code snippet](#colour-coding-for-code-snippet)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [6. Documentation, logging, testing, configuration, dev-ops](#documentation-logging-testing-configuration-dev-ops)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [7. Appendix: Requirements](#appendix-requirements)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [7.1. Product scope](#product-scope-appendix)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [7.2. User stories](#user-stories)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [7.3. Use cases](#use-cases)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    * [7.4. Non-Functional Requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [8. Glossary](#glossary)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [9. Appendix: Instructions for manual testing](#appendix-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"introduction\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "# 1. Introduction\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "The motivation behind CheatLogs is to reduce the time spent to scroll through pages of stack overflow posts or online documentation sites to find a syntax for a programming language, which is very common for novice programmers. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "**CheatLogs** allows it\u0027s user to access cheat sheets and notes for various programming syntax and functions. This gives novice programmers a way faster to get references as they build their applications. It also provides a set of preloaded cheatsheets for common languages novice programmers adopt. It consists of both a command line interface and a graphical user interface. Below is a summary of all the commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "To cheatsheets in the list of cheatsheets:  `add`, `delete`, or`clear` "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "To modify properties of a specific cheatsheet: `edit` or `favorite`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "To get specific cheatsheets:  `find`, `view`  and `list`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "To use more general commands:  `help` , `set`, `exit`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"purpose\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "# 2. Purpose\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "This document specifies the high-level architecture and software design decisions of CheatLogs and aims to quickly get developers familiar with the project. "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"setting-up-getting-started\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "# 3. Setting Up, Getting Started\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "xx"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"prerequisites\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 3.1. Prerequisites\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "1. JDK 11.0.8"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "2. Java IDE (IntelliJ Recommended)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "CheatLogs has been developed on Java 11 and may not be supported on other versions. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "You are free to use any java file editor and run the program by following the step by step guide below. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"running-the-project\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 3.2. Running the Project\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "2. Download the latest CheatLogs.jar from [here](https://github.com/AY2021S1-CS2113T-W11-3/tp/releases)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "3. Move the file to a folder you want to use as the home folder for this application."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "4. Invoke java -jar CheatLogs.jar on the command line to run the program. A welcome message should appear, as shown below."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![](Images/Image1.PNG)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"importing-to-intellij\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 3.3 Importing into IntelliJ [optional]\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "In case you prefer to use IDEs to develop. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "IntelliJ IDEA community edition is a popular free choice. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "After installing a version of it you can import it using the “Get from Version Control” option below and clone from our [repository](https://github.com/AY2021S1-CS2113T-W11-3/tp.)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![](Images/Image2.PNG)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"design\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "# 4. Design\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This section will elaborate on the architecture and component design of CheatLogs."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"architecture\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 4.1. Architecture\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The image below illustrates the high-level design of CheatLogs."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![](Images/Image3.PNG)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Image 1: General Architecture of CheatLogs"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "CheatLogs is split into 5 major components, each handling distinct features of the application. The components and a brief description of them is listed below."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* `UI`: The user interface of the app."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* `CheatSheet`: The structure of each cheat sheet"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* `CheatSheetList`: A collection of every cheat sheet."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* `Parser`: Builds a data structure based on user inputs."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* `Command`: An encapsulation of data and methods to execute each command"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* `Storage`: Updates application data based on relevant external files."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The UML diagram below illustrates an extensive version of the various classes present in CheatLogs as well as their interactions with each other."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![](Images/Image4.PNG)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Image 2: In-Depth Architecture of CheatLogs"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "For each component, it can be further split into different classes which have a unique responsibility. They will be further elaborated upon in the next section."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"components\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 4.2. Components\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theopin"
        },
        "content": "This application contains five different components. "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Each component has a unique function and contributes to the functionality of this application."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theopin"
        },
        "content": "---"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"user-interface\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.2.1. User Interface\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theopin"
        },
        "content": "//Abner"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This component handles interactions with the user and manages the input and output of the programme. "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![](Images/Image5.PNG)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Image 3: User Session class fields and methods"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "One of the classes is UserSession which contains the main loop of the program. "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Every loop it reads and parses the user input to get a Command object which encapsulates all the necessary information needed to execute the command. "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "After execution, it handles potential exceptions thrown."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "A single instance of common objects are usually created in UserSession, such as Ui and Printer objects. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "These common objects are injected into other objects that need them via the class constructor instead of static methods."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The common objects include the Ui and  Printer helper classes which provide an organized way to read and write data. "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Most of the programmes’ output is made via calls to the same common printer object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"command-parser\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.2.2. Command Parser\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "theopin"
        },
        "content": "//Brandon"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This component would parse the user input to produce useful information which would be used to construct a Command and executed the command. "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![](Images/Image6.PNG)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Image 4: Interaction between components to parse and execute command"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![](Images/Image7.PNG)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Image 5: Sequence Diagram from parsing input to command execution"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Image 4 and 5 illustrates the interactions between Parser, CommandExecutor and Command when a user inputs an instruction. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The steps below explain the sequence diagram:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "1. User input an instruction"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "2. A new Parser object is created"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "3. Parser#parse() is called to extract command type, name, programming language and details from the user-inputted instruction"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "4. If the user input is valid, a new CommandExecutor object would be created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "5. CommandExecutor#execute() would be called to create a new Command object according to type of command user inputted"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "6. Command#execute() would call other methods from CheatSheet and CheatSheetList to carry out specific instructions."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.2.3. Commands\t\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "theopin"
        },
        "content": "//Aldo"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"add\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "##### 4.2.3.1 Add"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"edit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "##### 4.2.3.2 Edit"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"view\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "##### 4.2.3.3 View"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"exit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "##### 4.2.3.4 Exit"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"list\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "##### 4.2.3.5 List"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"find\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "##### 4.2.3.6 Find"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"setting\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "##### 4.2.3.7 Setting "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"delete\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "##### 3.2.3.8 Delete"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"clear\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "##### 4.2.3.9 Clear"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"favourite\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "##### 4.2.3.10 Favourite"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"help\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "##### 4.2.3.11 Help"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"cheat-sheet-structure\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "#### 4.2.4. Cheat Sheet Structure "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "theopin"
        },
        "content": "//Aldo"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "To further understand our cheatsheet management application, it is important to understand the inner workings of the CheatSheet class. "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "CheatLogs comes with preloaded cheat sheets and the application has an in-built ability for the user to add, edit, and delete their own cheat sheets. "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The preloaded cheat sheet cannot be modified by the user, as the user-made cheatsheet is able to be modified by the user."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The CheatSheet class is the class that models the cheat sheet that we used in our program. "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Each of our cheatsheet object is intended to store one cheatsheet topic for one specific programming language (both preloaded and user-created cheat sheets)."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This system is intended to increase user access and organization of the cheat sheets."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Each of the CheatSheet object has:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "1. \tName"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "2. \tProgramming Language"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "3. \tDescription (Content of the cheatsheet)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "4. \tisFavorite"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "5. \tisModifiable"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "6. \tDate Created"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "7. \tDate Modified"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![](Images/Image8.PNG)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Image 6: class diagram of the cheatsheet class"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "theopin"
        },
        "content": "---"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"development-goals\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "theopin"
        },
        "content": "###  Development Goals\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "theopin"
        },
        "content": "//TBC"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "We are trying to move our existing cheatsheet file format from txt to xml. "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "XML files provide inbuilt tags to differentiate and classify members of the document. "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "With the use of XML file, it simplifies the parsing process of the cheatsheet files into the cheatsheet class, and vice versa."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![](Images/Image9.PNG)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Image 7: XML file showing the content of a cheatsheet file"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"cheat-sheet-management\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.2.5. Cheat Sheet Management\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "theopin"
        },
        "content": "//Adhy"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "All cheat sheets, both pre-loaded and user-defined, are stored in a class called `CheatSheetList` during runtime. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "Upon receiving a valid input from the user, the `execute()` method from `Command` class will invoke the mutation of `CheatSheetList`, "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "and then `DataFileWriter` will use the information in `CheatSheetList` to save it to the memory in the form of a `xml` file."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![](Images/Image10.PNG)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Image 8: Class diagram of CheatSheetList class"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The cheatSheets ArrayList is of type private, and setter/getter methods must be invoked to access the list. "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "For these setter and getter methods, it accepts both accessing by its index and accessing by its name to allow the user to easily search and fetch the cheat sheet."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "Here is the list of `Commands` that invokes a method call of CheatSheetList:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "- `/add`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "- `/clear`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "- `/delete`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "- `/fav`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "- `/find`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "- `/list`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "- `/view`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"data-storage\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.2.6. Data Storage\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "theopin"
        },
        "content": "//Theo"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This feature allows the application to read and update data in the form of text files. "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Having an external source to store data will allow the application to be able to retrieve it when it is relaunched at another instance. "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This prevents the user from having to repeatedly create new cheatsheets and update the application settings each time he opens up CheatLogs. "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "theopin"
        },
        "content": "This feature contains 3 functions, which are indicated in Table 1 below."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| Function | Purpose of Function |"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "|----------|--------------------------------|"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "|Read Files|Allows CheatLogs to extract cheatsheets and user-defined settings from text files provided that they follow a specified format.|"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "|Write Files|Allows CheatLogs to write cheatsheets and user-defined settings to the hard-disk in the form of text files.|"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "|Delete Files|Allows CheatLogs to remove unnecessary files from the hard-disk.|"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Table 1: Summary of the functions of data storage"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "theopin"
        },
        "content": "---"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"implementation\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "# 5. Implementation\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"parsing-of-data-to-construct-commands\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 5.1. Parsing of Data to Construct Commands\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The command classes follow the command pattern. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "During construction in Parser.parse() they get the information they need to execute from parsed data based on the user input. "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Flags in the input are used to separate the different information. (e.g. `/add /n if /l python /k is nice`, has 3 flags, /n /l and /k and the String “python\" is associated with the flag /l). "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This information is stored in a HashMap where the descriptor (defined in ArgumentEnum) of the flag is the key and the information associated with it is the value."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The command can execute at a random time later via commandObj.execute().12"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"editing-feature\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 5.2. Editing Feauture\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The editing feature is enabled using a simple text editor that uses a graphical user interface. "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The strong reason that we wanted to use a GUI is that it offers more flexibility and editing power for the user rather than just using command-line editing methods."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The editing feature is handled by the TextEditor class. The Text Editor inherits from JFrame and implements the Action Listener class. "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The text editor is instantiated when the edit command is invoked. "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"sorting-feature\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 5.3. Sorting Feature\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This feature allows cheat sheets to be sorted in ascending or descending order according to the name or programming language of the cheat sheet."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This feature is facilitated by ListCommand class. "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "It made use of Collections.sort along with sortByName and SortByLanguage which both implements Comparator\u003cCheatSheet\u003e. "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Collections and Comparator forms the private method askForSortingConfigAndPrint(). "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The inclusion of the method allows the user to choose the sorting option and the sorted cheat sheets will be printed.\t"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Alternative: Using a for loop to sort by name and another loop that sorts by language"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Con: There would be many duplicate code and not good for reusability. "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "By using the sort() method present in java. util. Collections class, we would have better flexibility as the sort method could be reused with different functions just by including a new class that implements comparable."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"storage-reading-of-cheatsheet-files\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 5.4. Storage \u0026 Reading of Cheatsheet files\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "This feature stores cheat sheets on the hard-drive in the form of a text file. "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "When the application is loaded subsequently, data from these files will be converted and loaded into the application."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"colour-coding-for-code-snippet\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 5.5. Colour coding for code snippet\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "theopin"
        },
        "content": "//Proposed"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "The idea of this feature is to improve the readability of the code snippets (if present) inside the cheat sheet. "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "To make this possible, several adjustments must be made to the save data format to allow more information to be stored inside a single file instead of scattered across multiple files. "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Thus, instead of saving to a txt file, the program will write the cheat sheet data into a xml file, for easier parsing and sectioning. "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Given below is an example to illustrate the mechanism."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "1. The user launches the application and will be prompted to enter a command"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "2. The user chooses the /add command, and will be prompted to fill three fields: name, programming language, and details"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "3. When filling the details, a text editor will pop up. The user now can add their cheat sheet inside this field and he/she can indicate the sections of the cheatsheet using tags similar to markdown"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "4. The DataFileParser will parse the sections and store the information inside a xml file, with a different tag for each section"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "5. When the user invokes the /view command, the Printer class will interpret these tags and prepend and append ANSI escape codes to the text"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Design consideration:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Alternative 1 (current choice): Saves the file using a xml file, with different tags for each section"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* Pros: Allows to store all data in a single file"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* Cons: The parsing and saving to the xml file is quite complicated"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Alternative 2: Save different sections of the cheat sheet using a different file, and store the files in a folder according to its language"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* Pros: The implementation of the parser and file writer is much easier"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* Cons: Sections of a single cheatsheet is scattered across multiple files"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"documentation-logging-testing-configuration-dev-ops\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "# 6. Documentation, logging, testing, configuration, dev-ops\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"appendix-requirements\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "# 7. Appendix: Requirements\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"product-scope-appendix\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 7.1 Product scope\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"user-stories\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 7.2 User stories\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "theopin"
        },
        "content": "The table below describes the particular needs of relevant users that the respective"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "theopin"
        },
        "content": "versions of CheatLogs was designed to solve."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "|v1.0|new user|see a short and comprehensive guide|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "|v1.0|user|search and filter the cheat sheets by name|open them quickly and easily|"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "|v1.0|intermediate user|write and add my own cheat sheets|use the application to help me in matters not strictly related to programming|"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "|v1.0|experienced user|delete all cheat sheets|create and customize everything by myself|"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "|v2.0|user|edit the cheat sheets|update the cheat sheet and keep them relevant as the time progresses|"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "|v2.0|user|customize the settings|add and edit the cheat sheets|"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"use-cases\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 7.3 Use cases\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"non-functional-requirements\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 7.4 Non-Functional Requirements\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"glossary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "# 8. Glossary\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"appendix-instructions-for-manual-testing\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "# 9. Appendix: Instructions for manual testing\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003c!---"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "There are few major components inside the code, and those components are broken down into separate classes. "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "All components can be accessed from the CheatLogs class."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### CheatSheetList"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "All cheatsheets are stored inside a static class CheatSheetList to allow other classes to easily access and write data to the list."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "--\u003e"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 89,
      "theopin": 96,
      "-": 29,
      "brandontoh": 237,
      "adhy-p": 20
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "![Our Logo](https://i.ibb.co/VxzKbbz/a1.png)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "Welcome to **CheatLogs**. Through this application, you can organize all your"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "cheat sheets! This application is targeted at"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "programming students who have difficulty understanding lengthy documentation "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "guides."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "Here are some links to the relevant guide as well as an introduction to our team!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "theopin": 7,
      "-": 5
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003e  CheatLogs User Guide \u003c/h1\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![Our Logo](https://i.ibb.co/VxzKbbz/a1.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "CheatLogs is a free and open-source cheatsheet manager with blazing fast organization, editing and searching via both a command-line interface (CLI) and a graphical user interface (GUI) ."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "This user guide serves as a reference for using the features of CheatLogs. The level of technicality within this document is tailored towards our target audience, novice programmers. If you are new, we recommend reading this from the very [start](#before-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "The table of contents below lets you easily access the documentation for installation, specific features, and frequently asked questions. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e \u003cfont size \u003d \"5\" \u003e:bulb: Here are some patterns you will come across and their meanings."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e ------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e|Pattern|Meaning  |"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e|--|--|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e| :bulb: |Tip on current section  |"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e|:exclamation:|Warning of potential error|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e|\u003cfont size\u003d\"3\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e| Returns to table of contents on left click|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e|**bold**|Key terms specific to CheatLogs|"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e|*italics*|Files|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e|`Snippets`|Typed input or output going into or out of CheatLogs|"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "# Table of contents"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [1. Before you start](#before-start)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [2. Running CheatLogs](#start)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [3. GUI text editor](#editor)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [4. Commands](#commands)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "   * [4.1. Storage commands](#storage-command-type)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "   \t  * [4.1.1. Adding a cheatsheet: `/add`](#add-command)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "   \t    * [4.1.1.1. Adding a cheatsheet using the easy mode](#add-command-easy)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "   \t    * [4.1.1.2. Adding a cheatsheet using the advanced mode](#add-command-advanced)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t  * [4.1.2. Deleting a cheatsheet: `/delete`](#delete-command)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t  * [4.1.3. Clearing all entries: `/clear`](#clear-command)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "  * [4.2.  Manipulation commands](#manipulation-command-type)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t  * [4.2.1. Editing a cheatsheet: `/edit` ](#edit-command)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t  * [4.2.2. Favouriting a cheatsheet: `/fav` ](#favourite-command)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "  * [4.3.  Viewing commands](#viewing-command-type)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * [4.3.1. Locating a cheatsheet by name: `/find`](#find-command)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * [4.3.2. Viewing the cheatsheet: `/view`](#view-command)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * [4.3.3. Listing all cheatsheets: `/list`](#list-command)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "  * [4.4.  General commands](#general-command-type)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * [4.4.1. Viewing help: `/help`](#help-command)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * [4.4.2. Change program settings: `/set`](#settings-command)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\t    * [4.4.2.1 Change color scheme](#settings-color)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\t    * [4.4.2.2 Change behavior of help message](#settings-help-message)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * [4.4.3. Exiting the program: `/exit`](#exit-command)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [5. Data storage](#data-storage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "  * [5.1. Data file contents](#data-file-contents)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t  * [5.1.1. XML file configurations](#xml-file-configurations)  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t  * [5.1.2. Main](#main) \t"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t  * [5.1.3. Favourite](#favourite) "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t  * [5.1.4. Subject](#subject) "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "\t  * [5.1.5. Contents](#contents) \t"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "  * [5.2. Data file organization](#data-file-organization)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "  * [5.3. Preloaded data files](#preloaded-data-files)  \t     \t    \t  \t    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "* [6. FAQ](#faq)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "* [7. Command Cheatsheet](#command-cheatsheet)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"before-start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "#  1. Before you start\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "CheatLogs requires Java 11 or above installed on your computer. You can follow the the following instructions to install Java 11:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e \u0026nbsp;:exclamation: If you use earlier versions of Java, there may be compatibility issues. Thus, we recommend using the same one we developed on, Java 11. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " 1. Download Java JDK 11 for your system from [here](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " 2. Run and follow the installation instruction in the wizard."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " 3. Check your Java version."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * For computers on Windows, invoke`java -version` on the command prompt."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * For MacOs or Linux distros, invoke `java -version` on your terminal of choice."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "4. Verify that the version installed follows the \"11.x.x\" format. Refer to the image below for what you should expect to see."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![Java 11 installed message](https://i.ibb.co/tzV9GX3/image.png)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "#  2. Running CheatLogs\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "CheatLogs is easy to get running. You can follow the  steps below to do so."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "1.  You can download the latest version of CheatLogs from [here](https://github.com/AY2021S1-CS2113T-W11-3/tp/releases)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "2. Scroll to the latest release."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "3. Download only the *CheatLogs.jar* file highlighted in the orange box below."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t![](https://i.ibb.co/C24vhGg/image.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "5. Create a new directory anywhere on your PC, This is the home folder where CheatLogs will be creating its own subdirectories to store cheatsheets. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e :bulb: Unfamiliar with navigating the terminal? Click [here](https://www.digitaltrends.com/computing/how-to-use-command-prompt/) for a basic introduction for Windows cmd and [here](https://www.pluralsight.com/guides/beginner-linux-navigation-manual) for macOS/Linux bash terminal."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "6. Move *CheatLogs.jar* to the new directory."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "7. On the terminal,  navigate to the directory."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "8. Invoke `java -jar cheatlogs.jar` to run the program. If a welcome message appears as shown below then great! CheatLogs is up and running."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![CheatLogs welcome screen]( https://i.ibb.co/pK6CtPv/image.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "9. Try typing some commands in the terminal and hit Enter to execute."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "   Here are some example commands you can try, don\u0027t worry if you don\u0027t know them yet!"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "   "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "   * `/help`: Shows help info on how to use the application."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "   * `/list`: Lists all cheatsheets."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "   * `/exit`: Exits the app."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "A bit confused? Here is a video guide on doing steps 4-9 using the terminal (not cmd). Note that CheatLogs.jar already been placed in the Desktop folder."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![ezgif-6-63beb94eab4e](https://i.ibb.co/Q9FShJt/ezgif-6-63beb94eab4e.gif)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"editor\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "#  3. GUI text editor\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "CheatLogs provides a simple graphical user interface (GUI) text editor that automatically pops up on certain commands. These commands include: `add` and `edit`. This allows you to have an easier time manipulating data, performing simple operations such as cut, copy and paste or even using your mouse which are typically unavailable on the CLI. Below is what you can expect to see and be able to do when it pops up."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   \u003cimg width\u003d\"500\" height\u003d\"350\" src\u003d\"https://i.ibb.co/3kZ7Xjq/cheatlogs-editor.gif\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "domaxi"
        },
        "content": "### Functions"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "domaxi"
        },
        "content": "There are two main group of functions that can be used in out Graphical User Interface. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Actions tab - Actions that relates to the cheatsheet files"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "domaxi"
        },
        "content": " - Save : Saves the text inputted, then exits the text editor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "domaxi"
        },
        "content": " - Clear All : Removes all text in the text editor, remains in the text editor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "domaxi"
        },
        "content": " - Cancel : Removes all text and exit the text editor without saving."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Edit tab - Actions to manipulate the contents"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "  - Copy : Copies the text highlighted in the editor to the system clipboard."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " -  Cut : Cuts the text highlighted in the editor to the system clipboard."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " -  Paste : Pastes from the system clipboard to the position of the text cursor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "domaxi"
        },
        "content": "\u003e :exclamation: The editor will have a built in feature to avoid blank cheatsheets."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "In the following sections, we will be referring to this editor as **the Editor**. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"commands\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "# 4. Commands\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Commands are how you interact with Cheatlogs. To understand the terminology being used in the later sections, we would like you to understand the typical structure of a command, illustrated below."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "   \u003cimg width\u003d\"540\" height\u003d\"390\" src\u003d\"https://i.ibb.co/r3JjNZs/Sprite-0005.png\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "The anatomy of the command is broken down to color coded sections in the picture. These elements are all that are all used to execute the command and are elaborated below:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * **Command identifier**: Every command needs one. It is used to determine exactly what type of command needs to be run. In the commmand above, `/add` is the command identifier for adding cheatsheets."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " * **Flag**: Akin to options or parameters of the command, these are additional information passed to CheatLogs to use. Flags are sometimes optional and you don\u0027t always need to type them. In the command above, `/n`  and `/s` are used to indicate the names and subject of the cheatsheet respectively with `/s` being an optional flag."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\tTypes of flags:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * Optional: Flag does not need to be included"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * Necessary: Flag must be included"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\t * At least one: At least one of the a set of flags must be included"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* **Flag description**: Used when the flag itself does not provide enough information, CheatLogs takes in additional information for each flag through that flag\u0027s description. Not all flags have flag descriptions but each flag description needs to accompany a flag. In the command above, it is the name flag `n` is described by `help` and the subject flag `s` is described by `me`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e :bulb: You need not worry if you forget the exact flags for each command. CheatLogs prompts you to enter the flag description for each missing necessary flags. \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e :exclamation: CheatLogs is case-sensitive, be sure to match the case for flags about names."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"storage-command-type\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 4.1. Storage Commands:  \u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "This is one of the most used command type in CheatLogs. They allow you to manage the input and output of cheatsheets to and from the entire list of cheatsheets. CheatLogs only has one list of cheatsheets and the following storage commands all refer to this as **the List**."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "___"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"add-command\"\u003e\u003c/a\u003e "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.1.1. Adding a cheatsheet: `/add` \u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003e :exclamation: The subject name would be automatically converted to pascal case, no matter whether the input by user is in lower or upper case."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003e Example: "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003e * `java` would be converted to `Java`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003e * `PYTHON` would be converted to `Python`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003e * `ruby on rails` would be converted to `RubyOnRails`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "domaxi"
        },
        "content": "You can easily use the **/add** command to add your own cheat sheets to the list by using 2 different methods **easy** and **hard** mode."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003ca id\u003d\"add-command-easy\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "#### 4.1.1.1. Adding a cheatsheet using the easy mode\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e Format: `/add`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "The first method that you can use to add cheatsheet is the easy mode. Just type `/add` without adding any flag or description. "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "domaxi"
        },
        "content": "You will be prompted to fill in the `NAME` and the `SUBJECT` of your cheatsheet."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Shortly after, a window will pop up to show the editing window."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Enter the details of your cheatsheet there, then click `Actions` then `Save`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "domaxi"
        },
        "content": "![image](https://i.ibb.co/n01kQ4Y/carbon.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Congratulations! You have added your first cheatsheet into CheatLogs."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003ca id\u003d\"add-command-advanced\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "#### 4.1.1.2. Adding a cheatsheet using the advanced mode\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "domaxi"
        },
        "content": "\u003eFormat: `/add /n \u003cCHEATSHEET_NAME\u003e /s \u003cSUBJECT\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "domaxi"
        },
        "content": "\u003eFlag optionality: `/n` (required)`/s` (optional)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "domaxi"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "domaxi"
        },
        "content": "For the more advanced users, you can also add cheatsheets using the advanced command. A cheatsheet is first constructed with the name `CHEATSHEET_NAME` and subject `SUBJECT`. The Editor will then pop up for you to enter the description of the cheatsheet."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "If a non-empty description is saved, the cheatsheet is added to the List and stored to the */data* folder in the jar file directory. The expected outcome should be similar to below."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/hV499yH/image.png)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Else if the description is blank or the Editor was canceled, the error message below is shown and the cheatsheet is not saved."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " ![image](https://i.ibb.co/qxkMwtV/image.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "If you try to enter a cheatsheet with a name already in the List. You will get a message to input another one, this is depicted below."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/mhgrwN0/image.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/add /n classes s/Java`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/add /n Cppthings`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Shortly after, an editing window will pop up to show the editing window."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Enter the details of your cheatsheet there, then click `Actions` then `Save`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "domaxi"
        },
        "content": "If you want to clear the editing area, clck `Actions` then click `Clear All`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " \u003ca id\u003d\"delete-command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "domaxi"
        },
        "content": " "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "domaxi"
        },
        "content": "#### 4.1.2. Deleting a cheatsheet: `/delete`\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "domaxi"
        },
        "content": "From the previous subsection, we learned how to add a cheatsheet into CheatLogs. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "domaxi"
        },
        "content": "In this section, you can learn how to use the `/delete` function."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "domaxi"
        },
        "content": "To be used after using /list, Deletes the cheatsheet at INDEX items down the list. The first cheatsheet has an index of 1. This cheatsheet will be deleted from the /data folder."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "domaxi"
        },
        "content": " "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Format 1: `/delete i/INDEX`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFormat: `/delete /n CHEATSHEET_NAME /i CHEATSHEET_INDEX` \u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFlag optionality: [`/n`, `/i`] (At least one)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Deletes the matching cheatsheet from the List with name matching `CHEATSHEET_NAME` or index matching `CHEATSHEET_INDEX` whichever you included or you included both. The expected result is similar to below if a matching cheatsheet is found."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/jLrwh03/image.png)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "When either the name or index do not match, CheatLogs will specify the error as shown below."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/xHW7tLf/image.png)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Since our program currently doesn\u0027t have any undo functionality,."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "domaxi"
        },
        "content": "Once you delete a cheatsheet, it will be deleted forever, and is not recoverable."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/delete /n if else /i 2`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/delete /i 2` "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/delete /n string`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "___"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"clear-command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.1.3. Clearing all entries: `/clear`\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFormat: `/clear`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "If you want to reset everything to its original state, you can simply use the `/clear` command instead of using `/delete` multiple times."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "This command will delete all cheatsheets from the List on your CheatLogs. No need to worry, `/clear` command will not remove the preloaded cheat sheets."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Here is the expected result if currently you have two cheat sheets stored in the application."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/sq8nkp8/image.png)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/clear`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "___"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"manipulation-command-type\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 4.2. Manipulation Commands:  \u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "After adding cheatsheets, you may realize some of them need editing. Manipulation commands allow you to modify the properties of a specific cheatsheet in the List."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "___"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"edit-command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.2.1. Editing a cheatsheet: `/edit` \u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFormat: `/edit /n CHEATSHEET_NAME /i CHEATSHEET_INDEX` \u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFlag optionality: [`/n`, `/i`] (At least one)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "After `/edit` command is called, the Editor will pop up and then you can edit the cheatsheet in the List with name matching `CHEATSHEET_NAME` or index matching `CHEATSHEET_INDEX` whichever you included (it will try to match the name if you included both). After you are done editing and close the Editor, the expected result is similar to below if a matching cheatsheet is found and the edited description is not blank."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/c8xq2wY/image.png)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "When either the name or index do not match, the Editor does not pop up and CheatLogs will specify the error as shown below."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/rZ6Rhgn/image.png)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "CheatLogs does not allow you to save empty saved descriptions. In this case, the cheatsheet is not saved and maintains its previous details. Below is the error message shown on the CLI."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/5k953cy/image.png)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/edit/n switch /i 2`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/edit /i 3` "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/edit /n commands`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "____"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"favourite-command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.2.2. Favouriting a cheatsheet: `/fav` \u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFormat: `/fav /n CHEATSHEET_NAME /i CHEATSHEET_INDEX` \u003cbr\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFlag optionality: [`/n`, `/i`] (At least one)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "If you have some cheat sheets which are used frequently, you can mark them as favourite so that those cheat sheets will always be displayed on the top of the List. `/fav` marks the cheatsheet with name matching `CHEATSHEET_NAME` or index matching `CHEATSHEET_INDEX` whichever you included or both if you included both.  The expected result is similar to below if a matching cheatsheet is found."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/VW5JZNx/image.png)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "When either the name or index do not match, Cheatlogs will specify the error as shown below."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/vPgbnbW/image.png)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Favourted cheatsheets show up a the top of  `/list` command table, with an [*] beside it\u0027s name as shown below beside `loops`.  This allows you to easily identify your favourite cheatsheets. "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/XWztfyX/image.png)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/fav/n Integer /i 2`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/fav/i 1` "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/fav/n string`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "___"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"viewing-command-type\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## 4.3. Viewing Commands: \u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003e :exclamation: Colour of images in this section may not be exactly the same as what you see in command prompt due to syntax highlighting of the imaging software used."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "These are commands that allow you to quickly look up the List for the cheatsheets you want. It is recommended to use one command after another."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "E.g. Using `/find` to list all matching cheat lists then `/view` with corresponding name to view the cheat sheet."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Some of these commands present their results in a table form and allow you to sort the results through various filters provided. We will call this **Sorting Mode**."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "In Sorting Mode, cheat sheets are originally shown in the order they were found inside the List. You can then sort them in [lexicographical order](https://en.wikipedia.org/wiki/Lexicographic_order#:~:text\u003dIn%20mathematics%2C%20the%20lexicographic%20or,of%20a%20totally%20ordered%20set.) "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "according to any of the cheatsheet properties. For example , sorting by descending name means to enter`3`in this mode and an illustration of expected output is the image below. To exit this mode, enter anything that is not valid."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/F7fHTvs/image.png)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003e :bulb:  Viewing/Deleting cheat sheets using index"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003e * Index of cheat sheets after sorting in `/list` command can be used to delete/view corresponding cheat sheets"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003e * However, index of cheat sheets in `/find` command cannot be used to delete/view cheat sheets. You would have to delete/view them using the name."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "---"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"find-command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.3.1. Locating cheatsheets with pattern : `/find`\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFormat: `/find /s \u003cSUBJECT\u003e /k \u003cKEYWORD\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFlag optionality: [`/s`, `/k`] (At least one)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "`/find` command allows you to search for cheat sheets using `SUBJECT` and/or `KEYWORD`. The matching cheat sheets would be displayed in a table."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "After getting prompted to enter a command, you can search for cheat sheets using:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "1. `/find /s \u003cSUBJECT\u003e` to search for cheat sheets with matching subject. More details on the matching algorithm at the end of section."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "2. `/find /k \u003cKEYWORD\u003e` to search for cheat sheets with contents that contains `KEYWORD`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "3. `/find /s \u003cSUBJECT\u003e /k \u003cKEYWORD\u003e` to search for cheat sheets with matching subject and contains `KEYWORD`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| `/find /s \u003cSUBJECT\u003e` |"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/kSVw5r3/image.png) |"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ` /find /k \u003cKEYWORD\u003e` |"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/TM4J8s1/image.png) |"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| `/find /s \u003cSUBJECT\u003e /k \u003cKEYWORD\u003e` |"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/fGdPMdC/image.png) |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Cheat sheets that meet the criteria of the command you entered would be displayed in a table as shown in the images below."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| `/find /s \u003cSUBJECT\u003e` |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/HB7MNJx/image.png) |"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ` /find /k \u003cKEYWORD\u003e` |"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/z7X4KF2/image.png) |"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| `/find /s \u003cSUBJECT\u003e /k \u003cKEYWORD\u003e` |"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/hym26SW/image.png) |"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "CheatLogs then enters Sorting Mode. In sorting Mode, you can sort according to names or subjects by inputting the corresponding index (1-4)."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| Name ascending |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: | "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/yPRhvH3/image.png) |"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| Subject ascending | "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/z2jHKSB/image.png) |"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| Name descending | "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: | "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/f8D0QXY/image.png) |"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| Subject descending |"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: | "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/ThvTVnG/image.png) |"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "To exit Sorting Mode and simply enter another character (excluding 1-4)."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![image](https://i.ibb.co/0C6wc9J/image.png)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "However, if none of the cheat sheets meet the criteria of your `/find` command, CheatLogs will not enter Sorting Mode as shown in the image below."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![image](https://i.ibb.co/wcqcFxR/image.png)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e :bulb:  Notes on matching algorithm"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e * The search is **case-sensitive** e.g. `help` matches `helpers` but not `Help`. "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e * A match contains the search term as a substring. e.g. `java` matches `java11` and  `Tricks for java`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/find /s loop`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/find /s Integer /k 2`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* `/find /k hello`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " ---"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "theopin"
        },
        "content": " "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"view-command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.3.2. Viewing a specific cheatsheet: `/view`\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFormat: `/view /n CHEATSHEET_NAME /i CHEATSHEET_INDEX` \u003cbr\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFlag optionality: [`/n`, `/i`] (At least one)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Views and prints the details of the cheatsheet that matches with what you entered for `/view` command."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "After getting prompted to enter a command, you can view a specific cheat sheet using:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "1. `/view /n \u003cCHEATSHEET_NAME\u003e` to view the cheat sheet with name, `CHEATSHEET_NAME`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "2. `/view /i \u003cCHEATSHEET_INDEX\u003e` to view the cheat sheet with index, `CHEATSHEET_INDEX`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "3. `/view /n \u003cCHEATSHEET_NAME\u003e /i \u003cCHEATSHEET_INDEX\u003e` to view the cheat sheet with name and index corresponding to `CHEATSHEET_NAME` and `CHEATSHEET_INDEX`. NOTE: If `CHEATSHEET_NAME` and `CHEATSHEET_INDEX` are pointing at two different cheat sheet, no cheat sheet\u0027s content would be displayed."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| `/view /n \u003cCHEATSHEET_NAME\u003e`|"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/ypPympz/image.png) |"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| `/view /i \u003cCHEATSHEET_INDEX\u003e` |"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "|  ![image](https://i.ibb.co/k58qGf6/image.png) |"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| `/view /n \u003cCHEATSHEET_NAME\u003e /i \u003cCHEATSHEET_INDEX\u003e` |"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/h7qS4x8/image.png) |"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "theopin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/view /n Read /i 2`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/view /i 1` "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/view /n documentation`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "---"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"list-command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### 4.3.3. Listing all cheatsheets: `/list`\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFormat: `/list`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Lists all the cheatsheets in the List in a table."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "After getting prompted to enter a command, you can view a specific cheat sheet using:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* `/list` to list all cheat sheets available."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![image](https://i.ibb.co/zF8F4PM/image.png)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "CheatLogs then enters Sorting Mode. In sorting Mode, you can sort according to names or subjects by inputting the corresponding index (1-4)."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| Name ascending |"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: | "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/yPRhvH3/image.png) |"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| Subject ascending | "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: |"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/z2jHKSB/image.png) |"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| Name descending | "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: | "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/f8D0QXY/image.png) |"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| Subject descending |"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| :-------------------------: | "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "| ![image](https://i.ibb.co/ThvTVnG/image.png) |"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "To exit Sorting Mode and simply enter another character (excluding 1-4)."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "![image](https://i.ibb.co/4MNMRW3/image.png)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " *  `/list`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"general-command-type\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "## 4.4. General Commands: (Adhy)  \u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "These are useful general purpose commands that don\u0027t fit into the other categories but are still very useful for you to know."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "---"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"help-command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### 4.4.1. Viewing help: `/help`\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFormat: `/help`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "If you forgot the syntax of a certain command, you can simply type `/help`. It will list all the possible commands that can be executed in the application together with its format and example. Below is what you should expect to see."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "![image](https://i.ibb.co/n7gWdpQ/image.png)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* `/help`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "---"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"settings-command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### 4.4.2. Change program settings: `/set`\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "CheatLogs is highly customizable. By using the `/set` command, you can choose to enable/disable the help messages on each command and change the color scheme of output text can be changed. "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "The settings will be saved automatically and the next time you lauch CheatLogs, it will be exactly the still the same as last time you opened it!"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003ca id\u003d\"settings-color\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "#### 4.4.2.1. Change color scheme\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "\u003eFormat: `/set /c COLORSCHEME`\u003cbr\u003e "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFlag optionality: `/c` (required) "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "CheatLogs provides 3 additional color scheme options numbered from 1 to 3. CheatLogs will change the settings to the one matching `COLORSCHEME`. The image below shows the result of `/set /c` command."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "![image](https://i.ibb.co/0JM5gBd/image.png)"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "If your flag description `COLORSCHEME` does not fall in the range mentioned above, it will change the color scheme to the default setting (option 0)."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003e :exclamation: The colors will likely vary depending on the terminal that you use and differ from the one shown. We suggest simply picking the most readable one."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "  Example:   "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " * `/set /c 2`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "brandontoh"
        },
        "content": " "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "\u003ca id\u003d\"settings-help-message\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "#### 4.4.2.2. Change behavior of help message\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "\u003eFormat: `/set /m [on/off]` \u003cbr\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "\u003eFlag optionality: `/m` (required) "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "CheatLogs provides help messages for each command. Here is an example from `/add` command."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "![image](https://i.ibb.co/6wPMRvF/image.png)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "You can disable these help messages by using the `/set /m off` and later when you want to re-enable them again, you can type `/set /m on`."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "  Example:   "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * `/set /m on`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * `/set /m off`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "---"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"exit-command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### 4.4.3. Exiting the program: `/exit`\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003eFormat: `/exit`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "If you are done using CheatLogs, simple type `/exit` to close the application. CheatLogs hopes you will open it again."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "![image](https://i.ibb.co/J2RWkRx/image.png)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " Example:   "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " * `/exit`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"data-storage\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "# 5. Data storage\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "theopin"
        },
        "content": "CheatLogs provides a robust storage system that works together with certain"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "theopin"
        },
        "content": "commands to store your cheat sheets for future reference. This ensures that you"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "theopin"
        },
        "content": "have a directory of cheat sheet files which are organized and can be utilized"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "theopin"
        },
        "content": "by CheatLogs anytime. Refer to the image below for an example of a cheat sheet"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "theopin"
        },
        "content": "file."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "theopin"
        },
        "content": "![image](https://i.ibb.co/RDjGFYZ/xml-File-Example.png)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"data-file-contents\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "## 5.1. Data file contents\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "theopin"
        },
        "content": "Each cheat sheet file uses an XML file format. This file format organizes the contents"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "theopin"
        },
        "content": "of the file into different sections based on certain attributes of the cheatsheet. The code"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "theopin"
        },
        "content": "snippet below illustrates the structure of the entire cheat sheet file."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "theopin"
        },
        "content": "![image](https://i.ibb.co/mFJ1nDy/xml-Format.png)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "theopin"
        },
        "content": "By following this format, you can manually insert cheatsheet files that are recognized by CheatLogs. The following sections"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "theopin"
        },
        "content": "explore each segment of this format."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e :bulb:  If you are unsure where to place your new files, simply place it in the /data directory. CheatLogs will organize them when you execute a command to add, edit or delete any file."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "theopin"
        },
        "content": "---"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"xml-file-configurations\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### 5.1.1. XML file configurations\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "theopin"
        },
        "content": "This section configures the settings of the XML file. By default, CheatLogs writes this line into"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "theopin"
        },
        "content": "XML files that it creates or modifies."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003eFormat: `\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"no\"?\u003e` "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e :bulb: If you are creating a new XML file, you can choose to omit this line entirely. CheatLogs will still convert such XML files into cheat sheets."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e :exclamation: If you are including this section, you should use the exact settings defined by the format above. Any change to this format can result in CheatLogs not converting such files into cheat sheets."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "theopin"
        },
        "content": "---"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"main\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### 5.1.2. Main\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "theopin"
        },
        "content": "This section acts as the root element of the document. CheatLogs analyses the relevant"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "theopin"
        },
        "content": "sections you place inside `main` and creates a cheat sheet based on the input given by them."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003eFormat: `\u003cmain\u003eCONTENTS\u003c/main\u003e` "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e :bulb:  You can rearrange the order of sections within CONTENTS. CheatLogs does not take the ordering of such sections into account when parsing XML files."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e :exclamation: Any section that is not inserted into CONTENTS will not be included in the cheatsheet."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "theopin"
        },
        "content": "---"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"favourite\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### 5.1.3. Favourite\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "theopin"
        },
        "content": "This section indicates if the cheat sheet should be marked as [favourite](#favourite-command)."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003eFormat: `\u003cfavourite\u003eSTATUS\u003c/favourite\u003e`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e :exclamation: STATUS is not case-sensitive. For example, `YES` and `yes` are considered the same."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e :exclamation: If STATUS contains another word than `YES`, the cheatsheet will not be marked as a favourite. "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "theopin"
        },
        "content": "---"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"subject\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### 5.1.4. Subject\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "theopin"
        },
        "content": "This section includes the subject of the cheatsheet. It allows CheatLogs to organize your cheat"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "theopin"
        },
        "content": "sheet files by assigning cheat sheets of the same subject to the same folder."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003eFormat: `\u003csubject\u003eSUBJECT\u003c/subject\u003e`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "theopin"
        },
        "content": "---"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"contents\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### 5.1.5. Contents\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "theopin"
        },
        "content": "This section includes the contents of the cheatsheet."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003eFormat: `\u003ccontents\u003eCONTENTS\u003c/contents\u003e`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e :bulb:  You can append the contents on a separate line."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"data-file-organization\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "## 5.2. Data organization\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "theopin"
        },
        "content": "All the data files can be found in the */data* directory, which is located in the same directory as"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "theopin"
        },
        "content": "CheatLogs.jar. Within */data*, CheatLogs stores data files in subdirectories whose name matches its"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "theopin"
        },
        "content": "subject name. This gives you a directory of cheat sheets organized by subject, which you can use"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "theopin"
        },
        "content": "to retrieve any external cheat sheet file. "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "theopin"
        },
        "content": "The figure below shows a sample organization of the cheat sheet files in a user\u0027s directory."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "theopin"
        },
        "content": "![image](https://i.ibb.co/jbCTyYG/dataOrg.png)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "theopin"
        },
        "content": "In the example illustrated above, the user currently has cheat sheets which are of"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "theopin"
        },
        "content": "3 different subjects. Even though some cheatsheets have the same name such as"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "theopin"
        },
        "content": "arrays.xml, they are categorized into different folders as they do not share the same"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "theopin"
        },
        "content": "subject name. This allows you to create cheat sheets for common concepts which may differ"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "theopin"
        },
        "content": "based on the subject you are taking."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003ca id\u003d\"preloaded-data-files\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "## 5.3. Preloaded data files\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "theopin"
        },
        "content": "CheatLogs.jar contains some example cheat sheet files. These files will be moved over to the */data("
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "theopin"
        },
        "content": "directory when you run the application for the first time. To differentiate these files from your "
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "theopin"
        },
        "content": "personally created cheatsheets, they are placed under the */preloaded* subdirectory. By viewing and"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "theopin"
        },
        "content": "editing these cheatsheets through CheatLogs, you will understand how to operate this program."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "theopin"
        },
        "content": "The figure below shows a sample organization of the cheat sheet files in a user\u0027s directory with"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "theopin"
        },
        "content": "a few preloaded cheat  included."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "theopin"
        },
        "content": "![image](https://i.ibb.co/7KS8vqn/preloaded-Org.png)"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "theopin"
        },
        "content": "In the example above, you can see that CheatLogs keeps the organization of such preloaded cheat sheets seperate"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "theopin"
        },
        "content": "from the other cheat sheet files. This is to help you to better identify which files are marked as"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "theopin"
        },
        "content": "preloaded."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "theopin"
        },
        "content": "\u003e :exclamation: If you create a new file within any subdirectory of */preloaded*, CheatLogs will assume that these files have been preloaded and will treat them as such."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"faq\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "# 6. FAQ\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "**Q**: How do I transfer my data to another computer? \u003cbr\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "**A**: You can simply drag and drop the `cheatlogs.jar`  and the `/data` directory in that same folder into the other computer."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "**Q**: Why is CheatLogs so strict on formatting!?\u003cbr\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "**A**: CheatLogs is still under development but we plan to provide better ways for you to input ways in the future."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "**Q**: Will future updates break my current cheatsheets?\u003cbr\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "**A**: The current structure of cheatsheets may change in the future, but we plan to provide you ways to convert so that you can enjoy the new features. "
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "\u003ca id\u003d\"command-cheatsheet\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "# 7. Command Cheatsheet\u003cfont size\u003d\"5\"\u003e [:arrow_up_small:](#table-of-contents)\u003c/font\u003e "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "The table below is for quick and easy reference to the CheatLogs commands with examples of use."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "theopin"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "theopin"
        },
        "content": "-------- | ---------- | ------------"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Add | /add /n \u003cCHEATSHEET_NAME\u003e /s \u003cSUBJECT\u003e | /add /n List /s Java"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Delete | /delete /i \u003cCHEATSHEET_INDEX\u003e \u003cbr\u003e /delete /n \u003cCHEATSHEET_NAME\u003e | /delete /n List , /delete /i 1"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "Clear | /clear | /clear"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Edit | /edit /i \u003cCHEATSHEET_INDEX\u003e \u003cbr\u003e /edit /n \u003cCHEATSHEET_NAME\u003e | /edit /i 1 , /edit /n List"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Favourite | /fav /i \u003cCHEATSHEET_INDEX\u003e \u003cbr\u003e /fav /n \u003cCHEATSHEET_NAME\u003e | /fav /i 2 , /fav /n Cheat"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Find | /find /s \u003cSUBJECT\u003e /k \u003cKEYWORD\u003e | /find /s Java , /find /s Java /k cheater"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "View | /view /i \u003cCHEATSHEET_INDEX\u003e \u003cbr\u003e/view /n \u003cCHEATSHEET_NAME\u003e | /fav /i 3 , /fav /n List"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "List | /list | /list"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "Help | /help | /help"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Settings | /set /c \u003cOPTION_NUMBER\u003e \u003cbr\u003e /set /m \u003cOPTION\u003e | /set /c 1 \u003cbr\u003e /set /m on, /set /m off"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "Exit | /exit | /exit"
      }
    ],
    "authorContributionMap": {
      "domaxi": 36,
      "abnermtj": 306,
      "theopin": 143,
      "-": 30,
      "brandontoh": 164,
      "adhy-p": 35
    }
  },
  {
    "path": "docs/team/abnermtj.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "# Tolentino Abner Jr Morales Project Portfolio Page "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "CheatLogs is a free and open-source cheatsheet manager with blazing fast organization, editing and searching via a command-line interface (CLI) and graphical user interface (GUI) . "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "Written in Java and has about 5000 Lines of Code (LoC)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### Enhancements"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* [Reference for code ](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dabnermtj\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dabnermtj\u0026tabRepo\u003dAY2021S1-CS2113T-W11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### Project Management"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### Enhancements"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### Documentation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "#### User Guide"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "#### Developer Guide"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "### Community"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "* Reported bugs and suggestions for other teams taking CS2113T:"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 29
    }
  },
  {
    "path": "docs/team/adhy-p.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "# Hubertus Adhy Pratama Setiawan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "adhy-p": 6
    }
  },
  {
    "path": "docs/team/aldomax.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "# Aldo Maximillian Sugito - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I am a Y2 Computer Engineering student, currently enrolling in NUS."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "* [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003daldo\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003ddomaxi\u0026tabRepo\u003dAY2021S1-CS2113T-W11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "### New features"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "* Added Graphical User Interface for Adding and Editing Cheatsheet"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    * Action tabs to control the editor (Save, Clear All, Cancel)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    * Editing tabs to help with editing (Copy, Paste, Cut)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    * Text Editor to add and amend cheatsheet details"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "* Formatting for cheatsheet printing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "* User confirmation before deleting cheatsheet"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "### Project Management"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "* Administers the team repository"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "* Solve merge conflicts"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": "* Review and comment on PRs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "#### Documentation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "* User Guide"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    * Adding cheatsheets"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "* Developer Guide"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    * ..."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I am the alleged leader of the tem"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I made the team repo, organization"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "I am in charge of the cheatSheet class"
      }
    ],
    "authorContributionMap": {
      "domaxi": 32
    }
  },
  {
    "path": "docs/team/brandontoh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "# Toh Yong Xiang Brandon - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "Y2 NUS CEG Student"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "* [Reposense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dw11-3\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dbrandontoh\u0026tabRepo\u003dAY2021S1-CS2113T-W11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### Code Contributed "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### New Features"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### Project Management"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### Enhancements"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### Documentation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "#### User Guide"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "#### Developer Guide"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "### Community"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 23
    }
  },
  {
    "path": "docs/team/theopin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "# Theodore Pinto - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "theopin": 6
    }
  },
  {
    "path": "src/main/java/cheatlogs/CheatLogs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatlogs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import ui.UserSession;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class CheatLogs {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String FIRST \u003d \"FIRST\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        assert true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String argsCommand \u003d args.length \u003e 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "                ? args[0].toUpperCase()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "                : EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        UserSession session \u003d new UserSession();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (argsCommand.equals(FIRST)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "            session.isFirstRun \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        session.runProgramSequence();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        session.exit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 9,
      "abnermtj": 1,
      "theopin": 15,
      "brandontoh": 2
    }
  },
  {
    "path": "src/main/java/cheatsheet/CheatSheet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class CheatSheet {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private String subject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private boolean isFavourite;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private boolean isModifiable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public CheatSheet(String name, String subject, String details) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.isFavourite \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public boolean getIsFavourite() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return isFavourite;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void setSubject(String subject) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void setDetails(String details) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void setFavourite(boolean isFavourite) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.isFavourite \u003d isFavourite;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String getWrappedDetails() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        String[] parsedDescription \u003d this.getDetails().split(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        StringBuilder wrappedDescription \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        for (String s : parsedDescription) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            wrappedDescription.append(s);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            wrappedDescription.append(\"\\n\\t\\t\\t \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return wrappedDescription.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return \"CheatSheet{\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"Name\u003d\u0027\" + name + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \", Subject \u003d\u0027\" + subject + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \", Details\u003d\u0027\" + details + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "domaxi": 38,
      "abnermtj": 24,
      "theopin": 6
    }
  },
  {
    "path": "src/main/java/cheatsheet/CheatSheetList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "public class CheatSheetList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private ArrayList\u003cCheatSheet\u003e cheatSheets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public CheatSheetList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Gets the number of cheat sheet currently in the CheatSheetList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return size of cheatSheets"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return cheatSheets.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Gets all the cheat sheets in the cheatSheetList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return cheatSheets The current list of cheat sheets"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ArrayList\u003cCheatSheet\u003e getList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return cheatSheets;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Adds a new cheat sheet to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void add(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheets.add(cheatSheet);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Deletes a cheat sheet from the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Prints an error message if name is not found."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param name The name attribute of the desired cheat sheet"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @throws CommandException when index \u003c 0 or index \u003e\u003d cheatSheets.size()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void remove(String name) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (CheatSheet cs : cheatSheets) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            if (cs.getName().equals(name)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            remove(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new CommandException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Deletes a cheat sheet from the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Prints an error message if index is out of bound."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param index The index of the desired cheat sheet"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @throws CommandException when index \u003c 0 or index \u003e\u003d cheatSheets.size()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void remove(int index) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheets.remove(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new CommandException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Removes all cheat sheet in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheets.clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Retrieves a cheat sheet from the list using its index."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param index The index of desired cheat sheet"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return size of cheatSheets"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @throws CommandException when index \u003c 0 or index \u003e\u003d cheatSheets.size()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public CheatSheet get(int index) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet cheatSheet;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheet \u003d cheatSheets.get(index - 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new CommandException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assert cheatSheet !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return cheatSheet;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Retrieves a cheat sheet from the list using its name."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param name The name attribute of desired cheat sheet"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return size of cheatSheets"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @throws CommandException when name cannot be found inside the list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public CheatSheet get(String name) throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (CheatSheet cs : cheatSheets) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            if (cs.getName().equals(name)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet cheatSheet;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            cheatSheet \u003d get(index + 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new CommandException(\"Please enter a valid name\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assert cheatSheet !\u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return cheatSheet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Checks if a cheat sheet exists or not."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param name The name attribute of desired cheat sheet"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @return true if the cheat sheet exists, false otherwise"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public boolean exists(String name) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (CheatSheet cs : cheatSheets) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            if (cs.getName().equals(name)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 10,
      "adhy-p": 129
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import editor.Editor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import exception.EditorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * Command to add user-defined cheat sheet to CheatSheetList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private final Editor editor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private static final String NO_SPECIAL_CHAR \u003d \"^[^`~!@#$%^\u0026*()_+\u003d{}\\\\[\\\\]|\\\\\\\\:;“’\u003c,\u003e.?]*$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static final String invoker \u003d \"/add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Constructor for the AddCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Required argument: NAME."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Optional argument: SUBJECT."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param printer        The printer object to handle user interaction"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param cheatSheetList The current list of cheat sheets"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param editor         The editor object to open the text editor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public AddCommand(Printer printer, CheatSheetList cheatSheetList, Editor editor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        super(printer);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.cheatSheetList \u003d cheatSheetList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.editor \u003d editor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.NAME, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.SUBJECT, null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        alternativeArguments.add(CommandFlag.NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        alternativeArguments.add(CommandFlag.SUBJECT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Adds the cheat sheet to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Name cannot be empty, must be unique, and can only contain alphanumeric characters."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * If the subject is not specified, it will be put under \"Unsorted\"."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String name \u003d flagsToDescriptions.get(CommandFlag.NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (name \u003d\u003d null || name.isEmpty() || name.isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new CommandException(\"Name cannot be blank\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        name \u003d name.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (cheatSheetList.exists(name)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Name already existed, please enter another name\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (!name.matches(NO_SPECIAL_CHAR)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new CommandException(\"Name can only contain alphanumeric characters\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String subject \u003d flagsToDescriptions.get(CommandFlag.SUBJECT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        if (subject !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (!subject.matches(NO_SPECIAL_CHAR)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                throw new CommandException(\"Subject can only contain alphanumeric characters\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            subject \u003d convertToPascalCaseNoSpace(subject);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            subject \u003d \"Unsorted\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        callContentEditor(name,subject);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            String description \u003d editor.getContent();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            CheatSheet cheatSheet \u003d new CheatSheet(name, subject, description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.add(cheatSheet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            printer.printAddNewCheatSheetMessage(cheatSheet, cheatSheetList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        } catch (EditorException | NullPointerException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Opens the GUI-based text editor."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void callContentEditor(String name, String subject) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editor.setEditingContentAttributes(name, subject);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        editor.open();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        editor.waitForClose();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Removes spaces from the SUBJECT field and converts it to PascalCase without spaces between words."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param input The current subject to be converted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private String convertToPascalCaseNoSpace(String input) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            return \"Unsorted\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String[] splitInput \u003d input.split(\"\\\\p{IsWhite_Space}+\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        for (int i \u003d 0; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            splitInput[i] \u003d splitInput[i].substring(0, 1).toUpperCase() + splitInput[i].substring(1).toLowerCase();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return String.join(\"\", splitInput);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 12,
      "abnermtj": 31,
      "brandontoh": 22,
      "adhy-p": 43
    }
  },
  {
    "path": "src/main/java/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import storage.DataFileDestroyer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    protected DataFileDestroyer fileDestroyer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static final String invoker \u003d \"/clear\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ClearCommand(Printer printer, CheatSheetList cheatSheetList, DataFileDestroyer fileDestroyer) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        super(printer);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.cheatSheetList \u003d cheatSheetList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.fileDestroyer \u003d fileDestroyer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printer.printClearConfirmation();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (isClearConfirmed()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            fileDestroyer.executeFunction();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            printer.printClearCheatSheetMessage(cheatSheetList.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            cheatSheetList.clear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private boolean isClearConfirmed() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String userAnswer \u003d new Ui().getUserInput();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        userAnswer \u003d userAnswer.toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return userAnswer.equals(\"yes\") || userAnswer.equals(\"y\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "abnermtj": 12,
      "brandontoh": 17,
      "adhy-p": 4
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import settings.Settings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " * The base class for all Commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    protected Printer printer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    protected CheatSheetList cheatSheetList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    protected ArrayList\u003cCommandFlag\u003e alternativeArguments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    protected LinkedHashMap\u003cCommandFlag, String\u003e flagsToDescriptions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public boolean isExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public Command(Printer printer) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.printer \u003d printer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.alternativeArguments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.flagsToDescriptions \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        isExitCommand \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public LinkedHashMap\u003cCommandFlag, String\u003e getFlagstodescriptionsMap() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return flagsToDescriptions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void setFlagstodescriptionsMap(HashMap\u003cCommandFlag, String\u003e flagstodescriptions) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.flagsToDescriptions.putAll(flagstodescriptions);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public ArrayList\u003cCommandFlag\u003e getAlternativeArguments() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return alternativeArguments;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public boolean hasAlternativeArgument() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        if (alternativeArguments.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        for (CommandFlag arg : alternativeArguments) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            if (flagsToDescriptions.get(arg) !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public abstract void execute() throws CommandException, InterruptedException, IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 46,
      "brandontoh": 16
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import storage.DataFileDestroyer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * Command to delete a cheat sheet from the CheatSheetList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class DeleteCommand extends FinderCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    protected DataFileDestroyer fileDestroyer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static final String invoker \u003d \"/delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Constructor for the DeleteCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Required argument: either NAME or SUBJECT."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param printer        The printer object to handle user interaction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param cheatSheetList The current list of cheat sheets"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param fileDestroyer  The DataFileDestroyer object to remove the cheat sheet from the /data folder"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public DeleteCommand(Printer printer, CheatSheetList cheatSheetList, DataFileDestroyer fileDestroyer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        super(printer, cheatSheetList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.fileDestroyer \u003d fileDestroyer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.NAME, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.INDEX, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        alternativeArguments.add(CommandFlag.NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        alternativeArguments.add(CommandFlag.INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Deletes the cheat sheet from the list and delete the corresponding file from the /data folder."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            CheatSheet cheatSheetToDelete \u003d getCheatSheetFromNameOrIndex();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            printer.printDeleteConfirmation(cheatSheetToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            if (isDeleteConfirmed()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                fileDestroyer.executeFunction(cheatSheetToDelete.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                cheatSheetList.remove(cheatSheetToDelete.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                printer.printDeleteCheatSheetMessage(cheatSheetToDelete, cheatSheetList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a valid name or/and index\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private boolean isDeleteConfirmed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        String userAnswer \u003d new Ui().getUserInput();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        userAnswer \u003d userAnswer.toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return userAnswer.equals(\"yes\") || userAnswer.equals(\"y\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 11,
      "abnermtj": 29,
      "brandontoh": 3,
      "adhy-p": 17
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import editor.Editor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import exception.EditorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class EditCommand extends FinderCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private final Editor editor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static final String invoker \u003d \"/edit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public EditCommand(Printer printer, CheatSheetList cheatSheetList, Editor editor) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        super(printer, cheatSheetList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.editor \u003d editor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.NAME, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.INDEX, null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        alternativeArguments.add(CommandFlag.NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        alternativeArguments.add(CommandFlag.INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public boolean hasAlternativeArgument() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return flagsToDescriptions.get(CommandFlag.NAME) !\u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                || flagsToDescriptions.get(CommandFlag.INDEX) !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            CheatSheet desiredCheatSheet \u003d getCheatSheetFromNameOrIndex();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            callContentEditor(desiredCheatSheet);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            printer.printViewCheatSheetMessage(desiredCheatSheet);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            throw new CommandException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void callContentEditor(CheatSheet desiredCheatSheet) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editor.setEditingContentAttributes(desiredCheatSheet.getName(), desiredCheatSheet.getSubject());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        editor.open();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        editor.setContent(desiredCheatSheet.getDetails());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        editor.waitForClose();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            desiredCheatSheet.setDetails(editor.getContent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        } catch (EditorException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            printer.print(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 27,
      "abnermtj": 22,
      "brandontoh": 2,
      "adhy-p": 3
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static final String invoker \u003d \"/exit\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public ExitCommand(Printer printer) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        super(printer);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        isExitCommand \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 14,
      "brandontoh": 2
    }
  },
  {
    "path": "src/main/java/command/FavouriteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * Command to set a cheat sheet as favourite."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class FavouriteCommand extends FinderCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static final String invoker \u003d \"/fav\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Constructor for the FavouriteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Required argument: either NAME or INDEX"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param printer        The printer object to handle user interaction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param cheatSheetList The current list of cheat sheets"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public FavouriteCommand(Printer printer, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        super(printer, cheatSheetList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.NAME, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.INDEX, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.DELETE, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        alternativeArguments.add(CommandFlag.NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        alternativeArguments.add(CommandFlag.INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Add/remove a cheat sheet to/from favourites."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * getCheatSheetFromNameOrIndex() from FinderCommand will retrieve the desired cheat sheet"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * and the isFavourite attribute will be set to true."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * If the user specified the /d flag, the isFavourite attribute will be set to false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @throws CommandException if the input is not valid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            CheatSheet cheatSheetToFavourite \u003d getCheatSheetFromNameOrIndex();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            boolean isAddFav \u003d (flagsToDescriptions.get(CommandFlag.DELETE) \u003d\u003d null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetToFavourite.setFavourite(isAddFav);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            printer.printFavouritedCheatSheetMessage(cheatSheetToFavourite, isAddFav);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            throw new CommandException(\"Please enter a valid name or an index\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            throw new CommandException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "abnermtj": 28,
      "adhy-p": 26
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.TablePrinter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class FindCommand extends FinderCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private CheatSheetList cheatSheetList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static final String invoker \u003d \"/find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public FindCommand(Printer printer, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        super(printer, cheatSheetList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.cheatSheetList \u003d cheatSheetList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.NAME, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.SUBJECT, null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.SECTIONKEYWORD, null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        alternativeArguments.add(CommandFlag.NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        alternativeArguments.add(CommandFlag.SUBJECT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        alternativeArguments.add(CommandFlag.SECTIONKEYWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        ArrayList\u003cCheatSheet\u003e matchedContents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String name \u003d flagsToDescriptions.get(CommandFlag.NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String subject \u003d flagsToDescriptions.get(CommandFlag.SUBJECT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String keyword \u003d flagsToDescriptions.get(CommandFlag.SECTIONKEYWORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (CheatSheet cs : cheatSheetList.getList()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (checkCheatSheetExistsInCheatSheetList(cs, name, subject, keyword)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                matchedContents.add(cs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (matchedContents.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"No matching content found\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        TablePrinter tp \u003d new TablePrinter(printer, matchedContents);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        tp.execute();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        SortFilter sortFilter \u003d new SortFilter(matchedContents, printer);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        sortFilter.execute();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 19,
      "brandontoh": 26,
      "adhy-p": 9
    }
  },
  {
    "path": "src/main/java/command/FinderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public abstract class FinderCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    protected CheatSheetList cheatSheetList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public FinderCommand(Printer printer, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        super(printer);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.cheatSheetList \u003d cheatSheetList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    protected CheatSheet getCheatSheetFromNameOrIndex() throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        CheatSheet desiredCheatSheet \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String name \u003d flagsToDescriptions.get(CommandFlag.NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String index \u003d flagsToDescriptions.get(CommandFlag.INDEX);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (name !\u003d null \u0026\u0026 index \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            desiredCheatSheet \u003d cheatSheetList.get(name.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (index !\u003d null \u0026\u0026 name \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            desiredCheatSheet \u003d cheatSheetList.get(Integer.parseInt(index));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (index !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (cheatSheetList.get(name).equals(cheatSheetList.get(Integer.parseInt(index)))) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                desiredCheatSheet \u003d cheatSheetList.get(name.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        if (desiredCheatSheet \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (name !\u003d null \u0026\u0026 index \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                throw new CommandException(\"Please enter a valid name\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else if (name \u003d\u003d null \u0026\u0026 index !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                throw new CommandException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else if (name !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                throw new CommandException(\"No cheat sheet matches the name and index entered\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return desiredCheatSheet;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public boolean checkCheatSheetExistsInCheatSheetList(CheatSheet cs, String name, String subject,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                                                            String keyword) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (subject !\u003d null \u0026\u0026 keyword \u003d\u003d null \u0026\u0026 name \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return cs.getSubject().contains(subject);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (subject \u003d\u003d null \u0026\u0026 keyword !\u003d null \u0026\u0026 name \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return cs.getDetails().contains(keyword);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (subject !\u003d null \u0026\u0026 keyword !\u003d null \u0026\u0026 name \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return cs.getSubject().contains(subject) \u0026\u0026 cs.getDetails().contains(keyword);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (subject \u003d\u003d null \u0026\u0026 keyword \u003d\u003d null \u0026\u0026 name !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return cs.getName().contains(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (subject !\u003d null \u0026\u0026 keyword \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return cs.getSubject().contains(subject) \u0026\u0026 cs.getName().contains(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (subject \u003d\u003d null \u0026\u0026 keyword !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return cs.getDetails().contains(keyword) \u0026\u0026 cs.getName().contains(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (subject !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return cs.getSubject().contains(subject) \u0026\u0026 cs.getDetails().contains(keyword)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                \u0026\u0026 cs.getName().contains(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter at least an argument\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "abnermtj": 23,
      "brandontoh": 38,
      "adhy-p": 4
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * Command to display the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static final String invoker \u003d \"/help\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Constructor for the HelpCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param printer The printer object to handle user interaction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public HelpCommand(Printer printer) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        super(printer);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Prints the help page."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        printer.printHelpSheet();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 16,
      "adhy-p": 11
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import sort.SortByName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.TablePrinter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static final String invoker \u003d \"/list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private CheatSheetList cheatSheetList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ListCommand(Printer printer, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        super(printer);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.cheatSheetList \u003d cheatSheetList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public boolean hasAlternativeArgument() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheetList.getList().sort(new SortByName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (cheatSheetList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new CommandException(\"You don\u0027t have any cheat sheet. Use the /add command to create a new one\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        TablePrinter tp \u003d new TablePrinter(printer, cheatSheetList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        tp.execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        SortFilter sortFilter \u003d new SortFilter(cheatSheetList.getList(), printer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        sortFilter.execute();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 11,
      "brandontoh": 17,
      "adhy-p": 11
    }
  },
  {
    "path": "src/main/java/command/SettingsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import settings.Settings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * Command to change the behavior of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * Currently only supports changing default color scheme and behavior of welcome message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "public class SettingsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private Settings settings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public static final String invoker \u003d \"/set\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Constructor for the SettingsCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Required argument: either COLORSCHEME or HELPMESSAGE."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @param printer The printer object to handle user interaction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public SettingsCommand(Printer printer, Settings settings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        super(printer);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.settings \u003d settings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.COLORSCHEME, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.HELPMESSAGE, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        alternativeArguments.add(CommandFlag.COLORSCHEME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        alternativeArguments.add(CommandFlag.HELPMESSAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Changes the color scheme by calling setColor method."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * @throws CommandException if the input cannot be parsed as integer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (flagsToDescriptions.get(CommandFlag.COLORSCHEME) !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                int option \u003d Integer.parseInt(flagsToDescriptions.get(CommandFlag.COLORSCHEME));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                settings.setColor(option, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                throw new CommandException(\"Please enter a valid option\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (flagsToDescriptions.get(CommandFlag.HELPMESSAGE) !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            String option \u003d flagsToDescriptions.get(CommandFlag.HELPMESSAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (option.toLowerCase().equals(\"off\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                settings.setDisplayingHelpMessages(false, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else if (option.toLowerCase().equals(\"on\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                settings.setDisplayingHelpMessages(true, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                throw new CommandException(\"Please enter a valid option (\\\"on\\\" or \\\"off\\\")\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 17,
      "adhy-p": 41
    }
  },
  {
    "path": "src/main/java/command/SortFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import sort.SortBySubject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import sort.SortBySubjectRev;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import sort.SortByName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import sort.SortByNameRev;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.ConsoleColorsEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.TablePrinter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class SortFilter {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    final String promptSortConfig \u003d ConsoleColorsEnum.RED_TEXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        + \"Sort filter (1: name ascending, 2: subject ascending, 3: name descending\" + \", 4: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        + \"subject descending, ANY OTHER CHAR: EXIT)\" + ConsoleColorsEnum.RESET_TEXT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    Printer printer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    ArrayList\u003cCheatSheet\u003e cheatSheetArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public SortFilter(ArrayList\u003cCheatSheet\u003e cheatSheetArrayList, Printer printer) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.cheatSheetArrayList \u003d cheatSheetArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.printer \u003d printer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute(TablePrinter tp) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            askForInput();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            tp.execute();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } while (true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            askForInput();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            TablePrinter tp \u003d new TablePrinter(printer, cheatSheetArrayList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            tp.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } while (true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void askForInput() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printer.print(promptSortConfig);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            cheatSheetArrayList.sort(new SortByName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printer.print(\"Sorted name in ascending order\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            cheatSheetArrayList.sort(new SortBySubject());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            printer.print(\"Sorted subject in ascending order\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            cheatSheetArrayList.sort(new SortByNameRev());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printer.print(\"Sorted name in descending order\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        case \"4\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            cheatSheetArrayList.sort(new SortBySubjectRev());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            printer.print(\"Sorted subject in descending order\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            throw new CommandException(\"Exited list command\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 62,
      "adhy-p": 6
    }
  },
  {
    "path": "src/main/java/command/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class ViewCommand extends FinderCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public static final String invoker \u003d \"/view\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ViewCommand(Printer printer, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        super(printer, cheatSheetList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.NAME, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        flagsToDescriptions.put(CommandFlag.INDEX, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        alternativeArguments.add(CommandFlag.NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        alternativeArguments.add(CommandFlag.INDEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            CheatSheet desiredCheatSheet \u003d getCheatSheetFromNameOrIndex();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            printer.printViewCheatSheetMessage(desiredCheatSheet);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a valid name or/and index\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 22,
      "brandontoh": 5,
      "adhy-p": 3
    }
  },
  {
    "path": "src/main/java/editor/Editor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package editor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import exception.EditorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.swing.JButton;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.swing.JMenu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import javax.swing.JTextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.swing.JFrame;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import javax.swing.JMenuBar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.swing.JPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import javax.swing.JMenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.swing.BorderFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.swing.border.Border;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.swing.BoxLayout;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.swing.JLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.swing.ImageIcon;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import javax.swing.JScrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import java.awt.event.ActionEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import java.awt.event.ActionListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import java.awt.BorderLayout;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import java.awt.Component;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class Editor extends JFrame implements ActionListener {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private JTextArea textArea;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private JLabel footerLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private String cheatSheetName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private String cheatSheetSubject;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public Editor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        generateEditorUI();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * Initializes the editor with the necessary elements."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void generateEditorUI() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        textArea \u003d new JTextArea();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        setEditorLayout();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        generateTextArea();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        generateRightPane();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        generateEditorFooter();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        generateEditorHeader();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void generateRightPane() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JPanel rightPanel \u003d new JPanel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.setBounds(700,50,100,800);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JLabel editingLabel \u003d new JLabel(\"  Edit \\n\",JLabel.CENTER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editingLabel.setHorizontalAlignment(JLabel.CENTER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JButton copyButton \u003d new JButton(\"Copy\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JButton cutButton \u003d new JButton(\"Cut\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JButton pasteButton \u003d new JButton(\"Paste\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        copyButton.addActionListener(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cutButton.addActionListener(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        pasteButton.addActionListener(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.add(editingLabel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.add(copyButton);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.add(cutButton);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.add(pasteButton);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JLabel actionsLabel \u003d new JLabel(\"  Actions \\n\",JLabel.CENTER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        actionsLabel.setBounds(700,800,100,50);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        actionsLabel.setHorizontalAlignment(JLabel.CENTER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JButton clearButton \u003d new JButton(\"Clear All\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JButton saveButton \u003d new JButton(\"Save\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JButton cancelButton \u003d new JButton(\"Cancel\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        clearButton.setForeground(Color.blue);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        saveButton.setForeground(Color.green);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cancelButton.setForeground(Color.red);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        clearButton.addActionListener(this);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        saveButton.addActionListener(this);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cancelButton.addActionListener(this);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.add(actionsLabel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.add(clearButton);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.add(saveButton);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.add(cancelButton);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        rightPanel.setBackground(Color.LIGHT_GRAY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        addBlackBorder(rightPanel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        add(rightPanel,BorderLayout.EAST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * adds black line border to the selected panel."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * @param panel any panel to be added with a black border."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void addBlackBorder(JPanel panel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        final Border blackBorder \u003d BorderFactory.createLineBorder(Color.BLACK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        panel.setBorder(blackBorder);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * generates the icon on top of the editor."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void generateEditorHeader() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JPanel topPanel \u003d new JPanel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        topPanel.setLayout(new BoxLayout(topPanel,BoxLayout.Y_AXIS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        topPanel.setBounds(0,0,800,0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        topPanel.setSize(800,200);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        topPanel.setBackground(Color.white);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        BufferedImage logoPicture \u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            logoPicture \u003d ImageIO.read(new URL(\"https://i.ibb.co/QCjG7v7/cheatlogs-copy.png\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            JLabel pictureIcon \u003d new JLabel(new ImageIcon(logoPicture));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            pictureIcon.setAlignmentX(Component.CENTER_ALIGNMENT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            pictureIcon.setBounds(0,0,800,0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            topPanel.add(pictureIcon);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        addBlackBorder(topPanel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        add(topPanel,BorderLayout.PAGE_START);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void setEditorLayout() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        setSize(800,600); // sets the editor window size"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        setTitle(\"CheatLogs Editor\"); // sets the editor name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        setLayout(new BorderLayout()); // determines the layout of the editor"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * Generates the editor\u0027s text are where the user can input the details of the cheatsheet."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void generateTextArea() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JPanel textAreaPanel \u003d new JPanel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        textAreaPanel.setLayout(new BorderLayout());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        textArea \u003d new JTextArea();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        textArea.setSelectionColor(Color.GRAY); // sets the color of the text Area"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        textArea.setSize(800,600); // sets the size of the text Area"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JScrollPane textAreaScroll \u003d new JScrollPane(textArea);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        textAreaScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        textAreaScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        textAreaScroll.setViewportView(textArea);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        textAreaPanel.add(textAreaScroll, BorderLayout.CENTER);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        add(textAreaPanel, BorderLayout.CENTER); // adds the text area into the center of the frame"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * Generates the editor footer to tell the cheatsheet name and subject that is being edited."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void generateEditorFooter() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        JPanel editorFooter \u003d new JPanel();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editorFooter.setBounds(0,500,800,50);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        footerLabel \u003d new JLabel();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        footerLabel.setText(\" \");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        footerLabel.setForeground(Color.white);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editorFooter.add(footerLabel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editorFooter.setBackground(Color.darkGray);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        add(editorFooter,BorderLayout.PAGE_END);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private String generateEditingInformation() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return \"You are editing the \" + cheatSheetName + \" cheatsheet [Subject: \" + cheatSheetSubject + \"]\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void showSaveWarning() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        footerLabel.setText(\"You are trying to save a blank file\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        footerLabel.setForeground(Color.red);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void showCheatsheetInfo() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        footerLabel.setText(generateEditingInformation());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        footerLabel.setForeground(Color.white);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * generates the editing bar for editing commands of the UI."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * @param menuBar takes in the menuBar and appends an editingMenu object into the menuBar."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void generateEditingBar(JMenuBar menuBar) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        final JMenu editingMenu \u003d new JMenu(\"Edit\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        final JMenuItem editItem1 \u003d new JMenuItem(\"Copy\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        final JMenuItem editItem2 \u003d new JMenuItem(\"Cut\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        final JMenuItem editItem3 \u003d new JMenuItem(\"Paste\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editItem1.addActionListener(this);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editItem2.addActionListener(this);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editItem3.addActionListener(this);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editingMenu.add(editItem1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editingMenu.add(editItem2);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        editingMenu.add(editItem3);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        menuBar.add(editingMenu);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * generates the actions command options for the UI."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * @param menuBar takes in the menuBar and appends it with the actionsMenu object."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private void generateActionsBar(JMenuBar menuBar) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        final JMenu actionsMenu \u003d new JMenu(\"Actions\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        final JMenuItem menuItem1 \u003d new JMenuItem(\"Save\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        final JMenuItem menuItem2 \u003d new JMenuItem(\"Clear All\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        final JMenuItem menuItem3 \u003d new JMenuItem(\"Cancel\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        menuItem1.addActionListener(this);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        menuItem2.addActionListener(this);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        menuItem3.addActionListener(this);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        actionsMenu.add(menuItem1);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        actionsMenu.add(menuItem2);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        actionsMenu.add(menuItem3);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        menuBar.add(actionsMenu);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private boolean checkIsEditorEmpty() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return textArea.getText().isBlank();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void actionPerformed(ActionEvent a) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        String action \u003d a.getActionCommand();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        case \"Save\":"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            if (checkIsEditorEmpty()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                open();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                showSaveWarning();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                close();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        case \"Clear All\":"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            textArea.setText(\"\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        case \"Cancel\":"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            close();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        case \"Copy\":"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            textArea.copy();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        case \"Cut\":"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            textArea.cut();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        case \"Paste\":"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            textArea.paste();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void setContent(String content) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        textArea.setText(content);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String getContent() throws EditorException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        if (textArea.getText().equals(\"\")) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            throw new EditorException();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            return textArea.getText();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * Sets the cheatsheet attributes for the editor footer."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * @param name takes in the name to be placed in the footer"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * @param subject takes in the cheatsheet subject to be placed in the footer."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void setEditingContentAttributes(String name, String subject) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cheatSheetName \u003d name;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        cheatSheetSubject \u003d subject;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void open() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        textArea.setText(\"\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        showCheatsheetInfo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        setVisible(true);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        setAlwaysOnTop(true);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     * Waits for the editor to close to terminate the program and return the controls to the editor."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "domaxi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void waitForClose() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        while (isVisible()) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                TimeUnit.MICROSECONDS.sleep(1000);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        setVisible(false);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 283,
      "abnermtj": 33
    }
  },
  {
    "path": "src/main/java/exception/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 7
    }
  },
  {
    "path": "src/main/java/exception/DirectoryIsEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DirectoryIsEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String folderName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public DirectoryIsEmptyException(String folderName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "        this.folderName \u003d folderName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return folderName + \" is empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 16
    }
  },
  {
    "path": "src/main/java/exception/EditorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class EditorException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return \"The text editor is blank please add a valid cheatsheet description\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 9
    }
  },
  {
    "path": "src/main/java/parser/CommandFlag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public enum CommandFlag {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    NAME(\"/n\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    DELETE(\"/d\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    INDEX(\"/i\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    SUBJECT(\"/s\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    SECTIONKEYWORD(\"/k\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    COLORSCHEME(\"/c\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    HELPMESSAGE(\"/m\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    CommandFlag(String flag) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return this.flag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 16,
      "brandontoh": 2,
      "adhy-p": 2
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import command.FavouriteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import command.SettingsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.ViewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import editor.Editor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import settings.Settings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import storage.DataFileDestroyer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private CheatSheetList cheatSheetList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private DataFileDestroyer fileDestroyer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private Editor editor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private Printer printer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private Settings settings;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private static final String FLAG_REGEX \u003d \"(?\u003d(/[a-z]))\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public Parser(Printer printer, Settings settings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.printer \u003d printer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.settings \u003d settings;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public Parser(CheatSheetList cheatSheetList, Editor editor,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                  DataFileDestroyer fileDestroyer, Printer printer, Ui ui, Settings settings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.cheatSheetList \u003d cheatSheetList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.editor \u003d editor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.fileDestroyer \u003d fileDestroyer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.printer \u003d printer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.settings \u003d settings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public Command parse(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        Command commandToBeExecuted \u003d parseCommandType(userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        LinkedHashMap\u003cCommandFlag, String\u003e flagsToDescriptions \u003d parseFlagDescriptions(commandToBeExecuted, userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        commandToBeExecuted.setFlagstodescriptionsMap(flagsToDescriptions);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        setMissingDescriptions(commandToBeExecuted);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return commandToBeExecuted;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private Command parseCommandType(String userInput) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String parsedInput \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        switch (parsedInput) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case AddCommand.invoker:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return new AddCommand(printer, cheatSheetList, editor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case ClearCommand.invoker:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return new ClearCommand(printer, cheatSheetList, fileDestroyer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case DeleteCommand.invoker:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return new DeleteCommand(printer, cheatSheetList, fileDestroyer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case EditCommand.invoker:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return new EditCommand(printer, cheatSheetList, editor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case ExitCommand.invoker:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            return new ExitCommand(printer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        case FavouriteCommand.invoker:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return new FavouriteCommand(printer, cheatSheetList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case FindCommand.invoker:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return new FindCommand(printer, cheatSheetList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case HelpCommand.invoker:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            return new HelpCommand(printer);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case ListCommand.invoker:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return new ListCommand(printer, cheatSheetList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        case SettingsCommand.invoker:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return new SettingsCommand(printer, settings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        case ViewCommand.invoker:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return new ViewCommand(printer, cheatSheetList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            throw new CommandException(\"Please enter a valid command\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private LinkedHashMap\u003cCommandFlag, String\u003e parseFlagDescriptions(Command command, String userInput)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        LinkedHashMap\u003cCommandFlag, String\u003e flagsToDescriptions \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            String[] details \u003d userInput.split(FLAG_REGEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            // For each flag /\u003cflag\u003e {description}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            for (int i \u003d 1; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                int descriptionStartIdx \u003d getDescriptionStartIdx(details[i]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                // Get the \u003cflag\u003e and {description}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                String flag;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                String flagDescription;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                if (descriptionStartIdx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    flag \u003d details[i];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    flagDescription \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    flag \u003d details[i].substring(0, descriptionStartIdx);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    flagDescription \u003d details[i].substring(descriptionStartIdx).trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                // Validate that \u003cflag\u003e matches required Command flags"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                boolean isValidFlag \u003d false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                for (CommandFlag c : command.getFlagstodescriptionsMap().keySet()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    if (c.getFlag().equals(flag)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                        flagsToDescriptions.put(c, flagDescription.trim());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                        isValidFlag \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                if (!isValidFlag) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    throw new CommandException(\"Please input the correct flags\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            throw new CommandException(\"Flag indexing error\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return flagsToDescriptions;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void setMissingDescriptions(Command commandToBeExecuted) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        LinkedHashMap\u003cCommandFlag, String\u003e map \u003d commandToBeExecuted.getFlagstodescriptionsMap();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (!commandToBeExecuted.hasAlternativeArgument() \u0026\u0026 settings.getDisplayingHelpMessages()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printer.printCommandHelpMessage(commandToBeExecuted.getClass());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (settings.getDisplayingHelpMessages()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                \u0026\u0026 (commandToBeExecuted.getClass().equals(ListCommand.class)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                || (commandToBeExecuted.getClass().equals(ClearCommand.class)))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printer.printCommandHelpMessage(commandToBeExecuted.getClass());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        while (!commandToBeExecuted.hasAlternativeArgument()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            printer.printAlternativeArgumentPrompt(commandToBeExecuted);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            for (CommandFlag key : map.keySet()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                /* If the key is an alternative argument of the command"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                  but the command already has another alternative argument filled"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                   skip this key*/"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                if (commandToBeExecuted.getAlternativeArguments().contains(key)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    \u0026\u0026 commandToBeExecuted.hasAlternativeArgument()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                } else if ((map.get(key) \u003d\u003d null || map.get(key).isBlank()) \u0026\u0026 key !\u003d CommandFlag.DELETE) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    printer.printMissingArgument(key);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    String newArgVal \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    if (newArgVal.isBlank()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                        newArgVal \u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    map.replace(key, newArgVal);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private int getDescriptionStartIdx(String input) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        for (int i \u003d 0; i \u003c input.length(); i++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            if (Character.isWhitespace(input.charAt(i))) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 111,
      "brandontoh": 42,
      "adhy-p": 20
    }
  },
  {
    "path": "src/main/java/settings/Settings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class Settings {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private boolean isDisplayingHelpMessages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private int colorOption;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private Printer printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public Settings(Printer printer) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.printer \u003d printer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        colorOption \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        isDisplayingHelpMessages \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void setDisplayingHelpMessages(boolean isDisplayingHelpMessages, boolean isInit) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        this.isDisplayingHelpMessages \u003d isDisplayingHelpMessages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (!isInit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            printer.printSetDisplayingHelpMessages(isDisplayingHelpMessages);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public int getColorOption() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        return colorOption;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public boolean getDisplayingHelpMessages() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return this.isDisplayingHelpMessages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void setColor(int option, boolean isInit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (option \u003e\u003d 0 \u0026\u0026 option \u003c\u003d 3) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            colorOption \u003d option;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            colorOption \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (!isInit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            printer.setColor(option);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 15,
      "adhy-p": 27
    }
  },
  {
    "path": "src/main/java/sort/SortByName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class SortByName implements Comparator\u003cCheatSheet\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public int compare(CheatSheet a, CheatSheet b) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        Boolean isAFavourited \u003d a.getIsFavourite();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        Boolean isBFavourited \u003d b.getIsFavourite();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int favComparator \u003d isBFavourited.compareTo(isAFavourited);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (favComparator !\u003d 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return favComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return a.getName().compareTo(b.getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 1,
      "brandontoh": 10,
      "adhy-p": 6
    }
  },
  {
    "path": "src/main/java/sort/SortByNameRev.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "package sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "public class SortByNameRev implements Comparator\u003cCheatSheet\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public int compare(CheatSheet a, CheatSheet b) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        Boolean isAFavourited \u003d a.getIsFavourite();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        Boolean isBFavourited \u003d b.getIsFavourite();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int favComparator \u003d isBFavourited.compareTo(isAFavourited);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (favComparator !\u003d 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return favComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return b.getName().compareTo(a.getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 1,
      "adhy-p": 16
    }
  },
  {
    "path": "src/main/java/sort/SortBySubject.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "public class SortBySubject implements Comparator\u003cCheatSheet\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public int compare(CheatSheet a, CheatSheet b) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        Boolean isAFavourited \u003d a.getIsFavourite();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        Boolean isBFavourited \u003d b.getIsFavourite();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int favComparator \u003d isBFavourited.compareTo(isAFavourited);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (favComparator !\u003d 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return favComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return a.getSubject().compareTo(b.getSubject());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 1,
      "brandontoh": 9,
      "adhy-p": 7
    }
  },
  {
    "path": "src/main/java/sort/SortBySubjectRev.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "package sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "public class SortBySubjectRev implements Comparator\u003cCheatSheet\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public int compare(CheatSheet a, CheatSheet b) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        Boolean isAFavourited \u003d a.getIsFavourite();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        Boolean isBFavourited \u003d b.getIsFavourite();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int favComparator \u003d isBFavourited.compareTo(isAFavourited);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (favComparator !\u003d 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            return favComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return b.getSubject().compareTo(a.getSubject());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 1,
      "adhy-p": 16
    }
  },
  {
    "path": "src/main/java/storage/DataFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.parsers.DocumentBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.parsers.DocumentBuilderFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.parsers.ParserConfigurationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": " * A general class that stores certain constants regarding the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": " * file location of the /data directory, as well as methods that can be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": " * utilised by its sub-classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "public abstract class DataFile {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String YES \u003d \"Yes\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String NO \u003d \"No\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String USER_DIR \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String JAR_DIR \u003d \"CheatLogs.jar\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String DATA \u003d \"data\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String PRELOADED \u003d \"preloaded\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String XML_EXTENSION \u003d \".xml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String MAIN_ELEMENT \u003d \"main\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String FAVOURITE_ELEMENT \u003d \"favourite\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String SUBJECT_ELEMENT \u003d \"subject\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final String CONTENTS_ELEMENT \u003d \"contents\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final Path PRELOADED_DIR \u003d Paths.get(USER_DIR, DATA, PRELOADED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static final Path DATA_DIR \u003d Paths.get(USER_DIR, DATA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    protected static final String SETTINGS_FILENAME \u003d \"/settings.txt\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected Printer printer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected static ArrayList\u003cPath\u003e preloadedCheatSheets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * A method that is to be run based on its subclass."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public abstract void executeFunction();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Creates a new directory and file at the specified location"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * if it currently does not exist."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected void createNewDirectory() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!Files.exists(DATA_DIR)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "                Files.createDirectories(DATA_DIR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                printer.print(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Creates a new document builder to be used for the particular instance of"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * reading or writing a file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @return                                A new document builder."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws ParserConfigurationException   Throws when a serious"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                        configuration error has been caught."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected DocumentBuilder getDocumentBuilder() throws ParserConfigurationException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return DocumentBuilderFactory"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .newInstance()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .newDocumentBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Checks if the /data and /subjectName directories exist and creates them if they"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * are currently non-existent."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param subjectDirectory          The directory to store a non-preloaded cheatSheet."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param preloadedSubjectDirectory The directory to store a preloaded cheatSheet"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param isPreloadedFile           Boolean indicating if the file is preloaded or not."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws IOException              Thrown if errors occur when attempting to create the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                  respective directories."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected void verifyDirectoryExistence(Path subjectDirectory,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                          Path preloadedSubjectDirectory,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                          boolean isPreloadedFile) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!Files.exists(DATA_DIR)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createDirectory(DATA_DIR);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isPreloadedFile) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (!Files.exists(PRELOADED_DIR)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "                Files.createDirectory(PRELOADED_DIR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (!Files.exists(preloadedSubjectDirectory)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "                Files.createDirectory(preloadedSubjectDirectory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (subjectDirectory !\u003d null \u0026\u0026 !Files.exists(subjectDirectory)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createDirectory(subjectDirectory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Deletes the input directory if it is found to be empty."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param queriedDirFile Directory file that the method is looking at."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": "    protected void removeDirectoryIfEmpty(File queriedDirFile) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!queriedDirFile.isDirectory()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File[] queriedDirSubFiles \u003d queriedDirFile.listFiles();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assert queriedDirSubFiles !\u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (queriedDirSubFiles.length \u003d\u003d 0 \u0026\u0026 queriedDirFile !\u003d DATA_DIR.toFile()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": "            queriedDirFile.delete();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": "            for (File queriedDirSubFile : queriedDirSubFiles) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": "                if (queriedDirFile.isDirectory()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    removeDirectoryIfEmpty(queriedDirSubFile);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 3,
      "theopin": 129,
      "adhy-p": 2
    }
  },
  {
    "path": "src/main/java/storage/DataFileDestroyer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import exception.DirectoryIsEmptyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": " * Allows the user to delete stored files as well as empty directories"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": " * when required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileDestroyer extends DataFile {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final CheatSheetList cheatSheetList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final Logger destroyLogger \u003d Logger.getLogger(\"FileDestroyer\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public DataFileDestroyer(Printer printer, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.printer \u003d printer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.cheatSheetList \u003d cheatSheetList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Constructor that executes the operation to delete all cheatsheet files."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "            clearDataDirectory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (DirectoryIsEmptyException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "            destroyLogger.log(Level.WARNING, \"Empty Directory Present\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(\"The following directory is empty: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "            removeDirectoryIfEmpty(DATA_DIR.toFile());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Constructor that executes the operation to delete a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * specific cheatsheet file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param unwantedFile Name of the cheatsheet to be deleted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction(String unwantedFile) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "            deleteFile(unwantedFile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "            destroyLogger.log(Level.WARNING, \"IO File Error\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(\"CheatLogs could not clear a particular file! Is this file deleted?\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + \"Here is the location of the file that had issues: \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (CommandException s) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "            destroyLogger.log(Level.WARNING, \"Nonexistent File Error\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(\"This file does not exist:\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + unwantedFile"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + s.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "            removeDirectoryIfEmpty(DATA_DIR.toFile());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Deletes a specified cheatsheet file from the /data directory."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param unwantedFile      Name of the cheatsheet to be deleted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws IOException      Thrown if the path of the unwanted file specified"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                          is not existent."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws CommandException Thrown if unwanted file name is not existent."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void deleteFile(String unwantedFile) throws IOException, CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String subjectDirectory \u003d cheatSheetList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .get(unwantedFile)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .getSubject();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Path unwantedFilePath \u003d Paths.get(USER_DIR,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "                DATA,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "                subjectDirectory,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "                unwantedFile + XML_EXTENSION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Files.delete(unwantedFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Deletes all cheatsheet files from the /data directory in a recursive manner."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws DirectoryIsEmptyException Thrown if the /data directory is missing or empty."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void clearDataDirectory() throws DirectoryIsEmptyException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "        clearDirectory(DATA_DIR);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Deletes all cheatsheet files from the given directory."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws DirectoryIsEmptyException Thrown if the /data directory is missing or empty."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void clearDirectory(Path directoryPath) throws DirectoryIsEmptyException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] dataDirectoryFiles \u003d directoryPath.toFile().list();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (dataDirectoryFiles \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throw new DirectoryIsEmptyException(directoryPath.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "        for (String dataDirectoryFile : dataDirectoryFiles) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Path filePath \u003d Paths.get(directoryPath.toString(), dataDirectoryFile);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (Files.isDirectory(filePath)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "                if (!filePath.toFile().getName().equals(PRELOADED)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    clearDirectory(filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": "                deleteFile(dataDirectoryFile.replace(XML_EXTENSION, EMPTY));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": "                destroyLogger.log(Level.WARNING, \"IO Directory Error\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": "                printer.print(\"CheatLogs could not clear a particular file!\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": "                        + \"Here is the location of the file that had issues: \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": "                        + e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } catch (CommandException s) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "                destroyLogger.log(Level.WARNING, \"Nonexistent File Error\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theopin"
        },
        "content": "                printer.print(\"This file does not exist: \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theopin"
        },
        "content": "                        + dataDirectoryFile"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theopin"
        },
        "content": "                        .replace(XML_EXTENSION, EMPTY)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theopin"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theopin"
        },
        "content": "                        + s.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        directoryPath.toFile().delete();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 2,
      "theopin": 135,
      "adhy-p": 6
    }
  },
  {
    "path": "src/main/java/storage/DataFileReader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import exception.DirectoryIsEmptyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.w3c.dom.Document;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.w3c.dom.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.w3c.dom.NodeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.xml.sax.SAXException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import settings.Settings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.parsers.DocumentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.parsers.ParserConfigurationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.Enumeration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.jar.JarEntry;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.jar.JarFile;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * Allows the user to read data from the data directory."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * The data are used to update the system settings"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * and insert the cheatsheets present in the folder to the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileReader extends DataFile {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final CheatSheetList cheatSheetList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final Logger readLogger \u003d Logger.getLogger(\"FileReader\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final Settings settings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public DataFileReader(Settings settings, Printer printer, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.settings \u003d settings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.printer \u003d printer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.cheatSheetList \u003d cheatSheetList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Loads the file contents from the data folder. If the file is a settings file,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * this method will parse and apply the saved settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Otherwise, it converts the file contents into cheatsheets that can be added into"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * the list of cheatsheets. Handles exceptions arising from issues when"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * loading files or relevant directories."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            loadCheatSheetsAndSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "            readLogger.log(Level.WARNING, \"Missing Data Directory\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(\"The following file is not found: \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createNewDirectory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (DirectoryIsEmptyException d) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "            readLogger.log(Level.INFO, \"Empty Directory Present\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(\"The following directory is empty!\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + d.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException f) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "            readLogger.log(Level.WARNING, \"IO File Error\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(\"The following file could not be read: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + f.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Attempts to transfer preloaded cheatsheets from CheatLogs.jar."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Handles exceptions arising from issues when"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * transferring these preloaded cheatsheets into the /data directory."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void extractPreloadedCheatSheets() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "            extractXmlFilesFromJar();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "            readLogger.log(Level.WARNING, \"IO File Error\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(\"The following file could not be written: \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Extracts the preloaded cheatsheet .xml files from CheatLogs.jar"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * and transfers them to the /data dir before executing the reader"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * operation."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws IOException Thrown if there are issues with reading and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                     writing the transferred .xml file as well as"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                     the files inside CheatLogs.jar."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void extractXmlFilesFromJar() throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "        JarFile jarFile \u003d new JarFile(JAR_DIR);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Enumeration\u003cJarEntry\u003e enumEntries \u003d jarFile.entries();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "        while (enumEntries.hasMoreElements()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "            JarEntry currentFile \u003d enumEntries.nextElement();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "            String currentFilePath \u003d currentFile.getName();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (!currentFilePath.contains(PRELOADED)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    || !currentFilePath.contains(XML_EXTENSION)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": "            String currentFileDir \u003d filterDir(currentFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createNewFile(jarFile, currentFile, currentFilePath, currentFileDir);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": "        jarFile.close();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Extracts a string containing the path to the directory in"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * CheatLogs.jar containing the .xml file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param currentFilePath   A string that denotes the path of the file."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @return                  A string that denotes the path of the file"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                          directory."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private String filterDir(String currentFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] splitPathNames \u003d currentFilePath.split(SLASH);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String xmlPathName \u003d EMPTY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theopin"
        },
        "content": "        for (String splitPathName : splitPathNames) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (splitPathName.contains(XML_EXTENSION)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theopin"
        },
        "content": "                xmlPathName \u003d splitPathName;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return currentFilePath.replace(xmlPathName, EMPTY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Creates a new file within the specified path in the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * /data directory."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param jarFile            Jarfile which is loading CheatLogs.jar."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param currentFile        JarEntry of the file being process."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param currentFilePath    String denoting the path to which the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                           file should be written to"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param currentFileDirPath String denoting the path to the directory"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                           the relevant file should be stored in."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void createNewFile(JarFile jarFile,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theopin"
        },
        "content": "                               JarEntry currentFile,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theopin"
        },
        "content": "                               String currentFilePath,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theopin"
        },
        "content": "                               String currentFileDirPath) throws IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author theopin-reused"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        //Reused from https://stackoverflow.com/questions/1529611 with minor modifications"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Path preloadedSubjectDirectory \u003d Paths.get(USER_DIR, DATA, currentFileDirPath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Path preloadedFileDirectory \u003d Paths.get(USER_DIR, DATA, currentFilePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyDirectoryExistence(null, preloadedSubjectDirectory, true);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        File newFileLocation \u003d new File(preloadedFileDirectory.toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        InputStream inputStream \u003d jarFile.getInputStream(currentFile);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        FileOutputStream outputStream \u003d new FileOutputStream(newFileLocation);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        while (inputStream.available() \u003e 0) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            outputStream.write(inputStream.read());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        outputStream.close();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the data obtained from the /data folder."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses and applies the settings to the system if the data is a settings save file,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the data into cheatsheets and adds them to the application otherwise."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException     Thrown if the /data folder is not found"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DirectoryIsEmptyException Thrown if the /data folder is empty"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void loadCheatSheetsAndSettings() throws IOException,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            DirectoryIsEmptyException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(DATA_DIR)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        File dataDirectory \u003d new File(DATA_DIR.toString());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] directoryItems \u003d dataDirectory.list();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assert directoryItems !\u003d null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (directoryItems.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DirectoryIsEmptyException(DATA);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        extractFromDirectory(DATA_DIR);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts all cheatsheet and settings files from the given directory."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException Thrown if the /data directory is missing or empty."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void extractFromDirectory(Path directoryPath) throws IOException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        File[] dataDirectoryFiles \u003d directoryPath.toFile().listFiles();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        if (dataDirectoryFiles \u003d\u003d null) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        for (File dataDirectoryFile : dataDirectoryFiles) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath \u003d dataDirectoryFile.toPath();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Files.isDirectory(filePath)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                extractFromDirectory(filePath);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            String preloadedFileName \u003d dataDirectoryFile"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getParentFile()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getParentFile()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getName();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isPreloadedFile \u003d preloadedFileName.equals(PRELOADED);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isPreloadedFile) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                preloadedCheatSheets.add(dataDirectoryFile.toPath());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                if (dataDirectoryFile.getName().equals(\"settings.txt\")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    loadUserSettings(dataDirectoryFile);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                    extractCheatSheet(dataDirectoryFile);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParserConfigurationException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                readLogger.log(Level.WARNING, \"XML Parser Error\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                printer.print(\"There were issues with building the XML parser: \""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                        + e.getMessage());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (SAXException f) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                readLogger.log(Level.WARNING, \"SAX Read File Error\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                printer.print(\"There were issues with the usage of the XML parser: \""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                        + f.getMessage());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the contents of the cheatsheet from the specified file."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cheatSheetDocument File of the cheatSheet"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException                  Thrown if an I/O error prevents the file from being fully parsed."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParserConfigurationException Thrown if a serious configuration error is caught."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws SAXException                 Thrown if a basic error or warning information from either"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                      the XML parser or the application is caught."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    private void extractCheatSheet(File cheatSheetDocument) throws IOException,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserConfigurationException,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            SAXException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        Node favouriteElement \u003d null;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        Node subjectElement \u003d null;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        Node contentElement \u003d null;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        DocumentBuilder documentBuilder \u003d getDocumentBuilder();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        Document cheatSheetXml \u003d documentBuilder.parse(cheatSheetDocument);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        cheatSheetXml.getDocumentElement().normalize();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        NodeList sectionNodes \u003d cheatSheetXml.getDocumentElement().getChildNodes();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        int numSections \u003d sectionNodes.getLength();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c numSections; i++) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (sectionNodes.item(i).getNodeName()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            case FAVOURITE_ELEMENT:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                favouriteElement \u003d sectionNodes.item(i);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            case SUBJECT_ELEMENT:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                subjectElement \u003d sectionNodes.item(i);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            case CONTENTS_ELEMENT:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                contentElement \u003d sectionNodes.item(i);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        bundleCheatSheetComponents(cheatSheetDocument,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                favouriteElement,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                subjectElement,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                contentElement);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts and bundles components together to create a new cheatSheet."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cheatSheetDocument File of the cheatSheet"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param favouriteElement   Node containing the favourite status"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     *                           of the cheatsheet."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param subjectElement     Node containing the subject of the"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     *                           cheatsheet."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param contentElement     Node containing the details of the"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     *                           cheatsheet."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    private void bundleCheatSheetComponents(File cheatSheetDocument,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Node favouriteElement,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Node subjectElement,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Node contentElement) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        String cheatSheetName \u003d cheatSheetDocument"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                .getName()"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                .replace(XML_EXTENSION, EMPTY);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isMarkedFavourite \u003d extractFavouriteStatus(favouriteElement);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        String cheatSheetSubject \u003d extractCheatSheetSection(subjectElement);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        String cheatSheetContent \u003d extractCheatSheetSection(contentElement);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        createNewCheatSheet(isMarkedFavourite,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                cheatSheetName,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                cheatSheetSubject,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                cheatSheetContent);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the favourite status of the referenced cheatSheet."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param favouriteElement      Node containing the favourite status of the cheatSheet."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return isMarkedFavourite    Boolean indicating if the cheatSheet should be marked as"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     *                              a favourite."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean extractFavouriteStatus(Node favouriteElement) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isMarkedFavourite;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            isMarkedFavourite \u003d favouriteElement"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getFirstChild()"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getTextContent()"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "                    .toUpperCase()"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                    .equals(YES);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            isMarkedFavourite \u003d false;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        return isMarkedFavourite;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the section of the referenced cheatSheet."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param relevantElement Node containing the contents of the cheatSheet."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return cheatsheetContent String containing the contents of the cheatSheet."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    private String extractCheatSheetSection(Node relevantElement) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        String cheatSheetSection;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            cheatSheetSection \u003d relevantElement"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getFirstChild()"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                    .getTextContent();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            cheatSheetSection \u003d EMPTY;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        return cheatSheetSection;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new cheatsheet based on the parameters provided"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * and adds it to CheatSheetList."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param isMarkedFavourite Indicator of the favourite status of the cheatSheet."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cheatSheetName    Name of the cheatSheet."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cheatSheetContent Contents of the cheatSheet."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    private void createNewCheatSheet(boolean isMarkedFavourite,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                                     String cheatSheetName,"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "                                     String cheatSheetSubject,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "                                     String cheatSheetContent) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        CheatSheet newCheatSheet \u003d new CheatSheet(cheatSheetName,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "                cheatSheetSubject,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                cheatSheetContent);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        newCheatSheet.setFavourite(isMarkedFavourite);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        cheatSheetList.add(newCheatSheet);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads the save file line by line and passes each line to applySettings method."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadUserSettings(File settingsFile) throws IOException {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(settingsFile);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            applySettings(scanner.nextLine());"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "     * Applies the settings retrieved from the settings.txt save file."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    private void applySettings(String serializedSettings) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] components \u003d serializedSettings.split(\" \");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        assert components.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        String settingType \u003d components[0];"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        String settingValue \u003d components[1];"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        if (settingType.equals(\"COLOR\")) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "            settings.setColor(Integer.parseInt(settingValue), true);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (settingType.equals(\"HELPMESSAGE\")) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            settings.setDisplayingHelpMessages(Boolean.parseBoolean(settingValue), true);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 3,
      "theopin": 147,
      "-": 254,
      "adhy-p": 12
    }
  },
  {
    "path": "src/main/java/storage/DataFileWriter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.parsers.DocumentBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.parsers.ParserConfigurationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.transform.OutputKeys;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.transform.Transformer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.transform.TransformerException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.transform.TransformerFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.transform.dom.DOMSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "import javax.xml.transform.stream.StreamResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.w3c.dom.Document;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.w3c.dom.Element;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.w3c.dom.Text;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import settings.Settings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * Allows the user to save the current settings into a file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * and write data based on the cheatSheets currently present"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": " * in the list of cheatSheets into individual files."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileWriter extends DataFile {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private ArrayList\u003cCheatSheet\u003e cheatSheets;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final CheatSheetList cheatSheetList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private final Logger writeLogger \u003d Logger.getLogger(\"FileWriter\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private Settings settings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public DataFileWriter(Settings settings, Printer printer, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.settings \u003d settings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.printer \u003d printer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.cheatSheetList \u003d cheatSheetList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the cheatSheets present in the list of cheatSheet into"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * a string. This string is then saved in an xml file, 1 file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * for each cheatSheet. Subsequently, it retrieves the current settings"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * and parses them into a string. This strings is then saved"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * in a txt file called settings.txt."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void executeFunction() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheets \u003d cheatSheetList.getList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        storeCheatSheet();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        saveSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts each cheatSheet present in the list of cheatSheets into"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * a file, provided it its modifiable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void storeCheatSheet() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int cheatSheetsSize \u003d cheatSheets.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (cheatSheetsSize \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "            for (CheatSheet cheatSheet : cheatSheets) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "                convertCheatSheetToFile(cheatSheet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Converts the cheatSheet into a file format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheet The cheatSheet that is currently being converted into a file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public void convertCheatSheetToFile(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String subjectName \u003d cheatSheet.getSubject();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        String fileName \u003d cheatSheet.getName() + XML_EXTENSION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Path subjectDirectory \u003d Paths.get(USER_DIR, DATA, subjectName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Path possiblePreloadedFile \u003d Paths.get(USER_DIR, DATA,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "                PRELOADED, subjectName, fileName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Path preloadedSubjectDirectory \u003d Paths.get(USER_DIR, DATA, PRELOADED, subjectName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Path textFile \u003d Paths.get(USER_DIR, DATA, subjectName, fileName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "            initiateWriteProcess(cheatSheet,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    subjectDirectory,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    possiblePreloadedFile,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    preloadedSubjectDirectory,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    textFile);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "            writeLogger.log(Level.WARNING, \"IO File Error\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(\"The following file could not be written: \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (ParserConfigurationException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "            writeLogger.log(Level.WARNING, \"XML Parser Error\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(\"There were issues with building the XML parser: \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (TransformerException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "            writeLogger.log(Level.WARNING, \"XML File Transformer Error\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(\"This file could not be converted into an XML file: \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": "                    + e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Attempts to write the indicated cheatsheet into an .xml file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheet                    The cheatSheet that is currently being converted"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                      into a file."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param possiblePreloadedFile         Path of the file assuming that it was preloaded."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param preloadedSubjectDirectory     Path of the directory containing the file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                      assuming that it was preloaded."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param textFile                      The default path of the file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws IOException                  Thrown if there are issues with reading and"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                      writing the transferred .xml file"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws ParserConfigurationException Thrown if a serious configuration error is"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                      detected."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws TransformerException         Thrown if there an exceptional condition occurs"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                      during the transformation process."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void initiateWriteProcess(CheatSheet cheatSheet,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                      Path subjectDirectory,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                      Path possiblePreloadedFile,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                      Path preloadedSubjectDirectory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                      Path textFile) throws IOException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theopin"
        },
        "content": "            ParserConfigurationException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theopin"
        },
        "content": "            TransformerException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean isPreloadedFile \u003d preloadedCheatSheets.contains(possiblePreloadedFile);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isPreloadedFile) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theopin"
        },
        "content": "            textFile \u003d possiblePreloadedFile;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theopin"
        },
        "content": "            subjectDirectory \u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theopin"
        },
        "content": "        verifyDirectoryExistence(subjectDirectory,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theopin"
        },
        "content": "                preloadedSubjectDirectory,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theopin"
        },
        "content": "                isPreloadedFile);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!Files.exists(textFile)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(textFile);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Document cheatSheetFile \u003d buildFileContents(cheatSheet);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theopin"
        },
        "content": "        writeToFile(textFile, cheatSheetFile);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theopin"
        },
        "content": "        removeDirectoryIfEmpty(DATA_DIR.toFile());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Sets the contents for the respective cheatSheet file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheet                     The cheatSheet that is currently being converted into a file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @return xmlFileStructure              A document containing relevant data of the cheatsheet"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                       in a .xml file format."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws ParserConfigurationException Thrown if a serious configuration error is detected."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private Document buildFileContents(CheatSheet cheatSheet) throws ParserConfigurationException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DocumentBuilder documentBuilder \u003d getDocumentBuilder();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Document xmlFileStructure \u003d documentBuilder.newDocument();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Element mainRoot \u003d xmlFileStructure.createElement(MAIN_ELEMENT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theopin"
        },
        "content": "        xmlFileStructure.appendChild(mainRoot);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theopin"
        },
        "content": "        insertFavouriteStatus(cheatSheet, xmlFileStructure, mainRoot);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theopin"
        },
        "content": "        insertFileSubject(cheatSheet, xmlFileStructure, mainRoot);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theopin"
        },
        "content": "        insertFileContents(cheatSheet, xmlFileStructure, mainRoot);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return xmlFileStructure;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Sets the favourite status for the respective cheatSheet file."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheet                    The cheatSheet that is currently being converted into a file."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param xmlFileStructure              A document containing relevant data of the cheatsheet"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                      in a .xml file format."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param mainRoot                      The root that the created element needs to be joined to."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void insertFavouriteStatus(CheatSheet cheatSheet,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                       Document xmlFileStructure,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                       Element mainRoot) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String favouriteStatus \u003d cheatSheet.getIsFavourite()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "theopin"
        },
        "content": "                ? YES"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theopin"
        },
        "content": "                : NO;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Element favouriteElement \u003d xmlFileStructure.createElement(FAVOURITE_ELEMENT);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "theopin"
        },
        "content": "        appendToFileStructure(xmlFileStructure,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "theopin"
        },
        "content": "                mainRoot,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "theopin"
        },
        "content": "                favouriteStatus,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "theopin"
        },
        "content": "                favouriteElement);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Sets the subject for the respective cheatSheet file."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheet                    The cheatSheet that is currently being converted into a file."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param xmlFileStructure              A document containing relevant data of the cheatsheet"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                      in a .xml file format."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param mainRoot                      The root that the created element needs to be joined to."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void insertFileSubject(CheatSheet cheatSheet,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                   Document xmlFileStructure,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                   Element mainRoot) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String fileContent \u003d cheatSheet.getSubject();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Element fileContentElement \u003d xmlFileStructure.createElement(SUBJECT_ELEMENT);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "theopin"
        },
        "content": "        appendToFileStructure(xmlFileStructure,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "theopin"
        },
        "content": "                mainRoot,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "theopin"
        },
        "content": "                fileContent,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "theopin"
        },
        "content": "                fileContentElement);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Sets the contents for the respective cheatSheet file."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param cheatSheet                    The cheatSheet that is currently being converted into a file."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param xmlFileStructure              A document containing relevant data of the cheatsheet"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                      in a .xml file format."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param mainRoot                      The root that the created element needs to be joined to."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void insertFileContents(CheatSheet cheatSheet,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                    Document xmlFileStructure,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                    Element mainRoot) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String fileContent \u003d cheatSheet.getDetails();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Element fileContentElement \u003d xmlFileStructure.createElement(CONTENTS_ELEMENT);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "theopin"
        },
        "content": "        appendToFileStructure(xmlFileStructure,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "theopin"
        },
        "content": "                mainRoot,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "theopin"
        },
        "content": "                fileContent,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "theopin"
        },
        "content": "                fileContentElement);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Sets the contents for the respective cheatSheet file."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param xmlFileStructure   A document containing relevant data of the cheatsheet"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                           in a .xml file format."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param mainRoot           The root that the created element needs to be joined to."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param fileContent        Section of the file that needs to be converted to a text node."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param fileContentElement Element that needs to be appended to the main root."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void appendToFileStructure(Document xmlFileStructure,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                       Element mainRoot,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                       String fileContent,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "theopin"
        },
        "content": "                                       Element fileContentElement) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Text fileContentTextNode \u003d xmlFileStructure.createTextNode(fileContent);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "theopin"
        },
        "content": "        fileContentElement.appendChild(fileContentTextNode);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "theopin"
        },
        "content": "        mainRoot.appendChild(fileContentElement);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "theopin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * Writes formatted attributes of the cheatsheet into an xml file."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param fileDirectory             Name of the file."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @param xmlFileContents           Contents of the file in xml format."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "theopin"
        },
        "content": "     * @throws TransformerException     Thrown if there an exceptional condition occurs"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "theopin"
        },
        "content": "     *                                  during the transformation process."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "theopin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "theopin"
        },
        "content": "    private void writeToFile(Path fileDirectory, Document xmlFileContents)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "theopin"
        },
        "content": "            throws TransformerException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "theopin"
        },
        "content": "        Transformer transformer \u003d TransformerFactory"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .newInstance()"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "theopin"
        },
        "content": "                .newTransformer();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "theopin"
        },
        "content": "        transformer.setOutputProperty(OutputKeys.INDENT, YES);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "theopin"
        },
        "content": "        DOMSource fileSource \u003d new DOMSource(xmlFileContents);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "theopin"
        },
        "content": "        StreamResult fileResult \u003d new StreamResult(fileDirectory.toFile());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "theopin"
        },
        "content": "        transformer.transform(fileSource, fileResult);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Gets the current settings and parses them into strings."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private void saveSettings() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        boolean isDisplayingHelpMessages \u003d settings.getDisplayingHelpMessages();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int colorOption \u003d settings.getColorOption();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        StringBuilder saveData \u003d new StringBuilder();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        saveData.append(\"COLOR \").append(colorOption).append(\"\\n\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        saveData.append(\"HELPMESSAGE \").append(isDisplayingHelpMessages).append(\"\\n\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            writeToTxtFile(saveData.toString());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            printer.print(e.getMessage());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     * Writes the save data to data/settings.txt"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private void writeToTxtFile(String saveData) throws IOException {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(DATA_DIR + SETTINGS_FILENAME);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        fileWriter.write(saveData);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "abnermtj": 4,
      "theopin": 268,
      "adhy-p": 37
    }
  },
  {
    "path": "src/main/java/ui/ConsoleColorsEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public enum ConsoleColorsEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    BLACK_TEXT(\"\\u001B[30m\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    RED_TEXT(\"\\u001B[31m\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    GREEN_TEXT(\"\\u001B[32m\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    YELLOW_TEXT(\"\\u001B[33m\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    BLUE_TEXT(\"\\u001B[34m\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    MAGENTA_TEXT(\"\\u001B[35m\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    CYAN_TEXT(\"\\u001B[36m\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    WHITE_TEXT(\"\\u001B[37m\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BOLD_BLACK_TEXT(\"\\u001B[30;1m\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BOLD_RED_TEXT(\"\\u001B[31;1m\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BOLD_GREEN_TEXT(\"\\u001B[32;1m\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BOLD_YELLOW_TEXT(\"\\u001B[33;1m\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BOLD_BLUE_TEXT(\"\\u001B[34;1m\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BOLD_MAGENTA_TEXT(\"\\u001B[35;1m\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BOLD_CYAN_TEXT(\"\\u001B[36;1m\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BOLD_WHITE_TEXT(\"\\u001B[37;1m\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BRIGHT_BLACK_TEXT(\"\\u001B[90m\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BRIGHT_RED_TEXT(\"\\u001B[91m\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BRIGHT_GREEN_TEXT(\"\\u001B[92m\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BRIGHT_YELLOW_TEXT(\"\\u001B[93m\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BRIGHT_BLUE_TEXT(\"\\u001B[94m\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BRIGHT_MAGENTA_TEXT(\"\\u001B[95m\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BRIGHT_CYAN_TEXT(\"\\u001B[96m\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    BRIGHT_WHITE_TEXT(\"\\u001B[97m\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    BLACK_TEXT_BG(\"\\u001B[40m\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    RED_TEXT_BG(\"\\u001B[41m\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    GREEN_TEXT_BG(\"\\u001B[42m\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    YELLOW_TEXT_BG(\"\\u001B[43m\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    BLUE_TEXT_BG(\"\\u001B[44m\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    MAGENTA_TEXT_BG(\"\\u001B[45m\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    CYAN_TEXT_BG(\"\\u001B[46m\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    WHITE_TEXT_BG(\"\\u001B[47m\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    BOLD(\"\\u001B[1m\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    // RESET_TEXT(\"\\u001b[0m\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    RESET_TEXT(\"\\u001b[37m\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private String ansiCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    ConsoleColorsEnum(String ansiCode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        this.ansiCode \u003d ansiCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        return ansiCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 34,
      "adhy-p": 21
    }
  },
  {
    "path": "src/main/java/ui/Printer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import command.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " * This class manages the output of text."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "public final class Printer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    private static final String LINE \u003d \"----------------------------------------------------------------\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            + \"----------------------------------------\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ConsoleColorsEnum textColor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ConsoleColorsEnum favColor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ConsoleColorsEnum logoColor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ConsoleColorsEnum nameColor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ConsoleColorsEnum subjectColor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ConsoleColorsEnum detailsColor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public ConsoleColorsEnum alertColor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public ConsoleColorsEnum reset;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public Printer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        textColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        favColor \u003d ConsoleColorsEnum.BRIGHT_YELLOW_TEXT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logoColor \u003d ConsoleColorsEnum.BRIGHT_CYAN_TEXT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        nameColor \u003d ConsoleColorsEnum.BRIGHT_CYAN_TEXT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        subjectColor \u003d ConsoleColorsEnum.BRIGHT_BLUE_TEXT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        detailsColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        alertColor \u003d ConsoleColorsEnum.BOLD_RED_TEXT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        reset \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void print(Object obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        System.out.println(obj);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void printWelcomeScreen() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(logoColor"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" ________  ___  ___  _______   ________  _________  ________  \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"___  ___  _______   _______  _________\" + NEWLINE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"|\\\\   ____\\\\|\\\\  \\\\|\\\\  \\\\|\\\\  ___ \\\\ |\\\\   __  \\\\|\\\\___   ___\\\\\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\   ____\\\\|\\\\  \\\\|\\\\  \\\\|\\\\  ___ \\\\ |\\\\  ___ \\\\|\\\\___   ___\\\\\" + NEWLINE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __/|\\\\ \\\\  \\\\|\\\\  \\\\|___ \\\\  \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\_\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __/|\\\\ \\\\   __/\\\\|___ \\\\  \\\\_|\" + NEWLINE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" \\\\ \\\\  \\\\    \\\\ \\\\   __  \\\\ \\\\  \\\\_|/_\\\\ \\\\   __  \\\\   \\\\ \\\\  \\\\ \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\_____  \\\\ \\\\   __  \\\\ \\\\  \\\\_|/_\\\\ \\\\  \\\\_|/__  \\\\ \\\\  \\\\\" + NEWLINE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"  \\\\ \\\\  \\\\____\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \\\\ \\\\  \\\\   \\\\ \\\\  \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\|____|\\\\  \\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \\\\_|\\\\ \\\\  \\\\ \\\\  \\\\\" + NEWLINE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"   \\\\ \\\\_______\\\\ \\\\__\\\\ \\\\__\\\\ \\\\_______\\\\ \\\\__\\\\ \\\\__\\\\   \\\\ \\\\__\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\  ____\\\\_\\\\  \\\\ \\\\__\\\\ \\\\__\\\\ \\\\_______\\\\ \\\\_______\\\\  \\\\ \\\\__\\\\\" + NEWLINE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"    \\\\|_______|\\\\|__|\\\\|__|\\\\|_______|\\\\|__|\\\\|__|    \\\\|__| |\\\\____\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"_____\\\\|__|\\\\|__|\\\\|_______|\\\\|_______|   \\\\|__|\" + NEWLINE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                      ___       ________  ________\" + NEWLINE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                     |\\\\  \\\\     |\\\\   __  \\\\|\\\\   ____\\\\\" + NEWLINE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                     \\\\ \\\\  \\\\    \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\___|\" + NEWLINE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                      \\\\ \\\\  \\\\    \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\  ___\" + NEWLINE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                       \\\\ \\\\  \\\\____\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\  \\\\\" + NEWLINE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                        \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\\" + NEWLINE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                         \\\\|_______|\\\\|_______|\\\\|_______|\" + NEWLINE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + LINE + NEWLINE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"Welcome to CheatLogs, the one stop cheat sheet management systems\" + NEWLINE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \"Your CAP is our upmost priority\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void printExitLogo() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(logoColor"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" ________  ________  ________  ________  ________      ___    ___ _______\" + NEWLINE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"|\\\\   ____\\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\   ___ \\\\|\\\\   __  \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\    |\\\\  \\\\  /  /|\\\\  ___ \\\\\" + NEWLINE"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\ \\\\  \\\\___|\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\_|\\\\ \\\\ \\\\  \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\|\\\\ /_   \\\\ \\\\  \\\\/  / | \\\\   __/|\" + NEWLINE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" \\\\ \\\\  \\\\  __\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\ \\\\\\\\ \\\\ \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\\\   __  \\\\   \\\\ \\\\    / / \\\\ \\\\  \\\\_|/__\" + NEWLINE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\_\\\\\\\\ \\\\\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \" \\\\  \\\\|\\\\  \\\\   \\\\/  /  /   \\\\ \\\\  \\\\_|\\\\ \\\\\" + NEWLINE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"   \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\_______\\\\\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"__/  / /      \\\\ \\\\_______\\\\\" + NEWLINE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"    \\\\|_______|\\\\|_______|\\\\|_______|\\\\|_______|\\\\|_______|\\\\___\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"/ /        \\\\|_______|\" + NEWLINE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"                                                     \\\\|___|/\" + NEWLINE"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void printUserInputPrompt() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        print(LINE + \"\" + NEWLINE + NEWLINE + \"Please enter a Command:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void printHelpSheet() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/add /n \u003cCHEAT_SHEET_NAME\u003e /s \u003cSUBJECT\u003e\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\tAdds a new cheat sheet to the application and prompts user to include data\" + NEWLINE"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\tinto the cheat sheet.\" + NEWLINE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/clear\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + \"\\tClears all entries from the cheat sheet.\" + NEWLINE"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/delete /i \u003cCHEAT_SHEET_INDEX\u003e\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + favColor + \"/delete /n \u003cCHEAT_SHEET_NAME\u003e\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\tTo be used after using /list, Deletes the cheat sheet at INDEX items down the list.\" + NEWLINE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\tThe first cheat sheet has an index of 1.\" + NEWLINE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/edit /i \u003cCHEAT_SHEET_INDEX\u003e\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + favColor + \"/edit /n \u003cCHEAT_SHEET_NAME\u003e\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + \"\\tEdits the details/content of the cheat sheet.\" + NEWLINE"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/exit\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + \"\\tExits the application.\" + NEWLINE"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/fav /i \u003cCHEAT_SHEET_INDEX\u003e\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + favColor + \"/fav /n \u003cCHEAT_SHEET_NAME\u003e\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + \"\\tAdds the cheat sheet to favourites.\" + NEWLINE"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/fav /i \u003cCHEAT_SHEET_INDEX\u003e /d\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + favColor + \"/fav /n \u003cCHEAT_SHEET_NAME\u003e /d\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + \"\\tRemoves the cheat sheet from favourites.\" + NEWLINE"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/find /s \u003cSUBJECT\u003e /k \u003cKEYWORD\u003e\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\tFinds a cheat sheet whose names contain any of the given keywords.\" + NEWLINE"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/help\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + \"\\tDisplays this help message.\" + NEWLINE"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/list\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                + \"\\tLists all the possible commands that can be executed in the application.\" + NEWLINE"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/set /c \u003cOPTION_NUMBER\u003e\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + \"\\tChanges the color scheme of the application. Available options: 0 - 3.\" + NEWLINE"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/set /m on\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/set /m off\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"\\tEnables/disables the help message for commands.\" + NEWLINE"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + logoColor + \"/view /i \u003cCHEAT_SHEET_INDEX\u003e\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + ConsoleColorsEnum.BOLD + \"\" + favColor + \"/view /n \u003cCHEAT_SHEET_NAME\u003e\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset + NEWLINE"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + \"\\tView the contents of a cheat sheet either by the name or index.\" + NEWLINE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void printCheatSheet(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(nameColor + \"\\tName: \" + cheatSheet.getName() + NEWLINE"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + subjectColor + \"\\tSubject: \" + cheatSheet.getSubject() + NEWLINE"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + detailsColor + \"\\tDetails: \" + cheatSheet.getWrappedDetails()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + reset);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void printCheatSheetSize(CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(textColor + \"Now you have \" + cheatSheetList.getSize() + \" cheatsheet(s)\" + reset);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void printAddNewCheatSheetMessage(CheatSheet cheatSheet, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(textColor + \"Added new cheat sheet:\" + reset);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        printCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(textColor + LINE + reset);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        printCheatSheetSize(cheatSheetList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void printClearCheatSheetMessage(int number) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(textColor + \"Cleared total of \" + number + \" cheat sheets\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        print(LINE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(\"Now you have no cheatsheets\" + reset);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public void printDeleteConfirmation(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        print(alertColor + \"Are you sure to delete the\" + cheatSheet.getName() + \" cheatsheet?\" + NEWLINE"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "domaxi"
        },
        "content": "                + \"Type Y or Yes to confirm, or any other character to cancel\" + reset);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void printDeleteCheatSheetMessage(CheatSheet cheatSheet, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(textColor + \"This cheat sheet has been deleted: \" + reset);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        printCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(textColor + LINE + reset);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        printCheatSheetSize(cheatSheetList);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void printViewCheatSheetMessage(CheatSheet cheatSheet) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(textColor + \"This is your content for \" + cheatSheet.getName() + \": \" + reset);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        printCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void printFavouritedCheatSheetMessage(CheatSheet cheatSheet, boolean isAddFav) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (isAddFav) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            print(textColor + \"This cheat sheet has been added to favourites: \" + reset);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            print(textColor + \"This cheat sheet has been removed from favourites: \" + reset);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        printCheatSheet(cheatSheet);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void printAlternativeArgumentPrompt(Command command) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        print(NEWLINE);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.print(ConsoleColorsEnum.RED_TEXT + \"Please enter at least ONE of these: \");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        for (CommandFlag arg : command.getAlternativeArguments()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            System.out.print(arg + \" \");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        print(reset);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        print(NEWLINE);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void printMissingArgument(CommandFlag curArg) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.print(textColor + \"Please input \" + curArg.name() + \": \" + reset);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void setColor(int option) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        switch (option) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            textColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            favColor \u003d ConsoleColorsEnum.BRIGHT_GREEN_TEXT;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            logoColor \u003d ConsoleColorsEnum.BRIGHT_GREEN_TEXT;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            nameColor \u003d ConsoleColorsEnum.BRIGHT_MAGENTA_TEXT;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            subjectColor \u003d ConsoleColorsEnum.BOLD_MAGENTA_TEXT;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            detailsColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            alertColor \u003d ConsoleColorsEnum.BOLD_RED_TEXT;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            reset \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            textColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            favColor \u003d ConsoleColorsEnum.BRIGHT_BLUE_TEXT;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            logoColor \u003d ConsoleColorsEnum.BRIGHT_BLUE_TEXT;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            nameColor \u003d ConsoleColorsEnum.BRIGHT_RED_TEXT;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            subjectColor \u003d ConsoleColorsEnum.BOLD_YELLOW_TEXT;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            detailsColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            alertColor \u003d ConsoleColorsEnum.BOLD_RED_TEXT;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            reset \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            textColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            favColor \u003d ConsoleColorsEnum.BOLD_WHITE_TEXT;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            logoColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            nameColor \u003d ConsoleColorsEnum.BOLD_WHITE_TEXT;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            subjectColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            detailsColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            alertColor \u003d ConsoleColorsEnum.BOLD_RED_TEXT;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            reset \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            textColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            favColor \u003d ConsoleColorsEnum.BRIGHT_YELLOW_TEXT;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            logoColor \u003d ConsoleColorsEnum.BRIGHT_CYAN_TEXT;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            nameColor \u003d ConsoleColorsEnum.BRIGHT_CYAN_TEXT;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            subjectColor \u003d ConsoleColorsEnum.BRIGHT_BLUE_TEXT;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            detailsColor \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            alertColor \u003d ConsoleColorsEnum.BOLD_RED_TEXT;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            reset \u003d ConsoleColorsEnum.WHITE_TEXT;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        printSetColorMessage(option);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void printSetColorMessage(int option) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (option \u003c 0 || option \u003e 3) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            print(\"Invalid option \" + option + \". Changed color scheme to default colors:\\n\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    + favColor + \"\\tColor 1\\n\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    + nameColor + \"\\tColor 2\\n\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    + subjectColor + \"\\tColor 3\\n\""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    + reset);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            print(\"Changed color scheme to option \" + option + \":\\n\""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    + favColor + \"\\tColor 1\\n\""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    + nameColor + \"\\tColor 2\\n\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    + subjectColor + \"\\tColor 3\\n\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    + reset);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void printStartHelpMessage() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"Here are some basics commands to get you started: \""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"\\t\\\"/add\\\": Add your own cheat sheet\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"\\t\\\"/list\\\": List all cheat sheet you currently own, including those we preloaded for you\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + NEWLINE + \"\\t\\\"/view\\\": View the contents of a specific cheat sheet,\""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + \" we recommend you to use the list command before this. \""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"\\t\\t\\t You can view the contents using cheat sheet index or name.\""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"Enter \\\"/help\\\" to see the details of all commands\""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void printRepeatedHelpMessagePartOne(String commandType) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"The \" + commandType + \" does not work alone.\""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"We need some necessary information from you before we could add your cheat sheet.\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"Don\u0027t worry, you do not have to enter the command again.\""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"We would prompt you to enter the necessary information, one by one.\""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void printRepeatedHelpMessagePartTwo() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"You also could enter the full command next time if you do not wish to be prompted to enter fields \""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"one by one\""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"\\\"/help\\\" to see more details on the structure of full command.\""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"To stop messages like this from appearing again, input this command: \\\"/set /m off\\\"\""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void printCommandHelpMessage(Class commandClass) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (commandClass.equals(AddCommand.class)) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printAddCommandHelpMessage();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (commandClass.equals(ClearCommand.class)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printClearCommandHelpMessage();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (commandClass.equals(DeleteCommand.class)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printDeleteCommandHelpMessage();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (commandClass.equals(EditCommand.class)) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printEditCommandHelpMessage();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (commandClass.equals(FindCommand.class)) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printFindCommandHelpMessage();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else if (commandClass.equals(ListCommand.class)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printListCommandHelpMessage();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void printAddCommandHelpMessage() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printRepeatedHelpMessagePartOne(\"ADD\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"NAME is necessary while SUBJECT isn\u0027t. \u003c\u003center\u003e\u003e to skip field.\""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"We will automatically assign \\\"Unsorted\\\" as subject if no subject is provided.\""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printRepeatedHelpMessagePartTwo();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void printClearCommandHelpMessage() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"The CLEAR command clears ALL cheat sheets except for those that are preloaded.\""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void printDeleteCommandHelpMessage() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"The DELETE command deletes a cheatsheet you specifies.\""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printRepeatedHelpMessagePartOne(\"DELETE\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"We need you to either input NAME or INDEX. \u003c\u003center\u003e\u003e to skip field.\""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printRepeatedHelpMessagePartTwo();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void printEditCommandHelpMessage() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"The EDIT command edits an existing cheat sheet.\""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printRepeatedHelpMessagePartOne(\"EDIT\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"We need you to input either NAME or INDEX. \u003c\u003center\u003e\u003e to skip field.\""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printRepeatedHelpMessagePartTwo();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void printFindCommandHelpMessage() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"The EDIT command finds an existing cheat sheet based on information provided.\""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printRepeatedHelpMessagePartOne(\"FIND\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"We need you to input NAME, SUBJECT, or KEYWORD in cheatsheet or any combinations of these fields.\""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"\u003c\u003center\u003e\u003e to skip field.\""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printRepeatedHelpMessagePartTwo();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void printListCommandHelpMessage() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"The LIST command lists all current existing cheat sheets.\""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"You could also sort the cheat sheets according to name or subject\""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                + NEWLINE + \"To stop messages like from appearing again, input this command: \\\"/set /m off\\\"\""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void printClearConfirmation() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        print(ConsoleColorsEnum.BRIGHT_YELLOW_TEXT"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + \"Are you sure you want to delete all your cheat sheets\""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + NEWLINE + \"Type Y or Yes to confirm, or any other character to cancel\""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                + ConsoleColorsEnum.RESET_TEXT);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void printSetDisplayingHelpMessages(boolean isDisplayingHelpMessages) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (isDisplayingHelpMessages) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            print(\"You have enabled the help messages.\""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    + NEWLINE + \"You can disable the help messages using \\\"/set /m off\\\"\\n\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            print(\"You have disabled the help messages.\""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    + NEWLINE + \"You can re-enable it again using \\\"/set /m on\\\"\\n\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 23,
      "abnermtj": 89,
      "brandontoh": 134,
      "adhy-p": 173
    }
  },
  {
    "path": "src/main/java/ui/TablePrinter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class TablePrinter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    String[][] rawTable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    ArrayList\u003cString[]\u003e finalTable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    int maxWidth \u003d 30;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    Printer printer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public TablePrinter(Printer printer, CheatSheetList cheatSheetList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.printer \u003d printer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        makeRawTable(cheatSheetList.getList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public TablePrinter(Printer printer, ArrayList\u003cCheatSheet\u003e cheatSheetToBePrinted) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        this.printer \u003d printer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        makeRawTable(cheatSheetToBePrinted);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void makeRawTable(ArrayList\u003cCheatSheet\u003e cheatSheetsToBePrinted) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        rawTable \u003d new String[cheatSheetsToBePrinted.size() + 1][4];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        rawTable[0][0] \u003d \"INDEX\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        rawTable[0][1] \u003d \"NAME\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        rawTable[0][2] \u003d \"SUBJECT\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        rawTable[0][3] \u003d \"PREVIEW\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d cheatSheetsToBePrinted.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            CheatSheet cs \u003d cheatSheetsToBePrinted.get(i - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            assert cs !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            rawTable[i][0] \u003d String.valueOf(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            rawTable[i][1] \u003d cs.getName().trim() + (cs.getIsFavourite() ? \" [*]\" : \"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                rawTable[i][2] \u003d cs.getSubject().trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } catch (NullPointerException n) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                rawTable[i][2] \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                rawTable[i][3] \u003d cs.getDetails().split(\"\\n\")[0].trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                if (rawTable[i][3].isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    rawTable[i][3] \u003d cs.getDetails().split(\"\\n\")[1].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException a) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                rawTable[i][3] \u003d cs.getDetails().trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private int calculateNoOfNewRowsNeededByCell(String cell) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        int rowsNeeded \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (cell.contains(\"\\n\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            String[] splittedCell \u003d cell.split(\"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            for (String s : splittedCell) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                rowsNeeded +\u003d (s.length() / maxWidth) + 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return rowsNeeded;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return (cell.length() / maxWidth) + 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private int calculateNoOfNewRowsNeededByRow(String[] row) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        int rowsNeeded \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (String cell : row) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (rowsNeeded \u003c calculateNoOfNewRowsNeededByCell(cell)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                rowsNeeded \u003d calculateNoOfNewRowsNeededByCell(cell);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return rowsNeeded;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private String[] contentsByColAfterWrapping(String cell) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        if (cell.contains(\"\\n\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return cell.split(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            return cell.split(\"(?\u003c\u003d\\\\G.{30})\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    private void makeFinalTable() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        finalTable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        int rowsNeeded \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (String[] rows : rawTable) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            rowsNeeded \u003d calculateNoOfNewRowsNeededByRow(rows);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            for (int k \u003d 0; k \u003c rowsNeeded; k++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                String[] newRow \u003d new String[rows.length];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                for (int i \u003d 0; i \u003c rows.length; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    String[] cellArray \u003d contentsByColAfterWrapping(rows[i]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    if (k \u003c cellArray.length) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                        newRow[i] \u003d cellArray[k];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                        newRow[i] \u003d \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                finalTable.add(newRow);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public HashMap\u003cInteger, Integer\u003e calculateLengthOfIndividualCol() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e columnLengths \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (String[] row : finalTable) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            for (int i \u003d 0; i \u003c row.length; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                columnLengths.putIfAbsent(i, 0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                if (columnLengths.get(i) \u003c row[i].length()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    columnLengths.put(i, row[i].length());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return columnLengths;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public StringBuilder prepareStringFormatForEachRow(HashMap\u003cInteger, Integer\u003e columnLengths) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        final StringBuilder stringFormat \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        String flag \u003d \"-\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        int col \u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        String color \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (HashMap.Entry\u003cInteger, Integer\u003e e : columnLengths.entrySet()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            if (col % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                color \u003d printer.favColor.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            } else if (col % 4 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                color \u003d printer.nameColor.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            } else if (col % 4 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                color \u003d printer.subjectColor.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                color \u003d printer.detailsColor.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            stringFormat"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    .append(\"| \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    .append(color)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    .append(\"%\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    .append(flag)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    .append(e.getValue())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    .append(\"s \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                    .append(printer.reset.toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            col++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        stringFormat.append(\"|\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return stringFormat;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public StringBuilder prepareLine(HashMap\u003cInteger, Integer\u003e columnLengths) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        StringBuilder line \u003d new StringBuilder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (Integer value : columnLengths.values()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            line.append(\"+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            line.append(\"-\".repeat(value + 2));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        line.append(\"+\\n\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void printFinalTable(StringBuilder stringFormat, StringBuilder line) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.print(line);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.printf(stringFormat.toString(), rawTable[0][0], rawTable[0][1], rawTable[0][2], rawTable[0][3]);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        for (int i \u003d 1; i \u003c finalTable.size(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Pattern regex \u003d Pattern.compile(\"[0-9]{1,2}\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Matcher regexMatcher \u003d regex.matcher(finalTable.get(i)[0]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            if (regexMatcher.find()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                System.out.print(line);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            System.out.printf(stringFormat.toString(), finalTable.get(i)[0], finalTable.get(i)[1],"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                    finalTable.get(i)[2], finalTable.get(i)[3]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        System.out.print(line);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        makeFinalTable();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e columnLengths \u003d calculateLengthOfIndividualCol();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        StringBuilder stringFormat \u003d prepareStringFormatForEachRow(columnLengths);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        StringBuilder line \u003d prepareLine(columnLengths);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        printFinalTable(stringFormat, line);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 158,
      "adhy-p": 24
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    public void closeScanner() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 1,
      "brandontoh": 11,
      "adhy-p": 6
    }
  },
  {
    "path": "src/main/java/ui/UserSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import editor.Editor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import settings.Settings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import storage.DataFileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import storage.DataFileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import storage.DataFileDestroyer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "public class UserSession {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    public boolean isFirstRun;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     * These are objects that will be injected to command subclasses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     * that allow them to execute."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    CheatSheetList cheatSheetList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    DataFileReader fileReader;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    DataFileWriter fileWriter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    DataFileDestroyer fileDestroyer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    Editor editor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    Parser userCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    Printer printer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    Settings settings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    public UserSession() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        editor \u003d new Editor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        printer \u003d new Printer();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        settings \u003d new Settings(printer);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        fileReader \u003d new DataFileReader(settings, printer, cheatSheetList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        fileWriter \u003d new DataFileWriter(settings, printer, cheatSheetList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        fileDestroyer \u003d new DataFileDestroyer(printer, cheatSheetList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        userCommandParser \u003d new Parser(cheatSheetList, editor, fileDestroyer, printer, ui, settings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        isFirstRun \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void runProgramSequence() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        printer.printWelcomeScreen();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        if (settings.getDisplayingHelpMessages()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printer.printStartHelpMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isFirstRun) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "            fileReader.extractPreloadedCheatSheets();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "        fileReader.executeFunction();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        // Ask for new user input and executes it until user types the exit command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            printer.printUserInputPrompt();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                Command parsedUserCommand \u003d userCommandParser.parse(userInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                parsedUserCommand.execute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                if (parsedUserCommand.isExitCommand) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            } catch (CommandException | InterruptedException | IOException c) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "                printer.print(c.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "domaxi"
        },
        "content": "            fileWriter.executeFunction();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        } while (true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        ui.closeScanner();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        editor.dispose();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        printer.printExitLogo();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 12,
      "abnermtj": 30,
      "theopin": 9,
      "brandontoh": 15,
      "adhy-p": 18
    }
  },
  {
    "path": "src/test/java/cheatlogs/CheatLogsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatlogs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "class CheatLogsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 2,
      "-": 10,
      "adhy-p": 1
    }
  },
  {
    "path": "src/test/java/cheatsheet/CheatSheetListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "class CheatSheetListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Tester\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testGetSize() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(10, cheatSheetList.getSize());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished GetSize test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    void testClear() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheetList.clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(0, cheatSheetList.getSize());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished Clear test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testAdd() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        assertEquals(10, cheatSheetList.getSize());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished Add test\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testRemove() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        // remove(String name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.remove(\"Name1\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.remove(\"Name3\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.remove(\"Name5\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            assertEquals(7, cheatSheetList.getSize());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished Remove (by name) test\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        // remove(int index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        cheatSheetList.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.remove(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.remove(3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.remove(5);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            assertEquals(7, cheatSheetList.getSize());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished Remove (by index) test\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    void remove_negativeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.remove(-1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            assertEquals(\"Please enter a valid index\", e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished remove (negative index) test\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    void remove_nonExistentName_exceptionThrown() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.remove(\"dummy\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            assertEquals(\"Please enter a valid index\", e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished remove (non-existent name) test\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void testGetCheatSheet() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet test \u003d new CheatSheet(\"Name1\", \"Language1\", \"Details1\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                cheatSheetList.add(test);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "                cheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        // test to get cheatsheet by index and by name"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            assertEquals(test, cheatSheetList.get(2));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            assertEquals(test, cheatSheetList.get(\"Name1\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished GetCheatSheet test\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    void getCheatSheet_negativeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet test;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            test \u003d cheatSheetList.get(-1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            assertEquals(\"Please enter a valid index\", e.getMessage());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished GetCheatSheet (negative index) test\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    void getCheatSheet_nonExistentName_exceptionThrown() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheet test;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            cheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            test \u003d cheatSheetList.get(\"cheatlogs\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            assertEquals(\"Please enter a valid name\", e.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        logger.log(Level.INFO, \"Finished GetCheatSheet (non-existent index) test\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 4,
      "adhy-p": 161
    }
  },
  {
    "path": "src/test/java/cheatsheet/CheatSheetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "domaxi"
        },
        "content": "package cheatsheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "domaxi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "domaxi"
        },
        "content": "class CheatSheetTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void getCheatSheetName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assertEquals(\"Test1\", cheatSheet1.getName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void setCheatSheetName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        cheatSheet1.setName(\"Java 11 cheatsheet\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assertEquals(\"Java 11 cheatsheet\", cheatSheet1.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void getSubject() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assertEquals(\"Java 11\", cheatSheet1.getSubject());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void setCheatSheetSubject() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        cheatSheet1.setSubject(\"C++ 11\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assertEquals(\"C++ 11\", cheatSheet1.getSubject());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void getCheatSheetDetails() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assertEquals(\"Java 11 is a Java programming language.\", cheatSheet1.getDetails());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "domaxi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    void setCheatSheetDetails() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "domaxi"
        },
        "content": "        CheatSheet cheatSheet1 \u003d new CheatSheet(\"Test1\", \"Java 11\", \"Java 11 is a Java programming language.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        cheatSheet1.setDetails(\"Java 11 is an awesome language\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assertEquals(\"Java 11 is an awesome language\", cheatSheet1.getDetails());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "domaxi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "domaxi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "domaxi": 36,
      "abnermtj": 11
    }
  },
  {
    "path": "src/test/java/command/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import editor.Editor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import org.junit.jupiter.api.TestTemplate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import parser.CommandFlag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    void addOneCheatSheet_completeInput_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        final String userInput \u003d \"/add /n name /slanguage /d details\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        CheatSheetList.clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            Parser parser \u003d new Parser(null, new Printer(), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            Command addCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            addCommand.execute();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            assertEquals(1, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        } catch (CommandException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    void addOneCheatSheet_SpacedInput_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        final String userInput \u003d \"/add /n Did someone say /sPython v2\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        CheatSheetList.clear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            Parser parser \u003d new Parser(null, new Printer(), null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            Command addCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            addCommand.execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            assertEquals(1, CheatSheetList.getSize());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            assertEquals(\"PythonV2\", CheatSheetList.getCheatSheet(1).getSubject());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        } catch (CommandException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Command addCommand \u003d new AddCommand(new Printer());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    void addOneCheatSheet_allFieldsFilled_success() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        CheatSheetList.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        String userInput \u003d \"/add /n FirstTest /sJava /d Content1\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Parser parser \u003d new Parser(null, new Printer(), null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Command addCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        addCommand.execute();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Assertions.assertAll("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertEquals(\"FirstTest\", CheatSheetList.getCheatSheet(1).getName()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertEquals(\"Java\", CheatSheetList.getCheatSheet(1).getSubject()),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertEquals(\"Content1\", CheatSheetList.getCheatSheet(1).getDetails())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    void addOneCheatSheet_nameAndLanguageFilled_success() throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        CheatSheetList.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        String userInput \u003d \"/add /n FirstTest /sJava\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Parser parser \u003d new Parser(null, new Printer(), null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Command addCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        addCommand.execute();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Assertions.assertAll("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertEquals(\"FirstTest\", CheatSheetList.getCheatSheet(1).getName()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e bassertEquals(\"Java\", CheatSheetList.getCheatSheet(1).getSubject()),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertNull(CheatSheetList.getCheatSheet(1).getDetails())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    void addOneCheatSheet_nameAndDescriptionFilled_success() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        CheatSheetList.clear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        String userInput \u003d \"/add /n FirstTest /d Content1\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Parser parser \u003d new Parser(null, new Printer(), null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Command addCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        addCommand.execute();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Assertions.assertAll("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertEquals(\"FirstTest\", CheatSheetList.getCheatSheet(1).getName()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertNull(CheatSheetList.getCheatSheet(1).getSubject()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertEquals(\"Content1\", CheatSheetList.getCheatSheet(1).getDetails())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //    void addOneCheatSheet_languageAndDescriptionFilled_CommandExceptionThrown() throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //        CheatSheetList.clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //        String userInput \u003d \"/add /sJava /d Content1\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //        Parser parser \u003d new Parser(null, new Printer(), null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //        Command addCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //            addCommand.execute();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //        } catch (CommandException c) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //            assertEquals(\"Please enter a name\", c.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    //    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    void addOneCheatSheet_nameFilled_CommandExceptionThrown() throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        CheatSheetList.clear();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        String userInput \u003d \"/add /n FirstTest\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Parser parser \u003d new Parser(null, new Printer(), null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Command addCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        addCommand.execute();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Assertions.assertAll("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertEquals(\"FirstTest\", CheatSheetList.getCheatSheet(1).getName()),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertNull(CheatSheetList.getCheatSheet(1).getSubject()),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            () -\u003e assertNull(CheatSheetList.getCheatSheet(1).getDetails())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        );"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    void addOneCheatSheet_LanguageFilled_CommandExceptionThrown() throws CommandException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        CheatSheetList.clear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        String userInput \u003d \"/add /sJava\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Parser parser \u003d new Parser(null, new Printer(), new Ui());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Command addCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            addCommand.execute();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        } catch (CommandException c) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            assertEquals(\"Please enter a name\", c.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    void addOneCheatSheet_DescriptionFilled_PromptName() throws CommandException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        CheatSheetList.clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        String userInput \u003d \"/add /d Content1\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Parser parser \u003d new Parser(null, new Printer(), new Ui());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        Command addCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            addCommand.execute();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        } catch (CommandException c) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            assertEquals(\"Please enter a name\", c.getMessage());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    void execute_noName_exceptionThrown() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        final String userInput \u003d \"/add\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        CheatSheetList.clear();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            Parser parser \u003d new Parser(null, new Printer(), null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            Command addCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            addCommand.execute();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            fail();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        } catch (CommandException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //            assertEquals(\"Please enter a name\", e.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    void execute_noNameGotSubject_exceptionThrown() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        final CheatSheetList cheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "            Command addCommand \u003d new AddCommand(new Printer(), cheatSheetList, null);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            LinkedHashMap\u003cCommandFlag, String\u003e linkedHashMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            linkedHashMap.put(CommandFlag.SUBJECT, null);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            addCommand.setFlagstodescriptionsMap(linkedHashMap);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            addCommand.execute();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            assertEquals(\"Name cannot be blank\", e.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        } catch (InterruptedException | IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assert true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 160,
      "brandontoh": 14,
      "adhy-p": 6
    }
  },
  {
    "path": "src/test/java/command/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ClearCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/CommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    public void testCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        // todo : implement this"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 6,
      "brandontoh": 16
    }
  },
  {
    "path": "src/test/java/command/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    void execute_validInput_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        final String userInput \u003d \"/find /k Details\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            FindCommand findCommand \u003d new FindCommand(parser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            findCommand.execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//    void execute_noArgument_exceptionThrown() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        final String userInput \u003d \"/find\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        CheatSheetList.clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            Command findCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            findCommand.execute();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        } catch (CommandException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            assertEquals(\"Please enter at least an argument\", e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 18,
      "brandontoh": 10,
      "adhy-p": 19
    }
  },
  {
    "path": "src/test/java/command/HelpTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class HelpTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 12
    }
  },
  {
    "path": "src/test/java/command/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import javax.swing.text.View;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ViewCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    void execute_validInput_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        final String userInput \u003d \"/view /i 2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        CheatSheetList.clear();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            Command viewCommand \u003d parser.parser(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            viewCommand.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//    void execute_noArgument_exceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        final String userInput \u003d \"/view something\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        CheatSheetList.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            CheatSheetList.add(new CheatSheet(\"Name\" + i, \"Language\" + i, \"Details\" + i));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            Command viewCommand \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            viewCommand.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        } catch (CommandException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//            assertEquals(\"Please enter a name or an index\", e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 18,
      "brandontoh": 12,
      "adhy-p": 18
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import settings.Settings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import java.sql.SQLOutput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    void parser_completeInput_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        final String userInput \u003d \"/add /n name /s subject\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        ArrayList\u003cCommandFlag\u003e argEnumList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        argEnumList.add(CommandFlag.NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        argEnumList.add(CommandFlag.SUBJECT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        ArrayList\u003cString\u003e detailsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        detailsList.add(\"name\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        detailsList.add(\"subject\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        HashMap\u003cCommandFlag, String\u003e flagsToDescriptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 2; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            flagsToDescriptions.put(argEnumList.get(i - 1), detailsList.get(i - 1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            Printer printer \u003d new Printer();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            Parser parser \u003d new Parser(printer, new Settings(printer));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            assertEquals(AddCommand.class, command.getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            assertEquals(flagsToDescriptions, command.getFlagstodescriptionsMap());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void parser_incompleteInput_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        String userInput \u003d \"dummy command\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            Printer printer \u003d new Printer();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            Parser parser \u003d new Parser(printer, new Settings(printer));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "            assertEquals(\"Please enter a valid command\", e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 15,
      "brandontoh": 16,
      "adhy-p": 28
    }
  },
  {
    "path": "src/test/java/storage/DataFileDestroyerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileDestroyerTest extends DataFileTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path sampleTest2 \u003d Paths.get(userDir, data, test, \"sample2.xml\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path sampleTest3 \u003d Paths.get(userDir, data, test, \"sample3.xml\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String sample2 \u003d \"sample2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String sample3 \u003d \"sample3\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void clearSingleFile_singleSampleTest_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet \u003d new CheatSheet(sample3,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test Success!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.add(testCheatSheet);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createDirectory(sampleTestDir);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createSampleFile(sampleTest3, empty);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File sampleFile3 \u003d sampleTest3.toFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testDestroyer.executeFunction(sample3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean isSampleRemoved \u003d !sampleFile3.exists();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!isSampleRemoved) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(sampleTest3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(sampleTestDir);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!isDataDirPresent) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(dataDir);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertTrue(isSampleRemoved);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void clearDirectory_multipleSampleTest_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "            shiftExistingDataFiles();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createDirectory(sampleTestDir);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createSampleFile(sampleTest2, empty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createSampleFile(sampleTest3, empty);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet2 \u003d new CheatSheet(sample2,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test Success!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet3 \u003d new CheatSheet(sample3,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test Success!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.add(testCheatSheet2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.add(testCheatSheet3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File sampleFile2 \u003d sampleTest2.toFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "        File sampleFile3 \u003d sampleTest3.toFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testDestroyer.executeFunction();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean isSampleRemoved \u003d !(sampleFile2.exists() || sampleFile3.exists());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!isSampleRemoved) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(sampleTest2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(sampleTest3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(sampleTestDir);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(dataDir);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "            restoreDataDir();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertTrue(isSampleRemoved);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 89
    }
  },
  {
    "path": "src/test/java/storage/DataFileReaderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileReaderTest extends DataFileTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String fileInput \u003d \"\u003cmain\u003e\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"\u003cfavourite\u003eYes\u003c/favourite\u003e\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"\u003csubject\u003eTest\u003c/subject\u003e\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"\u003ccontents\u003eTest Success!\u003c/contents\u003e\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"\u003c/main\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String invalidFileInput  \u003d \"garble garble garble \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path sampleTest4 \u003d Paths.get(userDir, data, test, \"sample4.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String sample4 \u003d \"sample4\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void readFile_name_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "            shiftExistingDataFiles();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createDirectory(sampleTestDir);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createSampleFile(sampleTest4, fileInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testReader.executeFunction();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(sampleTest4);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(sampleTestDir);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(dataDir);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "            restoreDataDir();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean isCheatSheetListEmpty \u003d testCheatSheetList.getSize() \u003d\u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String testName \u003d !isCheatSheetListEmpty"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "                ? testCheatSheetList.getList().get(0).getName()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "                : empty;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(sample4, testName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void readFile_subject_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "            shiftExistingDataFiles();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createDirectory(sampleTestDir);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createSampleFile(sampleTest4, fileInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testReader.executeFunction();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(sampleTest4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(sampleTestDir);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(dataDir);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "            restoreDataDir();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean isCheatSheetListEmpty \u003d testCheatSheetList.getSize() \u003d\u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String testSubject \u003d !isCheatSheetListEmpty"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "                ? testCheatSheetList.getList().get(0).getSubject() :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "                empty;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(\"Test\", testSubject);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void readFile_details_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "            shiftExistingDataFiles();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createDirectory(sampleTestDir);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createSampleFile(sampleTest4, fileInput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testReader.executeFunction();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(sampleTest4);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(sampleTestDir);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(dataDir);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "            restoreDataDir();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean isCheatSheetListEmpty \u003d testCheatSheetList.getSize() \u003d\u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String testSubject \u003d !isCheatSheetListEmpty"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "                ? testCheatSheetList.getList().get(0).getDetails() :"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "                empty;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(\"Test Success!\", testSubject);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void readFile_invalidFile_notAdded() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "            shiftExistingDataFiles();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createDirectory(sampleTestDir);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createSampleFile(sampleTest4, invalidFileInput);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testReader.executeFunction();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(sampleTest4);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(sampleTestDir);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(dataDir);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": "            restoreDataDir();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int finalListSize \u003d testCheatSheetList.getSize();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(0, finalListSize);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 132
    }
  },
  {
    "path": "src/test/java/storage/DataFileTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import cheatsheet.CheatSheetList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "import settings.Settings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "import ui.Printer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abnermtj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String userDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String data \u003d \"data\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String temp \u003d \"temp\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String test \u003d \"Test\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String empty \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String sample \u003d \"sample\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path sampleTestDir \u003d Paths.get(userDir, data, test);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path dataDir \u003d Paths.get(userDir, data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path tempDir \u003d Paths.get(userDir, temp);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path tempDataDir \u003d Paths.get(userDir, temp, data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "adhy-p"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "    Printer printer \u003d new Printer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    Settings settings \u003d new Settings(printer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    CheatSheetList testCheatSheetList \u003d new CheatSheetList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    DataFileReader testReader \u003d new DataFileReader(settings, printer, testCheatSheetList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "    DataFileWriter testWriter \u003d new DataFileWriter(settings, printer, testCheatSheetList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "    DataFileDestroyer testDestroyer \u003d new DataFileDestroyer(printer, testCheatSheetList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void createDirectory(Path directoryPath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createDirectories(directoryPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            printer.print(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void createSampleFile(Path fileName, String fileContent) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.createFile(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.writeString(fileName, fileContent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abnermtj"
        },
        "content": "            printer.print(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void eraseFile(Path fileName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theopin"
        },
        "content": "        fileName.toFile().delete();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void shiftExistingDataFiles() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createDirectory(tempDir);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.move(dataDir, tempDataDir);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void restoreDataDir() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": "            Files.move(tempDataDir, dataDir);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(tempDir);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": "    boolean checkDataDirectoryExistence() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "        return Files.exists(dataDir);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abnermtj": 5,
      "theopin": 66,
      "adhy-p": 6
    }
  },
  {
    "path": "src/test/java/storage/DataFileWriterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theopin"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theopin"
        },
        "content": "import cheatsheet.CheatSheet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theopin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theopin"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theopin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theopin"
        },
        "content": "public class DataFileWriterTest extends DataFileTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String fileInput \u003d \"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"no\\\"?\u003e\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"\u003cmain\u003e\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"    \u003cfavourite\u003eNo\u003c/favourite\u003e\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"    \u003csubject\u003eTest\u003c/subject\u003e\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"    \u003ccontents\u003eTest Success!\u003c/contents\u003e\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"\u003c/main\u003e\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theopin"
        },
        "content": "    String fileInput2 \u003d \"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"no\\\"?\u003e\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"\u003cmain\u003e\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"    \u003cfavourite\u003eNo\u003c/favourite\u003e\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"    \u003csubject\u003eTest\u003c/subject\u003e\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"    \u003ccontents\u003eTest Updated Success!\u003c/contents\u003e\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + \"\u003c/main\u003e\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theopin"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theopin"
        },
        "content": "    Path sampleTest \u003d Paths.get(userDir, data, test, \"sample.xml\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void writeDataFiles_emptyTestCheatSheetList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!isDataDirPresent) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createDirectory(dataDir);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String[] userDirectoryFiles \u003d dataDir.toFile().list();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "adhy-p"
        },
        "content": "        final int expectedFiles \u003d userDirectoryFiles !\u003d null ? userDirectoryFiles.length + 1 : 1; // +1 for settings.txt"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testWriter.executeFunction();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theopin"
        },
        "content": "        userDirectoryFiles \u003d dataDir.toFile().list();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!isDataDirPresent) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(dataDir);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theopin"
        },
        "content": "        int directoryFiles \u003d userDirectoryFiles !\u003d null ? userDirectoryFiles.length : 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertEquals(expectedFiles, directoryFiles);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void writeFileExists_sampleCheatsheet_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!isDataDirPresent) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createDirectory(dataDir);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet \u003d new CheatSheet(sample,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test Success!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.add(testCheatSheet);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testWriter.executeFunction();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean isSampleAdded \u003d sampleTest.toFile().exists();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isSampleAdded) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(sampleTest);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(sampleTestDir);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!isDataDirPresent) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(dataDir);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertTrue(isSampleAdded);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void writeFileContents_sampleCheatsheet_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!isDataDirPresent) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createDirectory(dataDir);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet \u003d new CheatSheet(sample,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test Success!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.add(testCheatSheet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testWriter.executeFunction();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String writtenFile \u003d empty;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theopin"
        },
        "content": "            writtenFile \u003d Files.readString(sampleTest);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(e.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (sampleTest.toFile().exists()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theopin"
        },
        "content": "                eraseFile(sampleTest);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(sampleTestDir);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (!isDataDirPresent) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theopin"
        },
        "content": "                eraseFile(dataDir);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theopin"
        },
        "content": "            testCheatSheetList.clear();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theopin"
        },
        "content": "            assertEquals(fileInput, writtenFile);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void writeFileExists_missingUserDir_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theopin"
        },
        "content": "            shiftExistingDataFiles();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet \u003d new CheatSheet(sample,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test Success!\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.add(testCheatSheet);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testWriter.executeFunction();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theopin"
        },
        "content": "        boolean isSampleAdded \u003d sampleTest.toFile().exists();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isSampleAdded) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(sampleTest);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(sampleTestDir);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "theopin"
        },
        "content": "        eraseFile(dataDir);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (isDataDirPresent) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "theopin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "theopin"
        },
        "content": "                Files.move(tempDataDir, dataDir);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "theopin"
        },
        "content": "                eraseFile(tempDir);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "theopin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "theopin"
        },
        "content": "                printer.print(e.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "theopin"
        },
        "content": "        assertTrue(isSampleAdded);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "theopin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "theopin"
        },
        "content": "    void writeFileContents_existingCheatsheet_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "theopin"
        },
        "content": "        final boolean isDataDirPresent \u003d checkDataDirectoryExistence();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "theopin"
        },
        "content": "        if (!isDataDirPresent) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "theopin"
        },
        "content": "            createDirectory(dataDir);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "theopin"
        },
        "content": "        createSampleFile(sampleTest, fileInput);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.clear();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "theopin"
        },
        "content": "        CheatSheet testCheatSheet \u003d new CheatSheet(sample,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "theopin"
        },
        "content": "                \"Test Updated Success!\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testCheatSheetList.add(testCheatSheet);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "theopin"
        },
        "content": "        testWriter.executeFunction();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "theopin"
        },
        "content": "        String writtenFile \u003d empty;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "theopin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "theopin"
        },
        "content": "            writtenFile \u003d Files.readString(sampleTest);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "theopin"
        },
        "content": "            printer.print(e.getMessage());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "theopin"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (sampleTest.toFile().exists()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "theopin"
        },
        "content": "                eraseFile(sampleTest);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "theopin"
        },
        "content": "            eraseFile(sampleTestDir);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "theopin"
        },
        "content": "            if (!isDataDirPresent) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "theopin"
        },
        "content": "                eraseFile(dataDir);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "theopin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "theopin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "theopin"
        },
        "content": "            testCheatSheetList.clear();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "theopin"
        },
        "content": "            assertEquals(fileInput2, writtenFile);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "theopin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "theopin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "theopin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theopin": 201,
      "adhy-p": 1
    }
  },
  {
    "path": "src/test/java/ui/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    public void displayWelcomeScreen() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void askForUserInput() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void printExitMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandontoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    void printCheatSheet() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandontoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandontoh": 25
    }
  }
]
