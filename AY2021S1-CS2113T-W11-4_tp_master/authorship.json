[
  {
    "path": "data/Quizzes/Misc/Jokes/Chicken.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Topic: Misc"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Sub-topic: Jokes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Question title: Chicken"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Question type: QNA"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Question: Why did the chicken cross the road?"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Answer: To get to the other side"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 7
    }
  },
  {
    "path": "data/history.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "----------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Username: John Doeh"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Number of quizzes taken: 3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quizzes taken: 1 | 4 | 8"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 1 | 10 | 5"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 4 | 20 | 10"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 8 | 20 | 10"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "----------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q1: 1 | 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q2: 1 | 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q3: 1 | 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q4: 1 | 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q5: 1 | 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q6: 1 | 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q7: 1 | 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q8: 1 | 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q9: 1 | 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q10: 1 | 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "----------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 4"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q1: 1 | 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q2: 1 | 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q3: 1 | 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q4: 1 | 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q5: 1 | 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q6: 1 | 0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q7: 1 | 0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q8: 1 | 0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q9: 1 | 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q10: 1 | 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q11: 1 | 1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q12: 1 | 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q13: 1 | 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q14: 1 | 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q15: 1 | 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q16: 1 | 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q17: 1 | 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q18: 1 | 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q19: 1 | 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q20: 1 | 0"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": "----------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 8"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q1: 1 | 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q2: 1 | 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q3: 1 | 1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q4: 1 | 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q5: 1 | 1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q6: 1 | 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q7: 1 | 0"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q8: 1 | 0"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q9: 1 | 0"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q10: 1 | 0"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q11: 1 | 1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q12: 1 | 1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q13: 1 | 1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q14: 1 | 1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q15: 1 | 1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q16: 1 | 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q17: 1 | 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q18: 1 | 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q19: 1 | 0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q20: 1 | 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Promethees"
        },
        "content": "----------------------------"
      }
    ],
    "authorContributionMap": {
      "Promethees": 64
    }
  },
  {
    "path": "data/userSettings.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Username: John Doe"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider Choice: 1"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 2
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Vo Quang Hung | [Github](https://github.com/) | [Portfolio](team/johndoe.md) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](team/johndoe.md) "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Amelia Tan | [Github](https://github.com/) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Minh thong | [Github](https://github.com/) | [Portfolio](team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 5,
      "AmeliaTYR": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.commands.CommandChecker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.Logos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.commands.CommandChecker.UNRECOGNISED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.commands.CommandChecker.extractCommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.database.UserSettingsLoader.loadUserSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.functions.CommandExecutor.executeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.getUserInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printDivider;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printFarewellMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printHelloMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Settings set to defaults."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static final int NUMBER_OF_SETTINGS \u003d 1; // currently only username"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String username \u003d \"User\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cString\u003e savedSettings \u003d new ArrayList\u003c\u003e(NUMBER_OF_SETTINGS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Main entry-point for the Fluffle application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        setUserSettingsArrayList(savedSettings, username);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        loadUserSettings(savedSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        username \u003d savedSettings.get(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Write a story with\\n\" + Logos.BIG_FLUFFLE_LOGO);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printHelloMessage(username);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        CommandChecker commandChecker \u003d UNRECOGNISED;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (commandChecker !\u003d CommandChecker.EXIT) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d getUserInput(SCANNER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            commandChecker \u003d extractCommandType(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            executeCommand(commandChecker, userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printFarewellMessage(username);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //        while (!isExit) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //            switch (SCANNER.next()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //            case \"noun\": {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                String input \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                WordList.addNoun(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //            case \"verb\": {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                String input \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                WordList.addVerb(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //            case \"adj\": {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                String input \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                WordList.addAdjective(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //            case \"list\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                WordList.listWords();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //            default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                isExit \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Set the values in the array for the saved settings."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings Array of saved settings"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username      User input name"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static void setUserSettingsArrayList(ArrayList\u003cString\u003e savedSettings, String username) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        savedSettings.add(username);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 65,
      "hungvo0603": 15,
      "thngyuxuan": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommands.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.database.QuestionSavers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.exceptions.CommandTagMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.exceptions.QuestionTypeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.FillBlank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Qna;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class AddCommands {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    // Sample command to add questions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    // qna tp\\topic st\\subTopic qn\\questionName qns\\question ans\\answer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    // fillblank tp\\topic st\\subTopic qn\\questionName sb\\stringBefore bl\\blank sa\\stringAfter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    // mcq tp\\topic st\\subTopic qn\\questionName qns\\question ans\\answer wa1\\ wa2\\ wa3\\ wa4\\"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static final ArrayList\u003cInteger\u003e indexesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    public static void addQuestion() throws QuestionTypeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        System.out.println(\"Input add function, exit by command \\\"exit\\\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String command \u003d CommandChecker.getUserInput();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        while (!command.equalsIgnoreCase(\"exit\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            switch (CommandChecker.commandType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case QNA:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                addQnaQuestion(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case FILLBLANK:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                addFillBlankQuestion(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                throw new QuestionTypeException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            command \u003d CommandChecker.getUserInput();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void addQnaQuestion(String command) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            getIndexesOfTagsFromQna(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (CommandTagMissingException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"Your Qna command tags are missing somewhere ...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String topic \u003d extractTagInformationFromCommand(command, \"topic\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String subTopic \u003d extractTagInformationFromCommand(command, \"subTopic\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String questionName \u003d extractTagInformationFromCommand(command, \"questionName\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String question \u003d extractTagInformationFromCommand(command, \"question\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String answer \u003d extractTagInformationFromCommand(command, \"answer\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            QuestionSavers.saveFillBlankAndQnaQuestionToNewFile(topic, subTopic,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    questionName, new Qna(answer, question));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (QuestionTypeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"Input code failed to create correct question type\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void addFillBlankQuestion(String command) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            getIndexesOfTagsFromFillBlank(command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (CommandTagMissingException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"Your FB command tags are missing somewhere ...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String topic \u003d extractTagInformationFromCommand(command, \"topic\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String subTopic \u003d extractTagInformationFromCommand(command, \"subTopic\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String questionName \u003d extractTagInformationFromCommand(command, \"questionName\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String stringBefore \u003d extractTagInformationFromCommand(command, \"stringBefore\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String blank \u003d extractTagInformationFromCommand(command, \"blank\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String stringAfter \u003d extractTagInformationFromCommand(command, \"stringAfter\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            QuestionSavers.saveFillBlankAndQnaQuestionToNewFile(topic, subTopic,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    questionName, new FillBlank(blank, stringBefore, stringAfter));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (QuestionTypeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"Input code failed to create correct question type\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void getIndexesOfTagsFromQna(String command) throws CommandTagMissingException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.clear();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"tp\\\\\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"st\\\\\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"qn\\\\\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"qns\\\\\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"ans\\\\\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.length());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        Collections.sort(indexesList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (indexesList.contains(-1)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throw new CommandTagMissingException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void getIndexesOfTagsFromFillBlank(String command) throws CommandTagMissingException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"tp\\\\\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"st\\\\\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"qn\\\\\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"sb\\\\\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"bl\\\\\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"sa\\\\\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.length());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        Collections.sort(indexesList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (indexesList.contains(-1)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throw new CommandTagMissingException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void getIndexesOfTagsFromMcq(String command) throws CommandTagMissingException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"tp\\\\\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"st\\\\\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"qn\\\\\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"qns\\\\\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"ans\\\\\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"wa1\\\\\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"wa2\\\\\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"wa3\\\\\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (command.contains(\"w4\\\\\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            indexesList.add(command.indexOf(\"w4\\\\\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.length());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        Collections.sort(indexesList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (indexesList.contains(-1)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throw new CommandTagMissingException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // Throws Error if any of the indexes is -1"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static String extractTagInformationFromCommand(String command, String extract) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // TODO: Exceptions: extract is not one of the three tp, st, qn"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        for (int i \u003d 1; i \u003c indexesList.size() - 1; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            String tag \u003d command.substring(indexesList.get(i), indexesList.get(i + 1));;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            if (tag.trim().startsWith(\"tp\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"topic\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                return tag.replace(\"tp\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            if (tag.trim().startsWith(\"st\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"subTopic\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                return tag.replace(\"st\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            if (tag.trim().startsWith(\"qn\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"questionName\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                return tag.replace(\"qn\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            boolean hasQuestionTag \u003d tag.trim().startsWith(\"qns\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"question\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            boolean hasAnswerTag \u003d tag.trim().startsWith(\"ans\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"answer\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            switch (CommandChecker.commandType) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case QNA:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (hasQuestionTag) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"qns\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (hasAnswerTag) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"ans\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case MCQ:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (hasQuestionTag) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"qns\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (hasAnswerTag) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"ans\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"wa1\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"wrongAnswer1\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"wa1\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"wa2\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"wrongAnswer2\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"wa2\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"wa3\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"wrongAnswer3\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"wa3\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (!command.contains(\"wa4\\\\\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"wa4\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"wrongAnswer4\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"wa4\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case FILLBLANK:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"sb\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"stringBefore\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"sb\\\\\",\"\").trim();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"bl\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"blank\")) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"bl\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"sa\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"stringAfter\")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"sa\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                return null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 12,
      "AmeliaTYR": 211
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CommandChecker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public enum CommandChecker {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    USERNAME,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DIVIDER,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    NOUN,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    VERB,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    ADJ,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_WORDS,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_WORDS,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    NAME,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    GEN_NAME,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_NAMES,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_NAMES,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    BUNNY,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_BUNNY,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_BUNNY,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    STATS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    UNRECOGNISED;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static CommandChecker commandChecker;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static String getUserInput() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        System.out.print(\"You: \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String inputLine \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        while (inputLine.trim().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.println(\"Oops! Command cannot be empty\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            inputLine \u003d SCANNER.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        commandChecker \u003d extractCommandType(inputLine.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return inputLine.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *  Figure out the command type from userInput."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput string containing user input command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return the type of command detected"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static CommandChecker extractCommandType(String userInput) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (userInput.toLowerCase().trim().startsWith(\"help\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return CommandChecker.HELP;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"username\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.USERNAME;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"divider\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.DIVIDER;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"noun\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.NOUN;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"verb\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.VERB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"adj\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.ADJ;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"list words\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.LIST_WORDS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"bunny\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.BUNNY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"list bunny\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.LIST_BUNNY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"exit\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return CommandChecker.EXIT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return CommandChecker.UNRECOGNISED;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 35,
      "AmeliaTYR": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/ClickerMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClickerMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Greeting message formats. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FAREWELL_GREETING \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Bye %1$s! Hope to see you again soon!\" + NEWLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELLO_GREETING \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Hello %1$s! Welcome to Fluffle!\" + NEWLINE + \"What can I do for you?\" + NEWLINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Settings loader messages."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ERROR_READING_FILE_ON_LINE_MSG_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Error reading settings file! Error on line:\" + NEWLINE + \"%1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOADING_SETTINGS_MSG \u003d \"Loading userSettings.txt save file...\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SETTINGS_FILE_EMPTY_MSG \u003d \"userSettings.txt save file empty\" + NEWLINE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"No previous settings loaded\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SETTINGS_FILE_NOT_FOUND_MSG \u003d \"userSettings.txt save file not found\" + NEWLINE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"Creating new file...\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String LOADING_HISTORY_MSG \u003d \"Loading history.txt save file...\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String HISTORY_FILE_EMPTY_MSG \u003d \"history.txt save file empty\" + NEWLINE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            + \"No previous settings loaded\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String HISTORY_FILE_NOT_FOUND_MSG \u003d \"history.txt save file not found\" + NEWLINE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            + \"Creating new file...\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** File creator function messages.  */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEW_FILE_CREATED_MSG_FORMAT \u003d \"New file created\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String IO_ERROR_WHEN_MAKING_FILE_MSG \u003d \"IO error when making file!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_ALREADY_EXISTS_MSG \u003d \"File already exists.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_CREATED_PATH_MSG \u003d \"File created\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DIRECTORY_CREATED_SUCCESSFULLY_MSG \u003d \"Directory created successfully\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String COULD_NOT_CREATE_DIRECTORY_MSG \u003d \"Sorry, could not create specified directory\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_PATH_TO_DIRECTORY_INVALID_MSG \u003d \"File path to directory invalid!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_NOT_FOUND_MSG \u003d \"File does not exist.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_AUTO_CREATED_MSG \u003d \"Auto creating new file\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String ADD_NOUN_MSG \u003d \"Added the following noun:\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String ADD_VERB_MSG \u003d \"Added the following verb:\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String ADD_ADJECTIVE_MSG \u003d \"Added the following adjective:\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String LIST_WORDS_MSG \u003d \"Here are the words stored in the program:\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 27,
      "thngyuxuan": 5,
      "Promethees": 5,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/DataFileConvention.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class DataFileConvention {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Separates different data components. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String COMPONENT_DIVIDER \u003d \"----------------------------\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/FilePaths.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Default file paths for save files."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FilePaths {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Default path to file for saving settings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static final String DEFAULT_USER_SETTINGS_FILE_PATH \u003d \"/data\" + File.separator + \"userSettings.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Test file path to see where the files save."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TEST_FILE_PATH \u003d \"testFile.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Path to store user past history."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String HISTORY_FILE_PATH \u003d \"data/history.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * The general path to store the statistics of the past quizzes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String STATS \u003d \"data/Stats/stats\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 15,
      "AmeliaTYR": 9,
      "Promethees": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/InputMarkers.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Special symbols to mark specific strings."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InputMarkers {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Used to mark off comment lines in the text-ui-test input.  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INPUT_COMMENT_MARKER \u003d \"#\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/Logos.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logos {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BIG_FLUFFLE_LOGO \u003d \"  ______ _        __  __ _\\n\" + \" |  ____| |      / _|/ \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"_| |\\n\" + \" | |__  | |_   _| |_| |_| | ___\\n\" + \" |  __| | | | | |  _|  _| |/ _ \\\\\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \" | |    |\" + \" | |_| | | | | | |  __/\\n\" + \" |_|    |_|\\\\__,_|_| |_| |_|\\\\___|\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    // line divider options"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PLAIN_TEXT_DIVIDER \u003d \"--------------------------------------------------------------\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CAT_TEXT_DIVIDER \u003d \"\u003d^..^\u003d  \u003d^..^\u003d  \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FENCE_TEXT_DIVIDER \u003d \"+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String custom_line_divider \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static final String VERSION \u003d \"Fluffle -Version 1.0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INPUT_COMMENT_MARKER \u003d \"#\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/RegexStrings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Regex strings used for comparison and format checking."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class RegexStrings {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Regex to detect a blank line. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BLANK_STRING_REGEX \u003d \"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/Tags.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Tags {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Settings file loader tags. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    //public static final String DIVIDER_CHOICE_TAG \u003d \"Divider choice:\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USERNAME_TAG \u003d \"Username:\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/FileFunctions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.FilePathInvalidException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.COULD_NOT_CREATE_DIRECTORY_MSG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.DIRECTORY_CREATED_SUCCESSFULLY_MSG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.FILE_ALREADY_EXISTS_MSG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.FILE_AUTO_CREATED_MSG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.FILE_CREATED_PATH_MSG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.FILE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.FILE_PATH_TO_DIRECTORY_INVALID_MSG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.IO_ERROR_WHEN_MAKING_FILE_MSG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.NEW_FILE_CREATED_MSG_FORMAT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.InputMarkers.INPUT_COMMENT_MARKER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.NEWLINE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.RegexStrings.BLANK_STRING_REGEX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FileFunctions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Get a file from file path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath given file path"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return file object retrieved from the given file path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static File getFileFromFilePath(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File fileFound \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileFound;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * check if a file exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param file a given file to check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileNotFoundException the file to check was not found"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void checkFileExists(java.io.File file) throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Writes a double new line to the file to create one blank line of space."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath given file path"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws IOException unable to write to file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void writeDoubleNewlineToFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        appendsStringToFile(NEWLINE, filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        appendsStringToFile(NEWLINE, filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Appends the string to the given file specified by filePath."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param textToAppend string to be appended to the file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath filepath to the file"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws IOException unable to write to file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void appendsStringToFile(String textToAppend, String filePath) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        java.io.FileWriter fw \u003d new java.io.FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fw.write(textToAppend);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Continue reading through a file until a specific string is found."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param stringSearched indicator string"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileScanner    scanner for scanning a file"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the line the string is on"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String readFileUntilLineContainsString(String stringSearched, Scanner fileScanner) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileInput \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // read each setting and return the variables accordingly"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileInput \u003d getFileNextLine(fileScanner);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (fileInput.contains(stringSearched)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileInput;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Read non-blank lines of the file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileScanner scanner to read through lines in the file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return a non blank line read from the file"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getFileNextLine(Scanner fileScanner) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileInput;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileInput \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (fileInput.matches(BLANK_STRING_REGEX)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                || fileInput.startsWith(INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileInput;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Create a new file at the specified file path."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath specified file path"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return absolute path of the new path"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String autoCreateNewFile(String filePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(FILE_AUTO_CREATED_MSG);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        filePath \u003d pathReplaceIllegalCharacters(filePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkFileExists(newFile);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make the directory"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String directoryPath;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String txtFileName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placements"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int endOfDirectoryName \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int endOfFileName \u003d filePath.indexOf(\".txt\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check if placement is correct"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endOfDirectoryName \u003d\u003d -1 || endOfFileName \u003d\u003d -1) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    directoryPath \u003d filePath.substring(0, endOfDirectoryName);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    txtFileName \u003d filePath.substring(endOfDirectoryName + 1, endOfFileName).trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating a File object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File file \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating the directory"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isFileCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (isFileCreated) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(DIRECTORY_CREATED_SUCCESSFULLY_MSG);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                filePath \u003d directoryPath + \"/\" + txtFileName + \".txt\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(COULD_NOT_CREATE_DIRECTORY_MSG);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FilePathInvalidException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(FILE_PATH_TO_DIRECTORY_INVALID_MSG);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make the file"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (newFile.createNewFile()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(FILE_CREATED_PATH_MSG);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(FILE_ALREADY_EXISTS_MSG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(IO_ERROR_WHEN_MAKING_FILE_MSG);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(NEW_FILE_CREATED_MSG_FORMAT);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return newFile.getAbsolutePath();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Replace \u0027\\\u0027 with \u0027/\u0027 characters in file paths variables."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param path a file path with illegal characters"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the path without illegal characters"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String pathReplaceIllegalCharacters(String path) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return path.replace(\u0027\\\\\u0027, \u0027/\u0027);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 9,
      "AmeliaTYR": 182
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/HistoryLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.parsers.Parsers;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.constants.ClickerMessages.ERROR_READING_FILE_ON_LINE_MSG_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.constants.ClickerMessages.LOADING_HISTORY_MSG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.constants.ClickerMessages.HISTORY_FILE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.constants.FilePaths.HISTORY_FILE_PATH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.constants.Tags.USERNAME_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.database.FileFunctions.autoCreateNewFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.database.FileFunctions.readFileUntilLineContainsString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//public class HistoryLoader {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    public static void loadHistorySettings(ArrayList\u003cString\u003e savedHistory) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        System.out.println(LOADING_HISTORY_MSG);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            File userHistoryFile \u003d FileFunctions.getFileFromFilePath(HISTORY_FILE_PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            FileFunctions.checkFileExists(userHistoryFile);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            readUserSettingsFile(savedHistory, userHistoryFile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(HISTORY_FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            autoCreateNewFile(HISTORY_FILE_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void readUserSettingsFile(ArrayList\u003cString\u003e savedHistory, File userHistoryfile)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throws FileNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        Scanner userHistoryFileScanner \u003d new Scanner(userHistoryfile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String username \u003d \"temp\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            String parsedString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            fileLine \u003d readFileUntilLineContainsString(USERNAME_TAG, userHistoryFileScanner);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            parsedString \u003d Parsers.parseFileObject(fileLine, USERNAME_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                username \u003d parsedString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                setUserHistoryArrayUsername(savedHistory, username);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.printf(ERROR_READING_FILE_ON_LINE_MSG_FORMAT, fileLine);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    public static void setUserHistoryArrayUsername(ArrayList\u003cString\u003e savedHistory, String username) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        savedHistory.set(0, username);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 57
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/QuestionLoaders.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.exceptions.FilePathInvalidException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.FillBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Qna;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//public class QuestionLoaders {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * Gets details of FillBlank and Qna questions in the text file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param directoryPath Directory containing the question text file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param fileName The name of the file in the directory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @return Question object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @throws FilePathInvalidException File path is incorrectly formatted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    public static Question loadFillBlankAndQnaQuestion(String directoryPath, String fileName)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throws FilePathInvalidException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // TODO: Check validity of directoryPath and fileName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        File directory \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        File f \u003d new File(directoryPath + \"\\\\\" + fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (!directory.exists()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        Question question \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            FileReader fr \u003d new FileReader(f);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            question \u003d getFillBlankAndQnaFromFile(br, fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            br.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        return question;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static Question getFillBlankAndQnaFromFile(BufferedReader br, String fileName) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String line \u003d br.readLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        while (line !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            lines.add(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            line \u003d br.readLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (fileName.contains(\"_fb.txt\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            filterFillBlankQuestionLines(lines);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            return new FillBlank(lines.get(0), lines.get(1), lines.get(2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } else { // if (fileName.contains(\"_qna.txt\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            filterQnaQuestionLines(lines);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            return new Qna(lines.get(0), lines.get(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void filterQnaQuestionLines(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            String cutString;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            switch (i) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case 0:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d lines.get(i).replace(\"question: \", \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case 1:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d lines.get(i).replace(\"answer: \", \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d \"ERROR\"; // throw error"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                System.out.println(\"Error\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            lines.set(i, cutString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void filterFillBlankQuestionLines(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            String cutString;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            switch (i) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case 0:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d lines.get(i).replace(\"string before: \", \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case 1:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d lines.get(i).replace(\"blank: \", \"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case 2:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d lines.get(i).replace(\"string after: \", \"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d \"ERROR\"; // throw error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                System.out.println(\"Error\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            lines.set(i, cutString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 105
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/QuestionSavers.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.exceptions.QuestionTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.FillBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Qna;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//public class QuestionSavers {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * Creates a new file storing FillBlank and Qna questions into the database."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * File questionName.txt is created under topic/subTopic."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param topic Topic directory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param subTopic Sub-directory under topic."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param questionName Question file name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param question An object of Question type."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @throws QuestionTypeException Couldn\u0027t recognize question type."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    public static void saveFillBlankAndQnaQuestionToNewFile(String topic, String subTopic, String questionName,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                                                            Question question) throws QuestionTypeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // TODO: Check validity of topic, subTopic and questionName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // Creates a new directory for the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String filePathWithoutQuestionName \u003d \"\\\\data\\\\Quizzes\\\\\" + topic + \"\\\\\" + subTopic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        File directory \u003d new File(filePathWithoutQuestionName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (directory.mkdirs()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"A directory has just been created\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.printf(\"Opening %s ...\\n\", filePathWithoutQuestionName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // Creates a new _fb.txt / _qna.txt file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String textToWrite;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String suffices;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (question instanceof FillBlank) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            textToWrite \u003d \"string before: \" + ((FillBlank) question).getStringBefore() + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    + \"blank: \" + question.getCorrectAnswer() + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    + \"string after: \" + ((FillBlank) question).getStringAfter();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            suffices \u003d \"_fb.txt\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } else if (question instanceof Qna) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            textToWrite \u003d \"question: \" + question.getQuestion() + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    + \"answer: \" + question.getCorrectAnswer();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            suffices \u003d \"_qna.txt\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throw new QuestionTypeException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String filePathWithQuestionName \u003d filePathWithoutQuestionName + \"\\\\\" + questionName + suffices;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        File f \u003d new File(filePathWithQuestionName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"File name: \" + f.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            FileWriter fw \u003d new FileWriter(f.getAbsoluteFile());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            fw.write(textToWrite);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            fw.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"Cannot write to file\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        System.out.println(f.getAbsolutePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/UserSettingsLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.parsers.Parsers;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.ERROR_READING_FILE_ON_LINE_MSG_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.LOADING_SETTINGS_MSG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.SETTINGS_FILE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FilePaths.DEFAULT_USER_SETTINGS_FILE_PATH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FilePaths.TEST_FILE_PATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.USERNAME_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.FileFunctions.autoCreateNewFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.FileFunctions.readFileUntilLineContainsString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class UserSettingsLoader {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void loadUserSettings(ArrayList\u003cString\u003e savedSettings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(LOADING_SETTINGS_MSG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File userSettingsFile \u003d FileFunctions.getFileFromFilePath(DEFAULT_USER_SETTINGS_FILE_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(userSettingsFile.getAbsolutePath());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.checkFileExists(userSettingsFile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            readUserSettingsFile(savedSettings, userSettingsFile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(SETTINGS_FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            autoCreateNewFile(DEFAULT_USER_SETTINGS_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //autoCreateNewFile(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void readUserSettingsFile(ArrayList\u003cString\u003e savedSettings, File userSettingsFile)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Scanner userSettingsFileScanner \u003d new Scanner(userSettingsFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String username \u003d \"temp\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String parsedString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(USERNAME_TAG, userSettingsFileScanner);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, USERNAME_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                username \u003d parsedString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                setUserSettingsArrayUsername(savedSettings, username);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.printf(ERROR_READING_FILE_ON_LINE_MSG_FORMAT, fileLine);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Sets the default settings to saved settings array."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings array of saved settings"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username      user input name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void setUserSettingsArrayUsername(ArrayList\u003cString\u003e savedSettings, String username) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(0, username);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 4,
      "AmeliaTYR": 65
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CommandTagMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class CommandTagMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/FileEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FileEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/FilePathInvalidException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FilePathInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/QuestionTypeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class QuestionTypeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/SettingObjectWrongFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SettingObjectWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/functions/CommandExecutor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.functions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.commands.CommandChecker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.wordlist.WordList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printHelpMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CommandExecutor {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void executeCommand(CommandChecker commandChecker, String userInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (commandChecker) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printHelpMessage(userInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case USERNAME:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // change username"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DIVIDER:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // choose divider type"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case NOUN:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.addNoun(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case VERB:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.addVerb(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADJ:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.addAdjective(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case LIST_WORDS:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.listWords();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case BUNNY:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case LIST_BUNNY:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case STATS:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //print user stats"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //clear all quizzes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //close the program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //print confused message"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/parsers/Parsers.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.InputMarkers.INPUT_COMMENT_MARKER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.RegexStrings.BLANK_STRING_REGEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Parsers {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the value string from line in settings save file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileLine    a line read from the file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param objectTitle the string indicating the type of object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return returns the setting extracted from line in the settings file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SettingObjectWrongFormatException the linel in the settings file was wrongly formatted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String parseFileObject(String fileLine, String objectTitle)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws SettingObjectWrongFormatException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int settingTitleLength \u003d objectTitle.length();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileObject;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int settingObjectPosition \u003d fileLine.indexOf(objectTitle);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if placement is correct"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (settingObjectPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SettingObjectWrongFormatException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileObject \u003d fileLine.substring(settingObjectPosition + settingTitleLength).trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new SettingObjectWrongFormatException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileObject;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Gets user input, ignore comments and blank lines."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param scanner Scanner object for console inputs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return raw user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getUserInput(Scanner scanner) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (userInput.matches(BLANK_STRING_REGEX)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                || userInput.startsWith(INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/settings/Settings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Settings {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected int dividerNum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Settings() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.dividerNum \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Setter for name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Setter for divider number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public void setDividerNum(int divider) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        if (divider \u003c 1 || divider \u003e 4) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            System.out.println(\"Enter a valid number 1 -4!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            this.dividerNum \u003d divider;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Getter for divider number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public int getDividerNum() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.dividerNum;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Getter for divider itself"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getDivider() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return UI.getDivider(this.dividerNum);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Getter for name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 2,
      "thngyuxuan": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/UI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.constants.ClickerMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.CAT_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.FENCE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Line divider set to default before settings are loaded. Default is the first one."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static String currentLineDivider \u003d getDivider(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Main Help function"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpMessage(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpAdd();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"settings\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpSettings();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"history\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"stats\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpStats();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"review\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpReview();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"quiz\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpQuiz();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpClear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelp();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] listCommands \u003d {\"add\", \"settings\", \"list\", \"history\", \"stats\", \"review\", \"quiz\", \"clear\", \"exit\"};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Type \u0027help c\\\\\u003cfunction name here\u003e\u0027 to view help for each command.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Available commands:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        for (String listCommand : listCommands) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            System.out.println(listCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Use the following format for the \u0027settings\u0027 command:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"settings n\\\\\u003cname\u003e d\\\\\u003cdivider option\u003e\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Example: settings n\\\\Alice d\\\\3\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpAdd() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Use the following format for the \u0027help\u0027 command:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        System.out.println(\"add t\\\\\u003ctopic\u003e st\\\\\u003csubtopic\u003e n\\\\\u003cquiz name\u003e mcq\\\\\u003cnumber of MCQ questions\u003e qna\\\\\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                + \"\u003cnumber of QNA questions\u003e fb\\\\ \u003cnumber of fill in the blanks questions\u003e\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Example: add t\\\\Science st\\\\Chemistry n\\\\stoichiometry quiz 1 mcq\\\\3 mrq\\\\0 qna\\\\4 fb\\\\2\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        System.out.println(\"This adds a quiz of topic \u0027Science\u0027, subtopic \u0027Chemistry\u0027 and named \u0027stoichiometry quiz 1\u0027\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                + \", with 3 MCQ questions, 0 MRQ questions, 4 QNA questions, and 2 fill in the blank questions.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"List all available quizzes by typing \u0027list\u0027.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpHistory() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Show history and results of quizzes taken in this session by typing \u0027history\u0027.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpStats() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Show your results and statistics of a specific quiz by typing \u0027quiz t\\\\QUIZ_INDEX\u0027.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Example: quiz t\\\\3\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpQuiz() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Start a quiz by typing \u0027quiz t\\\\QUIZ_INDEX\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Example: quiz t\\\\2 starts the quiz with QUIZ_INDEX 2.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpReview() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Show the answers for the selected quiz by typing \u0027review t\\\\QUIZ_INDEX\u0027.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"You can find the list of quizzes by QUIZ_INDEX by using the list command.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpClear() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        System.out.println(\"Delete all your saved quizzes in CLIcker by typing \u0027clear\u0027. \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                + \"A warning prompt will be generated before deletion.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpExit() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Exit the program by typing \u0027exit\u0027.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static String getDivider(int input) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        String divider \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        if (input \u003d\u003d 1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            divider \u003d PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (input \u003d\u003d 2) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            divider \u003d CAT_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (input \u003d\u003d 3) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            divider \u003d FENCE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return divider;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the personalised greeting message."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username user input name"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printHelloMessage(String username) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.printf(ClickerMessages.HELLO_GREETING, username);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the personalised farewell message."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username user indicated name"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFarewellMessage(String username) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.printf(ClickerMessages.FAREWELL_GREETING, username);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Prints the line divider to the console."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(currentLineDivider);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addNounMessage(String noun) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(ClickerMessages.ADD_NOUN_MSG + noun);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addVerbMessage(String verb) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(ClickerMessages.ADD_VERB_MSG + verb);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addAdjectiveMessage(String adj) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(ClickerMessages.ADD_ADJECTIVE_MSG + adj);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void listWordsMessage() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(ClickerMessages.LIST_WORDS_MSG);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 3,
      "AmeliaTYR": 30,
      "hungvo0603": 6,
      "thngyuxuan": 118,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/wordlist/WordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.wordlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Words;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Noun;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Verb;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Adjective;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class WordList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static ArrayList\u003cWords\u003e wordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to add noun to word list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @param input a string which contains"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     *              the word and its definition"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addNoun(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] splitInput \u003d input.split(\"/def\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        Words toAdd \u003d new Noun(splitInput[0],splitInput[1]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        wordList.add(toAdd);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.addNounMessage(toAdd.getDescription());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to add verb to word list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @param input a string which contains"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     *              the word and its definition"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addVerb(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] splitInput \u003d input.split(\"/def\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        Words toAdd \u003d new Verb(splitInput[0],splitInput[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        wordList.add(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.addVerbMessage(toAdd.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to add adjective to word list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @param input a string which contains"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     *              the word and its definition"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addAdjective(String input) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] splitInput \u003d input.split(\"/def\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        Words toAdd \u003d new Adjective(splitInput[0],splitInput[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        wordList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.addAdjectiveMessage(toAdd.getDescription());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void listWords() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.listWordsMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        for (int i \u003d 0; i \u003c wordList.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            System.out.println(i + \".\" + wordList.get(i).getDescription());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 56
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Adjective.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Adjective extends Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Adjective(String description, String definition) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        super(description, definition);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return \"adjective\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Noun.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Noun extends Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Noun(String description, String definition) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        super(description, definition);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return \"noun\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Verb.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Verb extends Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Verb(String description, String definition) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        super(description, definition);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return \"verb\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Words.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public abstract class Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected String definition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Words(String description, String definition) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.definition \u003d definition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to get the type of this word."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * i.e. Noun, Verb, or Adjective"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @return the type of this word"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getDefinition() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.definition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 26
    }
  }
]
