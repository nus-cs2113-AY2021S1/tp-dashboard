[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Promethees"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        attributes \"Main-Class\": \"com.baeldung.fatjar.Application\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    from {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 1,
      "Promethees": 23,
      "-": 46
    }
  },
  {
    "path": "data/Names.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "name 1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "name 2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "name 3"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 3
    }
  },
  {
    "path": "data/bunny.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "number of plot bunnies: 10"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: bunny idea 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: none"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "2."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: test idea 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: none"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: test idae"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: hlpe"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "4."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: cool idea"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: cool"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "5."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: some fun idea"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: fun"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "6."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: kind of awesome idea"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: awesome"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "7."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: some random idea"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: awesome"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "8."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: funny idea"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: fun"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "9."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: some strange idea"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: mystery"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "10."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: idea example"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: unknown"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 42
    }
  },
  {
    "path": "data/characters.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "number of characters: 2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "name:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "age:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "name:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "age:"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 7
    }
  },
  {
    "path": "data/userSettings.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Username: John Doe"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider Choice: 1"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 2
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![Vo Quang Hung](https://via.placeholder.com/100.png?text\u003dPhoto) | Vo Quang Hung | [Github](https://github.com/hungvo0603) | "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "![Aw Yong Wee](https://via.placeholder.com/100.png?text\u003dPhoto) | Aw Yong Wee | [Github](https://github.com/) |  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "![Thng Yu Xuan](https://via.placeholder.com/100.png?text\u003dPhoto) | Thng Yu Xuan | [Github](https://github.com/) | "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "![Amelia Tan](https://via.placeholder.com/100.png?text\u003dPhoto) | Amelia Tan | [Github](https://github.com/AmeliaTYR) | "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "![Tra Quang Minh Thong](https://via.placeholder.com/100.png?text\u003dPhoto) | Tra Quang Minh Thong | [Github](https://github.com/Promethees) |"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 1,
      "Promethees": 4,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "### Purpose"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "This document specified architecture and software design decisions for the creative writing assistant, Fluffle. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "### Scope"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "This describes the software architecture and software design decisions for the implementation of Fluffle. The intended audience of this document is the developers, designers, and software testers of Fluffle."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "### Design Goals"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Creating an app which improves users’ ability of writing and creativity. Developers should work closely with CS2113T’s module instructors, who represent technical advisors and CS2101’s module instructors, who represent non-technical advisors. By adhering to these tutors’ specific requirements, which imitate industrial professional standards, beginner software engineers will be able to levitate their expertises and mindset in the process of developing and presenting a new product."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "### Maintainability"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "With the aim of increasing maintainability of Fluffle, separated packages and classes were implemented in strict compliance with Object-oriented Programming. Since it is important to be able to easily change functionality of one class without disturbing other dependent classes, each class only serves one purpose to reduce dependency on other classes. With low coupling and high cohesion, subsequent developers can make minimal effort in maintaining Fluffle."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "## Definitions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "|Terminology|Explanation|"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "|Plot bunny|A story idea that refuses to go away until it is written down.|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "|Fluffle|A fluffle is a group of bunnies.| "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "|CLI|Command-line Interface. \u003c/br\u003e\u003c/br\u003eA command-line interface (CLI) processes command to a computer program in the form of lines of text. The program in the computer will read the command and start proceeding.|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "|Gradle|A build tool used for automated testing. It checks for code style violations and runs unit tests to ensure the code is functional between iterations.| "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "|IntelliJ|An integrated development environment that used to write and test java code.|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "**Prerequisites:**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "* IntelliJ IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "⚠ **Caution:**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Promethees"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Promethees"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "   1. Run the `java -jar duke.jar` and try a few commands."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": "   2. [Run the tests](Testing.md) to ensure they all pass. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": "//Note: should ask team W11-02 the permission for the above part."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Promethees"
        },
        "content": "## System Overview"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "### Technological view"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Promethees"
        },
        "content": "The Integrated Development Environment, IntelliJ, is used to develop our program. The program is written in Java, and uses Gradle for building and testing purposes. Our source code is mostly original, with some functions imported from the java.util package. The remaining packages and classes which form the structure of our program are independently developed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Promethees"
        },
        "content": "## Architecture"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "![UML Fluffle class diagram](https://github.com/AY2021S1-CS2113T-W11-4/tp/blob/master/docs/graphics/diagrams/classDiagram_Fluffle.png)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "\u003ccenter\u003e\u003ci\u003eFigure 1: Overview of Fluffle UML diagram\u003c/i\u003e\u003c/center\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Fluffle Documentation: This document contains all packages and classes that are used in developing Fluffle. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Promethees"
        },
        "content": "### Project overview"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Fluffle is built using IntelliJ and all concepts for the user interfaces, as well as the backend data management of the application, was created by our team. Due to the restrictions of the project, the main file format used for storage is .txt. We opted to save the data in the text files in a user readable format as opposed to the comma separated format as it is easier for users to directly refer to and edit their saved files."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Promethees"
        },
        "content": "## Writings class family"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Promethees"
        },
        "content": "### Constitution (member classes)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Promethees"
        },
        "content": "WritingList: Represent the objects which are particular lists of Writings to be used in the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Writings: Represent the objects of the writings, created from user’s input and stored in a database as text. This Writings class is also the parent of 2 subclasses which are Poem and Essay."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Poem: Represents the Writings objects which have type is Poem."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Essay: Represents the Writings objects which have type is Essay."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Promethees"
        },
        "content": "User: Represents the Users registered to the System"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![UML Class diagram for WritingList family](https://github.com/AY2021S1-CS2113T-W11-4/tp/blob/master/docs/graphics/diagrams/classDiagram_WritingList.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "\u003ccenter\u003e\u003ci\u003eFigure 2:WritingList family UML diagram\u003c/i\u003e\u003c/center\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Promethees"
        },
        "content": "The above class diagram describes the overall architecture of Writings class functionalities and associations within the scope of related classes. By checking “start”, “type” command with checkStartCommand() then checkTypeCommand() methods on that sequence respectively, the user should be able to access the process of creating and saving new writings into the database. During this process, the user has the ability of choosing their preferred type of writings(which are either poem or essay at this stage)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Promethees"
        },
        "content": "### Filter words"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![UML Filter word class diagram](https://github.com/AY2021S1-CS2113T-W11-4/tp/blob/master/docs/graphics/diagrams/Sequence_FilterWords.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "\u003ccenter\u003e\u003ci\u003eFigure 3: Filter word UML Class Diagram\u003c/i\u003e\u003c/center\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Promethees"
        },
        "content": "The above class diagram describes the overall architecture of the filter words functionality. FilterExecutor class has the static void method executeFilterCommand that will be called first when the user enters a filter command. In the executeFilterCommand method, it will make use of the enumeration FilterType to get the filter type (by WORD_TYPE, STARTING STRING or INCLUDING_STRING). After that, the method will use the FilterCommandSlicer static methods isNewFilter to determine whether the user wants to continue on the last filtered list or start a new filter on an entire word bank. Subsequently, depending on the filter mode, getTargetedWordTypes or getTargetedStringTags will be called and the returned array of strings will be passed to WordsFilter’s static methods filterByType, filterByStartingString and filterByIncludedString."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Promethees"
        },
        "content": "The following sequence diagram shows how the components interact with each other for the scenario where the user issues the command `filter -continue by\\start limit\\10 -cs -cg.`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![UML Filter word sequence diagram](https://github.com/AY2021S1-CS2113T-W11-4/tp/blob/master/docs/graphics/diagrams/Sequence_FilterWords.png)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "\u003ccenter\u003e\u003ci\u003eFigure 4: Interactions between components for the command filter -continue by\\start limit\\10 -cs -cg\u003c/i\u003e\u003c/center\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Promethees"
        },
        "content": "   "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Promethees"
        },
        "content": "## Bunny class family"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![UML Bunny class diagram](https://github.com/AY2021S1-CS2113T-W11-4/tp/blob/master/docs/graphics/diagrams/classDiagram_BunnyList.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "\u003ccenter\u003e\u003ci\u003eFigure 5:  Bunny ideas UML Class Diagram\u003c/i\u003e\u003c/center\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Promethees"
        },
        "content": "The above class diagram describes the overall architecture of the bunny list functionalities. The BunnyList class has the public ArrayList of bunnies bunniesList that is accessed by the DeleteBunny class method deleteBunny which removes a selected bunny from the bunniesList ArrayList. Similarly, bunniesList is also accessed by the BunnyFilter class which contains the filterBunny function which can filter through the list and obtain bunnies with specified keywords in the idea or the genre using the command `filter bunny i\\IDEA g\\GENRE`, where the user may choose to omit either the `IDEA`or the `GENRE` when running the command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Promethees"
        },
        "content": "The BunnySaver class accesses the bunniesList and overwrites the current bunny.txt file in the data directory, saving all Bunny objects into the file using the saveAllBunny  method. Bunny objects saved in that file can then be read by the BunnyLoader class and saved into the bunniesList ArrayList using the loadBunnyFile method."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "## Names class family"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  \u003cimg src\u003d\"https://github.com/AY2021S1-CS2113T-W11-4/tp/blob/master/docs/graphics/diagrams/classDiagram_Names.png\"\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  \u003ci\u003eFigure 6:  Names UML Class Diagram\u003c/i\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "The above class diagram (Figure 6) describes the overall architecture of the name list functionalities. The Names class has the protected ArrayList of names, nameList, that is accessed by the Names class method getName which randomly gets a selected name from the nameList ArrayList. Similarly, nameList is also accessed by the Names class which contains the filterNames function which can filter through the list and obtain names with specified keywords using the command filter name \u003cNAME\u003e, where the user may choose to omit the NAME when running the command. Similarly, nameList is also accessed by the Names class which contains the listNames function which displays all the names stored in the nameList ArrayList. This is the same as the filterNames function when given no input String. Similarly, nameList is also accessed by the Names class which contains the addName function which adds a name to the list of names stored in the nameList ArrayList using the command add name \u003cNAME\u003e. The NAME cannot be omitted. Similarly, nameList is also accessed by the Names class which contains the deleteName function which removes a name from the list of names stored in the nameList ArrayList. The command to do this delete name \u003cINDEX\u003e. The INDEX cannot be omitted and the range of the INDEX can be determined from the listNames function above."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "The NamesDB class accesses the nameList and overwrites the current Names.txt file in the data directory, saving all String objects in nameList into the file using the updateDB method. String objects saved in that file can then be read by the NamesDB class and saved into the nameList ArrayList using the loadDB method. In the event of the database Names.txt not existing, the NamesDB class will create the Names.txt database and populate the database with 500 names using the loadDB method."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "As shown in Figure 6, both the NamesDB class and the Names class will create the NameException class. This is a subclass that inherits from the Exception superclass and passes the exception message to the superclass. In the event of an exception, it is thrown from the methods in NamesDB class and Names class and handled by the NameException class."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The target user group are creative writers."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* Writers who enjoy digitally typing up their works and thus can integrate using our CLI based app into their workflow"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* Writers who enjoy creating short pieces but lack the organisation to do so"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The application aims to provide the writer with the following services:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* Provide them with an organised way to store and select their plot ideas which may be otherwise abandoned"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* Provide them with customised prompt suggestions to inspire them to write"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* Provide them with a system to organise longer writing projects in a neat and logical manner to facilitate the writing of long works"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "|v1.0|writer with a lot of fleeting ideas|a place I can temporarily store all my short ideas |find them easily when I need them|"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 21,
      "AmeliaTYR": 13,
      "Promethees": 76,
      "-": 32
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Fluffle virtual buddy at NUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Fluffle is a desktop app for creative writers, optimized for use via a Command Line Interface (CLI). It aids users in creating and managing their writings and ideas. As a fast-typing writer, this CLI app is highly suitable for you."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 2,
      "-": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "[Introduction](#introduction) \u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "[Quick start](#quick-start) \u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "[Features](#features) \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Viewing help: `help`](#viewing-help-help) \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Adding a noun: `noun`](#adding-a-noun-noun) \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Adding a verb: `verb`](#adding-a-verb-verb) \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Adding an adjective: `adj`](#adding-an-adjective-adj) \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Listing words: `list words`](#listing-words-list-words) \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Adding bunny idea: `bunny`](#adding-bunny-idea-bunny) \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Listing bunny ideas: `list bunny`](#listing-bunny-ideas-list-bunny) \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Filtering bunny ideas: `filter bunny`](#filtering-bunny-ideas-filter-bunny) \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Saving bunny ideas: `save bunny`](#saving-bunny-ideas-save-bunny) \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Generating names from name database: `name`](#generating-names-from-name-database-name) \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Generating names from name database: `list name`](#generating-names-from-name-database-list-name) \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Generating names from name database: `filter name`](#generating-names-from-name-database-filter-name) \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Generating names from name database: `add name`](#generating-names-from-name-database-add-name) \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Generating names from name database: `delete name`](#generating-names-from-name-database-delete-name) \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Filtering words in word bank: `filter`](#filtering-words-in-word-bank-filter) \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Listing your filter list: `list filter`](#listing-your-filter-list-list-filter) \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Beginning your writing session: `start`](#beginning-your-writing-session-start) \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Choosing the “type” of your writing: `type`](#choosing-the-type-of-your-writing-type) \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Choosing the “topic” of your writing: `topic`](#choosing-the-topic-of-your-writing-topic) \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Tracking your past writings: `stats`](#tracking-your-past-writings-stats) \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Clearing certain object in database: `clear`](#clearing-certain-object-in-database-clear) \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[Closing the program: `exit`](#closing-the-program-exit) \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "[FAQ](#FAQ) \u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "[Command summary](#command-summary) \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Fluffle is a **desktop app for creative writers**, optimized for **use via a Command Line Interface** (CLI). "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "It aids users in creating and managing their writings and ideas. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "As a fast-typing writer, this CLI app is highly suitable for you."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "This User Guide aims at providing you with the best way to utilize Fluffle for your own writing experience."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Check that your computer has Java **11** installed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Get the latest **Fluffle** from [here](https ://github.com/AY2021S1-CS2113T-W11-4/tp/releases)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "1. Type in a command prompt ./duke.jar and press Enter."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Type the `help` command and press Enter to get started."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Some example commands you can try:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    1. `list words` : List the vocabulary stored in the word list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    1. `filter bunny g/fantasy` : Filters bunny ideas that are of the fantasy genre."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    1. `exit` : Exits the app."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. Refer to the Features below for details of each command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Changing line divider in Fluffle: `divider`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Allows the user to change the line divider divider used in Fluffle."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `divider DIVIDER_OPTION`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The `DIVIDER_OPTION` is an parameter indicating your preferable type of line divider, and can take values from 1 to 3. The list of dividers is:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. ----------------------------------------------------------------"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1. +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* `divider 1` changes divider option to 2"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example output: "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 1"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Changing line divider..."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "divider 3"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "\u003d^..^\u003d  \u003d^..^\u003d  \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Changing line divider..."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of commands you can use and what the commands do. Print the instructions at each stage of the program.  "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Output:  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Type “help COMMAND_NAME” to figure out how to use the particular command.  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "- help"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "- settings"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "- bunny"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "- list bunny"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "- filter bunny"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "- save bunny"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "- list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- list filter"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "- start"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "- filter "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "- stats"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "- reset"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "- name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "- list name"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "- filter name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "- add name"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "- delete name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "- clear"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "- exit"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help [COMMAND_NAME]`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "`help filter name`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "### Adding a noun: `noun`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a noun, together with its meaning, into the word bank in the program.  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `noun [WORD] \\d[DESCRIPTION]`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "### Adding a verb: `verb`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a verb, together with its meaning, into the word bank in the program.  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `verb [WORD] \\d[DESCRIPTION]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "### Adding an adjective: `adj`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Adds an adjective, together with its meaning, into the word bank in the program.  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `adj [WORD] \\d[DESCRIPTION]`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "### Listing words: `list words`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "List all words stored in the program.  "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Format: list words"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Adding a bunny idea: `bunny`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Add a bunny idea to the list of bunny ideas in the current run of the program."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "This list is not automatically saved.  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `bunny i\\IDEA g\\[GENRE]`  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "- `bunny i\\test idea 1`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "- `bunny i\\test idea 2 g\\ fantasy`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "bunny i\\test idea 2 g\\ fantasy  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": " --------------------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": " New bunny added!"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "   idea: test idea 2"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "   genre:  fantasy"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": " ---------------------------------------------------"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "### Listing bunny ideas: `list bunny`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "List all available quizzes numbered by BUNNY_INDEX numbers.  "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list bunny`  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Example usage: `list bunny`  "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "list bunny"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "-----------------------------------------------------"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Here are the bunnies stored in the program:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "1."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  idea: test idea 1"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  genre: fantasy"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "2."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  idea: test idea 2"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  genre: romance"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "3."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  idea: test idea 3"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  genre: none"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "------------------------------------------------------"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "### Filtering bunny ideas: `filter bunny`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Filter specific bunny ideas from the list by searching the idea or the genre for specific key terms.  "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `filter bunny i\\IDEA g\\[GENRE]`  "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "- filter bunny i\\test idea 1  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "- filter bunny i\\test idea 2 g\\ fantasy"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "filter bunny g\\ fantasy"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "------------------------------------------------------"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "1."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  idea: bunny idea 1"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  genre: fantasy"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "2.  "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  idea: test idea 2"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "  genre: fantasy"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "number bunny filtered: 2"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "-------------------------------------------------------"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "### Saving bunny ideas: `save bunny`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Save the current list of bunnies in the program into the designated text file. "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The existing text file is automatically read from at the start of the program and is overwritten when the save function is called.  "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `save bunny`  "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "- `save bunny`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "save bunny"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bunny list saved!"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Deleting a bunny idea: `delete bunny`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Delete a selected bunny from the list of bunny ideas."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `delete bunny BUNNY_INDEX`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "* `BUNNY_INDEX` is the index of the bunny you want to delete from the list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "- `delete bunny 2`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "delete bunny 2"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Bunny deleted: "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: test idea 2"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: none"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "### Deleting a bunny idea: `random bunny`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "The app will pick a random bunny from your list of plot bunnies for you to work on."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Format: `random bunny`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "- `random bunny`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "random bunny"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Random Bunny: "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: some very funny idea"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: humor"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "### Generating names from name database: `name`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Generate a name randomly from the stored database of names.  "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Format: `name`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "- `name`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "name"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "name 2"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "### Generating names from name database: `list name`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Displays all the names currently stored in the names database.  "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Format: `list name`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "- `list name`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "list name"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "1. name 1"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "2. name 2"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "3. name 3"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "### Generating names from name database: `filter name`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Gets the list of names after filtering from the stored list of names.  "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Format: `filter name \u003cNAME\u003e`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "- `filter name 2`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "filter name 2"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "name 2"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "- `filter name name`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "filter name name"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "1. name 1"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "2. name 2"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "3. name 3"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "### Generating names from name database: `add name`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Adds a name to the list of names currently stored in the names database."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Format: `add name \u003cNAME\u003e`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "- `add name name 3`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "add name name 3"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "name 3 has been added to the Names list!"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "### Generating names from name database: `delete name`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Removes a name from the list of names currently stored in the names database."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Format: `delete name \u003cINDEX\u003e`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "- `delete name 3`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Example output:  "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "delete name 3"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "name 3 has been deleted from the Names list!"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "### Filtering words in word bank: `filter`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "Filter out the words you need in the list based on your own filtering mode. "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Format: `filter [-continue] [limit\\PRINT_LIMIT] by\\TYPE_OF_FILTER -ARGUMENTS[1..*]`: "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- You must input the command in order for the program to work properly."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- `-continue` (OPTIONAL): You can use this tag to tell the program to continue filtering on the last filtered list. "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Without this tag, the previous filtered list would be cleared, and the program will filter on the entire word list. "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- `limit\\PRINT_LIMIT` (OPTIONAL): You can use this tag to tell the program to limit the number of words that are printed "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "from your filter result. Without this tag, the program will just print all the words."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- `by\\TYPE_OF_FILTER`: "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    1. `type`: the next tag `ARGUMENTS` should be `-verb` and/or `-noun` and/or `-adjective`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    2. `start`: the next `ARGUMENTS` should be in the form of `-STRING`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    3. `include`: the next `ARGUMENTS` should be in the form of `-STRING`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Example usages and example outputs (step by step):"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "- `filter by\\type -noun -adjective`  "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Printing all 7 word(s) from your filtered list:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "house: a building for people to live in, usually for one family"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "grass: a common wild plant with narrow green leaves and stems that are eaten by cows, horses, sheep, etc."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "computer: an electronic machine that can store, organize and find information, do processes with numbers and other data, "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "and control other machines"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "class: a group of students who are taught together"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "beautiful: having beauty; giving pleasure to the senses or to the mind"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "nice: pleasant or attractive"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "meaningful : important and serious"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- `filter -continue limit\\3 by\\start -h -gr -co -ni`  "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "```"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Your filtered list has more than 3 word(s)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Do you want to print all the filtered list? y/n"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "User input: `y`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "```"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Printing all 4 word(s) from your filtered list:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "house: a building for people to live in, usually for one family"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "grass: a common wild plant with narrow green leaves and stems that are eaten by cows, horses, sheep, etc."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "computer: an electronic machine that can store, organize and find information, do processes with numbers and other data,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "and control other machines"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "nice: pleasant or attractive"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- `filter -continue limit\\1 by\\include -a -pu`  "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "```"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Your filtered list has more than 1 word(s)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Do you want to print all the filtered list? y/n"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "```"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "User input: `n`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Printing the first 1 out of 5 word(s) from your filtered list:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "grass: a common wild plant with narrow green leaves and stems that are eaten by cows, horses, sheep, etc."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "### Listing your filter list: `list filter`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "List your filter list onto the screen."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Format: `list filter [limit\\PRINT_LIMIT]`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- You must input the command in order for the program to work properly."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- `limit\\PRINT_LIMIT` (OPTIONAL): You can use this tag to tell the program to limit the number of words that are printed "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "from your filter result. Without this tag, the program will just print all the words."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Example of usage and example outputs: `list filter limit\\3`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "```"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Your filtered list has more than 3 word(s)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Do you want to print all the filtered list? y/n"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "```"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "User input: `y`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "```"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Printing all 5 word(s) from your filtered list:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "house: a building for people to live in, usually for one family"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "grass: a common wild plant with narrow green leaves and stems that are eaten by cows, horses, sheep, etc."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "computer: an electronic machine that can store, organize and find information, do processes with numbers and other data, "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "and control other machines"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "class: a group of students who are taught together"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "beautiful: having beauty; giving pleasure to the senses or to the mind"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "nice: pleasant or attractive"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "meaningful : important and serious"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "```"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "### Beginning your writing session: `start`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Requires you to type the following commands for your writings’ configurations:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "- `type`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "- `topic`  "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "After choosing the “type” and the “topic” configuration, we can start writing our poems and essays."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "### Choosing the “type” of your writing: `type`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Currently, our application offers you with 2 options of “type”, which are “poem” or “essay”."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "### Choosing the “topic” of your writing: `topic`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Listing the available topic in the list and pop out the relevant keywords for your writing."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "start"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Please indicate your type by typing in \"type\" command"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "type"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Please let us know your type of writings, either poem or essay"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "poem"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Please let us know your preferred topic, the available are travelling, life story, ghost story, sci-fi, historical"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "ghost story"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Great! The words we have found for you are killing, death and terrify!"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Please let us know the title of your writing"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Der Erlkönig"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Now you can type your content, terminate by typing \"end\""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Wer reitet so spät durch Nacht und Wind?"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Es ist der Vater mit seinem Kind;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Er hat den Knaben wohl in dem Arm,"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Er faßt ihn sicher, er hält ihn warm."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dem Vater grauset\u0027s; er reitet geschwind,"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Er hält in Armen das ächzende Kind,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Erreicht den Hof mit Mühe und Not;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "In seinen Armen das Kind war tot."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "end"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "This Poem, Der Erlkönig has been added"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Done! We have added your writing to our storage! You can type \"stats\" for future reference!"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "### Tracking your past writings: `stats`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "Inform the user detailed specifications like ids, authors, contents, and other attributes of the writings stored in database. "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "stats"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "This is a Poem"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Written by Goethe"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Id: 5"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "DER ERLKÖNIG"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Wer reitet so spät durch Nacht und Wind?"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Es ist der Vater mit seinem Kind;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Er hat den Knaben wohl in dem Arm,"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Er faßt ihn sicher, er hält ihn warm."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dem Vater grauset\u0027s; er reitet geschwind,"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Er hält in Armen das ächzende Kind,"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Erreicht den Hof mit Mühe und Not;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "In seinen Armen das Kind war tot."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "This writing was created on 2020-10-18"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "```"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "### Clearing certain object in database: `clear`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes all items from a list in Fluffle. A warning prompt will be generated before deletion.  "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear type\\TYPE_OF_ITEM item\\SPECIFICATION_MARK_OF_THE _OBJECT`  "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Example usage:  "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "`clear type\\word item\\grass`  "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Example Output:  "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "`Are you sure you want to delete this item grass? Yes/no`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "### Closing the program: `exit`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. All data is auto-saved.  "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data .txt files of your previous Fluffle home folder."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: Do I need to leave a space before each input tag?"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "**A**: Yes, the space is necessary. (e.g., noun computer engineering d\\the best engineering major)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "**Q**: Do the parameters need to be keyed in in order?"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "**A**: Yes. You should key in the parameters in order for the program to work properly."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "| Command      | Format, Examples                                                                                      |"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "|--------------|-------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "| divider      | `divider DIVIDER_OPTION` \u003c/br\u003eExample: `divider 2` \u003c/br\u003e The list of dividers is: \u003c/br\u003e   1. -------------------------------------------------------------- \u003c/br\u003e  2. \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d    \u003d^..^\u003d \u003c/br\u003e  3. +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |  "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| noun         | `noun [WORD] d\\[DESCRIPTION]`\u003c/br\u003eExample: `noun bus d\\vehicle`                                       |"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| verb         | `verb [WORD] d\\[DESCRIPTION]`\u003c/br\u003eExample: `verb eat d\\to consume`                                    |"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| adjective    | `adj [WORD] d\\[DESCRIPTION]`\u003c/br\u003eExample: `adj hungry d\\having the desire to consume food`            |"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| list words   | `list words`\u003c/br\u003eLists all the words stored in the program.                                           |"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| bunny        | `bunny i\\IDEA g\\[GENRE]`\u003c/br\u003eAdds a bunny idea to the list of bunnies in the current run.             |"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| list bunny   | `list bunny`\u003c/br\u003eLists all the bunny ideas                                                            |"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| filter bunny | `filter bunny i\\IDEA g\\[GENRE]`\u003c/br\u003eFilters bunny by terms in idea or genre (must have at least 1 filter parameter)|"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| save bunny   | `save bunny`\u003c/br\u003eSaves all the bunny ideas into a text file                                           |"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "| filter       | `filter [-continue] [limit\\PRINT_LIMIT] by\\[TYPE_OF_FILTER] -ARGUMENTS[1..*]  `\u003cbr\u003e`-continue` (optional): If you want to continue with your last filtered list, provide this argument in your command.\u003c/br\u003e\u003cbr\u003e`limit\\PRINT_LIMIT` (OPTIONAL): indicate number of words that you want to print from your filter list\u003c/br\u003e\u003cbr\u003e`by\\TYPE_OF_FILTER`:\u003cbr\u003e- type: arguments can be `-verb`, `-noun` and `-adjective`\u003cbr\u003e- start: arguments can be -STRING\u003cbr\u003e- include: arguments can be -STRING|"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "| list filter  | `list filter [limit\\PRINT_LIMIT]`\u003cbr\u003ePrint the filter list with a limited number of words indicated by `PRINT_LIMIT` (OPTIONAL)\u003c/br\u003e|"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "| delete bunny | `delete bunny BUNNY_INDEX` \u003c/br\u003eDeletes a selected bunny from the list. \u003c\\br\u003e`BUNNY_INDEX` is the index of the bunny in the list|"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "| random bunny | `random bunny` \u003c/br\u003eSelects a random bunny from the list.|"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| name         | `name`\u003c/br\u003eGenerates a random name                                                                    |"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| list name    | `list name`\u003c/br\u003eList all the stored names                                                             |"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| filter name  | `filter name \u003cNAME\u003e`\u003c/br\u003eGets the list of names after filtering                                       |"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| add name     | `add name \u003cNAME\u003e`\u003c/br\u003eAdds a name to the list of stored names                                         |"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| delete name  | `delete name \u003cINDEX\u003e`\u003c/br\u003eRemoves a name from the list of stored names given the index                |"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| stats        | `stats`\u003c/br\u003eShow the content of past writings as well as their basic specifications, e.g: number of lines/sentences/type of the writings/date created/ …..\u003c/br\u003eThis is a poem  \u003cbr\u003eWritten by Goethe\u003c/br\u003eId: 5 \u003cbr\u003e DER ERLKÖNIG\u003c/br\u003eWer reitet so spät, durch Nacht und Wind?\u003cbr\u003eEs ist der Vater mit seinem Kind\u003cbr\u003eEr hält den Knaben wohl in den Armen.\u003cbr\u003eEr faßt ihn sicher, er hält ihn warm.\u003c/br\u003eThis writing was created on 2020-10-18\u003cbr\u003eThis poem has 4 lines, 31 words.\u003cbr\u003e----------------------------------------------------------------|"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "| list         | `list`                                                                                                |"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| clear        | `clear`\u003c/br\u003e`clear type\\[TYPE_OF_ITEM] item\\[SPECIFICATION_MARK_OF_THE _OBJECT]`\u003c/br\u003eTYPE_OF_ITEM:\u003cbr\u003e- word: specify that you are trying to clear a word from word list\u003cbr\u003e- Writing: specify that you are trying to clear a writing from writing list\u003c/br\u003eSPECIFICATION_MARK\u003cbr\u003e- If the object is a word, then clear with the respective name\u003cbr\u003e- If the object is a writing, then clear with respective id|                                  "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| reset        | `reset \u003cNAME_OF_CATEGORY\u003e`\u003c/br\u003eNAME_OF_CATEGORY:\u003cbr\u003e- Reset the respective input category database (e.g, bunny, writings, words,...) |"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Promethees"
        },
        "content": "| exit         | `exit`\u003c/br\u003eExits the program.                                                                                    |    "
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 191,
      "hungvo0603": 97,
      "AmeliaTYR": 84,
      "Promethees": 17,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.commands.CommandChecker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.Logos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.writing.WritingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.database.WritingsLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.writing.Writings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyList.bunniesList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.BunnyLoader.loadBunnyFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.database.UserSettingsLoader.loadUserSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.database.WritingsLoader.loadWritings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.commands.CommandChecker.UNRECOGNISED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.commands.CommandChecker.extractCommandType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.functions.CommandExecutor.executeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.getUserInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printDivider;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printFarewellMessage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printHelloMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.ui.UI.printAskForName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private static final WritingsLoader loader \u003d new WritingsLoader();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Settings set to defaults."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static final int NUMBER_OF_SETTINGS \u003d 1; // currently only username"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String username \u003d \"User\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cString\u003e savedSettings \u003d new ArrayList\u003c\u003e(NUMBER_OF_SETTINGS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static WritingList writings \u003d new WritingList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static User user;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Main entry-point for the Fluffle application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        setUserSettingsArrayList(savedSettings, username);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        loadUserSettings(savedSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        loadBunnyFile(bunniesList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        loadWritings(writings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        username \u003d savedSettings.get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Write a story with\\n\" + Logos.BIG_FLUFFLE_LOGO);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        printHelloMessage(username);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        printAskForName(username);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        username \u003d getUserInput(SCANNER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        user \u003d new User(username);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        user.greetUser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        user.printInstruction();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        CommandChecker commandChecker \u003d UNRECOGNISED;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (commandChecker !\u003d CommandChecker.EXIT) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d getUserInput(SCANNER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            commandChecker \u003d extractCommandType(userInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            executeCommand(commandChecker, userInput, writings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printFarewellMessage(username);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Set the values in the array for the saved settings."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings Array of saved settings"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username      User input name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static void setUserSettingsArrayList(ArrayList\u003cString\u003e savedSettings, String username) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        savedSettings.add(username);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 38,
      "hungvo0603": 14,
      "thngyuxuan": 1,
      "Promethees": 19,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/bunny/Bunny.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.bunny;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " * Class for plot bunny."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Bunny {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** A brief description of the idea. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private String idea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** The genre of the idea. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private String genre;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** The Characters used in the idea. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private ArrayList\u003cCharacter\u003e characters;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Bunny(String idea) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setIdea(idea);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Bunny(String idea, String genre) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setIdea(idea);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setGenre(genre);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Bunny(String idea, String genre, ArrayList\u003cCharacter\u003e characters) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setIdea(idea);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setGenre(genre);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setCharacters(characters);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getIdea() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return idea;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setIdea(String idea) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.idea \u003d idea;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getGenre() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return genre;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setGenre(String genre) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.genre \u003d genre;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ArrayList\u003cCharacter\u003e getCharacters() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return characters;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setCharacters(ArrayList\u003cCharacter\u003e characters) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.characters \u003d characters;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // todo: add character list in version 2"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String description \u003d \"  idea: \" + idea + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!genre.isBlank()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            description \u003d description + \"  genre: \" + genre + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            description \u003d description + \"  genre: none\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 65,
      "hungvo0603": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/bunnylist/BunnyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.bunnylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.BunnyIdeaMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.CommandMissingArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.GENRE_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.IDEA_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.parseSingleCharacterTaggedParamsFromUserInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cBunny\u003e bunniesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addBunny(String userInput) throws CommandMissingArgumentsException, BunnyIdeaMissingException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e commandArguments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String idea;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String genre \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse bunny command into segments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseSingleCharacterTaggedParamsFromUserInput(userInput, commandArguments);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new CommandMissingArgumentsException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if there is task type param"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (commandArguments.containsKey(IDEA_TAG)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            idea \u003d commandArguments.get(IDEA_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new BunnyIdeaMissingException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (commandArguments.containsKey(GENRE_TAG)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            genre \u003d commandArguments.get(GENRE_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // todo: add the character list to bunny in ver 2"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //ArrayList\u003cCharacter\u003e characters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Bunny newBunny \u003d new Bunny(idea.trim(), genre.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        bunniesList.add(newBunny);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.addBunnyMessage(newBunny.getDescription());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void listBunny() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.listBunnyMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c bunniesList.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println((i + 1) + \".\\n\" + bunniesList.get(i).getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static int numBunny() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return bunniesList.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 1,
      "AmeliaTYR": 61
    }
  },
  {
    "path": "src/main/java/seedu/duke/bunnylist/DeleteBunny.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.bunnylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.BunnyIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DeleteBunny {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void deleteBunny(String userInput, ArrayList\u003cBunny\u003e bunniesList)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws BunnyIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int bunnyNum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // try to parse Bunny index and check if it exists"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        bunnyNum \u003d getNumFromInput(userInput, BunnyList.numBunny());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // print response"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.bunnyDeleted(bunnyNum);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        bunniesList.remove(bunnyNum - 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static int getNumFromInput(String userInput, int numBunnies) throws BunnyIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int bunnyNum;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            bunnyNum \u003d Integer.parseInt(userInput.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (bunnyNum \u003e numBunnies || bunnyNum \u003c 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new BunnyIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new BunnyIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return bunnyNum;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/bunnylist/GenBunny.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.bunnylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyList.bunniesList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class GenBunny {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void pickRandomBunny(ArrayList\u003cBunny\u003e bunniesList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int bunnySelected \u003d rand.nextInt(bunniesList.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // print response"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.bunnyRandomlySelected(bunnySelected);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/character/Character.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.character;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " * Class for character."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Character {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private String characterName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private ArrayList\u003cString\u003e aliases;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private ArrayList\u003cCharacter\u003e friends;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private ArrayList\u003cCharacter\u003e enemies;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Character(String characterName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setCharacterName(characterName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Character(String characterName, ArrayList\u003cString\u003e aliases, ArrayList\u003cCharacter\u003e friends,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                     ArrayList\u003cCharacter\u003e enemies, int age) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setCharacterName(characterName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setAliases(aliases);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setFriends(friends);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setEnemies(enemies);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setAge(age);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setCharacterName(String characterName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.characterName \u003d characterName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setAliases(ArrayList\u003cString\u003e aliases) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.aliases \u003d aliases;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setFriends(ArrayList\u003cCharacter\u003e friends) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.friends \u003d friends;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setEnemies(ArrayList\u003cCharacter\u003e enemies) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.enemies \u003d enemies;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getCharacterName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return characterName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ArrayList\u003cString\u003e getAliases() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return aliases;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ArrayList\u003cCharacter\u003e getFriends() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return friends;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ArrayList\u003cCharacter\u003e getEnemies() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return enemies;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // todo: add other aspects in print out later on"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String description \u003d \"  name: \" + characterName + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 72,
      "hungvo0603": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/characterlist/CharacterList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.characterlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.character.Character;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.CharacterAlreadyExistException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.CharacterNameMissingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.CommandMissingArgumentsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.NAME_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.parseSingleCharacterTaggedParamsFromUserInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CharacterList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cCharacter\u003e characters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void addCharacter(String userInput)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws CommandMissingArgumentsException,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            CharacterNameMissingException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            CharacterAlreadyExistException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e commandArguments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int age \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        ArrayList\u003cString\u003e aliases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Character newCharacter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse character command into segments"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseSingleCharacterTaggedParamsFromUserInput(userInput, commandArguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new CommandMissingArgumentsException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if there is task type param"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (commandArguments.containsKey(NAME_TAG)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            name \u003d commandArguments.get(NAME_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new CharacterNameMissingException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check that character doesn\u0027t already exist in the list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (characterNameInList(name)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new CharacterAlreadyExistException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        characters.add(new Character(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.addBunnyMessage(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void listCharacter() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.listCharacterMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c characters.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println((i + 1) + \".\\n\" + characters.get(i).getCharacterName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static boolean characterNameInList(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (Character character : characters) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (name.equals(character.getCharacterName())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 2,
      "AmeliaTYR": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CommandChecker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public enum CommandChecker {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    USERNAME,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DIVIDER,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    NOUN,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    VERB,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    ADJ,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_WORDS,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_WORDS,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    LIST_FILTER,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    GEN_NAME,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    ADD_NAME,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    DELETE_NAME,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_NAMES,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_NAMES,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    BUNNY,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_BUNNY,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_BUNNY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SAVE_BUNNY,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DELETE_BUNNY,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    RANDOM_BUNNY,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    CHARACTER,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_CHARACTER,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_CHARACTER,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    START,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    TITLE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    TYPE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    WRITE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    FINISH,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    POEM,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    ESSAY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    COUNT_WRITINGS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    RESET_WRITINGS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    STATS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    SCENE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    TOPIC,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    UNRECOGNISED;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Figures out the command type from userInput."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput string containing user input command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return the type of command detected"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static CommandChecker extractCommandType(String userInput) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (userInput.toLowerCase().trim().startsWith(\"help\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return CommandChecker.HELP;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"username\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.USERNAME;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"divider\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.DIVIDER;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"noun\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.NOUN;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"verb\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.VERB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"adj\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.ADJ;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"list words\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.LIST_WORDS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"bunny\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.BUNNY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"list bunny\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.LIST_BUNNY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"filter bunny\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.FILTER_BUNNY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"save bunny\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.SAVE_BUNNY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"delete bunny\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.DELETE_BUNNY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"random bunny\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.RANDOM_BUNNY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"exit\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return CommandChecker.EXIT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"scene\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.SCENE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"topic\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.TOPIC;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"name\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            return CommandChecker.GEN_NAME;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"add name\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            return CommandChecker.ADD_NAME;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"delete name\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            return CommandChecker.DELETE_NAME;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"list name\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            return CommandChecker.LIST_NAMES;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"list filter\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return CommandChecker.LIST_FILTER;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"filter name\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            return CommandChecker.FILTER_NAMES;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"filter\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            return CommandChecker.FILTER_WORDS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"start\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.START;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"title\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.TITLE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"type\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.TYPE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"write\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.WRITE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"finish\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.FINISH;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"stats\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.STATS;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"poem\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.POEM;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"essay\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.ESSAY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"count writings\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.COUNT_WRITINGS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"reset writings\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.RESET_WRITINGS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return CommandChecker.UNRECOGNISED;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 14,
      "hungvo0603": 24,
      "AmeliaTYR": 57,
      "Promethees": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/DataFileConvention.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class DataFileConvention {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Separates different data components. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String WRITING_COMPONENT_DIVIDER \u003d \"----------------------------\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Marks one component of the writing class. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String WRITING_COMPONENT_MARK \u003d \"*\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Number of writing class component each section has in the database. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final int NUMBER_OF_WRITING_COMPONENT \u003d 7;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final int POSITION_OF_ID \u003d 5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final int POSITION_OF_AUTHOR \u003d 9;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final int POSITION_OF_TYPE \u003d 7;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final int POSITION_OF_TITLE \u003d 8;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final int POSITION_OF_TOPIC \u003d 8;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final int POSITION_OF_DATE \u003d 7;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String POEM \u003d \"Poem\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String ESSAY \u003d \"Essay\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final int LENGTH_OF_DATE \u003d 10;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final int MAX_NUM_WRITINGS \u003d 1000;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/FilePaths.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Default file paths for save files."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FilePaths {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Default path to file for saving settings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static final String DEFAULT_USER_SETTINGS_FILE_PATH \u003d \"/data\" + File.separator + \"userSettings.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Default path to file for saved Bunny ideas."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEFAULT_BUNNY_FILE_PATH \u003d \"data/bunny.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Test file path to see where the files save."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TEST_FILE_PATH \u003d \"testFile.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Path to store user past history."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String WRITING_FILE_PATH \u003d \"data/writings.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * The general path to store the statistics of the past quizzes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String STATS \u003d \"data/Stats/stats\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 15,
      "AmeliaTYR": 14,
      "Promethees": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/FilterMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class FilterMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String INVALID_FILTER_CODE \u003d \"invalid filter type in the code\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String NO_FILTER_RESULT \u003d \"Filter returns no result!!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String FILTER_MESSAGE \u003d \"Printing all %d word(s) from your filtered list:\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String FILTER_MESSAGE_LIMIT \u003d \"Printing the first %d out of %d word(s) \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            + \"from your filtered list:\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String PRINT_LIMIT_NOT_FOUND \u003d \"Print limit is not specified in your command.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String FILTER_UNKNOWN_COMMAND \u003d \"Filter command format is incorrect.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String FILTER_UNKNOWN_TYPE \u003d \"Filter type was not recognized in the command.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String LONG_FILTER_LIST_MESSAGE \u003d \"Your filtered list has more than %d word(s)\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            + \"Do you want to print all the filtered list? y/n\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String INVALID_LIST_FILTER_ANSWER \u003d \"Your answer is not y/n. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            + \"The filtered list will not be printed.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String INVALID_PRINT_LIMIT_MESSAGE \u003d \"Your limit is invalid.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/FluffleMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FluffleMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Greeting message formats. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FAREWELL_GREETING \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Bye %1$s! Hope to see you again soon!\" + NEWLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELLO_GREETING \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            \"Hello User! Welcome to Fluffle!\" + NEWLINE + \"What can I do for you?\" + NEWLINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String ASK_FOR_NAME \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            \"What is your name?\" + NEWLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Settings loader messages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ERROR_READING_FILE_ON_LINE_MSG_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Error reading settings file! Error on line:\" + NEWLINE + \"%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOADING_SETTINGS_MSG \u003d \"Loading userSettings.txt save file...\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SETTINGS_FILE_EMPTY_MSG \u003d \"userSettings.txt save file empty\" + NEWLINE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"No previous settings loaded\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SETTINGS_FILE_NOT_FOUND_MSG \u003d \"userSettings.txt save file not found\" + NEWLINE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"Creating new file...\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** File creator function messages.  */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEW_FILE_CREATED_MSG_FORMAT \u003d \"New file created\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String IO_ERROR_WHEN_MAKING_FILE_MSG \u003d \"IO error when making file!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_ALREADY_EXISTS_MSG \u003d \"File already exists.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_CREATED_PATH_MSG \u003d \"File created\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DIRECTORY_CREATED_SUCCESSFULLY_MSG \u003d \"Directory created successfully\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String COULD_NOT_CREATE_DIRECTORY_MSG \u003d \"Sorry, could not create specified directory\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_PATH_TO_DIRECTORY_INVALID_MSG \u003d \"File path to directory invalid!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_NOT_FOUND_MSG \u003d \"File does not exist.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_AUTO_CREATED_MSG \u003d \"Auto creating new file\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** New word added messages. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String ADD_NOUN_MSG \u003d \"Added the following noun:\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String ADD_VERB_MSG \u003d \"Added the following verb:\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String ADD_ADJECTIVE_MSG \u003d \"Added the following adjective:\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String LIST_WORDS_MSG \u003d \"Here are the words stored in the program:\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** New bunny added messages. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ADD_BUNNY_MSG \u003d \"New bunny added!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LIST_BUNNY_MSG \u003d \"Here are the bunnies stored in the program:\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_WRONG_FORMAT \u003d \"Bunny command wrong format\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_MISSING_IDEA_MSG \u003d \"Bunny command missing idea?\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Bunny deletion message. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_DELETED_MSG \u003d \"Bunny deleted: \\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Bunny random selection message. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_RANDOMLY_SELECTED_MSG \u003d \"Random Bunny: \\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** New character added messages. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ADD_CHARACTER_MSG \u003d \"New character added!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LIST_CHARACTER_MSG \u003d \"Here are the characters stored in the program:\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_CHARACTER_FORMAT \u003d \"Character command wrong format\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Command not recognised message. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String COMMAND_UNRECOGNISED_MSG \u003d \"Command not recognised?\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Writings parsing messages. */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String ASSERTION_ID_ERROR \u003d \"This ID is invalid, please provide an ID from rage 0-1000\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String SUCCESSFUL_ADD_WRITING_TO_DATABASE \u003d \"Done! We have added your writing to our storage! \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            + \"You can type \\\"stats\\\" \" + \"for future reference!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String INSTRUCTION_FOR_ADDING_NEW_WRITINGS \u003d \"Now you can type your content, \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            + \"terminate by typing \\\"end\\\"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String TYPE_COMMAND_INSTRUCTION \u003d \"Please indicate your type by typing in \\\"type\\\" command\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String ASKING_FOR_TITLE \u003d \"Please let us know the title of your writing\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String ASKING_FOR_TYPE \u003d \"Please let us know your type of writings, either poem or essay\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String ASKING_FOR_TOPIC \u003d \"Please indicate your topic by typing in \\\"topic\\\" command\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String EMPTY_WRITING_MESSAGE \u003d \"The storage is currently empty, please type \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            + \"\\\"start\\\" command to add\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String CLEAR_DATA_MESSAGE \u003d \"We have clear all data in the writings list\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** User interactive messages. */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Please type in \\\"help\\\" command for information!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 50,
      "thngyuxuan": 5,
      "Promethees": 19,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/InputMarkers.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Special symbols to mark specific strings."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InputMarkers {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Used to mark off comment lines in the text-ui-test input.  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INPUT_COMMENT_MARKER \u003d \"#\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_COMMAND_KEYWORD \u003d \"bunny\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/Logos.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logos {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BIG_FLUFFLE_LOGO \u003d \"  ______ _        __  __ _\\n\" + \" |  ____| |      / _|/ \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"_| |\\n\" + \" | |__  | |_   _| |_| |_| | ___\\n\" + \" |  __| | | | | |  _|  _| |/ _ \\\\\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \" | |    |\" + \" | |_| | | | | | |  __/\\n\" + \" |_|    |_|\\\\__,_|_| |_| |_|\\\\___|\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    // line divider options"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PLAIN_TEXT_DIVIDER \u003d \"--------------------------------------------------------------\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CAT_TEXT_DIVIDER \u003d \"\u003d^..^\u003d  \u003d^..^\u003d  \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FENCE_TEXT_DIVIDER \u003d \"+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String custom_line_divider \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static final String VERSION \u003d \"Fluffle -Version 2.0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INPUT_COMMENT_MARKER \u003d \"#\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/RegexStrings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Regex strings used for comparison and format checking."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class RegexStrings {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Regex to detect a blank line. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BLANK_STRING_REGEX \u003d \"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/Tags.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Tags {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Settings file loader tags. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    //public static final String DIVIDER_CHOICE_TAG \u003d \"Divider choice:\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USERNAME_TAG \u003d \"Username:\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Bunny file loader tags. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NUM_BUNNY_TAG \u003d \"number of plot bunnies:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_IDEA_TAG \u003d \"idea:\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_GENRE_TAG \u003d \"genre:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_CHARACTERS_TAG \u003d \"characters:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Characters file loader tags. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    //public static final String DIVIDER_CHOICE_TAG \u003d \"Divider choice:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NUM_CHARACTER_TAG \u003d \"Username:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Tags for bunny command. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String IDEA_TAG \u003d \"i\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String GENRE_TAG \u003d \"g\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String CHARACTER_TAG \u003d \"g\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Tags for character command. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NAME_TAG \u003d \"na\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String AGE_TAG \u003d \"ag\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /** Tags for filter type identifier. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String TYPE_OF_FILTER_TAG \u003d \"by\\\\\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String LIMIT_WORD \u003d \" limit\\\\\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String BLANK \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String TYPE_TAG \u003d \"type\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String START_TAG \u003d \"start\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String INCLUDE_TAG \u003d \"include\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /** Tags for filter slicer. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String DASH \u003d \"-\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String NOUN \u003d \"noun\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String VERB \u003d \"verb\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String ADJECTIVE \u003d \"adjective\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /** Tags for word list. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static final String DESCRIPTION_TAG \u003d \"d\\\\\\\\\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 29,
      "hungvo0603": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/BunnyLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.parsers.Parsers;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.ERROR_READING_FILE_ON_LINE_MSG_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FilePaths.DEFAULT_BUNNY_FILE_PATH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.BUNNY_GENRE_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.BUNNY_IDEA_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.NUM_BUNNY_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.FileFunctions.autoCreateNewFile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.FileFunctions.readFileUntilLineContainsString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.getIntFromString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyLoader {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void loadBunnyFile(ArrayList\u003cBunny\u003e bunniesList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File bunnyFile \u003d FileFunctions.getFileFromFilePath(DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.checkFileExists(bunnyFile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            readBunnyFile(bunnyFile, bunniesList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            autoCreateNewFile(DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void readBunnyFile(File bunnyFile, ArrayList\u003cBunny\u003e bunniesList) throws FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Scanner bunnyFileScanner \u003d new Scanner(bunnyFile);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int numBunnies \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int numBunniesLoaded \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // read in expected number of bunnies"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String parsedString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(NUM_BUNNY_TAG, bunnyFileScanner);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, NUM_BUNNY_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numBunnies \u003d getIntFromString(parsedString.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf(ERROR_READING_FILE_ON_LINE_MSG_FORMAT, fileLine);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // load individual bunnies"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (bunnyFileScanner.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                String parsedString;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                // read idea"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                String idea \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileLine \u003d readFileUntilLineContainsString(BUNNY_IDEA_TAG, bunnyFileScanner);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                parsedString \u003d Parsers.parseFileObject(fileLine, BUNNY_IDEA_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    idea \u003d parsedString.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                // read genre"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                String genre \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileLine \u003d readFileUntilLineContainsString(BUNNY_GENRE_TAG, bunnyFileScanner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                parsedString \u003d Parsers.parseFileObject(fileLine, BUNNY_GENRE_TAG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    genre \u003d parsedString.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                // todo: implement characters collection in version 2"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                // read characters (names pipe separated, find the character in the character list)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                String charactersString \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileLine \u003d readFileUntilLineContainsString(BUNNY_IDEA_TAG, bunnyFileScanner);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                parsedString \u003d Parsers.parseFileObject(fileLine, BUNNY_IDEA_TAG);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    // parse the charactersString into list of names"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    // for each name retrieve the corresponding character (loaded from the character list)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                // add new bunny to list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                Bunny newBunny \u003d new Bunny(idea.trim(), genre.trim());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                bunniesList.add(newBunny);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numBunniesLoaded++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                //System.out.printf(ERROR_READING_FILE_ON_LINE_MSG_FORMAT, fileLine);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        //I tried to comment this to pass the Test .. TQMT"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        //UI.numBunnyLoaded(numBunnies, numBunniesLoaded);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 97,
      "Promethees": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/BunnySaver.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FilePaths.DEFAULT_BUNNY_FILE_PATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.NUM_BUNNY_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnySaver {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void saveAllBunny(ArrayList\u003cBunny\u003e bunniesList)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File allTasksFile \u003d new File(DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (allTasksFile.createNewFile()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            UI.createNewBunnyFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        new FileWriter(DEFAULT_BUNNY_FILE_PATH, false).close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // write file header"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        FileFunctions.appendsStringToFile(NUM_BUNNY_TAG + \" \" + bunniesList.size(), DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        FileFunctions.appendsStringToFile(NEWLINE, DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        FileFunctions.appendsStringToFile(PLAIN_TEXT_DIVIDER, DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        FileFunctions.appendsStringToFile(NEWLINE, DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c bunniesList.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String printOut \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printOut \u003d (i + 1) + \".\\n\" + bunniesList.get(i).getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.appendsStringToFile(printOut,DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.appendsStringToFile(PLAIN_TEXT_DIVIDER, DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.appendsStringToFile(NEWLINE, DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/CharacterLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CharacterLoader {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/FileFunctions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.FilePathInvalidException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.InputMarkers.INPUT_COMMENT_MARKER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.NEWLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.RegexStrings.BLANK_STRING_REGEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FileFunctions {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Get a file from file path."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath given file path"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return file object retrieved from the given file path"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static File getFileFromFilePath(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File fileFound \u003d new File(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileFound;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * check if a file exists."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param file a given file to check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileNotFoundException the file to check was not found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void checkFileExists(java.io.File file) throws FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Writes a double new line to the file to create one blank line of space."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath given file path"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws IOException unable to write to file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void writeDoubleNewlineToFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        appendsStringToFile(NEWLINE, filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        appendsStringToFile(NEWLINE, filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Appends the string to the given file specified by filePath."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param textToAppend string to be appended to the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath filepath to the file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws IOException unable to write to file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void appendsStringToFile(String textToAppend, String filePath) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        java.io.FileWriter fw \u003d new java.io.FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fw.write(textToAppend);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Continue reading through a file until a specific string is found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param stringSearched indicator string"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileScanner    scanner for scanning a file"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the line the string is on"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String readFileUntilLineContainsString(String stringSearched, Scanner fileScanner) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileInput \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // read each setting and return the variables accordingly"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileInput \u003d getFileNextLine(fileScanner);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (fileInput.contains(stringSearched)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileInput;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Read non-blank lines of the file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileScanner scanner to read through lines in the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return a non blank line read from the file"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getFileNextLine(Scanner fileScanner) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileInput;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileInput \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (fileInput.matches(BLANK_STRING_REGEX)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                || fileInput.startsWith(INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileInput;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Create a new file at the specified file path."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath specified file path"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return absolute path of the new path"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String autoCreateNewFile(String filePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(FILE_AUTO_CREATED_MSG);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        filePath \u003d pathReplaceIllegalCharacters(filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkFileExists(newFile);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make the directory"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String directoryPath;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String txtFileName;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placements"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int endOfDirectoryName \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int endOfFileName \u003d filePath.indexOf(\".txt\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check if placement is correct"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endOfDirectoryName \u003d\u003d -1 || endOfFileName \u003d\u003d -1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    directoryPath \u003d filePath.substring(0, endOfDirectoryName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    txtFileName \u003d filePath.substring(endOfDirectoryName + 1, endOfFileName).trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating a File object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File file \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating the directory"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isFileCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (isFileCreated) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(DIRECTORY_CREATED_SUCCESSFULLY_MSG);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                filePath \u003d directoryPath + \"/\" + txtFileName + \".txt\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(COULD_NOT_CREATE_DIRECTORY_MSG);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FilePathInvalidException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(FILE_PATH_TO_DIRECTORY_INVALID_MSG);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make the file"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (newFile.createNewFile()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(FILE_CREATED_PATH_MSG);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(FILE_ALREADY_EXISTS_MSG);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(IO_ERROR_WHEN_MAKING_FILE_MSG);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(NEW_FILE_CREATED_MSG_FORMAT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return newFile.getAbsolutePath();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Replace \u0027\\\u0027 with \u0027/\u0027 characters in file paths variables."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param path a file path with illegal characters"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the path without illegal characters"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String pathReplaceIllegalCharacters(String path) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return path.replace(\u0027\\\\\u0027, \u0027/\u0027);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 9,
      "AmeliaTYR": 172
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/NamesDB.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import seedu.duke.exceptions.NameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "public class NamesDB {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    private static java.nio.file.Path filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Loads the database of names."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Creates a default list of names if database doesn\u0027t exist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void loadDB(ArrayList\u003cString\u003e nameList) throws NameException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        String home \u003d Paths.get(\"\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            Files.createDirectories(Paths.get(home, \"data\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        filePath \u003d Paths.get(home, \"data\", \"Names.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        nameList.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        boolean isExistingDirectory \u003d Files.exists(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        if (isExistingDirectory) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            File f \u003d new File(String.valueOf(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            Scanner scan;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                scan \u003d new Scanner(f);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                throw new NameException(\" ☹ OOPS!!! Unable to find database.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            while (scan.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                String nameToProcess \u003d scan.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                nameList.add(nameToProcess);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            File yourFile \u003d new File(String.valueOf(filePath));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                boolean isSuccessful \u003d yourFile.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                if (!isSuccessful) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    throw new NameException(\" ☹ OOPS!!! Unable to create database.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Reiko Copher\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kim Mushrush\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rosalie Hux\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kesha Barrio\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Eliana Upshaw\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Manuela Naff\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Colleen Eaglin\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Nerissa Masters\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Marlene Smullen\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tasia Noren\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Caryn Bibee\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kenisha Son\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Theresia Woody\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Chang Peterka\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Olive Juarbe\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Eneida Leisy\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Laurice Strozier\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Dianna Bleakley\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Joeann Harbaugh\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jasmin Maupin\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lawana Cocklin\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Meggan Stoddart\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Santos Therrien\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Peg Wendel\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ian Begin\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Arianne Ruggerio\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sharleen Carwile\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Taylor Demar\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Dortha Daly\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Coletta Jarrell\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jovita Lawry\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Elliott Joiner\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Forrest Moylan\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sammy Meriwether\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Emilee Hernadez\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Beatris Hodgin\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Danelle Randel\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Elijah Hebb\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Clint Riesgo\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Todd Edelman\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ingrid Harley\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Linwood Hennig\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Caroll Berger\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Vertie Scalzo\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Cecily Aaronson\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Luis Groh\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Li Hymer\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Billie Salazar\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Hyun Lovern\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Barabara Geno\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Margaret Pickford\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kelli Pollan\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Myron Tison\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Elvera Desjardin\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lita Feinstein\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Carmel Mcloud\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mickie Figaro\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Val Leitner\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rolando Hamamoto\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Albertine Hogsett\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Julianne Agudelo\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Pamala Yamashiro\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mohammad Teegarden\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Reena Kimpel\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Reed Carpenter\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Eusebia Jenson\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rochelle Miramontes\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Desire Betty\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Cathi Dore\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bradford Gouin\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Allyn Bibee\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Isabell Rockhill\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Domingo Matzke\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Josefina Clairmont\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Antonio Dunker\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Margarita Casa\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Daina Woodhouse\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Korey Balog\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rosann Lapine\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Carlena Reuss\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Dianne Douglass\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Barabara Sporer\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mellisa Diederich\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Charline Mcgaha\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rebecca Necessary\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Antwan Reinoso\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Cindy Sachs\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Penney Collington\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Gaylord Featherstone\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Alanna Levin\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Stephan Sisneros\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Spencer Toner\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kevin Woods\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Estell Iwamoto\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Gail Rapier\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jeanice Keithley\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Amal Hargrove\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Geri Dicks\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tien Matas\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Yuri Riemann\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bianca Cornish\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zainab Morley\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Molly Bouvet\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Angelo Blanchard\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Roberta Villarreal\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rafi Davila\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lilly-Rose Dougherty\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mikaela Cairns\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Milli Doyle\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Billy Singh\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Catrin Rankin\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Armaan Harris\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Suzannah Orozco\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Charley Clements\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Natalya Rangel\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Osman Britton\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Petra Kidd\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Trent Griffiths\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Hajrah Timms\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tonya Knowles\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ellise Knox\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sasha Bowden\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Teddie Mccaffrey\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zuzanna Eastwood\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Hughie Kramer\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Amy-Louise Rigby\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Arian Frederick\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tarik Burt\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zayd Dennis\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sydney Espinoza\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jimmy Wardle\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Malak Hampton\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rick England\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Elara Beasley\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Carolina Hayden\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bailey Glass\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Irene Whyte\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kloe Phillips\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Astrid Castro\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Hina John\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Desiree Chapman\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Shanay Plummer\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kristy Whittaker\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Aaryan Burke\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jazmine Bridges\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kara Rodriquez\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kajetan Colon\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tyla Neal\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Selin Skinner\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sofia Burns\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Arham Peralta\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Hazel Vaughn\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Gabriela Rosa\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Huda Rogers\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Arisha Snyder\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Carl Dolan\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Dean Jennings\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Iman Deacon\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Dawn Keenan\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Adina Fry\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Adrianna Boyle\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Suman Marquez\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Demi Foreman\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Poppy-Rose Aldred\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sadia Rayner\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Yasir Walls\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jakob Gibbons\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bryson Huffman\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Yolanda Hoover\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kurt Marsden\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Suhayb Burnett\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Andre Paul\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Donald Castaneda\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Denny Mueller\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rickie Hawkins\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Summer-Rose Noel\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rosanna Edmonds\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Shaquille Freeman\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Whitney Keith\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Owais Sawyer\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mehdi Gough\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Gianni Kerr\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jagoda Bains\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kane Vargas\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Stacey Brookes\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Misty Watkins\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Danial Spooner\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Abid Cole\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Natasha Coates\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Parris Lin\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mark Sutton\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lorelei Carver\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ronnie Reilly\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Toyah Stuart\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Aleisha Jenkins\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sharmin Hurst\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lucinda Kearns\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Josh Welch\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sianna Kouma\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Pippa Morse\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mira Dunne\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Daisy-Mae Cortes\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ava Senior\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Addie Devine\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Savannah Oneill\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Anoushka Dunn\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Karam Frost\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rudi Navarro\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mckenzie Bowden\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Isadora Hogg\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Alma Haynes\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Perry Winter\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Eshaan Leblanc\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Darius Smyth\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Morwenna Wilcox\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"John-James Ward\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kaan Torres\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Gwion Fenton\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Darcie Ferry\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Destiny Mosley\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sacha Hume\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jaiden Kelly\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tariq Peck\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zeeshan Mcconnell\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ella-Rose Harding\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Aleksandra Marquez\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ann Hoffman\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Reilly Collins\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Allison Frye\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kamil Mcgowan\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Wade Vega\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bonnie Ramsay\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Leo Mccaffrey\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Leela Robson\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ana Valentine\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sid Robles\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mert Rigby\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bear Case\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Yusra Orozco\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Erica Browne\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Danish Brook\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bobbie Ryan\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Alexandria Bailey\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Diane Melton\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Dexter Mejia\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Dennis Allan\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Khadeejah Ramirez\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Fahim Frey\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Shuaib Daly\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Angel Mccartney\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Aaliya Austin\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Silas Cameron\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jake Wilkinson\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Borys Douglas\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zoey Molina\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ayub Owens\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rayhan Cooley\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Renee Bain\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ines Dunlop\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Davey Rich\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Izabela Odling\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bradleigh Black\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Karter Craft\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Adelaide Legge\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Reon Villegas\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Coco Lutz\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Don Herring\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Corrina Hopper\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Shawn Clemons\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Asiya Chester\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Akash Dougherty\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Derry Young\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Carley Knott\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Elliott Singh\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jozef Ventura\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Colby Stewart\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Priya Weiss\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Hussein Macgregor\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Adelle Little\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kay Nelson\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Montell Stone\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Haleemah Sosa\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Candice Shepherd\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rayhaan Neal\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jeremiah Rasmussen\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Yasemin Dalton\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Collette Carr\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kaine Bonner\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Liberty Roach\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ian Cruz\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Matei Cook\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Arnav Dawson\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jodie Amin\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Grant Sears\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Daisie Lindsey\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Patrycja Lopez\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ophelia Braun\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mali Keeling\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tyron Snow\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Nabeel Bloggs\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kornelia Larsen\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ignacy Connor\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Theresa Melia\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zahra Ramsay\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Alasdair Morrow\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Khadeejah Erickson\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Luisa Campos\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ahsan Choi\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lorelai Bains\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Samual Sadler\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kush Price\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mylah Kirkland\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ari Mustafa\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mohammad Power\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Adele Arroyo\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Pixie Holt\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Shyla Glass\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Clyde Wagstaff\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Gracie-Leigh Garcia\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mehdi Schmidt\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Koa Broadhurst\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Neive Milner\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Chenai Bernal\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kason Colley\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Avni Weber\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Phoebe Firth\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Aj Holder\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ayah Kelley\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Candice Mcdougall\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Liam Kim\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Milton Stanley\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Glenda Woodcock\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lilli Soto\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mert Woodward\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Yanis Mccann\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Leonard Philip\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Dario Williamson\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Markus Rice\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Siya Haworth\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zaynab Guthrie\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Paige Peck\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lawson Hudson\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Coral Coates\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Umair Robin\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ishaaq Tran\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Vickie Luna\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Daisy Farrell\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Muhammad Chaney\");"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Asha Hinton\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zac Holcomb\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bridie Ramirez\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kaif Shields\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sulaiman Walsh\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ellie-Rose Murphy\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Alara Watkins\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Audrey Dupont\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zayaan Faulkner\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Daniela Browning\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Riccardo Bostock\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Arfa Meyers\");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Brenden Stout\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Aiesha Jordan\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Giles Martins\");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Joshua Robins\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rachel Reed\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Finnley Armitage\");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jon-Paul Lin\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Meg Edge\");"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Leyton Magana\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jai Garner\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Shawn Heaton\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Samirah Pike\");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ioana Hartley\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jorden Blevins\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Darla Kinney\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Erik Mcarthur\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Clifford Stubbs\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bryson Jacobs\");"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Darren Gallegos\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lillie Stein\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Randall Herrera\");"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Keaton Owen\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Nisha Lawrence\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Austin Hassan\");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ellis Huber\");"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Carwyn Garrison\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mohammod Wynn\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Prisha Barton\");"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Riley-Jay Duran\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Nur Fox\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Alanah Gentry\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Margot Mcleod\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Savannah Humphreys\");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Danyal Montes\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ritik Bolton\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Niamh Spencer\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Carrie Bird\");"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Santino Mack\");"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mara Ballard\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Timur Joseph\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bogdan Patterson\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Momina Hail\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Reece Prentice\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lesley Whitaker\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Alexia Esquivel\");"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Selena Marsh\");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Darsh Webber\");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jamal Dunkley\");"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Aila Huang\");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Cherise Fields\");"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Riccardo Trevino\");"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Anisa Diaz\");"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Diane Rigby\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zaki Doherty\");"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zoya Edwards\");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Hughie Roth\");"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jaden Bell\");"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Krystian Bush\");"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Miranda Kirkland\");"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Anne Sharples\");"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tamia Burnett\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Adelina Luna\");"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ivy Nolan\");"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Betty Figueroa\");"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kaila Garrison\");"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sufyaan Chadwick\");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Nahla Sheldon\");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Christiana Woodard\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jon Velazquez\");"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bea Phillips\");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Aniya Dillard\");"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Arianne Wooten\");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rahul Mckeown\");"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sasha Mackay\");"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sade Whyte\");"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sophia Reeve\");"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Luciano Chavez\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Clarence Goulding\");"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Holli Moore\");"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Barney Lindsey\");"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bridie Brewer\");"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kristi Forrest\");"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Buddy Mueller\");"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Mayur Lowery\");"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Junaid Aguilar\");"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Charis Houghton\");"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kuba Clarke\");"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tashan Hollis\");"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Reo Odling\");"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Dua Hussain\");"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zakary Stein\");"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Bonnie Robles\");"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tymoteusz Jarvis\");"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tarun Doyle\");"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rehaan Schwartz\");"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Maya Beattie\");"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kajol Kavanagh\");"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Avaya Lynn\");"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Linzi Soto\");"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Aamir Wainwright\");"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Evelyn Keenan\");"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Iona Mcgregor\");"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Anish Flores\");"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Orla Mcnally\");"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ellouise Reeves\");"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Phoenix Oneil\");"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Monet Medrano\");"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sidney Pena\");"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Macaulay Frost\");"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Conna Daniels\");"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Leyton Mccartney\");"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rida Reese\");"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kit Brown\");"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Aurora Maxwell\");"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Faris Rawlings\");"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Fergus Pollard\");"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Olly Guevara\");"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Lyndsey Cannon\");"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tyler-James Reilly\");"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"John Mcghee\");"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Hubert Johns\");"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zachariah Liu\");"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Anwar O\u0027Doherty\");"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Patrik Shepard\");"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Chaya Burgess\");"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tiago Povey\");"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Tahlia Neville\");"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Rimsha Britt\");"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Demi-Leigh Clay\");"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Milton Baxter\");"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Timur Robinson\");"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Ameena Hogg\");"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Kasey Seymour\");"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Santino Mullins\");"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Willard Dorsey\");"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Sama Marin\");"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Stephanie Gaines\");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Laurence Hood\");"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Zackery Everett\");"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    nameList.add(\"Jaya Allman\");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    updateDB(nameList);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                throw new NameException(\" ☹ OOPS!!! Unable to create database.\");"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Updates the database with the given list of names."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void updateDB(ArrayList\u003cString\u003e nameList) throws NameException {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            FileWriter fw \u003d new FileWriter(String.valueOf(filePath));"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            for (int i \u003d 0; i \u003c nameList.size(); i++) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                String name \u003d nameList.get(i);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //String toWrite \u003d \"\";"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                fw.write(name + System.lineSeparator());"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            throw new NameException(\" ☹ OOPS!!! Unable to create database.\");"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 574
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/UserSettingsLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.parsers.Parsers;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FilePaths.DEFAULT_USER_SETTINGS_FILE_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.USERNAME_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.FileFunctions.autoCreateNewFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.FileFunctions.readFileUntilLineContainsString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class UserSettingsLoader {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void loadUserSettings(ArrayList\u003cString\u003e savedSettings) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(LOADING_SETTINGS_MSG);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File userSettingsFile \u003d FileFunctions.getFileFromFilePath(DEFAULT_USER_SETTINGS_FILE_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(userSettingsFile.getAbsolutePath());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.checkFileExists(userSettingsFile);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            readUserSettingsFile(savedSettings, userSettingsFile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(SETTINGS_FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            autoCreateNewFile(DEFAULT_USER_SETTINGS_FILE_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //autoCreateNewFile(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void readUserSettingsFile(ArrayList\u003cString\u003e savedSettings, File userSettingsFile)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Scanner userSettingsFileScanner \u003d new Scanner(userSettingsFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String username \u003d \"temp\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String parsedString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(USERNAME_TAG, userSettingsFileScanner);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, USERNAME_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                username \u003d parsedString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                setUserSettingsArrayUsername(savedSettings, username);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.printf(ERROR_READING_FILE_ON_LINE_MSG_FORMAT, fileLine);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Sets the default settings to saved settings array."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings array of saved settings"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username      user input name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void setUserSettingsArrayUsername(ArrayList\u003cString\u003e savedSettings, String username) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(0, username);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 4,
      "AmeliaTYR": 61
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/WordsLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.words.Words;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class WordsLoader {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static final ArrayList\u003cWords\u003e wordsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static ArrayList\u003cWords\u003e getWordsList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return wordsList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static int getWordsListSize() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return wordsList.size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/WritingsLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.exceptions.NotEnoughWritingComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.writing.Essay;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.writing.Poem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.writing.WritingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.logs.Logging;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.WRITING_COMPONENT_MARK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.WRITING_COMPONENT_DIVIDER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.POSITION_OF_AUTHOR;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.POSITION_OF_DATE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.POSITION_OF_ID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.POSITION_OF_TITLE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.POSITION_OF_TOPIC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.POSITION_OF_TYPE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.POEM;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.ESSAY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.NUMBER_OF_WRITING_COMPONENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.FilePaths.WRITING_FILE_PATH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.database.FileFunctions.autoCreateNewFile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class WritingsLoader {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /**This function reads data stored in data file and coverts it into ArrayList structure."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @param f data file storing the information of the tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @param savedWritings List of writings available in the txt database file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @return total writings detected in the data file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @throws FileNotFoundException when the file is not found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @throws NotEnoughWritingComponentException when the format of minimum"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private static int convertWritingFile(File f, WritingList savedWritings)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            throws FileNotFoundException, NotEnoughWritingComponentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        //Count the number of asterisks in the datafile -\u003e number of components in the Writing class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        int countContent \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        int countWritings \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        int id \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String author \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String type \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String topic \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        //Initializing the content"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                String currentLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                //Reset the content to blank"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                content \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                while (!currentLine.equals(WRITING_COMPONENT_DIVIDER)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    while (currentLine.startsWith(WRITING_COMPONENT_MARK)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        countContent++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        if (countContent \u003d\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                            id \u003d Integer.parseInt(currentLine.substring(POSITION_OF_ID).trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        } else if (countContent \u003d\u003d 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                            author \u003d currentLine.substring(POSITION_OF_AUTHOR).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        } else if (countContent \u003d\u003d 3) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                            type \u003d currentLine.substring(POSITION_OF_TYPE).trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        } else if (countContent \u003d\u003d 4) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                            title \u003d currentLine.substring(POSITION_OF_TITLE).trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        } else if (countContent \u003d\u003d 5) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                            topic \u003d currentLine.substring(POSITION_OF_TOPIC).trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        } else if (countContent \u003d\u003d 6) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                            date \u003d currentLine.substring(POSITION_OF_DATE).trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        } else if (countContent \u003d\u003d 7) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        currentLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    //Writing text to the writing object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    currentLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    //prevent adding the WRITING_COMPONENT_DIVIDER to the content of the writing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    if (!currentLine.equals(WRITING_COMPONENT_DIVIDER)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                        content \u003d content.concat(currentLine + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                countWritings++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                if (type.equals(POEM)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    savedWritings.add(new Poem(title, date, topic, content, author, id));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                } else if (type.equals(ESSAY)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    savedWritings.add(new Essay(title, date, topic, content, author, id));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                if (countContent !\u003d NUMBER_OF_WRITING_COMPONENT) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    throw new NotEnoughWritingComponentException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    countContent \u003d 0; //Reload for reading the data of the next object in the txt file"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            System.out.println(\"This is not valid!\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return countWritings;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /**Check if the data file exists or not, creates \"writings.txt\" in \"data\" directory if not"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     *  @param f file to be processed"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @param savedWritings writings being stored"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void convertFromFile(File f, WritingList savedWritings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        File folder \u003d new File(\"data\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        boolean bool \u003d folder.mkdirs(); // If folder doesn\u0027t exist, then create it"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            convertWritingFile(f, savedWritings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            //System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                System.out.println(\"duke.txt aka the data file created in the data folder!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            } catch (IOException err) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                err.printStackTrace();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } catch (NotEnoughWritingComponentException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            System.out.println(\"There is something wrong with the data file\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /**Write data from ArrayList structure to text form in directory \"data/duke.txt\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @param f file to be processed"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @throws IOException IO error"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private static void recordFile(File f, WritingList savedWritings) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        FileWriter fw \u003d new FileWriter(f);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        for (int i \u003d 0; i \u003c savedWritings.getCountWritings(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            fw.write(\"*id: \" + savedWritings.get(i).getId() + \"\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    + \"*Author: \" + savedWritings.get(i).getAuthor().getName() + \"\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    + \"*Type: \" + savedWritings.get(i).getType() + \"\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    + \"*Title: \" + savedWritings.get(i).getTitle() + \"\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    + \"*Topic: \" + savedWritings.get(i).getTopic() + \"\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    + \"*Date: \" + savedWritings.get(i).getDate() + \"\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    + \"*Content: \\n\" + savedWritings.get(i).getContent()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                    + WRITING_COMPONENT_DIVIDER + \"\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /**Record the file or print error message."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @param f data file to be processed"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @param savedWritings saved Writings of the current state of Writing List"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void recordListToFile(File f, WritingList savedWritings) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            recordFile(f, savedWritings);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Allow the main program to access the file processing."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @param savedWritings list of writing called in the main function"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void loadWritings(WritingList savedWritings) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        Logging log \u003d new Logging();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            log.test();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            File userWritingsFile \u003d FileFunctions.getFileFromFilePath(WRITING_FILE_PATH);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            FileFunctions.checkFileExists(userWritingsFile);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            convertFromFile(userWritingsFile, savedWritings);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            autoCreateNewFile(WRITING_FILE_PATH);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 180
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/BunnyCommandInvalidException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyCommandInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/BunnyIdeaMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyIdeaMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/BunnyIndexOutOfBoundsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyIndexOutOfBoundsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CharacterAlreadyExistException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CharacterAlreadyExistException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CharacterNameMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CharacterNameMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CommandMissingArgumentsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CommandMissingArgumentsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CommandTagMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class CommandTagMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DividerCommandWrongFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DividerCommandWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DividerIndexOutOfBoundsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class DividerIndexOutOfBoundsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/FileEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FileEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/FilePathInvalidException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FilePathInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/FilterCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class FilterCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/MissingFilterOptionsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class MissingFilterOptionsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/MissingParamsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class MissingParamsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/NameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "public class NameException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public NameException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/NoFilteredItemsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class NoFilteredItemsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/NotEnoughWritingComponentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class NotEnoughWritingComponentException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/QuestionTypeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class QuestionTypeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/SettingObjectWrongFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SettingObjectWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/BunnyFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.MissingFilterOptionsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.NoFilteredItemsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.GENRE_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.IDEA_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.parseSingleCharacterTaggedParamsFromUserInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printFilteredBunny;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyFilter {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static HashMap\u003cInteger, Bunny\u003e filteredBunny \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void filterBunny(String userInput, ArrayList\u003cBunny\u003e bunniesList)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws MissingFilterOptionsException, NoFilteredItemsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e filterOptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String componentUserInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String ideaSearchTerm \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String genreSearchTerm \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // flags for filters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean hasAtLeastOneFilterOption \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsIdeaSearchTerm \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsGenreSearchTerm \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse filter command into segments"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseSingleCharacterTaggedParamsFromUserInput(userInput, filterOptions);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingFilterOptionsException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(IDEA_TAG)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            containsIdeaSearchTerm \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            ideaSearchTerm \u003d filterOptions.get(IDEA_TAG).trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(GENRE_TAG)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            containsGenreSearchTerm \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            genreSearchTerm \u003d filterOptions.get(GENRE_TAG).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!hasAtLeastOneFilterOption) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingFilterOptionsException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cInteger, Bunny\u003e numberedBunny \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Set\u003cMap.Entry\u003cInteger, Bunny\u003e\u003e entries \u003d numberedBunny.entrySet();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        filteredBunny.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add all the numbered tasks to a hashmap"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d bunniesList.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numberedBunny.put(i, bunniesList.get(i - 1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make filters final for filtering"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String finalIdeaSearchTerm \u003d ideaSearchTerm;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String finalGenreSearchTerm \u003d genreSearchTerm;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Stream\u003cMap.Entry\u003cInteger, Bunny\u003e\u003e entriesStream \u003d entries.stream();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        entriesStream.filter(containsIdeaSearchTerm ? entry -\u003e entry.getValue().getIdea().contains(finalIdeaSearchTerm)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                : entry -\u003e true)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                .filter(containsGenreSearchTerm ? entry -\u003e entry.getValue().getGenre().contains(finalGenreSearchTerm)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                : entry -\u003e true)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                .forEach(entry -\u003e filteredBunny.put(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filteredBunny.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new NoFilteredItemsException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printFilteredBunny(bunniesList.size(),  filteredBunny);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 88
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/FilterCommandSlicer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.FilterMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.Tags;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class FilterCommandSlicer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Determines whether the program should continue on the previous filter."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param command Filter command from user\u0027s input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @return True if the user wants to continue with the last filtered list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @throws FilterCommandException When the command is not a filter command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static boolean isNewFilter(String command) throws FilterCommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (!command.startsWith(\"filter\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throw new FilterCommandException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return !command.toLowerCase().startsWith(\"filter -continue\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Gets the maximum number of words that the user wants to print after filtering."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * This parameter is optional."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param command Filter command from user\u0027s input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @return An integer referring to the maximum number of words."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static int getWordPrintLimitFromFilterCommand(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (command.toLowerCase().contains(Tags.LIMIT_WORD)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            int limitIndex \u003d command.indexOf(Tags.LIMIT_WORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            String cutCommand \u003d command.substring(limitIndex + 7).trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            int nextSpaceIndex \u003d cutCommand.indexOf(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            String limitNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            if (nextSpaceIndex !\u003d -1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                limitNumber \u003d cutCommand.substring(0, nextSpaceIndex).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                // limit\\ tag is at the end of the line"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                limitNumber \u003d cutCommand.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                return Integer.parseInt(limitNumber);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                System.out.println(FilterMessages.INVALID_PRINT_LIMIT_MESSAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        // if the print limit is not specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Gets the maximum number of words that the user wants to print from his list filter command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param command \"list filter\" command from user\u0027s input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @return Number of words that the user wants to print from the filtered list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static int getWordPrintLimitFromListFilterCommand(String command) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (command.toLowerCase().contains(Tags.LIMIT_WORD)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            int limitIndex \u003d command.indexOf(Tags.LIMIT_WORD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            String cutCommand \u003d command.substring(limitIndex + 7).trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                return Integer.parseInt(cutCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                System.out.println(FilterMessages.INVALID_PRINT_LIMIT_MESSAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        // if the print limit is not specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Gets the word types need filtering."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Available word types are noun, verb and adjective."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param command Contains the word types need filtering."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @return Array of strings referring to word types."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @throws FilterCommandException When no word type is found in the command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static String[] getTargetedWordTypes(String command) throws FilterCommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        ArrayList\u003cString\u003e types \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        ArrayList\u003cString\u003e availableWordTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        initializeAvailableWordTypes(availableWordTypes);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        int index \u003d command.indexOf(Tags.DASH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        while (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            int nextIndex \u003d command.indexOf(Tags.DASH, index + 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            String wordType;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            if (nextIndex !\u003d -1) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                wordType \u003d command.substring(index + 1, nextIndex).trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                wordType \u003d command.substring(index + 1).trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            if (wordType.startsWith(\"continue\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                index \u003d command.indexOf(Tags.DASH, index + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            if (availableWordTypes.contains(wordType)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                types.add(wordType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                throw new FilterCommandException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            index \u003d command.indexOf(Tags.DASH, index + 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (types.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throw new FilterCommandException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return types.toArray(new String[0]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Gets string tags needs filtering in the word list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param command String that contains the strings need filtering."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @return Array of strings referring to the strings need filtering."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @throws FilterCommandException When no string tag is found or when the command format is incorrect."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static String[] getTargetedStringTags(String command) throws FilterCommandException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        ArrayList\u003cString\u003e targetedStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        int index \u003d command.indexOf(Tags.DASH);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        while (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            int nextIndex \u003d command.indexOf(Tags.DASH, index + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            String stringToAdd;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            if (nextIndex !\u003d -1) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                stringToAdd \u003d command.substring(index + 1, nextIndex).trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                stringToAdd \u003d command.substring(index + 1).trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            if (stringToAdd.length() !\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                targetedStrings.add(stringToAdd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                throw new FilterCommandException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            index \u003d command.indexOf(Tags.DASH, index + 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (targetedStrings.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throw new FilterCommandException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return targetedStrings.toArray(new String[0]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static void initializeAvailableWordTypes(ArrayList\u003cString\u003e availableWordTypes) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        availableWordTypes.clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        availableWordTypes.add(Tags.NOUN);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        availableWordTypes.add(Tags.VERB);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        availableWordTypes.add(Tags.ADJECTIVE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 164
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/FilterExecutor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.FilterMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.FilterCommandSlicer.getWordPrintLimitFromFilterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.FilterCommandSlicer.isNewFilter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.FilterCommandSlicer.getTargetedWordTypes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.FilterCommandSlicer.getTargetedStringTags;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.FilterList.printFilterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.FilterType.getTypeOfFilter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.WordsFilter.filterByType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.WordsFilter.filterByStartingString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.WordsFilter.filterByIncludedString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " * A class to process filter commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " * Sample command (must be in order): filter -continue by\\start limit\\10 -cs -cg"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class FilterExecutor {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Executes filter functions depending on filter commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param command String referring to the command the user enters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void executeFilterCommand(String command) throws FilterCommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterType filterType \u003d getTypeOfFilter(command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            String[] tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            boolean isNewFilter \u003d isNewFilter(command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            int printLimit \u003d getWordPrintLimitFromFilterCommand(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            switch (filterType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            case WORD_TYPE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                tags \u003d getTargetedWordTypes(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                assert tags.length !\u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                filterByType(isNewFilter, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            case STARTING_STRING:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                tags \u003d getTargetedStringTags(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                assert tags.length !\u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                filterByStartingString(isNewFilter, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            case INCLUDING_STRING:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                tags \u003d getTargetedStringTags(command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                assert tags.length !\u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                filterByIncludedString(isNewFilter, tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                throw new FilterCommandException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            printFilterList(printLimit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } catch (FilterCommandException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.println(FilterMessages.FILTER_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 58
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/FilterList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.FilterMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.parsers.Parsers;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.words.Words;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.constants.FilterMessages.NO_FILTER_RESULT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class FilterList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Prints the list of filtered words in the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * User can limit the number of the words printed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * If no print limit is provided, the method will print all words in list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param printLimit An integer indicated the number of words that need printing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void printFilterList(int printLimit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        ArrayList\u003cWords\u003e filteredWords \u003d new ArrayList\u003c\u003e(WordsFilter.filteredWords);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (filteredWords.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.println(NO_FILTER_RESULT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (filteredWords.size() \u003c\u003d printLimit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.printf(FilterMessages.FILTER_MESSAGE, filteredWords.size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (Words word : filteredWords) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                System.out.println(word.getDescription() + \": \" + word.getDefinition());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (printLimit !\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.printf(FilterMessages.LONG_FILTER_LIST_MESSAGE, printLimit);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.println(FilterMessages.PRINT_LIMIT_NOT_FOUND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.printf(FilterMessages.FILTER_MESSAGE, filteredWords.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (Words word : filteredWords) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                System.out.println(word.getDescription() + \": \" + word.getDefinition());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String userInput \u003d Parsers.getUserInput(SCANNER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (userInput.trim().equalsIgnoreCase(\"y\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                || userInput.trim().equalsIgnoreCase(\"yes\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.printf(FilterMessages.FILTER_MESSAGE, filteredWords.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (Words word : filteredWords) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                System.out.println(word.getDescription() + \": \" + word.getDefinition());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else if (userInput.trim().equalsIgnoreCase(\"n\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                || userInput.trim().equalsIgnoreCase(\"no\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.printf(FilterMessages.FILTER_MESSAGE_LIMIT, printLimit, filteredWords.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (int i \u003d 0; i \u003c printLimit; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                Words word \u003d filteredWords.get(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                System.out.println(word.getDescription() + \": \" + word.getDefinition());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.println(FilterMessages.INVALID_LIST_FILTER_ANSWER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 67
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/FilterType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.Tags;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " * An enumeration defining types of filter."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public enum FilterType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    WORD_TYPE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    STARTING_STRING,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    INCLUDING_STRING,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    UNKNOWN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Gets type of filter depending on the command entered."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param command String contains filter type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @return Type of filter found in the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @throws FilterCommandException When filter type is not specified in the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static FilterType getTypeOfFilter(String command) throws FilterCommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (!command.toLowerCase().contains(Tags.TYPE_OF_FILTER_TAG)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throw new FilterCommandException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        int indexOfTypeTag \u003d command.indexOf(Tags.TYPE_OF_FILTER_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String cutCommand \u003d command.substring(indexOfTypeTag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        cutCommand \u003d cutCommand.replace(Tags.TYPE_OF_FILTER_TAG, Tags.BLANK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType filterType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (cutCommand.toLowerCase().trim().startsWith(Tags.TYPE_TAG)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filterType \u003d FilterType.WORD_TYPE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else if (cutCommand.toLowerCase().trim().startsWith(Tags.START_TAG)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filterType \u003d FilterType.STARTING_STRING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else if (cutCommand.toLowerCase().trim().startsWith(Tags.INCLUDE_TAG)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filterType \u003d FilterType.INCLUDING_STRING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filterType \u003d FilterType.UNKNOWN;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throw new FilterCommandException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return filterType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/WordsFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.FilterMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.wordlist.WordList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.words.Words;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " * A class containing algorithms that execute the filter."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class WordsFilter {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static ArrayList\u003cWords\u003e filteredWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static final ArrayList\u003cWords\u003e WORD_LIST \u003d WordList.wordList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"WordsFilter\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Prints word filtered by type."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param isNewFilter Clears last filter and creates new filter."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param types Types of words need filtering."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void filterByType(boolean isNewFilter, String[] types) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (isNewFilter) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filteredWords.clear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            addTagsToFilteredList(FilterType.WORD_TYPE, types);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filteredWords \u003d (ArrayList\u003cWords\u003e) filteredWords.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    .filter((w) -\u003e Arrays.asList(types).contains(w.getType()))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Filters words by starting strings and prints them."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param isNewFilter Clears last filter and creates new filter."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param startStrings Array of strings that need filtering."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void filterByStartingString(boolean isNewFilter, String[] startStrings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (isNewFilter) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filteredWords.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            addTagsToFilteredList(FilterType.STARTING_STRING, startStrings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            ArrayList\u003cWords\u003e wordsToRemove \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            generateListOfRemoveWords(FilterType.STARTING_STRING, startStrings, wordsToRemove);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            removeRedundantWords(wordsToRemove);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Filters words by indicated including strings and prints them."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param isNewFilter Clears last filter and creates new filter."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param includedStrings Array of strings that needs filtering."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void filterByIncludedString(boolean isNewFilter, String[] includedStrings) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (isNewFilter) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filteredWords.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            addTagsToFilteredList(FilterType.INCLUDING_STRING, includedStrings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            ArrayList\u003cWords\u003e wordsToRemove \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            generateListOfRemoveWords(FilterType.INCLUDING_STRING, includedStrings, wordsToRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            removeRedundantWords(wordsToRemove);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static void generateListOfRemoveWords(FilterType filterType, String[] patterns,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                                                  ArrayList\u003cWords\u003e wordsToRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        for (Words word : filteredWords) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            boolean keepsWord \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (String pattern : patterns) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                switch (filterType) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                case STARTING_STRING:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    if (word.getDescription().toLowerCase().startsWith(pattern.toLowerCase())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        keepsWord \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                case INCLUDING_STRING:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    if (word.getDescription().toLowerCase().contains(pattern.toLowerCase())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        keepsWord \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    LOGGER.log(Level.WARNING, FilterMessages.INVALID_FILTER_CODE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            if (!keepsWord) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                wordsToRemove.add(word);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static void addTagsToFilteredList(FilterType filterType, String[] patterns) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        for (String pattern : patterns) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            String string \u003d pattern.toLowerCase();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (int i \u003d 0; i \u003c WordList.getNumberOfWords(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                switch (filterType) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                case WORD_TYPE:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    if (WORD_LIST.get(i).getType().equalsIgnoreCase(string)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        filteredWords.add(WORD_LIST.get(i));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                case STARTING_STRING:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    if (WORD_LIST.get(i).getDescription().startsWith(string)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                            \u0026\u0026 !filteredWords.contains(WORD_LIST.get(i))) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        filteredWords.add(WORD_LIST.get(i));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                case INCLUDING_STRING:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    if (WORD_LIST.get(i).getDescription().contains(string)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                            \u0026\u0026 !filteredWords.contains(WORD_LIST.get(i))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        filteredWords.add(WORD_LIST.get(i));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    LOGGER.log(Level.WARNING, FilterMessages.INVALID_FILTER_CODE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static void removeRedundantWords(ArrayList\u003cWords\u003e wordsToRemove) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        for (Words wordToRemove : wordsToRemove) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            while (filteredWords.contains(wordToRemove)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                filteredWords.remove(wordToRemove);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 138
    }
  },
  {
    "path": "src/main/java/seedu/duke/functions/CommandExecutor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.functions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.bunnylist.BunnyList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunnylist.DeleteBunny;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunnylist.GenBunny;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.commands.CommandChecker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.FilterMessages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.BunnyIdeaMissingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.BunnyIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.CommandMissingArgumentsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.DividerCommandWrongFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.DividerIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.MissingFilterOptionsException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.NameException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.NoFilteredItemsException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.filters.FilterCommandSlicer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.filters.FilterExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.filters.FilterList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.wordlist.WordList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import seedu.duke.names.Names;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.writing.WritingList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyList.bunniesList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.BunnySaver.saveAllBunny;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.filters.BunnyFilter.filterBunny;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.changeLineDivider;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printHelpMessage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CommandExecutor {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void executeCommand(CommandChecker commandChecker, String userInput, WritingList writings) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (commandChecker) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] command \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (command.length \u003e 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                printHelpMessage(command[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                printHelpMessage(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DIVIDER:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                changeLineDivider(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DividerCommandWrongFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.dividerCommandWrongFormat();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (DividerIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.dividerIndexOutOfBounds();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case NOUN:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.addNoun(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case VERB:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.addVerb(userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADJ:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.addAdjective(userInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case LIST_WORDS:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.listWords();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        case FILTER_WORDS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                FilterExecutor.executeFilterCommand(userInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            } catch (FilterCommandException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                System.out.println(FilterMessages.FILTER_UNKNOWN_TYPE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        case LIST_FILTER:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            int printLimit \u003d FilterCommandSlicer.getWordPrintLimitFromListFilterCommand(userInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterList.printFilterList(printLimit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case BUNNY:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                BunnyList.addBunny(userInput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (CommandMissingArgumentsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnyWrongFormat();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (BunnyIdeaMissingException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnyMissingIdea();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case LIST_BUNNY:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyList.listBunny();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case FILTER_BUNNY:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                filterBunny(userInput, bunniesList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (MissingFilterOptionsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnyMissingFilterOption();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (NoFilteredItemsException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnyFilterNoneFound();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SAVE_BUNNY:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                saveAllBunny(bunniesList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnySaved();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.failedToSaveBunny();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case DELETE_BUNNY:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                DeleteBunny.deleteBunny(userInput, bunniesList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (BunnyIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnyIndexOutOfBounds();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case RANDOM_BUNNY:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            GenBunny.pickRandomBunny(bunniesList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        case GEN_NAME:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                Names.getName();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (NameException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        case ADD_NAME:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                Names.addName(userInput);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (NameException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        case DELETE_NAME:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                Names.deleteName(userInput);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (NameException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        case FILTER_NAMES:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                Names.filterNames(userInput);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (NameException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        case LIST_NAMES:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                Names.listNames();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (NameException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        case STATS:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            WritingList.printWritings();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        case START:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            WritingList.checkStart(writings);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        case TYPE:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            WritingList.checkType(writings);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        case COUNT_WRITINGS:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            WritingList.printWritingSize();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        case RESET_WRITINGS:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            WritingList.clearAll(writings);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //closes the program"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            UI.commandNotRecognisedMsg();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 46,
      "AmeliaTYR": 95,
      "hungvo0603": 22,
      "Promethees": 19,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/logs/Logging.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.logs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.database.WritingsLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class Logging {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private static Logger logWritingLoader \u003d Logger.getLogger(WritingsLoader.class.getName());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void test() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        logWritingLoader.log(Level.INFO, \"Your database has been up to date!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/names/Names.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "package seedu.duke.names;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import seedu.duke.database.NamesDB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import seedu.duke.exceptions.NameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "public class Names {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    protected static ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Returns a random name from the list of names stored in the database."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void getName() throws NameException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        NamesDB.loadDB(nameList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        if (nameList.size() \u003e 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            Random randomGenerator \u003d new Random();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            int index \u003d randomGenerator.nextInt(nameList.size());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            System.out.println(nameList.get(index));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            throw new NameException(\"No stored Names! Try adding some names first!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Searches for names based on the given input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void filterNames(String match) throws NameException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        NamesDB.loadDB(nameList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        if (nameList.size() \u003e 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            String toMatch \u003d match.toLowerCase().replace(\"filter name\", \"\").trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(\"Match: \" + toMatch);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            for (String name : (nameList.stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    .filter(x -\u003e x.toLowerCase().contains(toMatch))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                    .collect(Collectors.toList()))) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            throw new NameException(\"No stored Names! Try adding some names first!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Displays all names stored in the database."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void listNames() throws NameException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        NamesDB.loadDB(nameList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        if (nameList.size() \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            for (int i \u003d 0; i \u003c nameList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(i + 1 + \". \" + nameList.get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            throw new NameException(\"No stored Names! Try adding some names first!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Add name to the list of names."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void addName(String name) throws NameException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        NamesDB.loadDB(nameList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        String nameToAdd \u003d name.replaceAll(\"(?i)add name\", \"\").trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        if (nameToAdd.length() \u003e 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            nameList.add(nameToAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            NamesDB.updateDB(nameList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            System.out.println(nameToAdd + \" has been added to the Names list!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            throw new NameException(\"Please enter a valid name!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Delete name from the list of names."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void deleteName(String index) throws NameException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        NamesDB.loadDB(nameList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        if (nameList.size() \u003e 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                int indexToDelete \u003d Integer.parseInt(index.replaceAll(\"(?i)delete name\", \"\").trim()) - 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                String nameToDelete \u003d nameList.get(indexToDelete);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                nameList.remove(indexToDelete);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                NamesDB.updateDB(nameList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(nameToDelete + \" has been deleted from the Names list!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                throw new NameException(\"Please enter a valid index!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            throw new NameException(\"No stored Names! Try adding some names first!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 93
    }
  },
  {
    "path": "src/main/java/seedu/duke/parsers/Parsers.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.InputMarkers.INPUT_COMMENT_MARKER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.RegexStrings.BLANK_STRING_REGEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Parsers {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the value string from line in settings save file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileLine    a line read from the file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param objectTitle the string indicating the type of object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return returns the setting extracted from line in the settings file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SettingObjectWrongFormatException the linel in the settings file was wrongly formatted"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String parseFileObject(String fileLine, String objectTitle)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws SettingObjectWrongFormatException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int settingTitleLength \u003d objectTitle.length();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileObject;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int settingObjectPosition \u003d fileLine.indexOf(objectTitle);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if placement is correct"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (settingObjectPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SettingObjectWrongFormatException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileObject \u003d fileLine.substring(settingObjectPosition + settingTitleLength).trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new SettingObjectWrongFormatException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileObject;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Gets user input, ignore comments and blank lines."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param scanner Scanner object for console inputs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return raw user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getUserInput(Scanner scanner) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (userInput.matches(BLANK_STRING_REGEX)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                || userInput.startsWith(INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Parse parameters for double letter tags."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput    line read from the console"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param parsedParams parameters parsed from the line with the tag as key and argument as value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws MissingParamsException line has no missing parameters"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void parseDoubleCharacterTaggedParamsFromUserInput(String userInput,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                                     HashMap\u003cString, String\u003e parsedParams)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws MissingParamsException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String parsedOption;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String optionIndicator;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int startPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        int endPositionIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear filter options"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!userInput.contains(\"\\\\\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingParamsException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (userInput.indexOf(\"\\\\\", startPositionIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placement"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startPositionIndex \u003d userInput.indexOf(\"\\\\\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endPositionIndex \u003d userInput.indexOf(\"\\\\\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // if reached end of string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endPositionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // extract the option"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedOption \u003d userInput.substring(startPositionIndex + 1, endPositionIndex - 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            optionIndicator \u003d userInput.substring(startPositionIndex - 2, startPositionIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // store the option"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // extract the option"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedOption \u003d userInput.substring(startPositionIndex + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        optionIndicator \u003d userInput.substring(startPositionIndex - 2, startPositionIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // store the option"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.put(optionIndicator.toLowerCase(), parsedOption);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Parse parameters for single letter tags."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput    line read from the console"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param parsedParams parameters parsed from the line with the tag as key and argument as value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws MissingParamsException line has no missing parameters"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void parseSingleCharacterTaggedParamsFromUserInput(String userInput,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                                     HashMap\u003cString, String\u003e parsedParams)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws MissingParamsException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String parsedOption;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String optionIndicator;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int startPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        int endPositionIndex;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear filter options"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.clear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!userInput.contains(\"\\\\\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingParamsException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (userInput.indexOf(\"\\\\\", startPositionIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placement"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startPositionIndex \u003d userInput.indexOf(\"\\\\\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endPositionIndex \u003d userInput.indexOf(\"\\\\\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // if reached end of string"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endPositionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // extract the option"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedOption \u003d userInput.substring(startPositionIndex + 1, endPositionIndex - 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            optionIndicator \u003d userInput.substring(startPositionIndex - 1, startPositionIndex);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // store the option"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // extract the option"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedOption \u003d userInput.substring(startPositionIndex + 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        optionIndicator \u003d userInput.substring(startPositionIndex - 1, startPositionIndex);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // store the option"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.put(optionIndicator.toLowerCase(), parsedOption);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse an integer from a string containing an integer."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param stringContainingInt string that contains an integer value"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return the interger value parsed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws NumberFormatException unable to parse integer from given string"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static int getIntFromString(String stringContainingInt) throws NumberFormatException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return Integer.parseInt(stringContainingInt.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 153,
      "hungvo0603": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/settings/Settings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Settings {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected int dividerNum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Settings() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.dividerNum \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Setter for name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Setter for divider number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public void setDividerNum(int divider) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        if (divider \u003c 1 || divider \u003e 4) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            System.out.println(\"Enter a valid number 1 -4!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            this.dividerNum \u003d divider;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Getter for divider number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public int getDividerNum() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.dividerNum;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Getter for divider itself"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getDivider() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return UI.getDivider(this.dividerNum);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Getter for name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 2,
      "thngyuxuan": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/UI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.constants.FluffleMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.DividerCommandWrongFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.DividerIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyList.bunniesList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.CAT_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.FENCE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Line divider set to default before settings are loaded. Default is the first one."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String currentLineDivider \u003d PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void changeLineDivider(String userInput)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws DividerCommandWrongFormatException, DividerIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (userInput.trim().toLowerCase().contains(\"divider\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int dividerNum \u003d getDividerNumFromInput(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            currentLineDivider \u003d getDivider(dividerNum);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            UI.changeDividerMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DividerCommandWrongFormatException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void changeDividerMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Changing line divider...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static int getDividerNumFromInput(String userInput) throws DividerIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int dividerNum;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            dividerNum \u003d Integer.parseInt(userInput.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (dividerNum \u003e 3 || dividerNum \u003c 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new DividerIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new DividerIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return dividerNum;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getDivider(int input) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String divider \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (input \u003d\u003d 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            divider \u003d PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (input \u003d\u003d 2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            divider \u003d CAT_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (input \u003d\u003d 3) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            divider \u003d FENCE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return divider;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Main Help function"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpMessage(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"noun\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            printHelpNoun();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"verb\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            printHelpVerb();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"adj\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            printHelpAdj();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"settings\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        case \"start\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            printHelpStart();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"stats\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpStats();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpClear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpExit();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelp();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] listCommands \u003d {\"noun\", \"verb\", \"adj\", \"settings\", \"list\", \"stats\", \"start\", \"clear\", \"exit\"};"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Type \u0027help \u003cfunction name here\u003e\u0027 to view help for each command.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Available commands:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        for (String listCommand : listCommands) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            System.out.println(listCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Use the following format for the \u0027settings\u0027 command:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"settings n\\\\\u003cname\u003e d\\\\\u003cdivider option\u003e\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Example: settings n\\\\Alice d\\\\3\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printHelpNoun() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Type in the noun you want to save followed by its meaning.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Use the following format for the \u0027noun\u0027 command:\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"noun \u003cword here\u003e d\\\\\u003cdescription\u003e\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Example: noun cat d\\\\a feline animal\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printHelpVerb() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Type in the verb you want to save followed by its meaning.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Use the following format for the \u0027verb\u0027 command:\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"verb \u003cword here\u003e d\\\\\u003cdescription\u003e\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Example: verb eat d\\\\to consume food\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printHelpAdj() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Type in the adjective you want to save followed by its meaning.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Use the following format for the \u0027adj\u0027 command:\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"adj \u003cword here\u003e d\\\\\u003cdescription\u003e\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Example: adj hungry d\\\\the feeling due to lack of food\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"List all available words by typing \u0027list\u0027.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void printHelpStart() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"Embark your writings session!\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpStats() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Show your results and statistics of a specific quiz by typing \u0027quiz t\\\\QUIZ_INDEX\u0027.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Example: quiz t\\\\3\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpClear() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        System.out.println(\"Delete all your saved quizzes in CLIcker by typing \u0027clear\u0027. \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                + \"A warning prompt will be generated before deletion.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpExit() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Exit the program by typing \u0027exit\u0027.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the personalised greeting message."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username user input name"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printHelloMessage(String username) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf(FluffleMessages.HELLO_GREETING, username);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the personalised farewell message."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username user indicated name"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFarewellMessage(String username) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.printf(FluffleMessages.FAREWELL_GREETING, username);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Prints the line divider to the console."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(currentLineDivider);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addBunnyMessage(String bunny) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(FluffleMessages.ADD_BUNNY_MSG + \"\\n\" + bunny);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyWrongFormat() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(FluffleMessages.BUNNY_WRONG_FORMAT);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyMissingIdea() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(FluffleMessages.BUNNY_MISSING_IDEA_MSG);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void listBunnyMessage() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(FluffleMessages.LIST_BUNNY_MSG);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void listCharacterMessage() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(FluffleMessages.LIST_CHARACTER_MSG);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addNounMessage(String noun) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(FluffleMessages.ADD_NOUN_MSG + noun);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addVerbMessage(String verb) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(FluffleMessages.ADD_VERB_MSG + verb);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addAdjectiveMessage(String adj) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(FluffleMessages.ADD_ADJECTIVE_MSG + adj);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void listWordsMessage() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(FluffleMessages.LIST_WORDS_MSG);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void commandNotRecognisedMsg() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(FluffleMessages.COMMAND_UNRECOGNISED_MSG);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void numBunnyLoaded(int numBunnies, int numBunniesLoaded) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(String.format(\"%1$s of %2$s bunnies loaded!\", numBunniesLoaded, numBunnies));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void createNewBunnyFile() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Writing to bunny file\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void failedToSaveBunny() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Failed to save bunny list\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnySaved() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Bunny list saved!\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFilteredBunny(int numBunny, HashMap\u003cInteger, Bunny\u003e filteredBunny) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int bunnyFiltered \u003d 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d numBunny; i++) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (filteredBunny.containsKey(i)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println((i) + \".\\n\" + bunniesList.get(i - 1).getDescription());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                bunnyFiltered++;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        bunnyFilterSummary(bunnyFiltered);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void bunnyFilterSummary(int bunnyFiltered) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"number bunny filtered: \" + bunnyFiltered);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyMissingFilterOption() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"filter bunny command missing filter options.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyFilterNoneFound() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"No bunny matching filter options\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyDeleted(int bunnyNum) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.print(FluffleMessages.BUNNY_DELETED_MSG);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.print(bunniesList.get(bunnyNum - 1).getDescription());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void printAskForName(String username) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.print(FluffleMessages.ASK_FOR_NAME);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyIndexOutOfBounds() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Bunny index is not in list.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void dividerCommandWrongFormat() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Divider command of wrong format\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void dividerIndexOutOfBounds() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Divider index indicated out of bounds\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyRandomlySelected(int bunnySelected) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.print(FluffleMessages.BUNNY_RANDOMLY_SELECTED_MSG);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.print(bunniesList.get(bunnySelected - 1).getDescription());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 168,
      "hungvo0603": 2,
      "thngyuxuan": 77,
      "Promethees": 7,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/user/User.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.LENGTH_OF_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.HELP_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private String registeredDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public User(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setRegisteredDate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String getRegisteredDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return registeredDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setRegisteredDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.registeredDate \u003d now.toString().substring(0, LENGTH_OF_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void greetUser() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"Hello \" + this.name + \". Welcome to Fluffle!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"Your registration has been recorded on \" + registeredDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void printInstruction() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(HELP_MESSAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return \"Your username is: \" + name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                + \"Your registeredDate is: \" + registeredDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 1,
      "Promethees": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/wordlist/WordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.wordlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.Tags;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Words;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Noun;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Verb;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Adjective;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class WordList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static ArrayList\u003cWords\u003e wordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static int getNumberOfWords() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return wordList.size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to add noun to word list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @param input a string which contains"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     *              the word and its definition"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addNoun(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] word \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] splitInput \u003d word[1].trim().split(Tags.DESCRIPTION_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        Words toAdd \u003d new Noun(splitInput[0],splitInput[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        wordList.add(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.addNounMessage(toAdd.getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to add verb to word list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @param input a string which contains"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     *              the word and its definition"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addVerb(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] word \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] splitInput \u003d word[1].split(Tags.DESCRIPTION_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        Words toAdd \u003d new Verb(splitInput[0],splitInput[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        wordList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.addVerbMessage(toAdd.getDescription());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to add adjective to word list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @param input a string which contains"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     *              the word and its definition"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addAdjective(String input) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] word \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] splitInput \u003d word[1].split(Tags.DESCRIPTION_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        Words toAdd \u003d new Adjective(splitInput[0],splitInput[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        wordList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.addAdjectiveMessage(toAdd.getDescription());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void listWords() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.listWordsMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        for (int i \u003d 0; i \u003c wordList.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            System.out.println((i + 1) + \".\" + wordList.get(i).getDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 9,
      "thngyuxuan": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Adjective.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Adjective extends Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Adjective(String description, String definition) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        super(description, definition);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return \"adjective\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Noun.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Noun extends Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Noun(String description, String definition) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        super(description, definition);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return \"noun\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Verb.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Verb extends Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Verb(String description, String definition) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        super(description, definition);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return \"verb\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Words.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public abstract class Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected String definition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Words(String description, String definition) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.definition \u003d definition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to get the type of this word."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * i.e. Noun, Verb, or Adjective"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @return the type of this word"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getDefinition() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.definition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/writing/Essay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.writing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.ESSAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "public class Essay extends Writings {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private int numberOfSentences;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private int numberOfWords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private int countEssays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public Essay(String title, int id, String topic, String content, String author) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setDate();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setType();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setTitle(title);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setId(id);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setTopic(topic);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setContent(content);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setAuthor(author);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        countEssays++;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public Essay(String title, String date, String topic, String content, String author, int id) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setTitle(title);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setId(id);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setTopic(topic);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setContent(content);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setAuthor(author);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        countEssays++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setNumberOfSentences() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        for (int i \u003d 0; i \u003c this.content.length(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            if (this.content.charAt(i) \u003d\u003d \u0027.\u0027) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.numberOfSentences \u003d count;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setNumberOfWords() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        for (int i \u003d 0; i \u003c this.content.length(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            if (this.content.charAt(i) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public int getCountEssays() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return countEssays;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.type \u003d ESSAY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public int getNumberOfLines() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public int getNumberOfSentences() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return this.numberOfSentences;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public int getNumberOfWords() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return this.numberOfWords;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void printPoemProperties() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void printEssayProperties() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"This essay has \" + getNumberOfSentences()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                + \" and \" + getNumberOfWords());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 2,
      "hungvo0603": 1,
      "Promethees": 82
    }
  },
  {
    "path": "src/main/java/seedu/duke/writing/Poem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.writing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.POEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class Poem extends Writings {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private int numberOfLines;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private int numberOfWords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private int countPoems;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public Poem(String title, int id, String topic, String content, String author) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setDate();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setType();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setTitle(title);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setId(id);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setTopic(topic);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setContent(content);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setAuthor(author);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setNumberOfLines();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setNumberOfWords();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        countPoems++;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public Poem(String title, String date, String topic, String content, String author, int id) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setTitle(title);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setId(id);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setTopic(topic);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setContent(content);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setAuthor(author);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        countPoems++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setNumberOfLines();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        setNumberOfWords();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setNumberOfLines() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        for (int i \u003d 0; i \u003c this.content.length(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            if (this.content.charAt(i) \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.numberOfLines \u003d count;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public int getNumberOfLines() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return this.numberOfLines;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public int getNumberOfSentences() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public int getNumberOfWords() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return this.numberOfWords;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void printPoemProperties() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"This poem has \" + getNumberOfLines()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                + \" and \" + getNumberOfWords());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void printEssayProperties() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setNumberOfWords() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        for (int i \u003d 0; i \u003c this.content.length(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            if (this.content.charAt(i) \u003d\u003d \u0027 \u0027 || this.content.charAt(i) \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            this.numberOfWords \u003d count;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public int getCountPoems() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return countPoems;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setType() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.type \u003d POEM;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 97
    }
  },
  {
    "path": "src/main/java/seedu/duke/writing/WritingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.writing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.commands.CommandChecker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.database.FileFunctions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.Duke.user;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "//import static seedu.duke.Duke.writings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.commands.CommandChecker.UNRECOGNISED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.commands.CommandChecker.TYPE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.commands.CommandChecker.POEM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.commands.CommandChecker.ESSAY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.commands.CommandChecker.extractCommandType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.FilePaths.WRITING_FILE_PATH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.functions.CommandExecutor.executeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.parsers.Parsers.getUserInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.MAX_NUM_WRITINGS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.database.WritingsLoader.recordListToFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.ASSERTION_ID_ERROR;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.SUCCESSFUL_ADD_WRITING_TO_DATABASE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.INSTRUCTION_FOR_ADDING_NEW_WRITINGS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.TYPE_COMMAND_INSTRUCTION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.ASKING_FOR_TYPE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.ASKING_FOR_TITLE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.EMPTY_WRITING_MESSAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.CLEAR_DATA_MESSAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FluffleMessages.ASKING_FOR_TOPIC;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class WritingList {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static ArrayList\u003cWritings\u003e writinglist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    //Used to clear all of writings when resetting database"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    static int countWritings \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public WritingList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.writinglist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void add(Writings w) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.writinglist.add(w);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public Writings get(int i) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return this.writinglist.get(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void remove(int i) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.writinglist.remove(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Get the number of writings available in the storage. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static int getCountWritings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return writinglist.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Print the UI message along with number of writings. */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void printWritingSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"In our storage, there is/are currently \" + getWritingSize() + \" writing(s)\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     *  print all of the current writings in the Arraylist with details."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     *  Triggered when \"stats\" command is called."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void printWritings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        assert (writinglist.size() \u003e 0) : EMPTY_WRITING_MESSAGE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        for (Writings w : writinglist) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            w.printWritingsProperties();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            if (w.getType().equals(POEM)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                w.printPoemProperties();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            } else if (w.getType().equals(ESSAY)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                w.printEssayProperties();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void printAskForType() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(ASKING_FOR_TYPE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void printAskForTitle() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(ASKING_FOR_TITLE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void printAskForTopic() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(ASKING_FOR_TOPIC);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static int getWritingSize() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return writinglist.size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * Operate when command \"start\" is called, embark the process the writing process."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @param writings the list of writings to be modified (in this case: added new item)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void checkStart(WritingList writings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String newUserInput \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            CommandChecker commandStartChecker \u003d UNRECOGNISED;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            while (commandStartChecker !\u003d TYPE) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                System.out.println(TYPE_COMMAND_INSTRUCTION);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                newUserInput \u003d getUserInput(scanner);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                commandStartChecker \u003d extractCommandType(newUserInput);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            executeCommand(commandStartChecker, newUserInput, writings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * Operate when command \"type\" is called, allow the user to choose the desire topic."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * @param writings the list of writings to be modified (in this case: added new item)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void checkType(WritingList writings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String newUserInput;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        File f \u003d FileFunctions.getFileFromFilePath(WRITING_FILE_PATH);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            CommandChecker commandStartChecker \u003d UNRECOGNISED;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            while (commandStartChecker !\u003d POEM \u0026\u0026 commandStartChecker !\u003d ESSAY) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                WritingList.printAskForType();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                newUserInput \u003d getUserInput(scanner);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                commandStartChecker \u003d extractCommandType(newUserInput);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            WritingList.printAskForTopic();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            newUserInput \u003d getUserInput(scanner);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            String topic \u003d newUserInput;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            WritingList.printAskForTitle();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            newUserInput \u003d getUserInput(scanner);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            String title \u003d newUserInput;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            System.out.println(INSTRUCTION_FOR_ADDING_NEW_WRITINGS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            while (!newUserInput.equals(\"end\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                newUserInput \u003d getUserInput(scanner);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                content \u003d content.concat(newUserInput + \"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            Random rand \u003d new Random();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            int newId \u003d rand.nextInt(MAX_NUM_WRITINGS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            if (commandStartChecker \u003d\u003d POEM) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                addPoem(title, newId, topic, content, user.getName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            } else if (commandStartChecker \u003d\u003d ESSAY) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                addEssay(title, newId, topic, content, user.getName());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            System.out.println(SUCCESSFUL_ADD_WRITING_TO_DATABASE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            recordListToFile(f, writings);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * Clear all data stored in writing.txt."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     * To be associated with command \"reset writing\"."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Promethees"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void clearAll(WritingList writings) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        writings.writinglist.clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(CLEAR_DATA_MESSAGE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        //Reset countWritings"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        File f \u003d FileFunctions.getFileFromFilePath(WRITING_FILE_PATH);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        recordListToFile(f, writings);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        writings.countWritings \u003d 0;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Adding a poem to the database. */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void addPoem(String title, int id, String topic, String content, String author) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        assert (id \u003c\u003d MAX_NUM_WRITINGS \u0026\u0026 id \u003e\u003d 0) : ASSERTION_ID_ERROR;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        Poem toBeAdded \u003d new Poem(title, id, topic, content, author);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        writinglist.add(toBeAdded);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        countWritings++;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"This Poem, \" + title +  \" has been added\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Adding an essay to the database. */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void addEssay(String title, int id, String topic, String content, String author) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        assert (id \u003c\u003d MAX_NUM_WRITINGS \u0026\u0026 id \u003e\u003d 0) : ASSERTION_ID_ERROR;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        Essay toBeAdded \u003d new Essay(title, id, topic, content, author);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        writinglist.add(toBeAdded);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        countWritings++;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"This Essay, \" + title +  \" has been added\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 9,
      "Promethees": 185
    }
  },
  {
    "path": "src/main/java/seedu/duke/writing/Writings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.writing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.user.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.DataFileConvention.LENGTH_OF_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.Logos.PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public abstract class Writings {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected String title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected int id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected String topic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected String content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected User author;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void createTitle(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String[] words \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setId(int id) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String getTopic() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return topic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setTopic(String topic) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.topic \u003d topic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.date \u003d now.toString().substring(0, LENGTH_OF_DATE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setContent(String content) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public User getAuthor() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setAuthor(String author) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.author \u003d new User(author);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract int getNumberOfLines();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract int getNumberOfSentences();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract int getNumberOfWords();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract void printPoemProperties();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract void printEssayProperties();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void printWritingsProperties() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"This is a \" + getType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"Written by \" + getAuthor().getName() + \"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"Id: \" + getId());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(getTitle().toUpperCase() + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(getContent());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(\"This writing was created on \" + date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(PLAIN_TEXT_DIVIDER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 98
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/duke/bunnylist/BunnyListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.bunnylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.BunnyIdeaMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.CommandMissingArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.wordlist.WordList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void initializeBunnyListTestDatabase() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyList.addBunny(\"bunny i\\\\ cool idea g\\\\ cool\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyList.addBunny(\"bunny i\\\\ some fun idea g\\\\ fun\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyList.addBunny(\"bunny i\\\\ kind of awesome idea g\\\\ awesome\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyList.addBunny(\"bunny i\\\\ some random idea g\\\\ awesome\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyList.addBunny(\"bunny i\\\\ funny idea g\\\\ fun\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyList.addBunny(\"bunny i\\\\ some strange idea g\\\\ mystery\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyList.addBunny(\"bunny i\\\\ idea example g\\\\ unknown\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (CommandMissingArgumentsException | BunnyIdeaMissingException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    void numBunny() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        BunnyList.bunniesList.clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        initializeBunnyListTestDatabase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        assertEquals(7, BunnyList.numBunny());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 1,
      "AmeliaTYR": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/bunnylist/DeleteBunnyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.bunnylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.BunnyIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyList.bunniesList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyListTest.initializeBunnyListTestDatabase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "class DeleteBunnyTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    void deleteBunny_deleteSecondBunnyInList_getTwoBunny() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        bunniesList.clear();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        initializeBunnyListTestDatabase();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        assertEquals(7, BunnyList.numBunny());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            DeleteBunny.deleteBunny(\"delete bunny 2\", bunniesList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            DeleteBunny.deleteBunny(\"delete bunny 3\", bunniesList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (BunnyIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        assertEquals(5, BunnyList.numBunny());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    void getNumFromInput_parseIntFromInput_getIntValue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            assertEquals(3, DeleteBunny.getNumFromInput(\"delete bunny 3\", 5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (BunnyIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 34
    }
  },
  {
    "path": "src/test/java/seedu/duke/filters/BunnyFilterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunnylist.BunnyList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.MissingFilterOptionsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.NoFilteredItemsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyList.bunniesList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyListTest.initializeBunnyListTestDatabase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "class BunnyFilterTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    void filterBunny_filterIdeaTerm_getTwoResults() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        BunnyList.bunniesList.clear();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        initializeBunnyListTestDatabase();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyFilter.filterBunny(\"filter bunny i\\\\ fun\", bunniesList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingFilterOptionsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (NoFilteredItemsException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        assertEquals(2, BunnyFilter.filteredBunny.size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    void filterBunny_filterGenreTerm_getTwoResults() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        BunnyList.bunniesList.clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        initializeBunnyListTestDatabase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyFilter.filterBunny(\"filter bunny g\\\\ awesome\", bunniesList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingFilterOptionsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (NoFilteredItemsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        assertEquals(2, BunnyFilter.filteredBunny.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    void filterBunny_filterIdeaAndGenreTerm_getOneResult() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        BunnyList.bunniesList.clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        initializeBunnyListTestDatabase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyFilter.filterBunny(\"filter bunny i\\\\ some g\\\\fun \", bunniesList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingFilterOptionsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (NoFilteredItemsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        assertEquals(1, BunnyFilter.filteredBunny.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 57
    }
  },
  {
    "path": "src/test/java/seedu/duke/filters/FilterCommandSlicerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "class FilterCommandSlicerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedWordType_adjectiveFilterRecognition_arrayOfAdjectiveType()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throws FilterCommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"adjective\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedWordTypes(\"filter -continue by\\\\type -adjective\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(1, actual.length);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedWordType_nounAndVerbFilterRecognition_arrayOfNounAndVerbElements()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throws FilterCommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"verb\", \"noun\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedWordTypes(\"filter by\\\\type -verb -noun\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(2, actual.length);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedWordType_allTypeFilterRecognition_arrayOfAllWordType()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throws FilterCommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"adjective\", \"verb\", \"noun\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedWordTypes(\"filter by\\\\type -adjective -verb -noun\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(3, actual.length);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedWordType_noWordTypeFound_filterCommandExceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertThrows(FilterCommandException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            () -\u003e FilterCommandSlicer.getTargetedWordTypes(\"filter by\\\\type -adverb -preposition\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedStringTags_oneStringTagNoSpace_success() throws FilterCommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"cs\"};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedStringTags(\"filter by\\\\contain -cs\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(1, actual.length);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedStringTags_oneStringTagHaveSpace_success() throws FilterCommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"cs 2113 t\"};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedStringTags(\"filter by\\\\start -cs 2113 t\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(1, actual.length);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedStringTags_twoStringTagsNoSpace_success() throws FilterCommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"cs 2113 t\", \"cs 2101\"};"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedStringTags(\"filter by\\\\start -cs 2113 t -cs 2101\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(2, actual.length);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedStringTags_twoStringTagsHaveSpace_success() throws FilterCommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"cs2113t\", \"cs2101\"};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedStringTags(\"filter by\\\\contain -cs2113t -cs2101\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(2, actual.length);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedStringTags_noStringTagProvided_filterCommandExceptionThrown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertThrows(FilterCommandException.class,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            () -\u003e FilterCommandSlicer.getTargetedStringTags(\"filter by\\\\start - \"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 85
    }
  },
  {
    "path": "src/test/java/seedu/duke/filters/FilterTypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "class FilterTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTypeOfFilter_wordTypeFilter_wordType() throws FilterCommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType expected \u003d FilterType.WORD_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType actual \u003d FilterType.getTypeOfFilter(\"filter by\\\\type -noun -adjective\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTypeOfFilter_startingStringFilter_startingString() throws FilterCommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType expected \u003d FilterType.STARTING_STRING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType actual \u003d FilterType.getTypeOfFilter(\"filter by\\\\start -nho -e\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTypeOfFilter_includedStringFilter_includingString() throws FilterCommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType expected \u003d FilterType.INCLUDING_STRING;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType actual \u003d FilterType.getTypeOfFilter(\"filter by\\\\include -th -ao\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTypeOfFilter_invalidTypeFilter_filterCommandExceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertThrows(FilterCommandException.class, () -\u003e FilterType.getTypeOfFilter(\"filter by\\\\abcd -xyz -jkl\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/filters/WordsFilterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.wordlist.WordList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "class WordsFilterTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static void initializeTestDatabase() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addNoun(\"noun house d\\\\place to live\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addVerb(\"verb eat d\\\\put sth into your mouth\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addAdjective(\"adj beautiful d\\\\nice to look at\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addNoun(\"noun grass d\\\\green plant\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addNoun(\"noun computer d\\\\hitech stuff\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addAdjective(\"adj nice d\\\\you\u0027re so nice\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addAdjective(\"adj meaningful d\\\\something nice\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addVerb(\"verb sleep d\\\\rest at night\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addNoun(\"noun class d\\\\place to study\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addVerb(\"verb love d\\\\fall for somebody\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void filterByType_filterNounAtTheEnd_getFourNouns() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.wordList.clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        initializeTestDatabase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(10, WordList.getNumberOfWords());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterExecutor.executeFilterCommand(\"filter by\\\\type -noun -verb\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } catch (FilterCommandException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(7, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterExecutor.executeFilterCommand(\"filter -continue by\\\\type -noun\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } catch (FilterCommandException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(4, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void filterByStartingString_filterMultipleStartingStrings_getOneWord() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.wordList.clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        initializeTestDatabase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(10, WordList.getNumberOfWords());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterExecutor.executeFilterCommand(\"filter by\\\\start -gr -co -s -ho\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } catch (FilterCommandException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(4, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterExecutor.executeFilterCommand(\"filter -continue by\\\\start -g\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } catch (FilterCommandException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(1, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void filterByIncludedString_filterMultipleIncludedStrings_getOneWord() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.wordList.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        initializeTestDatabase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(10, WordList.getNumberOfWords());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterExecutor.executeFilterCommand(\"filter by\\\\include -mp -pu -a -e\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } catch (FilterCommandException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(10, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterExecutor.executeFilterCommand(\"filter -continue by\\\\include -e\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } catch (FilterCommandException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(8, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterExecutor.executeFilterCommand(\"filter -continue by\\\\include -lo\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } catch (FilterCommandException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(1, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 86
    }
  },
  {
    "path": "src/test/java/seedu/duke/writinglist/EssayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.writinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class EssayTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 6
    }
  },
  {
    "path": "src/test/java/seedu/duke/writinglist/PoemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.writinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.writing.Poem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class PoemTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    void addPoem() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/writinglist/WritingListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.writinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.writing.WritingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class WritingListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private static void initializeTestDatabase() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        WritingList.addPoem(\"fantasy\", 12, \"thih\", \"sdfa\", \"jdkfa\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        WritingList.addPoem(\"fantasy\", 12, \"thih\", \"sdfa\", \"jdkfa\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        WritingList.addPoem(\"fantasy\", 12, \"thih\", \"sdfa\", \"jdkfa\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        WritingList.addEssay(\"fantasy\", 12, \"thih\", \"sdfa\", \"jdkfa\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        WritingList.addEssay(\"fantasy\", 12, \"thih\", \"sdfa\", \"jdkfa\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void removeAllWritings_getWritingSize() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        WritingList.writinglist.clear();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        initializeTestDatabase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        assertEquals(5, WritingList.getWritingSize());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        WritingList.writinglist.clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        assertEquals(0, WritingList.getWritingSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void testRemoveID() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        WritingList.writinglist.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        initializeTestDatabase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        assertEquals(5, WritingList.getWritingSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Promethees": 34
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Fluffle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 2,
      "Promethees": 1
    }
  }
]
