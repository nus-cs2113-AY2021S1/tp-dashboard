[
  {
    "path": "data/bunny.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "number of plot bunnies: 3"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "1."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: test bunny idea 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: none"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "2."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: test bunny idea 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: none"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "3."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  idea: idea number 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "  genre: ideas"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 14
    }
  },
  {
    "path": "data/characters.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "number of characters: 2"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "name:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "age:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "--------------------------------------------------------------"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "name:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "age:"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 7
    }
  },
  {
    "path": "data/history.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Username: John Doeh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Number of quizzes taken: 3"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quizzes taken: 1 | 4 | 8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 1 | 10 | 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 4 | 20 | 10"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 8 | 20 | 10"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "----------------------------"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q1: 1 | 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q2: 1 | 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q3: 1 | 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q4: 1 | 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q5: 1 | 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q6: 1 | 0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q7: 1 | 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q8: 1 | 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q9: 1 | 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q10: 1 | 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "----------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 4"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q1: 1 | 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q2: 1 | 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q3: 1 | 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q4: 1 | 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q5: 1 | 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q6: 1 | 0"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q7: 1 | 0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q8: 1 | 0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q9: 1 | 0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q10: 1 | 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q11: 1 | 1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q12: 1 | 1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q13: 1 | 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q14: 1 | 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q15: 1 | 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q16: 1 | 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q17: 1 | 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q18: 1 | 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q19: 1 | 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q20: 1 | 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": "----------------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Quiz: 8"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q1: 1 | 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q2: 1 | 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q3: 1 | 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q4: 1 | 1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q5: 1 | 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q6: 1 | 0"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q7: 1 | 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q8: 1 | 0"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q9: 1 | 0"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q10: 1 | 0"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q11: 1 | 1"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q12: 1 | 1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q13: 1 | 1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q14: 1 | 1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q15: 1 | 1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q16: 1 | 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q17: 1 | 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q18: 1 | 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q19: 1 | 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Promethees"
        },
        "content": "Q20: 1 | 0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Promethees"
        },
        "content": "----------------------------"
      }
    ],
    "authorContributionMap": {
      "Promethees": 63
    }
  },
  {
    "path": "data/userSettings.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Username: John Doe"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "Divider Choice: 1"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 2
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Vo Quang Hung | [Github](https://github.com/) | [Portfolio](team/johndoe.md) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](team/johndoe.md) "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Amelia Tan | [Github](https://github.com/) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Minh thong | [Github](https://github.com/) | [Portfolio](team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 5,
      "AmeliaTYR": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.commands.CommandChecker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.constants.Logos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.history.History;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyList.bunniesList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.BunnyLoader.loadBunnyFile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.database.UserSettingsLoader.loadUserSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.commands.CommandChecker.UNRECOGNISED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.commands.CommandChecker.extractCommandType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.functions.CommandExecutor.executeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.getUserInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printDivider;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printFarewellMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printHelloMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Settings set to defaults."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static final int NUMBER_OF_SETTINGS \u003d 1; // currently only username"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private static final int NUMBER_OF_HISTORY \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String username \u003d \"User\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cString\u003e savedSettings \u003d new ArrayList\u003c\u003e(NUMBER_OF_SETTINGS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static ArrayList\u003cHistory\u003e savedHistory \u003d new ArrayList\u003c\u003e(NUMBER_OF_HISTORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Main entry-point for the Fluffle application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        setUserSettingsArrayList(savedSettings, username);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        loadUserSettings(savedSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        loadBunnyFile(bunniesList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        username \u003d savedSettings.get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Write a story with\\n\" + Logos.BIG_FLUFFLE_LOGO);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printHelloMessage(username);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        CommandChecker commandChecker \u003d UNRECOGNISED;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (commandChecker !\u003d CommandChecker.EXIT) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d getUserInput(SCANNER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            commandChecker \u003d extractCommandType(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            executeCommand(commandChecker, userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printDivider();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printFarewellMessage(username);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Set the values in the array for the saved settings."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings Array of saved settings"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username      User input name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static void setUserSettingsArrayList(ArrayList\u003cString\u003e savedSettings, String username) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        savedSettings.add(username);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 42,
      "hungvo0603": 15,
      "thngyuxuan": 1,
      "Promethees": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/bunny/Bunny.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.bunny;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " * Class for plot bunny."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Bunny {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** A brief description of the idea. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private String idea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** The genre of the idea. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private String genre;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** The Characters used in the idea. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private ArrayList\u003cCharacter\u003e characters;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Bunny(String idea) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setIdea(idea);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Bunny(String idea, String genre) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setIdea(idea);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setGenre(genre);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Bunny(String idea, String genre, ArrayList\u003cCharacter\u003e characters) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setIdea(idea);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setGenre(genre);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setCharacters(characters);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getIdea() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return idea;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setIdea(String idea) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.idea \u003d idea;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getGenre() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return genre;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setGenre(String genre) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.genre \u003d genre;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ArrayList\u003cCharacter\u003e getCharacters() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return characters;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setCharacters(ArrayList\u003cCharacter\u003e characters) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.characters \u003d characters;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // todo: add character list in version 2"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String description \u003d \"  idea: \" + idea + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!genre.isBlank()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            description \u003d description + \"  genre: \" + genre + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            description \u003d description + \"  genre: none\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 65,
      "hungvo0603": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/bunnylist/BunnyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.bunnylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.BunnyIdeaMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.CommandMissingArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.GENRE_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.IDEA_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.parseSingleCharacterTaggedParamsFromUserInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cBunny\u003e bunniesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addBunny(String userInput) throws CommandMissingArgumentsException, BunnyIdeaMissingException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e commandArguments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String idea;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String genre \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse bunny command into segments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseSingleCharacterTaggedParamsFromUserInput(userInput, commandArguments);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new CommandMissingArgumentsException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if there is task type param"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (commandArguments.containsKey(IDEA_TAG)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            idea \u003d commandArguments.get(IDEA_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new BunnyIdeaMissingException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (commandArguments.containsKey(GENRE_TAG)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            genre \u003d commandArguments.get(GENRE_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // todo: add the character list to bunny in ver 2"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //ArrayList\u003cCharacter\u003e characters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Bunny newBunny \u003d new Bunny(idea.trim(), genre.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        bunniesList.add(newBunny);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.addBunnyMessage(newBunny.getDescription());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void listBunny() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.listBunnyMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c bunniesList.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println((i + 1) + \".\\n\" + bunniesList.get(i).getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 1,
      "AmeliaTYR": 57
    }
  },
  {
    "path": "src/main/java/seedu/duke/character/Character.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.character;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " * Class for character."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Character {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private String characterName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private ArrayList\u003cString\u003e aliases;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private ArrayList\u003cCharacter\u003e friends;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private ArrayList\u003cCharacter\u003e enemies;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Character(String characterName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setCharacterName(characterName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public Character(String characterName, ArrayList\u003cString\u003e aliases, ArrayList\u003cCharacter\u003e friends,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                     ArrayList\u003cCharacter\u003e enemies, int age) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setCharacterName(characterName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setAliases(aliases);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setFriends(friends);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setEnemies(enemies);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        setAge(age);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setCharacterName(String characterName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.characterName \u003d characterName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setAliases(ArrayList\u003cString\u003e aliases) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.aliases \u003d aliases;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setFriends(ArrayList\u003cCharacter\u003e friends) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.friends \u003d friends;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setEnemies(ArrayList\u003cCharacter\u003e enemies) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.enemies \u003d enemies;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getCharacterName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return characterName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ArrayList\u003cString\u003e getAliases() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return aliases;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ArrayList\u003cCharacter\u003e getFriends() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return friends;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public ArrayList\u003cCharacter\u003e getEnemies() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return enemies;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    // todo: add other aspects in print out later on"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String description \u003d \"  name: \" + characterName + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 72,
      "hungvo0603": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/characterlist/CharacterList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.characterlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.character.Character;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.CharacterAlreadyExistException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.CharacterNameMissingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.CommandMissingArgumentsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.NAME_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.parseSingleCharacterTaggedParamsFromUserInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CharacterList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static ArrayList\u003cCharacter\u003e characters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void addCharacter(String userInput)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws CommandMissingArgumentsException,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            CharacterNameMissingException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            CharacterAlreadyExistException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e commandArguments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int age \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        ArrayList\u003cString\u003e aliases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Character newCharacter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse character command into segments"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseSingleCharacterTaggedParamsFromUserInput(userInput, commandArguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new CommandMissingArgumentsException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if there is task type param"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (commandArguments.containsKey(NAME_TAG)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            name \u003d commandArguments.get(NAME_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new CharacterNameMissingException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check that character doesn\u0027t already exist in the list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (characterNameInList(name)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new CharacterAlreadyExistException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        characters.add(new Character(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.addBunnyMessage(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void listCharacter() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.listCharacterMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c characters.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.println((i + 1) + \".\\n\" + characters.get(i).getCharacterName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static boolean characterNameInList(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (Character character : characters) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (name.equals(character.getCharacterName())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 2,
      "AmeliaTYR": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommands.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.database.QuestionSavers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.exceptions.CommandTagMissingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.exceptions.QuestionTypeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.FillBlank;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Qna;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class AddCommands {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    // Sample command to add questions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    // qna tp\\topic st\\subTopic qn\\questionName qns\\question ans\\answer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    // fillblank tp\\topic st\\subTopic qn\\questionName sb\\stringBefore bl\\blank sa\\stringAfter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    // mcq tp\\topic st\\subTopic qn\\questionName qns\\question ans\\answer wa1\\ wa2\\ wa3\\ wa4\\"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static final ArrayList\u003cInteger\u003e indexesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    public static void addQuestion() throws QuestionTypeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        System.out.println(\"Input add function, exit by command \\\"exit\\\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String command \u003d CommandChecker.getUserInput();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        while (!command.equalsIgnoreCase(\"exit\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            switch (CommandChecker.commandType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case QNA:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                addQnaQuestion(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case FILLBLANK:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                addFillBlankQuestion(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                throw new QuestionTypeException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            command \u003d CommandChecker.getUserInput();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void addQnaQuestion(String command) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            getIndexesOfTagsFromQna(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (CommandTagMissingException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"Your Qna command tags are missing somewhere ...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String topic \u003d extractTagInformationFromCommand(command, \"topic\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String subTopic \u003d extractTagInformationFromCommand(command, \"subTopic\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String questionName \u003d extractTagInformationFromCommand(command, \"questionName\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String question \u003d extractTagInformationFromCommand(command, \"question\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String answer \u003d extractTagInformationFromCommand(command, \"answer\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            QuestionSavers.saveFillBlankAndQnaQuestionToNewFile(topic, subTopic,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    questionName, new Qna(answer, question));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (QuestionTypeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"Input code failed to create correct question type\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void addFillBlankQuestion(String command) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            getIndexesOfTagsFromFillBlank(command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (CommandTagMissingException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"Your FB command tags are missing somewhere ...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String topic \u003d extractTagInformationFromCommand(command, \"topic\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String subTopic \u003d extractTagInformationFromCommand(command, \"subTopic\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String questionName \u003d extractTagInformationFromCommand(command, \"questionName\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String stringBefore \u003d extractTagInformationFromCommand(command, \"stringBefore\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String blank \u003d extractTagInformationFromCommand(command, \"blank\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String stringAfter \u003d extractTagInformationFromCommand(command, \"stringAfter\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            QuestionSavers.saveFillBlankAndQnaQuestionToNewFile(topic, subTopic,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    questionName, new FillBlank(blank, stringBefore, stringAfter));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (QuestionTypeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"Input code failed to create correct question type\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void getIndexesOfTagsFromQna(String command) throws CommandTagMissingException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.clear();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"tp\\\\\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"st\\\\\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"qn\\\\\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"qns\\\\\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"ans\\\\\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.length());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        Collections.sort(indexesList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (indexesList.contains(-1)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throw new CommandTagMissingException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void getIndexesOfTagsFromFillBlank(String command) throws CommandTagMissingException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"tp\\\\\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"st\\\\\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"qn\\\\\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"sb\\\\\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"bl\\\\\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"sa\\\\\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.length());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        Collections.sort(indexesList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (indexesList.contains(-1)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throw new CommandTagMissingException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void getIndexesOfTagsFromMcq(String command) throws CommandTagMissingException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"tp\\\\\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"st\\\\\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"qn\\\\\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"qns\\\\\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"ans\\\\\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"wa1\\\\\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"wa2\\\\\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.indexOf(\"wa3\\\\\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (command.contains(\"w4\\\\\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            indexesList.add(command.indexOf(\"w4\\\\\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        indexesList.add(command.length());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        Collections.sort(indexesList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (indexesList.contains(-1)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throw new CommandTagMissingException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // Throws Error if any of the indexes is -1"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static String extractTagInformationFromCommand(String command, String extract) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // TODO: Exceptions: extract is not one of the three tp, st, qn"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        for (int i \u003d 1; i \u003c indexesList.size() - 1; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            String tag \u003d command.substring(indexesList.get(i), indexesList.get(i + 1));;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            if (tag.trim().startsWith(\"tp\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"topic\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                return tag.replace(\"tp\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            if (tag.trim().startsWith(\"st\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"subTopic\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                return tag.replace(\"st\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            if (tag.trim().startsWith(\"qn\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"questionName\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                return tag.replace(\"qn\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            boolean hasQuestionTag \u003d tag.trim().startsWith(\"qns\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"question\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            boolean hasAnswerTag \u003d tag.trim().startsWith(\"ans\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"answer\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            switch (CommandChecker.commandType) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case QNA:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (hasQuestionTag) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"qns\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (hasAnswerTag) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"ans\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case MCQ:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (hasQuestionTag) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"qns\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (hasAnswerTag) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"ans\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"wa1\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"wrongAnswer1\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"wa1\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"wa2\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"wrongAnswer2\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"wa2\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"wa3\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"wrongAnswer3\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"wa3\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (!command.contains(\"wa4\\\\\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"wa4\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"wrongAnswer4\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"wa4\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case FILLBLANK:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"sb\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"stringBefore\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"sb\\\\\",\"\").trim();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"bl\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"blank\")) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"bl\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                if (tag.trim().startsWith(\"sa\\\\\") \u0026\u0026 extract.equalsIgnoreCase(\"stringAfter\")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    return tag.replace(\"sa\\\\\", \"\").trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                return null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 12,
      "AmeliaTYR": 211
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CommandChecker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public enum CommandChecker {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    USERNAME,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DIVIDER,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    NOUN,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    VERB,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    ADJ,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_WORDS,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_WORDS,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    GEN_NAME,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_NAMES,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_NAMES,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    BUNNY,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_BUNNY,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_BUNNY,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    SAVE_BUNNY,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    CHARACTER,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    LIST_CHARACTER,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    FILTER_CHARACTER,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    STATS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    SCENE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    TOPIC,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    UNRECOGNISED;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Figures out the command type from userInput."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput string containing user input command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return the type of command detected"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static CommandChecker extractCommandType(String userInput) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (userInput.toLowerCase().trim().startsWith(\"help\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return CommandChecker.HELP;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"username\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.USERNAME;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"divider\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.DIVIDER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"noun\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.NOUN;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"verb\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.VERB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"adj\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.ADJ;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"list words\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.LIST_WORDS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"bunny\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.BUNNY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"list bunny\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.LIST_BUNNY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"filter bunny\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.FILTER_BUNNY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"save bunny\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            return CommandChecker.SAVE_BUNNY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"exit\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return CommandChecker.EXIT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"scene\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.SCENE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"topic\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            return CommandChecker.TOPIC;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"name\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            return CommandChecker.GEN_NAME;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"list names\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            return CommandChecker.LIST_NAMES;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"filter names\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            return CommandChecker.FILTER_NAMES;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (userInput.toLowerCase().trim().startsWith(\"filter\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            return CommandChecker.FILTER_WORDS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            return CommandChecker.UNRECOGNISED;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 8,
      "hungvo0603": 21,
      "AmeliaTYR": 51,
      "Promethees": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/ClickerMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClickerMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Greeting message formats. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FAREWELL_GREETING \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Bye %1$s! Hope to see you again soon!\" + NEWLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String HELLO_GREETING \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Hello %1$s! Welcome to Fluffle!\" + NEWLINE + \"What can I do for you?\" + NEWLINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Settings loader messages."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ERROR_READING_FILE_ON_LINE_MSG_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            \"Error reading settings file! Error on line:\" + NEWLINE + \"%1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LOADING_SETTINGS_MSG \u003d \"Loading userSettings.txt save file...\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SETTINGS_FILE_EMPTY_MSG \u003d \"userSettings.txt save file empty\" + NEWLINE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"No previous settings loaded\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String SETTINGS_FILE_NOT_FOUND_MSG \u003d \"userSettings.txt save file not found\" + NEWLINE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"Creating new file...\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String LOADING_HISTORY_MSG \u003d \"Loading history.txt save file...\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String HISTORY_FILE_EMPTY_MSG \u003d \"history.txt save file empty\" + NEWLINE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            + \"No previous settings loaded\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String HISTORY_FILE_NOT_FOUND_MSG \u003d \"history.txt save file not found\" + NEWLINE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            + \"Creating new file...\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** File creator function messages.  */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEW_FILE_CREATED_MSG_FORMAT \u003d \"New file created\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String IO_ERROR_WHEN_MAKING_FILE_MSG \u003d \"IO error when making file!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_ALREADY_EXISTS_MSG \u003d \"File already exists.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_CREATED_PATH_MSG \u003d \"File created\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DIRECTORY_CREATED_SUCCESSFULLY_MSG \u003d \"Directory created successfully\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String COULD_NOT_CREATE_DIRECTORY_MSG \u003d \"Sorry, could not create specified directory\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_PATH_TO_DIRECTORY_INVALID_MSG \u003d \"File path to directory invalid!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_NOT_FOUND_MSG \u003d \"File does not exist.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String FILE_AUTO_CREATED_MSG \u003d \"Auto creating new file\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** New word added messages. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String ADD_NOUN_MSG \u003d \"Added the following noun:\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String ADD_VERB_MSG \u003d \"Added the following verb:\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String ADD_ADJECTIVE_MSG \u003d \"Added the following adjective:\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static final String LIST_WORDS_MSG \u003d \"Here are the words stored in the program:\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** New bunny added messages. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ADD_BUNNY_MSG \u003d \"New bunny added!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LIST_BUNNY_MSG \u003d \"Here are the bunnies stored in the program:\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_WRONG_FORMAT \u003d \"Bunny command wrong format\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_MISSING_IDEA_MSG \u003d \"Bunny command missing idea?\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** New character added messages. */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String ADD_CHARACTER_MSG \u003d \"New character added!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String LIST_CHARACTER_MSG \u003d \"Here are the characters stored in the program:\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_CHARACTER_FORMAT \u003d \"Character command wrong format\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Command not recognised message. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String COMMAND_UNRECOGNISED_MSG \u003d \"Command not recognised?\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 44,
      "thngyuxuan": 5,
      "Promethees": 5,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/DataFileConvention.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class DataFileConvention {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    /** Separates different data components. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String HISTORY_COMPONENT_DIVIDER \u003d \"----------------------------\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String QNA_SEPAROT \u003d \"---\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/FilePaths.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Default file paths for save files."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FilePaths {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Default path to file for saving settings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static final String DEFAULT_USER_SETTINGS_FILE_PATH \u003d \"/data\" + File.separator + \"userSettings.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Default path to file for saved Bunny ideas."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String DEFAULT_BUNNY_FILE_PATH \u003d \"data/bunny.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Test file path to see where the files save."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String TEST_FILE_PATH \u003d \"testFile.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * Path to store user past history."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String HISTORY_FILE_PATH \u003d \"data/History.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     * The general path to store the statistics of the past quizzes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static final String STATS \u003d \"data/Stats/stats\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 15,
      "AmeliaTYR": 14,
      "Promethees": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/InputMarkers.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Special symbols to mark specific strings."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class InputMarkers {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Used to mark off comment lines in the text-ui-test input.  */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String INPUT_COMMENT_MARKER \u003d \"#\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_COMMAND_KEYWORD \u003d \"bunny\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/Logos.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Logos {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BIG_FLUFFLE_LOGO \u003d \"  ______ _        __  __ _\\n\" + \" |  ____| |      / _|/ \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \"_| |\\n\" + \" | |__  | |_   _| |_| |_| | ___\\n\" + \" |  __| | | | | |  _|  _| |/ _ \\\\\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            + \" | |    |\" + \" | |_| | | | | | |  __/\\n\" + \" |_|    |_|\\\\__,_|_| |_| |_|\\\\___|\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    // line divider options"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PLAIN_TEXT_DIVIDER \u003d \"--------------------------------------------------------------\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CAT_TEXT_DIVIDER \u003d \"\u003d^..^\u003d  \u003d^..^\u003d  \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d   \u003d^..^\u003d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FENCE_TEXT_DIVIDER \u003d \"+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String custom_line_divider \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static final String VERSION \u003d \"Fluffle -Version 1.0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INPUT_COMMENT_MARKER \u003d \"#\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/RegexStrings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " * Regex strings used for comparison and format checking."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class RegexStrings {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Regex to detect a blank line. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BLANK_STRING_REGEX \u003d \"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/constants/Tags.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Tags {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Settings file loader tags. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    //public static final String DIVIDER_CHOICE_TAG \u003d \"Divider choice:\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String USERNAME_TAG \u003d \"Username:\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Bunny file loader tags. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NUM_BUNNY_TAG \u003d \"number of plot bunnies:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_IDEA_TAG \u003d \"idea:\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_GENRE_TAG \u003d \"genre:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String BUNNY_CHARACTERS_TAG \u003d \"characters:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Characters file loader tags. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    //public static final String DIVIDER_CHOICE_TAG \u003d \"Divider choice:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NUM_CHARACTER_TAG \u003d \"Username:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Tags for bunny command. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String IDEA_TAG \u003d \"i\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String GENRE_TAG \u003d \"g\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String CHARACTER_TAG \u003d \"g\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /** Tags for character command. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NAME_TAG \u003d \"na\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String AGE_TAG \u003d \"ag\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/BunnyLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.parsers.Parsers;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.ERROR_READING_FILE_ON_LINE_MSG_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FilePaths.DEFAULT_BUNNY_FILE_PATH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.BUNNY_GENRE_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.BUNNY_IDEA_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.NUM_BUNNY_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.FileFunctions.autoCreateNewFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.FileFunctions.readFileUntilLineContainsString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.getIntFromString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyLoader {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void loadBunnyFile(ArrayList\u003cBunny\u003e bunniesList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File bunnyFile \u003d FileFunctions.getFileFromFilePath(DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.checkFileExists(bunnyFile);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            readBunnyFile(bunnyFile, bunniesList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            autoCreateNewFile(DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void readBunnyFile(File bunnyFile, ArrayList\u003cBunny\u003e bunniesList) throws FileNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Scanner bunnyFileScanner \u003d new Scanner(bunnyFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int numBunnies \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int numBunniesLoaded \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // read in expected number of bunnies"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String parsedString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(NUM_BUNNY_TAG, bunnyFileScanner);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, NUM_BUNNY_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numBunnies \u003d getIntFromString(parsedString.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            System.out.printf(ERROR_READING_FILE_ON_LINE_MSG_FORMAT, fileLine);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // load bunnies"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (bunnyFileScanner.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                String parsedString;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                // read idea"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                String idea \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileLine \u003d readFileUntilLineContainsString(BUNNY_IDEA_TAG, bunnyFileScanner);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                parsedString \u003d Parsers.parseFileObject(fileLine, BUNNY_IDEA_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    idea \u003d parsedString.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                // read genre"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                String genre \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileLine \u003d readFileUntilLineContainsString(BUNNY_GENRE_TAG, bunnyFileScanner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                parsedString \u003d Parsers.parseFileObject(fileLine, BUNNY_GENRE_TAG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    genre \u003d parsedString.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                // todo: implement characters collection in version 2"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                // read characters (names pipe separated, find the character in the character list)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                String charactersString \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileLine \u003d readFileUntilLineContainsString(BUNNY_IDEA_TAG, bunnyFileScanner);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                parsedString \u003d Parsers.parseFileObject(fileLine, BUNNY_IDEA_TAG);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    // parse the charactersString into list of names"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    // for each name retrieve the corresponding character (loaded from the character list)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                // add new bunny to list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                Bunny newBunny \u003d new Bunny(idea.trim(), genre.trim());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                bunniesList.add(newBunny);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                numBunniesLoaded++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                //System.out.printf(ERROR_READING_FILE_ON_LINE_MSG_FORMAT, fileLine);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        UI.numBunnyLoaded(numBunnies, numBunniesLoaded);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 99
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/BunnySaver.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FilePaths.DEFAULT_BUNNY_FILE_PATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.NUM_BUNNY_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnySaver {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void saveAllBunny(ArrayList\u003cBunny\u003e bunniesList)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File allTasksFile \u003d new File(DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (allTasksFile.createNewFile()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            UI.createNewBunnyFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        new FileWriter(DEFAULT_BUNNY_FILE_PATH, false).close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // write file header"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        FileFunctions.appendsStringToFile(NUM_BUNNY_TAG + \" \" + bunniesList.size(), DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        FileFunctions.appendsStringToFile(NEWLINE, DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        FileFunctions.appendsStringToFile(PLAIN_TEXT_DIVIDER, DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        FileFunctions.appendsStringToFile(NEWLINE, DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (int i \u003d 0; i \u003c bunniesList.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String printOut \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printOut \u003d (i + 1) + \".\\n\" + bunniesList.get(i).getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.appendsStringToFile(printOut,DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.appendsStringToFile(PLAIN_TEXT_DIVIDER, DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.appendsStringToFile(NEWLINE, DEFAULT_BUNNY_FILE_PATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/CharacterLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CharacterLoader {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/FileFunctions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.FilePathInvalidException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.COULD_NOT_CREATE_DIRECTORY_MSG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.DIRECTORY_CREATED_SUCCESSFULLY_MSG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.FILE_ALREADY_EXISTS_MSG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.FILE_AUTO_CREATED_MSG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.FILE_CREATED_PATH_MSG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.FILE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.FILE_PATH_TO_DIRECTORY_INVALID_MSG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.IO_ERROR_WHEN_MAKING_FILE_MSG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.NEW_FILE_CREATED_MSG_FORMAT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.InputMarkers.INPUT_COMMENT_MARKER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.NEWLINE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.RegexStrings.BLANK_STRING_REGEX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FileFunctions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Get a file from file path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath given file path"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return file object retrieved from the given file path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static File getFileFromFilePath(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File fileFound \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileFound;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * check if a file exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param file a given file to check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws FileNotFoundException the file to check was not found"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void checkFileExists(java.io.File file) throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Writes a double new line to the file to create one blank line of space."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath given file path"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws IOException unable to write to file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void writeDoubleNewlineToFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        appendsStringToFile(NEWLINE, filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        appendsStringToFile(NEWLINE, filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Appends the string to the given file specified by filePath."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param textToAppend string to be appended to the file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath filepath to the file"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws IOException unable to write to file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void appendsStringToFile(String textToAppend, String filePath) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        java.io.FileWriter fw \u003d new java.io.FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fw.write(textToAppend);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Continue reading through a file until a specific string is found."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param stringSearched indicator string"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileScanner    scanner for scanning a file"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the line the string is on"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String readFileUntilLineContainsString(String stringSearched, Scanner fileScanner) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileInput \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // read each setting and return the variables accordingly"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileInput \u003d getFileNextLine(fileScanner);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (fileInput.contains(stringSearched)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileInput;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Read non-blank lines of the file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileScanner scanner to read through lines in the file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return a non blank line read from the file"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getFileNextLine(Scanner fileScanner) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileInput;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileInput \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (fileInput.matches(BLANK_STRING_REGEX)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                || fileInput.startsWith(INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileInput;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Create a new file at the specified file path."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param filePath specified file path"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return absolute path of the new path"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String autoCreateNewFile(String filePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        File newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(FILE_AUTO_CREATED_MSG);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        filePath \u003d pathReplaceIllegalCharacters(filePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            checkFileExists(newFile);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make the directory"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String directoryPath;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String txtFileName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placements"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int endOfDirectoryName \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            int endOfFileName \u003d filePath.indexOf(\".txt\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // check if placement is correct"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endOfDirectoryName \u003d\u003d -1 || endOfFileName \u003d\u003d -1) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    directoryPath \u003d filePath.substring(0, endOfDirectoryName);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    txtFileName \u003d filePath.substring(endOfDirectoryName + 1, endOfFileName).trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                    throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating a File object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File file \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //Creating the directory"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            boolean isFileCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (isFileCreated) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(DIRECTORY_CREATED_SUCCESSFULLY_MSG);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                filePath \u003d directoryPath + \"/\" + txtFileName + \".txt\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(COULD_NOT_CREATE_DIRECTORY_MSG);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FilePathInvalidException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(FILE_PATH_TO_DIRECTORY_INVALID_MSG);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make the file"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (newFile.createNewFile()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(FILE_CREATED_PATH_MSG);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                //System.out.println(FILE_ALREADY_EXISTS_MSG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(IO_ERROR_WHEN_MAKING_FILE_MSG);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(NEW_FILE_CREATED_MSG_FORMAT);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return newFile.getAbsolutePath();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Replace \u0027\\\u0027 with \u0027/\u0027 characters in file paths variables."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param path a file path with illegal characters"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return return the path without illegal characters"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String pathReplaceIllegalCharacters(String path) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return path.replace(\u0027\\\\\u0027, \u0027/\u0027);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 9,
      "AmeliaTYR": 182
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/HistoryLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.parsers.Parsers;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.history.History;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.ERROR_READING_FILE_ON_LINE_MSG_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.LOADING_HISTORY_MSG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.HISTORY_FILE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.FilePaths.HISTORY_FILE_PATH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.constants.Tags.USERNAME_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.database.FileFunctions.autoCreateNewFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static seedu.duke.database.FileFunctions.readFileUntilLineContainsString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.history.History;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class HistoryLoader {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void loadHistorySettings(ArrayList\u003cString\u003e savedHistory) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        System.out.println(LOADING_HISTORY_MSG);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            File userHistoryFile \u003d FileFunctions.getFileFromFilePath(HISTORY_FILE_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            FileFunctions.checkFileExists(userHistoryFile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            readUserHistoryFile(savedHistory, userHistoryFile);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            System.out.println(HISTORY_FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            autoCreateNewFile(HISTORY_FILE_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private static void readUserHistoryFile(ArrayList\u003cString\u003e savedHistory, File userHistoryfile)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        Scanner s \u003d new Scanner(userHistoryfile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        String username \u003d \"temp\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public static void setUserHistoryArrayUsername(ArrayList\u003cString\u003e savedHistory, String username) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        savedHistory.set(0, username);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//package seedu.duke.database;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.parsers.Parsers;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.constants.ClickerMessages.ERROR_READING_FILE_ON_LINE_MSG_FORMAT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.constants.ClickerMessages.LOADING_HISTORY_MSG;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.constants.ClickerMessages.HISTORY_FILE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.constants.FilePaths.HISTORY_FILE_PATH;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.constants.Tags.USERNAME_TAG;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.database.FileFunctions.autoCreateNewFile;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import static seedu.duke.database.FileFunctions.readFileUntilLineContainsString;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.File;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.util.Scanner;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//public class HistoryLoader {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    public static void loadHistorySettings(ArrayList\u003cString\u003e savedHistory) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        System.out.println(LOADING_HISTORY_MSG);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            File userHistoryFile \u003d FileFunctions.getFileFromFilePath(HISTORY_FILE_PATH);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            FileFunctions.checkFileExists(userHistoryFile);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            readUserSettingsFile(savedHistory, userHistoryFile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(HISTORY_FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            autoCreateNewFile(HISTORY_FILE_PATH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void readUserSettingsFile(ArrayList\u003cString\u003e savedHistory, File userHistoryfile)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throws FileNotFoundException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        Scanner userHistoryFileScanner \u003d new Scanner(userHistoryfile);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String username \u003d \"temp\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            String parsedString;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            fileLine \u003d readFileUntilLineContainsString(USERNAME_TAG, userHistoryFileScanner);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            parsedString \u003d Parsers.parseFileObject(fileLine, USERNAME_TAG);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                username \u003d parsedString;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                setUserHistoryArrayUsername(savedHistory, username);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.printf(ERROR_READING_FILE_ON_LINE_MSG_FORMAT, fileLine);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    public static void setUserHistoryArrayUsername(ArrayList\u003cString\u003e savedHistory, String username) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        savedHistory.set(0, username);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 57,
      "Promethees": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/QuestionLoaders.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.exceptions.FilePathInvalidException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.FillBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Qna;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//public class QuestionLoaders {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * Gets details of FillBlank and Qna questions in the text file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param directoryPath Directory containing the question text file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param fileName The name of the file in the directory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @return Question object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @throws FilePathInvalidException File path is incorrectly formatted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    public static Question loadFillBlankAndQnaQuestion(String directoryPath, String fileName)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throws FilePathInvalidException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // TODO: Check validity of directoryPath and fileName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        File directory \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        File f \u003d new File(directoryPath + \"\\\\\" + fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (!directory.exists()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throw new FilePathInvalidException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        Question question \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            FileReader fr \u003d new FileReader(f);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            question \u003d getFillBlankAndQnaFromFile(br, fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            br.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        return question;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static Question getFillBlankAndQnaFromFile(BufferedReader br, String fileName) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String line \u003d br.readLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        while (line !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            lines.add(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            line \u003d br.readLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (fileName.contains(\"_fb.txt\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            filterFillBlankQuestionLines(lines);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            return new FillBlank(lines.get(0), lines.get(1), lines.get(2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } else { // if (fileName.contains(\"_qna.txt\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            filterQnaQuestionLines(lines);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            return new Qna(lines.get(0), lines.get(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void filterQnaQuestionLines(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            String cutString;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            switch (i) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case 0:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d lines.get(i).replace(\"question: \", \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case 1:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d lines.get(i).replace(\"answer: \", \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d \"ERROR\"; // throw error"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                System.out.println(\"Error\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            lines.set(i, cutString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    private static void filterFillBlankQuestionLines(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            String cutString;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            switch (i) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case 0:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d lines.get(i).replace(\"string before: \", \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case 1:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d lines.get(i).replace(\"blank: \", \"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            case 2:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d lines.get(i).replace(\"string after: \", \"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                cutString \u003d \"ERROR\"; // throw error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                System.out.println(\"Error\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            lines.set(i, cutString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 105
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/QuestionSavers.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.exceptions.QuestionTypeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.FillBlank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Qna;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import seedu.duke.question.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//public class QuestionSavers {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * Creates a new file storing FillBlank and Qna questions into the database."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * File questionName.txt is created under topic/subTopic."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param topic Topic directory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param subTopic Sub-directory under topic."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param questionName Question file name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @param question An object of Question type."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     * @throws QuestionTypeException Couldn\u0027t recognize question type."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    public static void saveFillBlankAndQnaQuestionToNewFile(String topic, String subTopic, String questionName,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                                                            Question question) throws QuestionTypeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // TODO: Check validity of topic, subTopic and questionName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // Creates a new directory for the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String filePathWithoutQuestionName \u003d \"\\\\data\\\\Quizzes\\\\\" + topic + \"\\\\\" + subTopic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        File directory \u003d new File(filePathWithoutQuestionName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (directory.mkdirs()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"A directory has just been created\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.printf(\"Opening %s ...\\n\", filePathWithoutQuestionName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        // Creates a new _fb.txt / _qna.txt file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String textToWrite;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String suffices;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        if (question instanceof FillBlank) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            textToWrite \u003d \"string before: \" + ((FillBlank) question).getStringBefore() + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    + \"blank: \" + question.getCorrectAnswer() + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    + \"string after: \" + ((FillBlank) question).getStringAfter();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            suffices \u003d \"_fb.txt\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } else if (question instanceof Qna) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            textToWrite \u003d \"question: \" + question.getQuestion() + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//                    + \"answer: \" + question.getCorrectAnswer();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            suffices \u003d \"_qna.txt\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            throw new QuestionTypeException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        String filePathWithQuestionName \u003d filePathWithoutQuestionName + \"\\\\\" + questionName + suffices;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        File f \u003d new File(filePathWithQuestionName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"File name: \" + f.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            FileWriter fw \u003d new FileWriter(f.getAbsoluteFile());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            fw.write(textToWrite);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            fw.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            System.out.println(\"Cannot write to file\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//        System.out.println(f.getAbsolutePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/UserSettingsLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.parsers.Parsers;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.ERROR_READING_FILE_ON_LINE_MSG_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.LOADING_SETTINGS_MSG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.ClickerMessages.SETTINGS_FILE_NOT_FOUND_MSG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FilePaths.DEFAULT_USER_SETTINGS_FILE_PATH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.FilePaths.TEST_FILE_PATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.USERNAME_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.FileFunctions.autoCreateNewFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.FileFunctions.readFileUntilLineContainsString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class UserSettingsLoader {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void loadUserSettings(ArrayList\u003cString\u003e savedSettings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(LOADING_SETTINGS_MSG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            File userSettingsFile \u003d FileFunctions.getFileFromFilePath(DEFAULT_USER_SETTINGS_FILE_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(userSettingsFile.getAbsolutePath());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            FileFunctions.checkFileExists(userSettingsFile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            readUserSettingsFile(savedSettings, userSettingsFile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.println(SETTINGS_FILE_NOT_FOUND_MSG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            autoCreateNewFile(DEFAULT_USER_SETTINGS_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //autoCreateNewFile(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void readUserSettingsFile(ArrayList\u003cString\u003e savedSettings, File userSettingsFile)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Scanner userSettingsFileScanner \u003d new Scanner(userSettingsFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String username \u003d \"temp\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            String parsedString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            fileLine \u003d readFileUntilLineContainsString(USERNAME_TAG, userSettingsFileScanner);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedString \u003d Parsers.parseFileObject(fileLine, USERNAME_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (!parsedString.isBlank()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                username \u003d parsedString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                setUserSettingsArrayUsername(savedSettings, username);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (SettingObjectWrongFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            //System.out.printf(ERROR_READING_FILE_ON_LINE_MSG_FORMAT, fileLine);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Sets the default settings to saved settings array."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param savedSettings array of saved settings"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username      user input name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void setUserSettingsArrayUsername(ArrayList\u003cString\u003e savedSettings, String username) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        savedSettings.set(0, username);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 4,
      "AmeliaTYR": 65
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/WordsLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.words.Words;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class WordsLoader {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static final ArrayList\u003cWords\u003e wordsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static ArrayList\u003cWords\u003e getWordsList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return wordsList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static int getWordsListSize() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return wordsList.size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/BunnyCommandInvalidException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyCommandInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/BunnyIdeaMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyIdeaMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CharacterAlreadyExistException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CharacterAlreadyExistException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CharacterNameMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CharacterNameMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CommandMissingArgumentsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CommandMissingArgumentsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CommandTagMissingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class CommandTagMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/FileEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FileEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/FilePathInvalidException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class FilePathInvalidException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/FilterCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class FilterCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/MissingFilterOptionsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class MissingFilterOptionsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/MissingParamsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class MissingParamsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/NoFilteredItemsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class NoFilteredItemsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/QuestionTypeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class QuestionTypeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/SettingObjectWrongFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class SettingObjectWrongFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/BunnyFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.MissingFilterOptionsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.NoFilteredItemsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.GENRE_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Tags.IDEA_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.parsers.Parsers.parseSingleCharacterTaggedParamsFromUserInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printFilteredBunny;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class BunnyFilter {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void filterBunny(String userInput, ArrayList\u003cBunny\u003e bunniesList)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws MissingFilterOptionsException, NoFilteredItemsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // for returning filter options parsed from the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cString, String\u003e filterOptions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String componentUserInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String ideaSearchTerm \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String genreSearchTerm \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // flags for filters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean hasAtLeastOneFilterOption \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsIdeaSearchTerm \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        boolean containsGenreSearchTerm \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // parse filter command into segments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parseSingleCharacterTaggedParamsFromUserInput(userInput, filterOptions);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } catch (MissingParamsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingFilterOptionsException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(IDEA_TAG)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            containsIdeaSearchTerm \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            ideaSearchTerm \u003d filterOptions.get(IDEA_TAG).trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filterOptions.containsKey(GENRE_TAG)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            containsGenreSearchTerm \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            genreSearchTerm \u003d filterOptions.get(GENRE_TAG).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            hasAtLeastOneFilterOption \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!hasAtLeastOneFilterOption) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingFilterOptionsException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cInteger, Bunny\u003e numberedBunny \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Set\u003cMap.Entry\u003cInteger, Bunny\u003e\u003e entries \u003d numberedBunny.entrySet();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        HashMap\u003cInteger, Bunny\u003e filteredBunny \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // add all the numbered tasks to a hashmap"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d bunniesList.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            numberedBunny.put(i, bunniesList.get(i - 1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // make filters final for filtering"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String finalIdeaSearchTerm \u003d ideaSearchTerm;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String finalGenreSearchTerm \u003d genreSearchTerm;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        Stream\u003cMap.Entry\u003cInteger, Bunny\u003e\u003e entriesStream \u003d entries.stream();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        entriesStream.filter(containsIdeaSearchTerm ? entry -\u003e entry.getValue().getIdea().contains(finalIdeaSearchTerm)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                : entry -\u003e true)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                .filter(containsGenreSearchTerm ? entry -\u003e entry.getValue().getGenre().contains(finalGenreSearchTerm)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                : entry -\u003e true)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                .forEach(entry -\u003e filteredBunny.put(entry.getKey(), entry.getValue()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (filteredBunny.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new NoFilteredItemsException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printFilteredBunny(bunniesList.size(),  filteredBunny);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 84
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/FilterCommandSlicer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class FilterCommandSlicer {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static boolean isNewFilter(String command) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return !command.toLowerCase().contains(\" -continue\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Gets the word types need filtering (noun, verb, adjective)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Invalid word type will not be recognized for this version."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param command Contains the word types need filtering."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @return Array of strings referring to word types."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @throws FilterCommandException When no word type is found in the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static String[] getTargetedWordType(String command) throws FilterCommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        ArrayList\u003cString\u003e types \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (command.toLowerCase().contains(\" -noun\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            types.add(\"noun\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (command.toLowerCase().contains(\" -verb\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            types.add(\"verb\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (command.toLowerCase().contains(\" -adjective\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            types.add(\"adjective\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (types.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throw new FilterCommandException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return types.toArray(new String[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static String[] getTargetedStringTags(String command) throws FilterCommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        ArrayList\u003cString\u003e targetedStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        int index \u003d command.indexOf(\"-\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        while (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            int nextIndex \u003d command.indexOf(\"-\", index + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            if (nextIndex !\u003d -1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                String stringToAdd \u003d command.substring(index + 1, nextIndex).trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                if (stringToAdd.length() !\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    targetedStrings.add(stringToAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    throw new FilterCommandException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                String stringToAdd \u003d command.substring(index + 1).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                if (stringToAdd.length() !\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    targetedStrings.add(stringToAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    throw new FilterCommandException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            index \u003d command.indexOf(\"-\", index + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (targetedStrings.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throw new FilterCommandException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return targetedStrings.toArray(new String[0]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/FilterExecutor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.FilterCommandSlicer.isNewFilter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.FilterCommandSlicer.getTargetedStringTags;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.FilterCommandSlicer.getTargetedWordType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.FilterType.getTypeOfFilter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.WordsFilter.filterByType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.WordsFilter.filterByStartingString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static seedu.duke.filters.WordsFilter.filterByIncludedString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class FilterExecutor {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void executeFilterCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterType filterType \u003d getTypeOfFilter(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            String[] tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            boolean isNewFilter \u003d isNewFilter(command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            switch (filterType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            case WORD_TYPE:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                tags \u003d getTargetedWordType(command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                filterByType(isNewFilter, tags);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            case STARTING_STRING:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                tags \u003d getTargetedStringTags(command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                filterByStartingString(isNewFilter, tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            case INCLUDING_STRING:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                tags \u003d getTargetedStringTags(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                filterByIncludedString(isNewFilter, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                System.out.println(\"Filter type was not recognized in the command\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } catch (FilterCommandException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.println(\"Filter command error\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/FilterType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public enum FilterType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    WORD_TYPE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    STARTING_STRING,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    INCLUDING_STRING,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    UNKNOWN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static FilterType getTypeOfFilter(String command) throws FilterCommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (!command.toLowerCase().contains(\"by\\\\\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throw new FilterCommandException();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        int indexOfTypeTag \u003d command.indexOf(\"by\\\\\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String cutCommand \u003d command.substring(indexOfTypeTag);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        cutCommand \u003d cutCommand.replace(\"by\\\\\", \"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType filterType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (cutCommand.toLowerCase().trim().startsWith(\"type\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filterType \u003d FilterType.WORD_TYPE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else if (cutCommand.toLowerCase().trim().startsWith(\"start\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filterType \u003d FilterType.STARTING_STRING;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else if (cutCommand.toLowerCase().trim().startsWith(\"include\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filterType \u003d FilterType.INCLUDING_STRING;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filterType \u003d FilterType.UNKNOWN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throw new FilterCommandException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return filterType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/filters/WordsFilter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "Sample filter commands:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- filter [-continue] by\\type  -verb -noun -adjective"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- filter [-continue] by\\start -a"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "- filter [-continue] by\\include -string -string"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.wordlist.WordList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.words.Words;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "public class WordsFilter {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static ArrayList\u003cWords\u003e filteredWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Prints word filtered by type."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param isNewFilter Clears last filter and creates new filter."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param types Types of words need filtering."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void filterByType(boolean isNewFilter, String[] types) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (isNewFilter) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            ArrayList\u003cWords\u003e words \u003d WordList.wordList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filteredWords.clear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (String s : types) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                String type \u003d s.toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                for (int i \u003d 0; i \u003c WordList.getNumberOfWords(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    if (words.get(i).getType().equalsIgnoreCase(type)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        filteredWords.add(words.get(i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filteredWords \u003d (ArrayList\u003cWords\u003e) filteredWords.stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    .filter((w) -\u003e Arrays.asList(types).contains(w.getType()))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printFilterResult();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Filters words by starting strings and prints them."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param isNewFilter Clears last filter and creates new filter."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param startStrings Array of strings that need filtering."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void filterByStartingString(boolean isNewFilter, String[] startStrings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (isNewFilter) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            ArrayList\u003cWords\u003e words \u003d WordList.wordList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filteredWords.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (String startString : startStrings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                String string \u003d startString.toLowerCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                for (int i \u003d 0; i \u003c WordList.getNumberOfWords(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    if (words.get(i).getDescription().startsWith(string) \u0026\u0026 !filteredWords.contains(words.get(i))) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        filteredWords.add(words.get(i));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            ArrayList\u003cWords\u003e wordsToRemove \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (Words word : filteredWords) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                boolean keepsWord \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                for (String startString : startStrings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    if (word.getDescription().toLowerCase().startsWith(startString.toLowerCase())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        keepsWord \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                if (!keepsWord) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    wordsToRemove.add(word);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (Words wordToRemove : wordsToRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                filteredWords.remove(wordToRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printFilterResult();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Filters words by indicated including strings and prints them."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param isNewFilter Clears last filter and creates new filter."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * @param includedStrings Array of strings that needs filtering."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static void filterByIncludedString(boolean isNewFilter, String[] includedStrings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (isNewFilter) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            ArrayList\u003cWords\u003e words \u003d WordList.wordList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            filteredWords.clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (String includedString : includedStrings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                String string \u003d includedString.toLowerCase();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                for (int i \u003d 0; i \u003c WordList.getNumberOfWords(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    if (words.get(i).getDescription().contains(string) \u0026\u0026 !filteredWords.contains(words.get(i))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        filteredWords.add(words.get(i));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            ArrayList\u003cWords\u003e wordsToRemove \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (Words word : filteredWords) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                boolean keepsWord \u003d false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                for (String includedString : includedStrings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    if (word.getDescription().toLowerCase().contains(includedString.toLowerCase())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        keepsWord \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                if (!keepsWord) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    wordsToRemove.add(word);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (Words wordToRemove : wordsToRemove) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                while (filteredWords.contains(wordToRemove)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                    filteredWords.remove(wordToRemove);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        printFilterResult();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static void printFilterResult() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        if (filteredWords.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.println(\"Filter returns no result!!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            System.out.println(\"Words filtered by indicated type are: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            for (Words word : filteredWords) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                System.out.println(word.getDescription() + \": \" + word.getDefinition());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 141
    }
  },
  {
    "path": "src/main/java/seedu/duke/functions/CommandExecutor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.functions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.bunnylist.BunnyList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.commands.CommandChecker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.BunnyIdeaMissingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.CommandMissingArgumentsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.MissingFilterOptionsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.exceptions.NoFilteredItemsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.filters.FilterExecutor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.wordlist.WordList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import seedu.duke.filters.FilterExecutor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import seedu.duke.names.Names;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyList.bunniesList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.database.BunnySaver.saveAllBunny;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.filters.BunnyFilter.filterBunny;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.ui.UI.printHelpMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class CommandExecutor {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void executeCommand(CommandChecker commandChecker, String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        switch (commandChecker) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            printHelpMessage(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //case USERNAME:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //    // change username"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //    break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //case DIVIDER:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //    // choose divider type"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //    break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case NOUN:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.addNoun(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case VERB:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.addVerb(userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case ADJ:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.addAdjective(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case LIST_WORDS:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            WordList.listWords();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        case FILTER_WORDS:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            FilterExecutor.executeFilterCommand(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case BUNNY:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                BunnyList.addBunny(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (CommandMissingArgumentsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnyWrongFormat();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (BunnyIdeaMissingException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnyMissingIdea();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case LIST_BUNNY:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            BunnyList.listBunny();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case FILTER_BUNNY:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                filterBunny(userInput, bunniesList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (MissingFilterOptionsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnyMissingFilterOption();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (NoFilteredItemsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnyFilterNoneFound();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case SAVE_BUNNY:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                saveAllBunny(bunniesList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.bunnySaved();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                UI.failedToSaveBunny();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        case GEN_NAME:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                Names.getName();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        case FILTER_NAMES:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            Names.filterNames(userInput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        case LIST_NAMES:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            Names.listNames();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //case STATS:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //    //print user stats"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //case DELETE:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //    //"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        //    break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            //closes the program"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            UI.commandNotRecognisedMsg();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 15,
      "AmeliaTYR": 87,
      "hungvo0603": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/history/History.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public abstract class History {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected String author;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected String title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected int id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected String topic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract String getTitle() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract int getId() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract void setId(int id) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract String getTopic() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return topic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract void setTopic(String topic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.topic \u003d topic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract void setAuthor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public abstract String getAuthor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return \"Date created: \" + date + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                + \"topic\" + topic + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Promethees"
        },
        "content": "                + Timer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 3,
      "Promethees": 38,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/history/HistoryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class HistoryList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private int countObjects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private ArrayList\u003cHistory\u003e histories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public HistoryList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        countObjects \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.histories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void add(History h) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        countObjects++;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.histories.add(h);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public History get(int i) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return this.histories.get(i);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void remove(int i) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        histories.remove(i);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public int getCountObjects() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return countObjects;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/names/Names.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "package seedu.duke.names;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "public class Names {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    protected static List\u003cString\u003e names;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void readNames() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        Path relativePath \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        String filePath \u003d relativePath.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        filePath \u003d filePath + \"\\\\src\\\\main\\\\java\\\\seedu\\\\duke\\\\names\\\\Names.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        relativePath \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(\"Current relative path is: \" + filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(\"Working Directory \u003d \" + System.getProperty(\"user.dir\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        Charset charset \u003d StandardCharsets.UTF_8;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            names \u003d Files.readAllLines(relativePath, charset);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "            System.out.format(\"I/O Exception\", ex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        readNames();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        Random randomGenerator \u003d new Random();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        int index \u003d randomGenerator.nextInt(names.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        System.out.println(names.get(index));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void filterNames(String match) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        String toMatch \u003d match.toLowerCase().replace(\"filter names\",\"\").trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        //System.out.println(\"Match: \" + toMatch);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        readNames();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        System.out.println(names.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                .filter(x -\u003e x.toLowerCase().contains(toMatch))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    public static void listNames() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        readNames();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        System.out.println(names);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/names/Names.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Reiko Copher"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kim Mushrush"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rosalie Hux"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kesha Barrio"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Eliana Upshaw"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Manuela Naff"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Colleen Eaglin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Nerissa Masters"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Marlene Smullen"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tasia Noren"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Caryn Bibee"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kenisha Son"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Theresia Woody"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Chang Peterka"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Olive Juarbe"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Eneida Leisy"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Laurice Strozier"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dianna Bleakley"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Joeann Harbaugh"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jasmin Maupin"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lawana Cocklin"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Meggan Stoddart"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Santos Therrien"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Peg Wendel"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ian Begin"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Arianne Ruggerio"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sharleen Carwile"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Taylor Demar"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dortha Daly"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Coletta Jarrell"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jovita Lawry"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Elliott Joiner"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Forrest Moylan"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sammy Meriwether"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Emilee Hernadez"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Beatris Hodgin"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Danelle Randel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Elijah Hebb"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Clint Riesgo"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Todd Edelman"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ingrid Harley"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Linwood Hennig"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Caroll Berger"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Vertie Scalzo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Cecily Aaronson"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Luis Groh"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Li Hymer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Billie Salazar"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Hyun Lovern"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Barabara Geno"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Margaret Pickford"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kelli Pollan"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Myron Tison"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Elvera Desjardin"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lita Feinstein"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Carmel Mcloud"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mickie Figaro"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Val Leitner"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rolando Hamamoto"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Albertine Hogsett"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Julianne Agudelo"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Pamala Yamashiro"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mohammad Teegarden"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Reena Kimpel"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Reed Carpenter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Eusebia Jenson"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rochelle Miramontes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Desire Betty"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Cathi Dore"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bradford Gouin"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Allyn Bibee"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Isabell Rockhill"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Domingo Matzke"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Josefina Clairmont"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Antonio Dunker"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Margarita Casa"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Daina Woodhouse"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Korey Balog"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rosann Lapine"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Carlena Reuss"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dianne Douglass"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Barabara Sporer"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mellisa Diederich"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Charline Mcgaha"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rebecca Necessary"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Antwan Reinoso"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Cindy Sachs"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Penney Collington"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Gaylord Featherstone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Alanna Levin"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Stephan Sisneros"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Spencer Toner"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kevin Woods"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Estell Iwamoto"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Gail Rapier"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jeanice Keithley"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Amal Hargrove"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Geri Dicks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tien Matas"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Yuri Riemann"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bianca Cornish"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zainab Morley"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Molly Bouvet"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Angelo Blanchard"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Roberta Villarreal"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rafi Davila"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lilly-Rose Dougherty"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mikaela Cairns"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Milli Doyle"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Billy Singh"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Catrin Rankin"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Armaan Harris"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Suzannah Orozco"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Charley Clements"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Natalya Rangel"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Osman Britton"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Petra Kidd"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Trent Griffiths"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Hajrah Timms"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tonya Knowles"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ellise Knox"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sasha Bowden"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Teddie Mccaffrey"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zuzanna Eastwood"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Hughie Kramer"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Amy-Louise Rigby"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Arian Frederick"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tarik Burt"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zayd Dennis"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sydney Espinoza"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jimmy Wardle"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Malak Hampton"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rick England"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Elara Beasley"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Carolina Hayden"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bailey Glass"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Irene Whyte"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kloe Phillips"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Astrid Castro"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Hina John"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Desiree Chapman"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Shanay Plummer"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kristy Whittaker"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Aaryan Burke"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jazmine Bridges"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kara Rodriquez"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kajetan Colon"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tyla Neal"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Selin Skinner"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sofia Burns"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Arham Peralta"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Hazel Vaughn"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Gabriela Rosa"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Huda Rogers"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Arisha Snyder"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Carl Dolan"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dean Jennings"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Iman Deacon"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dawn Keenan"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Adina Fry"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Adrianna Boyle"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Suman Marquez"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Demi Foreman"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Poppy-Rose Aldred"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sadia Rayner"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Yasir Walls"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jakob Gibbons"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bryson Huffman"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Yolanda Hoover"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kurt Marsden"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Suhayb Burnett"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Andre Paul"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Donald Castaneda"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Denny Mueller"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rickie Hawkins"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Summer-Rose Noel"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rosanna Edmonds"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Shaquille Freeman"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Whitney Keith"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Owais Sawyer"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mehdi Gough"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Gianni Kerr"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jagoda Bains"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kane Vargas"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Stacey Brookes"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Misty Watkins"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Danial Spooner"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Abid Cole"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Natasha Coates"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Parris Lin"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mark Sutton"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lorelei Carver"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ronnie Reilly"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Toyah Stuart"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Aleisha Jenkins"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sharmin Hurst"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lucinda Kearns"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Josh Welch"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sianna Kouma"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Pippa Morse"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mira Dunne"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Daisy-Mae Cortes"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ava Senior"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Addie Devine"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Savannah Oneill"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Anoushka Dunn"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Karam Frost"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rudi Navarro"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mckenzie Bowden"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Isadora Hogg"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Alma Haynes"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Perry Winter"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Eshaan Leblanc"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Darius Smyth"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Morwenna Wilcox"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "John-James Ward"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kaan Torres"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Gwion Fenton"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Darcie Ferry"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Destiny Mosley"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sacha Hume"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jaiden Kelly"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tariq Peck"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zeeshan Mcconnell"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ella-Rose Harding"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Aleksandra Marquez"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ann Hoffman"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Reilly Collins"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Allison Frye"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kamil Mcgowan"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Wade Vega"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bonnie Ramsay"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Leo Mccaffrey"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Leela Robson"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ana Valentine"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sid Robles"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mert Rigby"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bear Case"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Yusra Orozco"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Erica Browne"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Danish Brook"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bobbie Ryan"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Alexandria Bailey"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Diane Melton"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dexter Mejia"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dennis Allan"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Khadeejah Ramirez"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Fahim Frey"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Shuaib Daly"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Angel Mccartney"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Aaliya Austin"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Silas Cameron"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jake Wilkinson"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Borys Douglas"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zoey Molina"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ayub Owens"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rayhan Cooley"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Renee Bain"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ines Dunlop"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Davey Rich"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Izabela Odling"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bradleigh Black"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Karter Craft"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Adelaide Legge"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Reon Villegas"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Coco Lutz"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Don Herring"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Corrina Hopper"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Shawn Clemons"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Asiya Chester"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Akash Dougherty"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Derry Young"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Carley Knott"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Elliott Singh"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jozef Ventura"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Colby Stewart"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Priya Weiss"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Hussein Macgregor"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Adelle Little"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kay Nelson"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Montell Stone"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Haleemah Sosa"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Candice Shepherd"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rayhaan Neal"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jeremiah Rasmussen"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Yasemin Dalton"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Collette Carr"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kaine Bonner"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Liberty Roach"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ian Cruz"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Matei Cook"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Arnav Dawson"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jodie Amin"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Grant Sears"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Daisie Lindsey"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Patrycja Lopez"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ophelia Braun"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mali Keeling"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tyron Snow"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Nabeel Bloggs"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kornelia Larsen"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ignacy Connor"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Theresa Melia"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zahra Ramsay"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Alasdair Morrow"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Khadeejah Erickson"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Luisa Campos"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ahsan Choi"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lorelai Bains"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Samual Sadler"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kush Price"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mylah Kirkland"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ari Mustafa"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mohammad Power"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Adele Arroyo"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Pixie Holt"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Shyla Glass"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Clyde Wagstaff"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Gracie-Leigh Garcia"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mehdi Schmidt"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Koa Broadhurst"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Neive Milner"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Chenai Bernal"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kason Colley"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Avni Weber"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Phoebe Firth"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Aj Holder"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ayah Kelley"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Candice Mcdougall"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Liam Kim"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Milton Stanley"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Glenda Woodcock"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lilli Soto"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mert Woodward"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Yanis Mccann"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Leonard Philip"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dario Williamson"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Markus Rice"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Siya Haworth"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zaynab Guthrie"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Paige Peck"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lawson Hudson"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Coral Coates"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Umair Robin"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ishaaq Tran"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Vickie Luna"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Daisy Farrell"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Muhammad Chaney"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Asha Hinton"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zac Holcomb"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bridie Ramirez"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kaif Shields"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sulaiman Walsh"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ellie-Rose Murphy"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Alara Watkins"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Audrey Dupont"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zayaan Faulkner"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Daniela Browning"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Riccardo Bostock"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Arfa Meyers"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Brenden Stout"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Aiesha Jordan"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Giles Martins"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Joshua Robins"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rachel Reed"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Finnley Armitage"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jon-Paul Lin"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Meg Edge"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Leyton Magana"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jai Garner"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Shawn Heaton"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Samirah Pike"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ioana Hartley"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jorden Blevins"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Darla Kinney"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Erik Mcarthur"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Clifford Stubbs"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bryson Jacobs"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Darren Gallegos"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lillie Stein"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Randall Herrera"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Keaton Owen"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Nisha Lawrence"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Austin Hassan"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ellis Huber"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Carwyn Garrison"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mohammod Wynn"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Prisha Barton"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Riley-Jay Duran"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Nur Fox"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Alanah Gentry"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Margot Mcleod"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Savannah Humphreys"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Danyal Montes"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ritik Bolton"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Niamh Spencer"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Carrie Bird"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Santino Mack"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mara Ballard"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Timur Joseph"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bogdan Patterson"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Momina Hail"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Reece Prentice"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lesley Whitaker"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Alexia Esquivel"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Selena Marsh"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Darsh Webber"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jamal Dunkley"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Aila Huang"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Cherise Fields"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Riccardo Trevino"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Anisa Diaz"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Diane Rigby"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zaki Doherty"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zoya Edwards"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Hughie Roth"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jaden Bell"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Krystian Bush"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Miranda Kirkland"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Anne Sharples"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tamia Burnett"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Adelina Luna"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ivy Nolan"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Betty Figueroa"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kaila Garrison"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sufyaan Chadwick"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Nahla Sheldon"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Christiana Woodard"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jon Velazquez"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bea Phillips"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Aniya Dillard"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Arianne Wooten"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rahul Mckeown"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sasha Mackay"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sade Whyte"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sophia Reeve"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Luciano Chavez"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Clarence Goulding"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Holli Moore"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Barney Lindsey"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bridie Brewer"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kristi Forrest"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Buddy Mueller"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Mayur Lowery"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Junaid Aguilar"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Charis Houghton"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kuba Clarke"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tashan Hollis"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Reo Odling"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Dua Hussain"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zakary Stein"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Bonnie Robles"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tymoteusz Jarvis"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tarun Doyle"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rehaan Schwartz"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Maya Beattie"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kajol Kavanagh"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Avaya Lynn"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Linzi Soto"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Aamir Wainwright"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Evelyn Keenan"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Iona Mcgregor"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Anish Flores"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Orla Mcnally"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ellouise Reeves"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Phoenix Oneil"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Monet Medrano"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sidney Pena"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Macaulay Frost"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Conna Daniels"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Leyton Mccartney"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rida Reese"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kit Brown"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Aurora Maxwell"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Faris Rawlings"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Fergus Pollard"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Olly Guevara"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Lyndsey Cannon"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tyler-James Reilly"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "John Mcghee"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Hubert Johns"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zachariah Liu"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Anwar O\u0027Doherty"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Patrik Shepard"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Chaya Burgess"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tiago Povey"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Tahlia Neville"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Rimsha Britt"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Demi-Leigh Clay"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Milton Baxter"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Timur Robinson"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Ameena Hogg"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Kasey Seymour"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Santino Mullins"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Willard Dorsey"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Sama Marin"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Stephanie Gaines"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Laurence Hood"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Zackery Everett"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "Jaya Allman"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 500
    }
  },
  {
    "path": "src/main/java/seedu/duke/parsers/Parsers.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "package seedu.duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.SettingObjectWrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.MissingParamsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.InputMarkers.INPUT_COMMENT_MARKER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.RegexStrings.BLANK_STRING_REGEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "public class Parsers {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Extract the value string from line in settings save file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param fileLine    a line read from the file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param objectTitle the string indicating the type of object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return returns the setting extracted from line in the settings file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws SettingObjectWrongFormatException the linel in the settings file was wrongly formatted"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String parseFileObject(String fileLine, String objectTitle)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws SettingObjectWrongFormatException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int settingTitleLength \u003d objectTitle.length();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String fileObject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // identify placements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int settingObjectPosition \u003d fileLine.indexOf(objectTitle);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // check if placement is correct"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (settingObjectPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new SettingObjectWrongFormatException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                fileObject \u003d fileLine.substring(settingObjectPosition + settingTitleLength).trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                throw new SettingObjectWrongFormatException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return fileObject;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Gets user input, ignore comments and blank lines."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param scanner Scanner object for console inputs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return raw user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static String getUserInput(Scanner scanner) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        } while (userInput.matches(BLANK_STRING_REGEX)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                || userInput.startsWith(INPUT_COMMENT_MARKER));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Parse parameters for double letter tags."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput    line read from the console"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param parsedParams parameters parsed from the line with the tag as key and argument as value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws MissingParamsException line has no missing parameters"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void parseDoubleCharacterTaggedParamsFromUserInput(String userInput,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                                     HashMap\u003cString, String\u003e parsedParams)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws MissingParamsException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String parsedOption;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String optionIndicator;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int startPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        int endPositionIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear filter options"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.clear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingParamsException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (userInput.indexOf(\"/\", startPositionIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placement"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // if reached end of string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endPositionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // extract the option"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedOption \u003d userInput.substring(startPositionIndex + 1, endPositionIndex - 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            optionIndicator \u003d userInput.substring(startPositionIndex - 2, startPositionIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // store the option"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // extract the option"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedOption \u003d userInput.substring(startPositionIndex + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        optionIndicator \u003d userInput.substring(startPositionIndex - 2, startPositionIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // store the option"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.put(optionIndicator.toLowerCase(), parsedOption);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "     * Parse parameters for single letter tags."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param userInput    line read from the console"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param parsedParams parameters parsed from the line with the tag as key and argument as value"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws MissingParamsException line has no missing parameters"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void parseSingleCharacterTaggedParamsFromUserInput(String userInput,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                                                                     HashMap\u003cString, String\u003e parsedParams)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throws MissingParamsException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String parsedOption;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        String optionIndicator;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int startPositionIndex \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        int endPositionIndex;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // clear filter options"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.clear();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        if (!userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            throw new MissingParamsException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        while (userInput.indexOf(\"/\", startPositionIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // identify placement"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            startPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            endPositionIndex \u003d userInput.indexOf(\"/\", startPositionIndex + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // if reached end of string"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (endPositionIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // extract the option"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedOption \u003d userInput.substring(startPositionIndex + 1, endPositionIndex - 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            optionIndicator \u003d userInput.substring(startPositionIndex - 1, startPositionIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            // store the option"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // extract the option"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedOption \u003d userInput.substring(startPositionIndex + 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        optionIndicator \u003d userInput.substring(startPositionIndex - 1, startPositionIndex);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        // store the option"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        parsedParams.put(optionIndicator.toLowerCase(), parsedOption);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Parse an integer from a string containing an integer."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param stringContainingInt string that contains an integer value"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @return the interger value parsed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @throws NumberFormatException unable to parse integer from given string"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static int getIntFromString(String stringContainingInt) throws NumberFormatException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        return Integer.parseInt(stringContainingInt.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 154,
      "hungvo0603": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/settings/Settings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Settings {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected int dividerNum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Settings() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.dividerNum \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Setter for name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Setter for divider number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public void setDividerNum(int divider) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        if (divider \u003c 1 || divider \u003e 4) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            System.out.println(\"Enter a valid number 1 -4!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            this.dividerNum \u003d divider;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Getter for divider number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public int getDividerNum() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.dividerNum;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Getter for divider itself"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getDivider() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return UI.getDivider(this.dividerNum);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Getter for name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 2,
      "thngyuxuan": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/UI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import seedu.duke.bunny.Bunny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.constants.ClickerMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.bunnylist.BunnyList.bunniesList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.CAT_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.FENCE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import static seedu.duke.constants.Logos.PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Line divider set to default before settings are loaded. Default is the first one."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static String currentLineDivider \u003d getDivider(1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    // Main Help function"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpMessage(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpAdd();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"settings\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpSettings();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"history\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"stats\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpStats();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"review\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpReview();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"quiz\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpQuiz();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpClear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelpExit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            printHelp();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] listCommands \u003d {\"add\", \"settings\", \"list\", \"history\", \"stats\", \"review\", \"quiz\", \"clear\", \"exit\"};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Type \u0027help c\\\\\u003cfunction name here\u003e\u0027 to view help for each command.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Available commands:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        for (String listCommand : listCommands) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            System.out.println(listCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Use the following format for the \u0027settings\u0027 command:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"settings n\\\\\u003cname\u003e d\\\\\u003cdivider option\u003e\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Example: settings n\\\\Alice d\\\\3\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpAdd() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Use the following format for the \u0027help\u0027 command:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        System.out.println(\"add t\\\\\u003ctopic\u003e st\\\\\u003csubtopic\u003e n\\\\\u003cquiz name\u003e mcq\\\\\u003cnumber of MCQ questions\u003e qna\\\\\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                + \"\u003cnumber of QNA questions\u003e fb\\\\ \u003cnumber of fill in the blanks questions\u003e\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Example: add t\\\\Science st\\\\Chemistry n\\\\stoichiometry quiz 1 mcq\\\\3 mrq\\\\0 qna\\\\4 fb\\\\2\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        System.out.println(\"This adds a quiz of topic \u0027Science\u0027, subtopic \u0027Chemistry\u0027 and named \u0027stoichiometry quiz 1\u0027\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                + \", with 3 MCQ questions, 0 MRQ questions, 4 QNA questions, and 2 fill in the blank questions.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"List all available quizzes by typing \u0027list\u0027.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpHistory() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Show history and results of quizzes taken in this session by typing \u0027history\u0027.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpStats() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Show your results and statistics of a specific quiz by typing \u0027quiz t\\\\QUIZ_INDEX\u0027.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Example: quiz t\\\\3\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpQuiz() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Start a quiz by typing \u0027quiz t\\\\QUIZ_INDEX\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Example: quiz t\\\\2 starts the quiz with QUIZ_INDEX 2.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpReview() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Show the answers for the selected quiz by typing \u0027review t\\\\QUIZ_INDEX\u0027.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"You can find the list of quizzes by QUIZ_INDEX by using the list command.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpClear() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        System.out.println(\"Delete all your saved quizzes in CLIcker by typing \u0027clear\u0027. \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "                + \"A warning prompt will be generated before deletion.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printHelpExit() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(\"Exit the program by typing \u0027exit\u0027.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static String getDivider(int input) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        String divider \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        if (input \u003d\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            divider \u003d PLAIN_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (input \u003d\u003d 2) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            divider \u003d CAT_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "        } else if (input \u003d\u003d 3) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            divider \u003d FENCE_TEXT_DIVIDER;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return divider;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the personalised greeting message."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username user input name"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printHelloMessage(String username) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.printf(ClickerMessages.HELLO_GREETING, username);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * Prints the personalised farewell message."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     * @param username user indicated name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFarewellMessage(String username) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.printf(ClickerMessages.FAREWELL_GREETING, username);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Prints the line divider to the console."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(currentLineDivider);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void addBunnyMessage(String bunny) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(ClickerMessages.ADD_BUNNY_MSG + \"\\n\" + bunny);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyWrongFormat() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(ClickerMessages.BUNNY_WRONG_FORMAT);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyMissingIdea() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(ClickerMessages.BUNNY_MISSING_IDEA_MSG);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void listBunnyMessage() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(ClickerMessages.LIST_BUNNY_MSG);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void listCharacterMessage() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(ClickerMessages.LIST_CHARACTER_MSG);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addNounMessage(String noun) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(ClickerMessages.ADD_NOUN_MSG + noun);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addVerbMessage(String verb) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(ClickerMessages.ADD_VERB_MSG + verb);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addAdjectiveMessage(String adj) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(ClickerMessages.ADD_ADJECTIVE_MSG + adj);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void listWordsMessage() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        System.out.println(ClickerMessages.LIST_WORDS_MSG);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void commandNotRecognisedMsg() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(ClickerMessages.COMMAND_UNRECOGNISED_MSG);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void numBunnyLoaded(int numBunnies, int numBunniesLoaded) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(String.format(\"%1$s of %2$s bunnies loaded!\", numBunniesLoaded, numBunnies));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void createNewBunnyFile() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Writing to bunny file\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void failedToSaveBunny() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Failed to save bunny list\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnySaved() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"Bunny list saved!\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void printFilteredBunny(int numBunny, HashMap\u003cInteger, Bunny\u003e filteredBunny) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        int bunnyFiltered \u003d 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d numBunny; i++) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            if (filteredBunny.containsKey(i)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                System.out.println((i) + \".\\n\" + bunniesList.get(i - 1).getDescription());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "                bunnyFiltered++;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        bunnyFilterSummary(bunnyFiltered);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    private static void bunnyFilterSummary(int bunnyFiltered) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"number bunny filtered: \" + bunnyFiltered);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyMissingFilterOption() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"filter bunny command missing filter options.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    public static void bunnyFilterNoneFound() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "        System.out.println(\"No bunny matching filter options\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 3,
      "AmeliaTYR": 100,
      "hungvo0603": 6,
      "thngyuxuan": 118,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/wordlist/WordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.wordlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Words;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Noun;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Verb;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.words.Adjective;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class WordList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static ArrayList\u003cWords\u003e wordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public static int getNumberOfWords() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        return wordList.size();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to add noun to word list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @param input a string which contains"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     *              the word and its definition"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addNoun(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] word \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] splitInput \u003d word[1].split(\"d/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        Words toAdd \u003d new Noun(splitInput[0],splitInput[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        wordList.add(toAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.addNounMessage(toAdd.getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to add verb to word list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @param input a string which contains"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     *              the word and its definition"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addVerb(String input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] word \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] splitInput \u003d word[1].split(\"d/\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        Words toAdd \u003d new Verb(splitInput[0],splitInput[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        wordList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.addVerbMessage(toAdd.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to add adjective to word list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @param input a string which contains"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     *              the word and its definition"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void addAdjective(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] word \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        String[] splitInput \u003d word[1].split(\"d/\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        Words toAdd \u003d new Adjective(splitInput[0],splitInput[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        wordList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.addAdjectiveMessage(toAdd.getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public static void listWords() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        UI.listWordsMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        for (int i \u003d 0; i \u003c wordList.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "            System.out.println((i + 1) + \".\" + wordList.get(i).getDescription());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 4,
      "thngyuxuan": 59
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Adjective.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Adjective extends Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Adjective(String description, String definition) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        super(description, definition);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return \"adjective\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Noun.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Noun extends Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Noun(String description, String definition) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        super(description, definition);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return \"noun\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Verb.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public class Verb extends Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Verb(String description, String definition) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        super(description, definition);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return \"verb\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/words/Words.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "package seedu.duke.words;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "public abstract class Words {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    protected String definition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public Words(String description, String definition) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        this.definition \u003d definition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * Function to get the type of this word."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * i.e. Noun, Verb, or Adjective"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     * @return the type of this word"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getDefinition() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.definition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thngyuxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thngyuxuan": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/writing/Essay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.writing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.history.History;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.writing.Writings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "public class Essay extends Writings {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setContent(String content) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public void setAuthor(String author) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        super.author \u003d author;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    public String getAuthor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Promethees"
        },
        "content": "        return super.author;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Promethees"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0xZ3RO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0xZ3RO": 4,
      "hungvo0603": 1,
      "Promethees": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/writing/Poem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "//package seedu.duke.writing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "//public class Poem extends Writings{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/writing/WritingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.writing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public class WritingList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/writing/Writings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Promethees"
        },
        "content": "package seedu.duke.writing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import seedu.duke.history.History;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Promethees"
        },
        "content": "public abstract class Writings extends History {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Promethees"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 6
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Promethees"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Promethees": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/duke/bunnylist/BunnyListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.bunnylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "class BunnyListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    void addBunny() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    void listBunny() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 1,
      "AmeliaTYR": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/filters/FilterCommandSlicerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "class FilterCommandSlicerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedWordType_adjectiveFilterRecognition_arrayOfAdjectiveType()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throws FilterCommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"adjective\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedWordType(\"filter by\\\\type -adjective\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(1, actual.length);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedWordType_nounAndVerbFilterRecognition_arrayOfNounAndVerbElements()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throws FilterCommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"noun\", \"verb\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedWordType(\"filter by\\\\type -verb -noun\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(2, actual.length);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedWordType_allTypeFilterRecognition_arrayOfAllWordType()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            throws FilterCommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"noun\", \"verb\", \"adjective\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedWordType(\"filter by\\\\type -adjective -verb -noun\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(3, actual.length);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedWordType_noWordTypeFound_filterCommandExceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertThrows(FilterCommandException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            () -\u003e FilterCommandSlicer.getTargetedWordType(\"filter by\\\\type -adverb -preposition\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedStringTags_oneStringTagNoSpace_success() throws FilterCommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"cs\"};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedStringTags(\"filter by\\\\contain -cs\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(1, actual.length);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedStringTags_oneStringTagHaveSpace_success() throws FilterCommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"cs 2113 t\"};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedStringTags(\"filter by\\\\start -cs 2113 t\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(1, actual.length);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedStringTags_twoStringTagsNoSpace_success() throws FilterCommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"cs 2113 t\", \"cs 2101\"};"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedStringTags(\"filter by\\\\start -cs 2113 t -cs 2101\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(2, actual.length);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedStringTags_twoStringTagsHaveSpace_success() throws FilterCommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] expected \u003d {\"cs2113t\", \"cs2101\"};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        String[] actual \u003d FilterCommandSlicer.getTargetedStringTags(\"filter by\\\\contain -cs2113t -cs2101\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(2, actual.length);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertTrue(Arrays.equals(expected, actual));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTargetedStringTags_noStringTagProvided_filterCommandExceptionThrown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertThrows(FilterCommandException.class,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "            () -\u003e FilterCommandSlicer.getTargetedStringTags(\"filter by\\\\start - \"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 85
    }
  },
  {
    "path": "src/test/java/seedu/duke/filters/FilterTypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.exceptions.FilterCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "class FilterTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTypeOfFilter_wordTypeFilter_wordType() throws FilterCommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType expected \u003d FilterType.WORD_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType actual \u003d FilterType.getTypeOfFilter(\"filter by\\\\type -noun -adjective\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTypeOfFilter_startingStringFilter_startingString() throws FilterCommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType expected \u003d FilterType.STARTING_STRING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType actual \u003d FilterType.getTypeOfFilter(\"filter by\\\\start -nho -e\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTypeOfFilter_includedStringFilter_includingString() throws FilterCommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType expected \u003d FilterType.INCLUDING_STRING;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterType actual \u003d FilterType.getTypeOfFilter(\"filter by\\\\include -th -ao\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void getTypeOfFilter_invalidTypeFilter_filterCommandExceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertThrows(FilterCommandException.class, () -\u003e FilterType.getTypeOfFilter(\"filter by\\\\abcd -xyz -jkl\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/filters/WordsFilterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "package seedu.duke.filters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import seedu.duke.wordlist.WordList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "class WordsFilterTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    private static void initializeTestDatabase() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addNoun(\"noun house d/place to live\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addVerb(\"verb eat d/put sth into your mouth\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addAdjective(\"adj beautiful d/nice to look at\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addNoun(\"noun grass d/green plant\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addNoun(\"noun computer d/hitech stuff\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addAdjective(\"adj nice d/you\u0027re so nice\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addAdjective(\"adj meaningful d/something nice\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addVerb(\"verb sleep d/rest at night\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addNoun(\"noun class d/place to study\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.addVerb(\"verb love d/fall for somebody\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void filterByType_filterNounAtTheEnd_getFourNouns() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.wordList.clear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        initializeTestDatabase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(10, WordList.getNumberOfWords());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterExecutor.executeFilterCommand(\"filter by\\\\type -noun -verb\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(7, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterExecutor.executeFilterCommand(\"filter -continue by\\\\type -noun\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(4, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void filterByStartingString_filterMultipleStartingStrings_getOneWord() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.wordList.clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        initializeTestDatabase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(10, WordList.getNumberOfWords());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterExecutor.executeFilterCommand(\"filter by\\\\start -gr -co -s -ho\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(4, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterExecutor.executeFilterCommand(\"filter -continue by\\\\start -g\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(1, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    public void filterByIncludedString_filterMultipleIncludedStrings_getOneWord() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        WordList.wordList.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        initializeTestDatabase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(10, WordList.getNumberOfWords());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterExecutor.executeFilterCommand(\"filter by\\\\include -mp -pu -a -e\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(10, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterExecutor.executeFilterCommand(\"filter -continue by\\\\include -e\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(8, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        FilterExecutor.executeFilterCommand(\"filter -continue by\\\\include -lo\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "        assertEquals(1, WordsFilter.filteredWords.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hungvo0603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hungvo0603": 57
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AmeliaTYR"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "AmeliaTYR": 2
    }
  }
]
