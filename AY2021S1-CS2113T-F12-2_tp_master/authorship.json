[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 2,
      "-": 64
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    compile group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            srcDirs \u003d [\u0027src/main/java\u0027]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            srcDirs \u003d [\u0027src/main/resources\u0027]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    mainClassName \u003d \"anichan.Main\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    archiveBaseName \u003d \"main\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 1,
      "n3wsoldier": 12,
      "ChanJianHao": 2,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# About us  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Hello! AniChan was developed by a group of passionate students from team [F12-2](https://github.com/AY2021S1-CS2113T-F12-2) as part of their team project for [CS2113T  Software Engineering \u0026 Object-Oriented Programming](https://nus-cs2113-ay2021s1.github.io/website/index.html)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Display | Name | GitHub Profile | Portfolio   "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Michael Dinata | [Github](https://github.com/michaeldinata) | [Portfolio](docs/team/johndoe.md)  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Eyo Wei Chin | [Github](https://github.com/EyoWeiChin) | [Portfolio](docs/team/EyoWeiChin.md)  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![3](https://avatars1.githubusercontent.com/u/39303087?s\u003d400\u0026v\u003d4) | Ong De Zhi | [Github](https://github.com/OngDeZhi) | [Portfolio](docs/team/OngDeZhi.md)  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![](https://i.pinimg.com/564x/c4/0d/7a/c40d7a7060fb74926c257db982b6ddaf--funny-stuff-funny-things.jpg) | Chan Jian Hao | [Github](https://github.com/ChanJianHao) | [Portfolio](docs/team/jianhao.md)  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Xin Bin | [Github](https://github.com/n3wsoldier) | [Portfolio](docs/team/xinbin.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 1,
      "n3wsoldier": 1,
      "OngDeZhi": 1,
      "ChanJianHao": 6,
      "-": 4,
      "michaeldinata": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;1.1 [Purpose](#11-purpose)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;1.2 [Using this Guide](#12-using-this-guide)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "2. [Setting up](#2-setting-up)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3. [Design](#3-design)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.1 [Architecture](#31-architecture)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.2 [UI Component](#32-ui-component)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.3 [Parser Component](#33-parser-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.4 [Command Component](#34-command-component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.5 [AnimeData Component](#35-animedata-component)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.6 [User Component](#36-user-component)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.7 [StorageManager Component](#37-storagemanager-component)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "4. [Implementation](#4-implementation)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.1 [Workspace Feature](#41-workspace-feature)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.2 [Estimation Feature](#42-estimation-feature)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.3 [Bookmark Feature](#43-bookmark-feature)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.4 [Browse Feature](#44-browse-feature)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "5. [Produce scope](#5-product-scope)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;5.1 [Target user profile]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;5.2 [Value proposition]()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "6. [User stories](#6-user-stories)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "7. [Non-functional requirements](#7-non-functional-requirements)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "8. [Documentation, logging, testing, configuration, dev-ops](#8-documentation-logging-testing-configuration-dev-ops)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "9. [Glossary](#9-glossary)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "10. [Appendices](#10-appendices)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;10.1 [Instructions for manual testing]()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**AniChan** is a command-line application written in **Java 11**. It is written using the Object-Oriented Programming (OOP) paradigm which provides us with means to structure a software program into organized, reusable and reusable pieces of code that makes it good for future improvements and revisions."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 1.1 Purpose"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This content of this guide is aimed at current and new developers of AniChan. It contains the basic steps to set up a development environment, organize your source code, and then build and test AniChan. This guide also aids developers in understanding the overall architecture design and lays out the current implementation details of our notable features with the rationale and considerations behind each one."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 1.2 Using this Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The content of this developer guide is aimed at both current and new developers who are keen on contributing to AniChan. The guide will contain the basic steps to using AniChan to set up a development environment, organize your source code, and then build and test your application. This developer guide is an essential tool that will introduce you to the various features and design concepts which you can use to further develop and maintain AniChan."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### Setting up the project in your computer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Ensure that you have the following installed: "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* JDK 11."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* IntelliJ IDE (highly recommended)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Firstly, **fork** this repo and **clone** a copy into your computer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "If you plan to use Intellij IDEA: "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1. **Ensure IntelliJ is configured to use JDK 11**."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1. Click on `Configure` \u003e `Structure for New Projects` \u003e `Project Settings` \u003e `Project`, "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "       and ensure the `Project SDK` is using **JDK 11**."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "2. **Import the project as a Gradle project**."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1. Click on `Import Project` and locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    2. If asked, choose to `Open as Project` (not `Open as File`)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    3. Click `OK` to accept the default settings but do ensure that the selected version of `Gradle JVM` matches the JDK being used for the project."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    4. The import process could take a few minutes to finish."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3. **Verify the setup**: "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1. Run the `seedu.anichan.Main` and try a few commands. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    2. You may want to refer to our [User Guide](UserGuide.md) for the list of commands."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "----"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### Before writing code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1. **Configuring the coding style**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    If using IDEA, follow this guide "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    [IDEA: Configuring the code style](https://se-education.org/guides/tutorials/intellijCodeStyle.html) "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    to setup IDEA’s coding style to match ours."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "2. **Set up CI**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    There is no set up required as the project comes with a GitHub Actions config files, "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    located in `.github/workflows` folder. When GitHub detects these files, it will run the CI for the project"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    automatically at each push to the master branch or to any PR."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3. **Learn the design**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    When you are ready to start writing codes, "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    we recommended that you have a look at AniChan\u0027s overall design "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    by reading about it at [AniChan\u0027s architecture](DeveloperGuide.md#31-architecture)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 3. Design "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The following section describes the architecture design of **Anichan**. This section starts off by looking at the overall architecture design in a general view, before going into the specific implementation details of the individual features."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 3.1 Architecture"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This section will help provide insight to the general overview of Anichan’s architecture."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![Architectural Diagram](images/Architectural-Class-Diagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*Figure 1: Architecture Diagram*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| :bulb:  | The images used are stored in the directory: `images/`. If you wish to update a diagram you may replace the images in this folder |"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "|---------------|:------------------------|"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The **Architecture Diagram** presented above explains the high-level design of AniChan, and given below is a quick overview of each component involved."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The `Main` class is the starting point of the application and has only one class called `Main`, it is responsible for, "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "* At launch: Initializes the various components in the correct sequence, connects them up with each other, and loads any saved data."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "* At shut down: Shuts down the components and invokes any clean up methods where necessary."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The rest of AniChan consists of 6 components: "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "- `Ui`: Manages the user interface of AniChan."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "- `Parser`: Parses the user input."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "- `Command`: Executes the command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "- `User`: Manages the workspace(s) and user data."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "- `AnimeData`: Provides data from the anime source file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "- `StorageManager`: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Below is an overall sequence diagram to help illustrate the general program flow and how the different objects interact with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "![Main Sequence Diagram](images/Overall-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*Figure 2: Overall Sequence Diagram* "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 3.2 UI Component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "![UI Component Diagram](images/Ui-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 3: UI Component Diagram*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The UI component consists of a `UI` class that handles all user input and system output. The UI is only dependent on the `Main` class and does not interact directly with other classes ensuring high cohesiveness and separation of roles."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The `Ui` component listens for: "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*  the execution of commands to print the result of the Command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "* any exceptions thrown to show an error message to the user, instead of a program termination."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 3.3 Parser Component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "![Parser Component Diagram](images/Parser-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 4: Parser Component Diagram*"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The `Parser` component consists of a `Parser` class and multiple `XYZParser` each representing a specific command’s parser. The Parser class will first receive a user command from `Main` and will proceed to determine the command type."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Once the command type is known, it will then create the respective `XYZParser` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Example: If Browse command was parsed, `Parser` will create `BrowseParser`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`XYZParser` will then parse the parameter and perform input validation, before creating the Command object to return to `Main`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### 3.4 Command Component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![Command Component Diagram](images/Command-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*Figure 5: Command Component Diagram*"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `Command` component consists of different commands represented together as `XYZCommand` which all inherits from the abstract `Command` class. "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Example: The Browse command would be represented by a `BrowseCommand`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "`Main` would utilise the `Command.execute` operation to carry out the execution of the command and retrieve a String output that will contain the successful result of the `Command`. If the `Command` was not successful an exception will be thrown with details of the failure."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### 3.5 AnimeData Component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![AnimeData Component Diagram](images/AnimeData-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*Figure 6: AnimeData Component Diagram*"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `AnimeData` component is responsible for retrieving offline json data and parsing it into `Anime` objects that will be stored in program memory. The `AnimeData` will manage an ArrayList of `Anime` objects providing AniChan with an interface for the program to retrieve with the source data."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `AnimeData `component:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* can retrieve Anime objects using ID."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* can view detailed  information of each Anime Object."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* can browse the Anime catalog with sorting algorithms."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### 3.6 User Component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![User Component Diagram](images/User-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*Figure 7: User Component Diagram*"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The User inherits from the abstract `Human` class and stores the name and gender of the user. It represents the user\u0027s interaction with `Workspace` class."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `User`component: "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* can provide user information like `name`, `gender`, and `honorific name`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* Stores an array list of type `Workspace`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* can add, set, and switch between workspaces "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `Workspace` component:  "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* can allow `User` to create and get the list of `Watchlist` and `Bookmark`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* can allow `User` to change his active `Watchlist`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### 3.7 StorageManager Component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![StorageManager Component Diagram](images/StorageManager-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*Figure 8: StorageManager Component Diagram*"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `StorageManager` component: "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* can **save** user, watchlist and bookmark data in `.txt` format and **read it back** using "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "their respective storage class, `UserStorage`, `WatchlistStorage`, and `BookmarkStorage`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* can **read** script files that are in `.txt` format using the `ScriptStorage` class."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**AniChan** saved these data as `.txt` files so advanced users will be able to view and manipulate these saved data easily with any available text editor."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 59,
      "n3wsoldier": 58,
      "OngDeZhi": 75,
      "-": 17
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "# AniChan"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "AniChan is an all-rounded tool for Anime translators and professionals. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "It features a suite of functionality that can help reduce administration workload, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "as well as improve translation efficiency and accuracy."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 4,
      "ChanJianHao": 2,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "# AniChan User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "2. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3. [Features](#3-features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.1 [View the help: `help`](#31-view-the-help-help)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.2 [Adding a user: `addws`](#32-adding-a-user-adduser)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.3 [Switching users: `switchws`](#33-switching-users-switchuser)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.4 [Browse through all Anime: `browse`](#34-browse-through-all-anime-browse)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.5 [Watchlist management: `watchlist`](#35-watchlist-management-watchlist)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.6 [Add an Anime to the current watchlist: `add`](#36-add-an-anime-to-the-current-watchlist-add)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.7 [Remove an Anime from the current watchlist: `remove`](#37-remove-an-anime-to-the-current-watchlist-remove)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.8 [View all anime in watchlist: `view`](#38-view-all-anime-in-watchlist-view)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.9 [Bookmark an Anime: `bookmark`](#39-bookmark-an-anime-bookmark)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.10 [Search: `search`](#310-search-search)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.11 [View the information of an Anime: `info`](#311-view-the-information-of-an-anime-info)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.12 [Estimate time need to translate script: `estimate`](#312-estimate-time-needed-to-translate-script-estimate)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.13 [Exit AniChan: `exit`](#313-exit-anichan-exit)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.14 [Saving and loading data](#314-saving-and-loading-data)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "4. [FAQ](#4-faq)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "5. [Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "AniChan is an all-rounded tool to effectively create and organize anime lists with viewing statistics, efficiency-focused features, and tools to improve anime-watching experience."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "2. Download the latest version of `AniChan` from [here](https://github.com/AY2021S1-CS2113T-F12-2/tp/releases/tag/V1.0)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your AniChan."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "4. Open cmd and change directory into the folder. Run “java -jar anichan.jar”."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "5. Type a command into the command prompt and press ‘Enter’ to execute it. e.g. typing `help` and pressing ‘Enter’ will display the help message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Command Format**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Commands are case-sensitive."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "E.g. Only `help` will work, and so `HELP`, `hElp`, and its other variant will not work."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Words in UPPERCASE are values that can be supplied by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "E.g. in `browse -s SORT_CATEGORY -p PAGE_NUMBER` where SORT_CATEGORY and PAGE_NUMBER are "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "parameters that can be used as `browse -s name -o asc`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Square brackets indicate optional parameters."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "E.g. `browse [-s SORT_CATEGORY]` can be used simply as `browse` or `browse -s name`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* The order of parameters are not important."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "E.g. Both `-n USERNAME -dob DATE_FORMAT` and `-dob DATE_FORMAT -n USERNAME` are "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "both acceptable and will produce the same output.  "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 3.1 View the help: `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "This command will provide the details of all available commands and their usage. "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "This is done by displaying the ‘Command Summary’ as listed below to the user. "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "### 3.2 Adding a user: `addws`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Adds a new workspace to user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Format: `addws -n \u003cNAME\u003e`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Example of usage: `addws -n Crispy Donuts Studio`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Successfully added new workspace: Crispy Donuts Studio"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "### 3.3 Switching users: `switchws`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Switch the current active workspace of user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Format: `switchws -n \u003cNAME\u003e`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Example of usage: `switchws -n Crispy Donuts Studio`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Workspace changed to Crispy Donuts Studio"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.4 Browse through all Anime: `browse`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Browse through all anime from the source. It can be displayed in sorted order."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Format: `browse [-s SORT_CATEGORY] [-o DISLAY_ORDER] [-p PAGE_NUMBER`]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Note: "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`-s name` will sort the list by alphabetical order"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`-s rating` will sort the list by rating"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`-o asc` will arrange it in ascending order"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`-o dsc` will arrange it in descending order"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`-p \u003cN\u003e` will display page N of the list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`-p \u003cN\u003e` N must be a positive integer value"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The order of the parameter does not matter"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "If no parameters or only `-o` is specified then it will display in its anime id order."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `browse -s name -p 1 -o dsc`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "1. .hack//Gift"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "2. .hack//Legend Of The Twilight"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "3. .hack//Liminality"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "4. .hack//Sign"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "5. 3x3 Eyes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "6. A Chinese Ghost Story"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "7. ARIA The ANIMATION"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "8. Abashiri Ikka"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "9. Ace wo Nerae!"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "10. Ace wo Nerae! 2"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "11. Ace wo Nerae: Final Stage"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "12. After War Gundam X"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "13. Agatha Christie\u0027s Great Detectives Poirot and Marple"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "14. Agent Aika"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "15. Ah! My Goddess: The Movie"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "16. Ai Yori Aoshi"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "17. Ai Yori Aoshi: Enishi"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "18. Aim for the Ace! (1979)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "19. Air"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "20. Air Master"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Browsing Page: 1"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 3.5 Watchlist management: `watchlist`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This command handles all watchlist management related operations: "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Create a new watchlist."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* List all created watchlist(s)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Select another watchlist to use."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Delete a watchlist that is no longer needed."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Active watchlist refers to the watchlist that you are currently using for "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "adding anime into or removing anime from."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* `watchlist -n \u003cWATCHLIST_NAME\u003e`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* `watchlist -l`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* `watchlist -s \u003cWATCHLIST_INDEX\u003e`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* `watchlist -d \u003cWATCHLIST_INDEX\u003e`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `watchlist -n Adventure Anime`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Ensure the watchlist name is unique in your workspace."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Watchlist \"Adventure Anime\" has been created successfully!"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `watchlist -l`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Currently, you have 2 watchlist(s):"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\t1. Default"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\t2. Adventure Anime"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `watchlist -s 2`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Selected watchlist is also known as the **active watchlist**, which is the one"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "that you are using for adding anime into or removing anime from."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Notice how the name of the watchlist in the bracket of your prompt have changed."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\"Adventure Anime\" is now your active watchlist!"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `watchlist -d 2`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* For deletion to succeed, you must have at least two watchlist."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* If the currently active (selected) watchlist is deleted, then AniChan will automatically set"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "the first watchlist in the list of watchlist to be the new active watchlist."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Watchlist \"Adventure Anime\" has been deleted successfully!"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Changed active watchlist to: \"Default\"."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.6 Add an Anime to the current watchlist: `add`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Add an anime to the currently selected watchlist"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Format: `add -a \u003cANIME_ID\u003e`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `add -a 3`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Trigun added to watchlist!"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.7 Remove an Anime from the current watchlist: `remove`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Remove an anime from the currently selected watchlist"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Format: `remove -d \u003cANIME_ID_IN_WATCHLIST\u003e`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The index used has to be the Anime ID in the watchlist, and not the general Anime ID"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: \u0027remove -d 1\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Trigun successfully removed from watchlist"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.8 View all anime in watchlist: `view`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "View all anime that is in the specified watchlist"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Format: `view -v \u003cWATCHLIST_ID\u003e`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: \u0027view -v 1\u0027"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Here are the anime in Default watchlist:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\t1. Cowboy Bebop"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\t2. Witch Hunter Robin"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.9 Bookmark an Anime: `bookmark`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "This command handles all bookmark related operations: "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* List all anime within bookmark."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* Add an anime into bookmark."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* Delete an anime from bookmark. "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* Edit episode for an anime within bookmark"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "* View details of an anime within bookmark [v2.0]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "`bookmark -l` will list bookmark"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "`bookmark -a \u003cANIME_ID\u003e` will add the Anime into bookmark"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "`bookmark -d \u003cBOOKMARK_ID\u003e` will delete the Anime with bookmark id from bookmark"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "`bookmark \u003cBOOKMARK_ID\u003e -e \u003cEPISODE\u003e` will edit the episode for Anime with bookmark id"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `bookmark -l`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " Listing all anime in bookmark: "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\t1. InuYasha the Movie 3: Swords of an Honorable Ruler Ep: 5"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\t2. To Heart"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `bookmark -a 410`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Saving 410. InuYasha the Movie 2: The Castle Beyond the Looking Glass to bookmark."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `bookmark -d 1`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Removing InuYasha the Movie 3: Swords of an Honorable Ruler! :("
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `bookmark 1 -e 5`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Editing InuYasha the Movie 3: Swords of an Honorable Ruler to have 5 episode"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.10 Search `search`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Searches for a specific anime or to search for a specific genre"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`search -n \u003cSEARCH_TERM\u003e` will search for all anime series that contains the search term"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`search -g \u003cSEARCH_TERM\u003e` will list all genres that matches the search term"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `search -n bey`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:216] Haruka: Beyond the Stream of Time – A Tale of the Eight Guardians"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:257] Beyblade"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:410] InuYasha the Movie 2: The Castle Beyond the Looking Glass"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `search -g Slice of Life`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:7] Honey and Clover"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:8] Hungry Heart: Wild Striker"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:35] Ai Yori Aoshi"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:39] Beck: Mongolian Chop Squad"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:48] Azumanga Daioh: The Animation"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:81] Air"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "..."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:446] Strawberry Marshmallow"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:447] KamiChu!"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:464] I My Me! Strawberry Eggs"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:467] Kiki\u0027s Delivery Service"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:475] Marmalade Boy Movie"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:488] Teacher\u0027s Time"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.11 View the information of an Anime: `info`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "View all the information regarding a specific anime"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Format: `info -a \u003cANIME_ID\u003e`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `info -a 1`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Here is the information for the anime:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Index: 1"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Name: Cowboy Bebop"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Episodes: 26"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Release Date: 03/Apr/1998"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Rating: 86"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Genre: [Action, Adventure, Drama, Sci-Fi]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.12 Estimate time needed to translate script: `estimate`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Estimates the time required to finish translating a script, users may provide"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "their estimated words per hour speed or use the average translator speed as an estimate."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `estimate \u003cSCRIPT_FILE_NAME\u003e [-wph WORDS_PER_HOUR]`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* **Only one** `.txt` file is accepted by AniChan."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* You have to specify the file extension too! E.g. `script.txt`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* If the option `-wph` is not specified, **AniChan** will calculate the estimation timings"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "using the average translator\u0027s translation speed of 400, 500, and 600 words per hour. "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This will produce three estimation timings for you to consider."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `estimate script.txt`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Average translator (400 words per hour) takes: 5 hour(s) 47 minute(s)."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Average translator (500 words per hour) takes: 4 hour(s) 38 minute(s)."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Average translator (600 words per hour) takes: 3 hour(s) 51 minute(s)."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `estimate script.txt -wph 777`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "You would need 2 hour(s) 58 minute(s)."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.13 Exit AniChan: `exit`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Exit AniChan "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `exit`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Sayonara \u003cNAME\u003e!"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.14 Saving and loading data"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "User, workspace(s), watchlist(s), and bookmark(s) data will be **saved automatically** when they are "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "created or modified, and will be **loaded automatically** when AniChan is launched. "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "In the folder where AniChan is launched, there will be a `data` folder which would contain these data:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* User data is stored in `data/user.txt`."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Watchlist(s) data are stored in `data/\u003cWORKSPACE-NAME\u003e/watchlist.txt`, e.g. if your workspace is named \"AniTranslator\","
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "then the watchlist data can be found in `data/AniTranslator/watchlist.txt`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "* Bookmark(s) data are also stored in the same location as watchlist data, `data/WORKSPACE-NAME/bookmark.txt`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Coming soon!"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "|Feature|Command|"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Help                                     | `help`                                                   |"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Add workspace                            | `addws -n \u003cNAME\u003e\u003e`                                       |"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Switch workspace                         | `switchws -n \u003cNAME\u003e`                                     |"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Browse                                   | `browse -s [name/rating] -p \u003c1-26\u003e -o [asc/dsc]`         |"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Create watchlist                         | `watchlist -n \u003cWATCHLIST_NAME\u003e`                          |"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| List all watchlist                       | `watchlist -l`                                           |"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Select watchlist                         | `watchlist -s \u003cWATCHLIST_INDEX\u003e`                         |"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Delete watchlist                         | `watchlist -d \u003cWATCHLIST_INDEX\u003e`                         |"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| Add to watchlist                         | `add -a \u003cANIME_ID\u003e`                                      |"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| Remove from watchlist                    | `remove -d \u003cANIME_ID_IN_WATCHLIST\u003e`                      |"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| View Anime in watchlist                  | `view -v \u003cWATCHLIST_ID\u003e`                                 |"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Search by title                          | `search -n \u003cSEARCH_TERM\u003e`                                |"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Search by genre                          | `search -g \u003cSEARCH_TERM\u003e`                                |"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| View Anime information                   | `info -a \u003cANIME_ID\u003e`                                     |"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Estimate time needed to translate script | `estimate \u003cSCRIPT_FILE_NAME\u003e [-wph WORDS_PER_HOUR]`      |"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 117,
      "n3wsoldier": 42,
      "OngDeZhi": 141,
      "ChanJianHao": 36,
      "-": 23,
      "michaeldinata": 77
    }
  },
  {
    "path": "docs/team/jianhao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "# Chan Jian Hao - Project Portfolio Page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 7
    }
  },
  {
    "path": "docs/team/xinbin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "# XinBin- Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 6
    }
  },
  {
    "path": "src/main/java/anichan/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ANIME_DATA_SOURCE_DIRECTORY \u003d \"/AniListData\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ANICHAN_STORAGE_DIRECTORY \u003d \"data\" + File.separator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(Main.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final StorageManager storageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private AnimeData animeData;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager \u003d new StorageManager(ANICHAN_STORAGE_DIRECTORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"AniChan started! Initializing...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Initialize AniChan \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            user \u003d storageManager.loadUser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"User: Loaded successfully.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.INFO, \"Loaded \" + user.getName() + \" from storage\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (AniException exception) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"User: \" + exception.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWorkspace\u003e workspaceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] workspaceNameList \u003d storageManager.retrieveWorkspaceList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (String workspaceName : workspaceNameList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"Workspace \\\"\" + workspaceName + \"\\\":\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                String loadWatchlistResult \u003d storageManager.loadWatchlistList(workspaceName, watchlistList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"\\tWatchlist: \" + loadWatchlistResult);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.INFO, \"Loaded watchlist(s) \" + loadWatchlistResult + \" from storage\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            } catch (AniException exception) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"\\tWatchlist: \" + exception.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Bookmark bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                String loadBookmarkResult \u003d storageManager.loadBookmark(workspaceName, bookmark);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"\\tBookmark:  \" + loadBookmarkResult);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.INFO, \"Loaded bookmark \" + loadBookmarkResult + \" from storage\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            } catch (AniException exception) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(\"\\tBookmark:  \" + exception.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Workspace workspace \u003d new Workspace(workspaceName, watchlistList, bookmark);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            workspaceList.add(workspace);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d New User Setup \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (user \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Creating new user..\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                    String[] userDialogueInput \u003d ui.createUserDialogue();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                    user \u003d new User(userDialogueInput[0], userDialogueInput[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                    LOGGER.log(Level.INFO, \"Created: \" + user);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    storageManager.saveUser(user);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                } catch (AniException exception) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                    ui.printErrorMessage(\"Invalid input detected!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                    LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Workspace Setup \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Workspace setup..\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user.setWorkspaceList(workspaceList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (user.getTotalWorkspaces() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Workspace newWorkspace \u003d user.addWorkspace(\"Default\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistList.add(new Watchlist(\"Default\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            newWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            user.setActiveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.INFO, \"Workspace created: \" + newWorkspace);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                storageManager.saveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.INFO, \"Workspace saved to storage: \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            } catch (AniException exception) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                ui.printErrorMessage(exception.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Watchlist Setup \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistList.add(new Watchlist(\"Default\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setActiveWatchlist(watchlistList.get(0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Anime Data Setup \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            AnimeStorage animeStorage \u003d new AnimeStorage(ANIME_DATA_SOURCE_DIRECTORY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            animeData \u003d new AnimeData(animeStorage.readAnimeDatabase());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        while (ui.hasNextLine(user)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                String userInput \u003d ui.readUserInput();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                Command command \u003d parser.getCommand(userInput);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                String commandOutput \u003d command.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(commandOutput);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                if (command.getShouldExit()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    ui.printGoodbyeMessage(user.getHonorificName());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    ui.shutdownUi();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            } catch (AniException exception) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printErrorMessage(exception.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 10,
      "n3wsoldier": 5,
      "OngDeZhi": 98,
      "ChanJianHao": 52,
      "-": 1,
      "michaeldinata": 1
    }
  },
  {
    "path": "src/main/java/anichan/anime/Anime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.anime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Character;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class Anime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static int totalAnime \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int animeID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private ArrayList\u003cCharacter\u003e characters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String animeName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private Date releaseDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String[] genre;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int avgEpisodeLength;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int totalEpisodes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    //Default Constructor to create empty Anime class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public Anime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.animeID \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.animeName \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.rating \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.totalEpisodes \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.genre \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        totalAnime++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeID \u003d totalAnime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public Anime(String animeName, String[] releaseDate, int rating,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                 String[] genre, int avgEpisodeLength, int totalEpisodes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setAnimeID(animeID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setAnimeName(animeName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setReleaseDate(releaseDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setRating(rating);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setGenre(genre);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setAvgEpisodeLength(avgEpisodeLength);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setTotalEpisodes(totalEpisodes);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        totalAnime++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeID \u003d totalAnime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getAnimeID() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return animeID;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setAnimeID(int animeID) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.animeID \u003d animeID;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void addCharacter(Character newCharacter) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        characters.add(newCharacter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public ArrayList\u003cCharacter\u003e getCharacters() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return characters;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setTotalEpisodes(int totalEpisodes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.totalEpisodes \u003d totalEpisodes;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getAvgEpisodeLength() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return avgEpisodeLength;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setAvgEpisodeLength(int avgEpisodeLength) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.avgEpisodeLength \u003d avgEpisodeLength;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getTotalEpisodes() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return totalEpisodes;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public String getAnimeName() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return animeName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setAnimeName(String animeName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.animeName \u003d animeName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public Date getReleaseDate() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return releaseDate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public String getReleaseDateInString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SimpleDateFormat newDateFormat \u003d new SimpleDateFormat(\"dd/MMM/yyyy\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return newDateFormat.format(releaseDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setReleaseDate(String[] releaseDate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        //Will parse according to how date is stored in JSON YYYY MM DD"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String dateInString \u003d releaseDate[0] + \"-\" + releaseDate[1] + \"-\" + releaseDate[2];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            SimpleDateFormat stringToDate \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            this.releaseDate \u003d stringToDate.parse(dateInString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } catch (java.text.ParseException invalidDateFormat) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            System.out.println(\"Date error\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getRating() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setRating(int rating) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (rating \u003e 100 || rating \u003c 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            System.out.println(\"Rating not within 0 to 100 range\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            this.rating \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public String[] getGenre() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return genre;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setGenre(String[] genre) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.genre \u003d genre;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return getAnimeName();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 128,
      "OngDeZhi": 1,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/main/java/anichan/anime/AnimeData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.anime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public class AnimeData {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public ArrayList\u003cAnime\u003e animeDataList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public ArrayList\u003cAnime\u003e animeOriginalDataList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public AnimeData(ArrayList\u003cAnime\u003e animeDataList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeDataList \u003d animeDataList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeOriginalDataList \u003d new ArrayList\u003c\u003e(this.animeDataList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Anime getAnime(Integer animeIndex) throws IndexOutOfBoundsException, NullPointerException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            return animeDataList.get(animeIndex);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeDataList.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public ArrayList\u003cAnime\u003e getAnimeDataList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeDataList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void printAll() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        for (Anime anime : animeDataList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            System.out.println(\"---------------------------------\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            System.out.println(\"Index: \" + i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            System.out.println(\"Name: \" + anime.getAnimeName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            System.out.println(\"Episodes: \" + anime.getTotalEpisodes());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            System.out.println(\"Release Date: \" + anime.getReleaseDateInString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            System.out.println(\"Rating: \" + anime.getRating());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            System.out.println(\"Genre: \" + Arrays.toString(anime.getGenre()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void printOne(int animeIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime anime \u003d animeDataList.get(animeIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(\"---------------------------------\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(\"Index: \" + animeIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(\"Name: \" + anime.getAnimeName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(\"Episodes: \" + anime.getTotalEpisodes());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(\"Release Date: \" + anime.getReleaseDateInString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(\"Rating: \" + anime.getRating());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(\"Genre: \" + Arrays.toString(anime.getGenre()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String returnAnimeInfo(int animeIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime anime \u003d animeDataList.get(animeIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Index: \" + (animeIndex + 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Name: \" + anime.getAnimeName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Episodes: \" + anime.getTotalEpisodes());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Release Date: \" + anime.getReleaseDateInString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Rating: \" + anime.getRating());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Genre: \" + Arrays.toString(anime.getGenre()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public ArrayList\u003cAnime\u003e findName(String description) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        ArrayList\u003cAnime\u003e findList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(\"Looking for \\\"\" + description + \"\\\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        for (Anime anime : animeOriginalDataList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (anime.getAnimeName().contains(description)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                findList.add(anime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return findList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Functions below uses original data list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Anime getAnimeByID(Integer animeIndex) throws IndexOutOfBoundsException, NullPointerException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            return animeOriginalDataList.get(animeIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 79,
      "ChanJianHao": 1,
      "michaeldinata": 19
    }
  },
  {
    "path": "src/main/java/anichan/anime/AnimeStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.anime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public class AnimeStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /* Files */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //private static final String RELATIVE_DIR \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //private static final String FILE_SEPARATOR \u003d File.separator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //private File dataFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //private String[] pathnames;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(Anime.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //    AnimeStorage  animeStorage \u003d new AnimeStorage(\"/data/AniListData\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //    AnimeData animeList \u003d new AnimeData(animeStorage.readAnimeDatabase());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //    animeList.printAll();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public AnimeStorage(String fileFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        // Set log levels"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //private String prepareFile(String fileFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //return fileFolder.replace(\"\\\\\",FILE_SEPARATOR).replace(\"/\",FILE_SEPARATOR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public ArrayList\u003cAnime\u003e readAnimeDatabase() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        LOGGER.log(Level.INFO, \"Retrieving information from DataSource.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        ArrayList\u003cAnime\u003e animeDataList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        for (int i \u003d 1; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, \"Currently extracting from /AniListData/AniList-Data\" + i + \".json\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String fileData \u003d getDataFromJarFile(\"/AniListData/AniList-Data\" + i + \".json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, \"Extraction of /AniListData/AniList-Data\" + i + \".json successful\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, \"Parsing Json data.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            parseJson(animeDataList, fileData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, \"Parse Successful.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        LOGGER.log(Level.INFO, \"Retrieval and Parsing for anime object in DataSource Successful.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeDataList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void parseJson(ArrayList\u003cAnime\u003e animeDataList,String  fileData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        JSONArray jsonList \u003d new JSONArray();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            jsonList \u003d (JSONArray) parser.parse(fileData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Parsing file failed!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Iterator iterator \u003d jsonList.iterator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        JSONObject jsonObject \u003d new JSONObject();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String animeName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            int animeEpisode \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            int animeRating \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            int animeDuration \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //Advance the Iterator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            jsonObject \u003d (JSONObject) iterator.next();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            jsonObject \u003d (JSONObject) jsonObject.get(\"data\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            jsonObject \u003d (JSONObject) jsonObject.get(\"Media\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //Getting anime name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            JSONObject jsonTitle \u003d (JSONObject) jsonObject.get(\"title\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (jsonTitle.get(\"english\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeName \u003d (String) jsonTitle.get(\"romaji\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeName \u003d (String) jsonTitle.get(\"english\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            assert animeName !\u003d null : \"Anime Name should not be null.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //getting anime episode"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (jsonObject.get(\"episodes\") !\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeEpisode \u003d  (int) (long) jsonObject.get(\"episodes\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //getting start date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            JSONObject jsonDate \u003d (JSONObject) jsonObject.get(\"startDate\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String[] animeReleaseDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeReleaseDate \u003d new String[] { String.valueOf((long) jsonDate.get(\"year\")),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    String.valueOf((long) jsonDate.get(\"month\")), String.valueOf((long) jsonDate.get(\"day\"))};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            assert animeReleaseDate !\u003d null : \"Release date should not be null.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //getting rating"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (jsonObject.get(\"averageScore\") !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeRating \u003d  (int) (long) jsonObject.get(\"averageScore\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //getting genre"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            ArrayList\u003cString\u003e animeGenre;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeGenre \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            JSONArray jsonGenre \u003d (JSONArray) jsonObject.get(\"genres\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            for (Object genre : jsonGenre) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeGenre.add((String) genre);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String[] animeGenreArray;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeGenreArray \u003d new String[animeGenre.size()];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeGenreArray \u003d animeGenre.toArray(animeGenreArray);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            assert animeGenreArray !\u003d null : \"Genre should not be null.\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //getting duration"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (jsonObject.get(\"duration\") !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeDuration \u003d  (int) (long) jsonObject.get(\"duration\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            Anime anime \u003d new Anime(animeName, animeReleaseDate, animeRating, animeGenreArray, animeDuration,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    animeEpisode);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeDataList.add(anime);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public  String getDataFromJarFile(String filename) throws IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assert filename !\u003d null : \"Filename should not be null.\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            InputStream inputStream \u003d AnimeStorage.class.getResourceAsStream(filename);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String fileData \u003d \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            while ((fileLine \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                fileData +\u003d fileLine;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            return fileData;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 149,
      "ChanJianHao": 5
    }
  },
  {
    "path": "src/main/java/anichan/bookmark/Bookmark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public class Bookmark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private ArrayList\u003cInteger\u003e animeBookmarkList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private ArrayList\u003cInteger\u003e animeEpisode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private ArrayList\u003cNote\u003e noteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Bookmark() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeEpisode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeBookmarkList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Bookmark(ArrayList\u003cInteger\u003e animeBookmarkList, ArrayList\u003cInteger\u003e animeEpisode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeBookmarkList \u003d animeBookmarkList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeEpisode \u003d animeEpisode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //temp"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        for (int i : animeBookmarkList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            noteList.add(new Note());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addAnimeBookmark(Integer animeIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeBookmarkList.add(animeIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeEpisode.add(-1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList.add(new Note());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void addAnimeBookmarkEpisode(Integer animeIndex, Integer episodeNumber) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.animeBookmarkList.add(animeIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.animeEpisode.add(episodeNumber);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList.add(new Note());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void removeAnimeBookmark(int bookmarkIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeBookmarkList.remove(bookmarkIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeEpisode.remove(bookmarkIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void editAnimeBookmarkEpisode(int bookmarkIndex, int episode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeEpisode.set(bookmarkIndex, episode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public ArrayList\u003cInteger\u003e getAnimeBookmarkList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return animeBookmarkList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public ArrayList\u003cInteger\u003e getAnimeEpisode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return animeEpisode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Anime getAnimeBookmarkByIndex(AnimeData animeData, Integer bookmarkIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        int animeIndex \u003d this.animeBookmarkList.get(bookmarkIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeData.getAnimeByID(animeIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public int getBookmarkSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeBookmarkList.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addNote(Integer bookmarkIndex, String note) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList.get(bookmarkIndex).addNote(note);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addNote(Integer bookmarkIndex, String note, String date) throws AniException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList.get(bookmarkIndex).addNote(note, date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getNoteInString(Integer bookmarkIndex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        StringBuilder sbNoteList \u003d new StringBuilder(System.lineSeparator());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (noteList.get(bookmarkIndex).getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbNoteList.append(\"\\tNotes is empty.. :(\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbNoteList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            for (int i \u003d 0; i \u003c noteList.get(bookmarkIndex).getSize(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                sbNoteList.append(i + 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                sbNoteList.append(\". \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                sbNoteList.append(noteList.get(bookmarkIndex).getNote(i) + System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return sbNoteList.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getListInString(AnimeData animeData) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        StringBuilder sbAnimeList \u003d new StringBuilder(System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (animeBookmarkList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(\"\\tUhh.. It\u0027s empty.. :(\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        for (int i \u003d 0; i \u003c animeBookmarkList.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(\"\\t\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(i + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(\". \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            int animeIndex \u003d this.animeBookmarkList.get(i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(animeData.getAnimeByID(animeIndex));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (animeEpisode.get(i) !\u003d -1) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                sbAnimeList.append(\" Ep: \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                sbAnimeList.append(animeEpisode.get(i));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return sbAnimeList.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getAnimeBookmarkInfo(AnimeData animeData, Integer bookmarkIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeData.returnAnimeInfo(this.animeBookmarkList.get(bookmarkIndex));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 99,
      "OngDeZhi": 13,
      "ChanJianHao": 3
    }
  },
  {
    "path": "src/main/java/anichan/bookmark/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "package anichan.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public interface DateTime {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    SimpleDateFormat stringToDateTime \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    SimpleDateFormat stringToDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    SimpleDateFormat dateToString \u003d new SimpleDateFormat(\"dd MMM yyyy hh:mmaa\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void parseToDate(String input) throws AniException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 13
    }
  },
  {
    "path": "src/main/java/anichan/bookmark/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "package anichan.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public class Note implements DateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public ArrayList\u003cString\u003e notes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public ArrayList\u003cDate\u003e deadlines;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Date deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public boolean isDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public boolean isDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Note() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addNote(String note, String deadlineString) throws AniException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.notes.add(note);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        parseToDate(deadlineString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (isDateTime || isDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            this.deadlines.add(deadline);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(\"hmm no date ?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addNote(String note) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.notes.add(note);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.deadlines.add(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getNote(Integer noteIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return notes.get(noteIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return notes.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result +\u003d notes.get(i) + System.lineSeparator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void parseToDate(String input) throws AniException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            deadline \u003d stringToDate.parse(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            isDate \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (!input.equals(stringToDate.format(deadline))) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                deadline \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                isDate \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (isDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            deadline \u003d stringToDateTime.parse(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            isDateTime \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (!input.equals(stringToDateTime.format(deadline))) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                deadline \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                isDateTime \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            isDate \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            isDateTime \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(\"hmm wrong date\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 81
    }
  },
  {
    "path": "src/main/java/anichan/command/AddToWatchlistCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class AddToWatchlistCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String DUPLICATE_ANIME_ERROR \u003d \"Anime is already in this watchlist!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String OUT_OF_BOUND_INDEX_ERROR \u003d \"Anime ID is invalid!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer animeIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(AddToWatchlistCommand.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public AddToWatchlistCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Adds an anime to current watchlist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        addToWatchlist(animeData, storageManager, activeWorkspace);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime anime \u003d animeData.getAnimeByID(animeIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String animeName \u003d anime.getAnimeName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return animeName + \" added to watchlist!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void addToWatchlist(AnimeData animeData, StorageManager storageManager, "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                               Workspace activeWorkspace) throws AniException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e activeWatchlistList \u003d activeWatchlist.getAnimeList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        int indexSize \u003d animeData.getSize();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (activeWatchlistList.contains(animeIndex)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, DUPLICATE_ANIME_ERROR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(DUPLICATE_ANIME_ERROR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (animeIndex \u003c 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (animeIndex \u003e\u003d indexSize) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assert this.animeIndex \u003e\u003d 0 : \"Anime index has to be valid\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        activeWatchlist.addAnimeToList(animeIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager.saveWatchlistList(activeWorkspace.getName(), watchlistList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, \"Successfully added and stored anime into active watchlist\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "       "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void setAnimeIndex(Integer animeIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.animeIndex \u003d animeIndex - 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 1,
      "OngDeZhi": 3,
      "ChanJianHao": 13,
      "michaeldinata": 53
    }
  },
  {
    "path": "src/main/java/anichan/command/AddWorkspaceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class AddWorkspaceCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected String newWorkspaceName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public AddWorkspaceCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void setWorkspaceName(String newWorkspaceName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        this.newWorkspaceName \u003d newWorkspaceName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String getNewWorkspaceName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return newWorkspaceName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace newWorkspace \u003d user.addWorkspace(newWorkspaceName.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(new Watchlist(\"Default\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        newWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager.saveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"Successfully added new workspace: \" + newWorkspace;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 7,
      "ChanJianHao": 31
    }
  },
  {
    "path": "src/main/java/anichan/command/BookmarkAnimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.parser.BookmarkParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class BookmarkAnimeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String ANIME_ID_ERROR \u003d \" Anime index is outside AnimeData range (too big or too small).\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_ID_ERROR \u003d \" Bookmark index is outside Bookmark range (too big or too small).\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_ERROR_HEADER \u003d \"Bookmark command execute failed:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_ERROR_MESSAGE \u003d \" provided is invalid.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_EDIT \u003d \"Executing Edit Episode.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_ADD \u003d \"Executing Add Anime to Bookmark.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_DELETE \u003d \"Executing Delete Anime from Bookmark.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_LIST \u003d \"Executing List all anime in Bookmark.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_SUCCESS \u003d \"Execute Bookmark command successful.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_LIST_HEADER \u003d \"Listing all anime in bookmark:\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int bookmarkIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int animeIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int bookmarkEpisode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String bookmarkAction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String bookmarkNote;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(BookmarkAnimeCommand.class.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public BookmarkAnimeCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        // Set log levels"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmarkAction \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        LOGGER.log(Level.INFO, \"Successfully loaded fields for Bookmark command.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Bookmark bookmark \u003d user.getActiveWorkspace().bookmark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Workspace workspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        switch (bookmarkAction) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.EPISODE_PARAM:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_EDIT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d editBookmarkEpisode(animeData, workspace);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            storageManager.saveBookmark(workspace.getName(), bookmark);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.ADD_PARAM:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_ADD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d addBookmarkEntry(animeData, workspace);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            storageManager.saveBookmark(workspace.getName(), bookmark);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.DELETE_PARAM:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_DELETE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d deleteBookmarkEntry(animeData, workspace);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            storageManager.saveBookmark(workspace.getName(), bookmark);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.LIST_PARAM:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_LIST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d BOOKMARK_LIST_HEADER;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String bookmarkList \u003d listBookmark(animeData, workspace);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result +\u003d bookmarkList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.INFO_PARAM:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, \"Executing anime info for bookmark\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d \"Here is the information for that anime.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String animeInfo \u003d getAnimeInfoFromBookmark(animeData, workspace);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result +\u003d animeInfo + System.lineSeparator() + System.lineSeparator();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result +\u003d \"Notes for anime:\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String notesInfo \u003d getAnimeNotesFromBookmark(workspace);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result +\u003d notesInfo;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.ADD_NOTE_PARAM:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, \"Executing bookmark add note\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d addNoteToBookmark(animeData, workspace);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_SUCCESS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String getAnimeNotesFromBookmark(Workspace workspace) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String notesInfo \u003d workspace.getBookmarkNote(bookmarkIndex - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return notesInfo;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String addNoteToBookmark(AnimeData animeData, Workspace workspace) throws AniException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkBookmarkIndex(workspace);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        workspace.addBookmarkNote(bookmarkIndex - 1, bookmarkNote);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime animeToDelete \u003d workspace.getAnimeFromBookmark(animeData, bookmarkIndex - 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result \u003d \"Adding note:\\\"\" + bookmarkNote + \"\\\" to \" + animeToDelete.getAnimeName() + \"!\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String getAnimeInfoFromBookmark(AnimeData animeData, Workspace workspace) throws AniException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkBookmarkIndex(workspace);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String animeInfo \u003d workspace.getBookmarkInfo(animeData, bookmarkIndex - 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeInfo;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String deleteBookmarkEntry(AnimeData animeData, Workspace workspace) throws AniException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkBookmarkIndex(workspace);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime animeToDelete \u003d workspace.getAnimeFromBookmark(animeData, bookmarkIndex - 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result \u003d \"Removing \" + animeToDelete.getAnimeName() + \"! :(\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        workspace.removeBookmarkEntry(bookmarkIndex - 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String addBookmarkEntry(AnimeData animeData, Workspace workspace) throws AniException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkAnimeIndex(animeData);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime animeToAdd \u003d animeData.getAnimeByID(animeIndex - 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result \u003d \"Saving \" + animeToAdd.getAnimeID() + \". \" + animeToAdd.getAnimeName() + \" to bookmark.\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        workspace.addBookmarkEntry(animeIndex - 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String editBookmarkEpisode(AnimeData animeData, Workspace workspace) throws AniException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkBookmarkIndex(workspace);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assert bookmarkEpisode \u003e\u003d 0 : \"bookmarkEpisode should be positive\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        workspace.editBookmarkEpisode(bookmarkIndex - 1, bookmarkEpisode);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime animeToEdit \u003d workspace.getAnimeFromBookmark(animeData, bookmarkIndex - 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result \u003d \"Editing \" + animeToEdit.getAnimeName() + \" to have \" + bookmarkEpisode + \" episode\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void checkBookmarkIndex(Workspace workspace) throws AniException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //Bookmark index is one based numbering"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (bookmarkIndex \u003e workspace.getBookmarkSize() || bookmarkIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidBookmarkIndex \u003d \"Bookmark index \" + bookmarkIndex + BOOKMARK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + BOOKMARK_ID_ERROR;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidBookmarkIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidBookmarkIndex);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void checkAnimeIndex(AnimeData animeData) throws AniException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //Anime index is one based numbering"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (animeIndex \u003e animeData.getSize() || animeIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidAnimeIndex \u003d \"Anime index \" + animeIndex + BOOKMARK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + ANIME_ID_ERROR;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidAnimeIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidAnimeIndex);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String listBookmark(AnimeData animeData, Workspace workspace) throws AniException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return workspace.getBookmarkListInString(animeData);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getBookmarkAction() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return this.bookmarkAction;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void setBookmarkAction(String actionString) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.bookmarkAction \u003d actionString;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void setBookmarkIndex(String bookmarkIndexString) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.bookmarkIndex \u003d Integer.parseInt(bookmarkIndexString);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void setAnimeIndex(String animeIndexString) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeIndex \u003d Integer.parseInt(animeIndexString);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void setBookmarkEpisode(String bookmarkEpisodeString) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.bookmarkEpisode \u003d Integer.parseInt(bookmarkEpisodeString);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void setBookmarkNote(String note) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.bookmarkNote \u003d note;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 2,
      "n3wsoldier": 167,
      "OngDeZhi": 1,
      "ChanJianHao": 11,
      "michaeldinata": 5
    }
  },
  {
    "path": "src/main/java/anichan/command/BrowseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class BrowseCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ANIME_PER_PAGE \u003d 20;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String PAGE_PARAM \u003d \"p\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ID_SORT \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ORDER_DESCENDING \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int sortType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int order;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int page;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int indexToPrint;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String filter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String LAST_ANIME_WARNING \u003d \"Printing Last Anime Series from source\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String BROWSE_PAGE_INDICATOR \u003d \"Browsing Page: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String OUT_OF_BOUND_PAGE_WARNING \u003d \"Getting page: Tried to start at index: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String OUT_OF_BOUND_PAGE_ERROR \u003d \"Invalid Page size!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String PARAMETER_ERROR_HEADER \u003d \"Parameter : -\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String REQUIRE_ADDITIONAL_FIELD \u003d \" requires an additional field\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NON_INTEGER_PROVIDED \u003d \"Please specify an Int value for page number!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ASSERT_SORT_TYPE \u003d \"sortType should be \u003c 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ASSERT_ORDER_TYPE \u003d \"order should be \u003c 2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_ID_DESCENDING \u003d \"Sorting by ID descending\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_NAME_ASCENDING \u003d \"Sorting by Name Ascending (A to Z)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_NAME_DESCENDING \u003d \"Sorting by Name Descending (Z to A)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_RATING_ASCENDING \u003d \"Sorting by Rating Ascending (low to high)\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_RATING_DESCENDING \u003d \"Sorting by Rating Descending (high to low)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(BrowseCommand.class.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public BrowseCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.description \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.sortType \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.order \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.page \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.indexToPrint \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.filter \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        ArrayList\u003cAnime\u003e usableList \u003d animeData.getAnimeDataList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assert (sortType \u003c 3) : ASSERT_SORT_TYPE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assert (order \u003c 2) : ASSERT_ORDER_TYPE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        sortBrowseList(usableList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d buildBrowseOutput(usableList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setSortType(3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        sortBrowseList(usableList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String buildBrowseOutput(ArrayList\u003cAnime\u003e usableList) throws AniException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (indexToPrint \u003e\u003d usableList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_PAGE_WARNING + indexToPrint);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_PAGE_ERROR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (int i \u003d indexToPrint; i \u003c indexToPrint + ANIME_PER_PAGE; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            Anime browseAnime \u003d usableList.get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            result.append(i + 1 + \". \" + browseAnime.getAnimeName() + \" [Id: \" + browseAnime.getAnimeID() + \"]\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (i + 1 \u003e\u003d usableList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                LOGGER.log(Level.WARNING, LAST_ANIME_WARNING);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        result.append(BROWSE_PAGE_INDICATOR).append(page);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void sortBrowseList(ArrayList\u003cAnime\u003e usableList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (sortType \u003d\u003d ID_SORT \u0026\u0026 order \u003d\u003d ORDER_DESCENDING) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_ID_DESCENDING);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getAnimeID).reversed());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else if (sortType \u003d\u003d 1 \u0026\u0026 order \u003d\u003d ORDER_DESCENDING) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_NAME_ASCENDING);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getAnimeName));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else if (sortType \u003d\u003d 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_NAME_DESCENDING);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getAnimeName).reversed());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else if (sortType \u003d\u003d 2 \u0026\u0026 order \u003d\u003d ORDER_DESCENDING) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_RATING_ASCENDING);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getRating));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else if (sortType \u003d\u003d 2) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_RATING_DESCENDING);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getRating).reversed());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else if (sortType \u003d\u003d 3) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getAnimeID));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setFilter(String filter) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setPage(int page) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.page \u003d Math.max(page, 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        indexToPrint \u003d (page - 1) * 20;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getPage() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return page;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setSortType(int sortType) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.sortType \u003d sortType;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getSortType() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return sortType;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setOrder(int order) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getOrder() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 125,
      "n3wsoldier": 1,
      "OngDeZhi": 1,
      "ChanJianHao": 8
    }
  },
  {
    "path": "src/main/java/anichan/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private boolean shouldExit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean getShouldExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return shouldExit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setShouldExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.shouldExit \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        throw new AniException(\"This method should be implemented in the child class\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 9,
      "ChanJianHao": 6,
      "michaeldinata": 8
    }
  },
  {
    "path": "src/main/java/anichan/command/EstimateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class EstimateCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int NO_WORDS_PER_HOUR_PROVIDED \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int MINUTES_PER_HOUR \u003d 60;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // On average, translator translates about 400 to 600 words in an hour, so a multiple"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // of 100 (400, 500, 600) is chosen to provide users with various estimation times so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // they can identify which of these 3 values is a better estimate for them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int[] AVERAGE_TRANSLATOR_WORDS_PER_HOUR \u003d {400, 500, 600};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(EstimateCommand.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String scriptFileName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final int wordsPerHour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public EstimateCommand(String scriptFileName, int wordsPerHour) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.scriptFileName \u003d scriptFileName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.wordsPerHour \u003d wordsPerHour;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileContent \u003d storageManager.loadScript(activeWorkspace.getName(), scriptFileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        int wordCount \u003d fileContent.split(\" \").length;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, wordCount + \" words in the script (\" + scriptFileName + \").\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        StringBuilder commandResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (wordsPerHour !\u003d NO_WORDS_PER_HOUR_PROVIDED) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            double timeNeeded \u003d wordCount / (double) wordsPerHour;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            commandResult.append(\"You would need \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            commandResult.append(timeNeededToString(timeNeeded));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            for (int averageWordsPerHour : AVERAGE_TRANSLATOR_WORDS_PER_HOUR) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                double timeNeeded \u003d wordCount / (double) averageWordsPerHour;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandResult.append(\"Average translator (\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandResult.append(averageWordsPerHour);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandResult.append(\" words per hour) takes: \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandResult.append(timeNeededToString(timeNeeded));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandResult.append(System.lineSeparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            // Remove extra new line."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            commandResult.setLength(commandResult.length() - System.lineSeparator().length());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Returning estimate result for \" + scriptFileName"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                    + \" with \" + wordsPerHour + \"wph.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return commandResult.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String timeNeededToString(double timeNeeded) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        double hoursNeeded \u003d Math.floor(timeNeeded);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        double minutesNeeded \u003d (timeNeeded - hoursNeeded) * MINUTES_PER_HOUR;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String hoursAndMinutesNeeded \u003d (int) hoursNeeded + \" hour(s)\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if ((int)minutesNeeded !\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            hoursAndMinutesNeeded +\u003d \" \" + (int) minutesNeeded + \" minute(s).\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            hoursAndMinutesNeeded +\u003d \".\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Converted \" + timeNeeded + \" to: \" + hoursAndMinutesNeeded);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return hoursAndMinutesNeeded;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 70,
      "ChanJianHao": 6
    }
  },
  {
    "path": "src/main/java/anichan/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String NULL_STRING \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        setShouldExit();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return NULL_STRING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 3,
      "OngDeZhi": 2,
      "ChanJianHao": 4,
      "michaeldinata": 6
    }
  },
  {
    "path": "src/main/java/anichan/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(HelpCommand.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static String output;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.output \u003d buildHelpOutput();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Shows help function."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private String buildHelpOutput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, \"Start of build help output\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Create a new user profile:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" adduser -n \u003cNAME\u003e -dob \u003cdd/MM/yyyy\u003e -g \u003cGENDER\u003e\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" Switch to another user:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" switchuser -n \u003cNAME\u003e\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" Browse through the anime list:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" browse [-s SORT_CATEGORY] [-o SORT_ORDER] [-p PAGE_NUMBER]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"     - SORT_CATEGORY: name, rating\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"     - SORT_ORDER: asc, dsc\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"     - PAGE_NUMBER: 1, 2, 3, ...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" Create a new watchlist:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" watchlist -n \u003cWATCHLIST_NAME\u003e\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" List all watchlist:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" watchlist -l\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" Add an anime to active watchlist:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" add -a \u003cANIME_NAME\u003e\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" Bookmark an anime:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" bookmark -a \u003cANIME_ID\u003e\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" Delete bookmark for an anime:\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" bookmark -d \u003cBOOKMARK_ID\u003e\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" Edit a bookmark:\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\" bookmark \u003cBOOKMARK_ID\u003e -e \u003cEPISODE\u003e\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, \"End of build help output\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 8,
      "michaeldinata": 94
    }
  },
  {
    "path": "src/main/java/anichan/command/InfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class InfoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String OUT_OF_BOUND_INDEX_ERROR \u003d \"Anime ID is invalid!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer animeIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(InfoCommand.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public InfoCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Shows information of anime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        int indexSize \u003d animeData.getSize();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (animeIndex \u003c 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (animeIndex \u003e\u003d indexSize) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Here is the information for the anime:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String animeInfo \u003d animeData.returnAnimeInfo(animeIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(animeInfo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void setAnimeIndex(Integer animeIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.animeIndex \u003d animeIndex - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 8,
      "michaeldinata": 41
    }
  },
  {
    "path": "src/main/java/anichan/command/RemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String OUT_OF_BOUND_INDEX_ERROR \u003d \"Invalid Watchlist Index!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String EMPTY_WATCHLIST_ERROR \u003d \"Watchlist is empty!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer watchlistListIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer animeIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(RemoveCommand.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public RemoveCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Remove an anime from current watchlist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        removeFromWatchlist(storageManager, activeWorkspace);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime anime \u003d animeData.getAnimeByID(animeIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String animeName \u003d anime.getAnimeName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return animeName + \" successfully removed from watchlist!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private void removeFromWatchlist(StorageManager storageManager, Workspace activeWorkspace) throws AniException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (activeWatchlist.getWatchlistSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, EMPTY_WATCHLIST_ERROR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(EMPTY_WATCHLIST_ERROR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (activeWatchlist.getWatchlistSize() \u003c\u003d watchlistListIndex - 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (watchlistListIndex \u003c 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assert this.watchlistListIndex \u003e\u003d 0 : \"Watchlist index has to be valid\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeIndex \u003d activeWatchlist.getWatchlistListAnimeIndex(watchlistListIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        activeWatchlist.removeAnimeFromList(watchlistListIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        storageManager.saveWatchlistList(activeWorkspace.getName(), watchlistList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, \"Successfully removed anime from active watchlist\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void setWatchlistListIndex(Integer watchlistListIndex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.watchlistListIndex \u003d watchlistListIndex - 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 12,
      "michaeldinata": 57
    }
  },
  {
    "path": "src/main/java/anichan/command/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ASSERT_SEARCH_TERM_EMPTY \u003d \"Empty Search String!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ID_HEADER \u003d \"[ID:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ID_CLOSER \u003d \"] \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NO_RESULTS_FOUND \u003d \"No results found!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SEARCHING_BY_GENRE \u003d \"Searching By Genre\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SEARCHING_BY_ANIME_NAME \u003d \"Searching By Anime Name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SEARCH_TYPE_INVALID \u003d \"Something went wrong with search input\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SEARCH_TYPE_INVALID_LOG \u003d \"Search Type has the wrong values.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int SEARCH_BY_NAME \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int SEARCH_BY_GENRE \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(SearchCommand.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String searchTerm;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String result;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String searchGenre;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int searchType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public SearchCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        searchGenre \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        result \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        searchType \u003d SEARCH_BY_NAME;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assert (searchTerm.isEmpty() || searchGenre.isEmpty()) : ASSERT_SEARCH_TERM_EMPTY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        switch (searchType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case SEARCH_BY_NAME:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            searchForAnime(animeData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case SEARCH_BY_GENRE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            searchForGenre(animeData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.SEVERE, SEARCH_TYPE_INVALID_LOG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(SEARCH_TYPE_INVALID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            return NO_RESULTS_FOUND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void searchForGenre(AnimeData animeData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        LOGGER.log(Level.INFO, SEARCHING_BY_GENRE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (Anime anime : animeData.getAnimeDataList()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (Arrays.asList(anime.getGenre()).contains(searchGenre)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                result +\u003d ID_HEADER + anime.getAnimeID() + ID_CLOSER + anime.getAnimeName() + System.lineSeparator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void searchForAnime(AnimeData animeData) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        LOGGER.log(Level.INFO, SEARCHING_BY_ANIME_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (Anime anime : animeData.getAnimeDataList()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (anime.getAnimeName().toLowerCase().contains(searchTerm)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                result +\u003d ID_HEADER + anime.getAnimeID() + ID_CLOSER + anime.getAnimeName() + System.lineSeparator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setSearchTerm(String searchTerm) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.searchTerm \u003d searchTerm.toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.searchType \u003d SEARCH_BY_NAME;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setSearchGenre(String searchGenre) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.searchGenre \u003d searchGenre;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.searchType \u003d SEARCH_BY_GENRE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getSearchType() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return searchType;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setSearchType(int searchType) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.searchType \u003d searchType;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 90,
      "ChanJianHao": 7
    }
  },
  {
    "path": "src/main/java/anichan/command/SwitchWorkspaceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class SwitchWorkspaceCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String PARAMETER_ERROR_HEADER \u003d \"Parameter : -\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String REQUIRE_ADDITIONAL_FIELD \u003d \" requires an additional field\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(SwitchWorkspaceCommand.class.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String SWITCH_SUCCESS_HEADER \u003d \"Workspace changed to \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private String switchToThisWorkspace;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public SwitchWorkspaceCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        //Find the user and setActiveUser to it"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        user.switchActiveWorkspace(switchToThisWorkspace);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return SWITCH_SUCCESS_HEADER + switchToThisWorkspace;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setSwitchToThisWorkspace(String switchToThisWorkspace) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.switchToThisWorkspace \u003d switchToThisWorkspace;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 24,
      "OngDeZhi": 1,
      "ChanJianHao": 10
    }
  },
  {
    "path": "src/main/java/anichan/command/ViewWatchlistCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class ViewWatchlistCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String OUT_OF_BOUND_INDEX_ERROR \u003d \"Watchlist ID is invalid!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String EMPTY_WATCHLIST_ERROR \u003d \"There are no watchlists in your workspace!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer watchlistIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(ViewWatchlistCommand.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public ViewWatchlistCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * View all anime in specific watchlist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        int watchlistSize \u003d watchlistList.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (watchlistSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, EMPTY_WATCHLIST_ERROR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(EMPTY_WATCHLIST_ERROR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (watchlistIndex \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (watchlistIndex \u003e\u003d watchlistSize) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String result \u003d buildAnimeInWatchlist(animeData, watchlistList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private String buildAnimeInWatchlist(AnimeData animeData, ArrayList\u003cWatchlist\u003e watchlistList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist selectedWatchlist \u003d watchlistList.get(watchlistIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeInWatchlist \u003d selectedWatchlist.getAnimeList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String selectedWatchlistName \u003d selectedWatchlist.getName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder sbWatchlistAnime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        sbWatchlistAnime.append(\"Here are the anime in \").append(selectedWatchlistName).append(\" watchlist:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        for (int i \u003d 0; i \u003c animeInWatchlist.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            Integer animeIndex \u003d animeInWatchlist.get(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            Anime anime \u003d animeData.getAnime(animeIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            String animeName \u003d anime.getAnimeName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            sbWatchlistAnime.append(System.lineSeparator());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            sbWatchlistAnime.append(\"\\t\").append(i + 1).append(\". \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            sbWatchlistAnime.append(animeName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return sbWatchlistAnime.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void setWatchlistIndex(Integer watchlistIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.watchlistIndex \u003d watchlistIndex - 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michaeldinata": 76
    }
  },
  {
    "path": "src/main/java/anichan/command/WatchlistCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class WatchlistCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String CREATE_OPTION \u003d \"n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String LIST_OPTION \u003d \"l\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SELECT_OPTION \u003d \"s\";    // Categorized as a Modification option."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String DELETE_OPTION \u003d \"d\";    // Categorized as a Modification option."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_LIST_IS_NULL \u003d \"Watchlist list should not be null.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String OPTION_IS_NULL \u003d \"Option should not be null.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_OPTION \u003d \"Watchlist command only accepts the options: -n, -l, -s, and -d.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_NAME_IS_NOT_UNIQUE \u003d \"Watchlist name is used already!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_WATCHLIST_LIST \u003d \"Uhh.. You have no watchlist..\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_WATCHLIST_INDEX \u003d \"This is not a valid watchlist index.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_INDEX_IS_NOT_POSITIVE_INTEGER \u003d \"Watchlist index is not a positive integer!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String CANNOT_SELECT_ACTIVE_WATCHLIST \u003d \"You cannot select the active watchlist..\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String CANNOT_DELETE_LAST_WATCHLIST \u003d \"You cannot delete the last watchlist!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(WatchlistCommand.class.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String option;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String optionInformation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public WatchlistCommand(String option, String optionInformation) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.option \u003d option;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.optionInformation \u003d optionInformation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert activeWorkspace.getWatchlistList() !\u003d null : WATCHLIST_LIST_IS_NULL;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert option !\u003d null : OPTION_IS_NULL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        switch (option) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case CREATE_OPTION:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return createWatchlist(storageManager, activeWorkspace);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case LIST_OPTION:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return listAllWatchlist(activeWorkspace);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case SELECT_OPTION:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return selectWatchlist(activeWorkspace);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case DELETE_OPTION:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return deleteWatchlist(storageManager, activeWorkspace);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_OPTION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String createWatchlist(StorageManager storageManager, Workspace activeWorkspace) throws AniException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist createdWatchlist \u003d new Watchlist(optionInformation);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isWatchlistNameUnique \u003d !watchlistList.contains(createdWatchlist);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isWatchlistNameUnique) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_NAME_IS_NOT_UNIQUE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(createdWatchlist);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager.saveWatchlistList(activeWorkspace.getName(), watchlistList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Watchlist \\\"\" + optionInformation + \"\\\" created successfully.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"Watchlist \\\"\" + optionInformation + \"\\\" has been created successfully!\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String listAllWatchlist(Workspace activeWorkspace) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Empty watchlistList message because size is 0\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return EMPTY_WATCHLIST_LIST;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        StringBuilder sbWatchlistList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        sbWatchlistList.append(\"Currently, you have \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        sbWatchlistList.append(watchlistList.size()).append(\" watchlist(s):\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (int i \u003d 0; i \u003c watchlistList.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Watchlist watchlist \u003d watchlistList.get(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlistList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlistList.append(\"\\t\").append(i + 1).append(\". \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlistList.append(watchlist.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Listing watchlist of size: \" + watchlistList.size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return sbWatchlistList.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String selectWatchlist(Workspace activeWorkspace) throws AniException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        int selectIndex \u003d parseInteger(optionInformation);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validateModificationOption(watchlistList, selectIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist selectedWatchlist \u003d watchlistList.get(selectIndex);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (selectedWatchlist.equals(activeWatchlist)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Select failed because the active watchlist is selected.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(CANNOT_SELECT_ACTIVE_WATCHLIST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setActiveWatchlist(selectedWatchlist);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"New active watchlist: \" + activeWorkspace.getActiveWatchlistName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"\\\"\" + selectedWatchlist.getName() + \"\\\" is now your active watchlist!\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String deleteWatchlist(StorageManager storageManager, Workspace activeWorkspace) throws AniException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        int deleteIndex \u003d parseInteger(optionInformation);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validateModificationOption(watchlistList, deleteIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist deletedWatchlist \u003d watchlistList.get(deleteIndex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.remove(deleteIndex);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String commandOutput \u003d \"Watchlist \\\"\" + deletedWatchlist.getName() + \"\\\" has been deleted successfully!\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (deletedWatchlist.equals(activeWatchlist)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            activeWorkspace.setActiveWatchlist(watchlistList.get(0));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String activeWatchlistName \u003d activeWorkspace.getActiveWatchlistName();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            commandOutput +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            commandOutput +\u003d \"Changed active watchlist to: \\\"\" + activeWatchlistName + \"\\\".\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager.saveWatchlistList(activeWorkspace.getName(), watchlistList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Watchlist: \\\"\" + deletedWatchlist.getName() + \"\\\" deleted successfully.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return commandOutput;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void validateModificationOption(ArrayList\u003cWatchlist\u003e watchlistList, int index) throws AniException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(EMPTY_WATCHLIST_LIST);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistList.size() \u003d\u003d 1 \u0026\u0026 option.equals(DELETE_OPTION)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(CANNOT_DELETE_LAST_WATCHLIST);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d watchlistList.size()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private int parseInteger(String optionInformation) throws AniException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            // Input received as one-based numbering, then converted to zero-based numbering."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return Integer.parseInt(optionInformation) - 1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_INDEX_IS_NOT_POSITIVE_INTEGER);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 149,
      "ChanJianHao": 9
    }
  },
  {
    "path": "src/main/java/anichan/exception/AniException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class AniException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Constructor for exception message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param exceptionMessage exception message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public AniException(String exceptionMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        super(exceptionMessage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 12,
      "ChanJianHao": 1
    }
  },
  {
    "path": "src/main/java/anichan/human/Character.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class Character extends Human {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected ArrayList\u003cVoiceActor\u003e voiceActors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Character(String name) throws AniException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void addVoiceActor(VoiceActor newVoiceActor) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        voiceActors.add(newVoiceActor);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public int getTotalVoiceActors() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return voiceActors.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 26
    }
  },
  {
    "path": "src/main/java/anichan/human/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    Male,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    Female,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    Other"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 7
    }
  },
  {
    "path": "src/main/java/anichan/human/Human.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public abstract class Human {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Human(String name) throws AniException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (!name.isEmpty()) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            setName(name);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(\"Is your name empty?\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 5,
      "ChanJianHao": 19
    }
  },
  {
    "path": "src/main/java/anichan/human/User.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class User extends Human {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public static final String GENDER_MALE \u003d \"male\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public static final String GENDER_FEMALE \u003d \"female\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public static final String GENDER_OTHER \u003d \"other\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(Main.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected Gender gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected Workspace activeWorkspace;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected ArrayList\u003cWorkspace\u003e workspaceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public User(String name, String gender) throws AniException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        setGender(gender);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        activeWorkspace \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void setGender(String genderString) throws AniException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        genderString \u003d genderString.toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        switch (genderString) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case GENDER_MALE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            gender \u003d Gender.Male;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case GENDER_FEMALE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            gender \u003d Gender.Female;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case GENDER_OTHER:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            gender \u003d Gender.Other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(\"Unexpected gender: \" + genderString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Provides the name of the user with Japanese honorifics depending on his gender."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return name of user with honorifics."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String getHonorificName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (gender \u003d\u003d Gender.Female) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return name + \"-chan\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return name + \"-san\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setWorkspaceList(ArrayList\u003cWorkspace\u003e workspaceList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.workspaceList \u003d workspaceList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (workspaceList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            activeWorkspace \u003d workspaceList.get(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Workspace getActiveWorkspace() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return activeWorkspace;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void setActiveWorkspace(Workspace inputWorkspace) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        activeWorkspace \u003d inputWorkspace;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (activeWorkspace !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            //Set the first watchlist to be the active watchlist"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            inputWorkspace.setActiveWatchlist(inputWorkspace.getWatchlistList().get(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.INFO, \"Workspace switched: \" + inputWorkspace.getName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Finds the workplace that matches the string parameter to switch to."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param switchToThisWorkspace the requested workplace to switch to"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if the workplace is not found"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void switchActiveWorkspace(String switchToThisWorkspace) throws AniException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (Workspace existingWorkspace : workspaceList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (existingWorkspace.getName().equals(switchToThisWorkspace)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                setActiveWorkspace(existingWorkspace);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.WARNING, \"Workspace \" + switchToThisWorkspace + \" does not exist!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        throw new AniException(\"Workspace \" + switchToThisWorkspace + \" does not exist!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public int getTotalWorkspaces() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return workspaceList.size();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Workspace addWorkspace(String name) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace newWorkspace \u003d new Workspace(name);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert (name !\u003d null) : \"Workspace details should not have any null.\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        workspaceList.add(newWorkspace);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"Workspace created: \" + name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return newWorkspace;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return \" Name: \" + getHonorificName() + \" | Gender: \" + getGender();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 19,
      "OngDeZhi": 7,
      "ChanJianHao": 97
    }
  },
  {
    "path": "src/main/java/anichan/human/VoiceActor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class VoiceActor extends Human {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected ArrayList\u003cCharacter\u003e characters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public VoiceActor(String name) throws AniException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void addCharacter(Character newCharacter) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        characters.add(newCharacter);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public int getTotalCharacters() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return characters.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 26
    }
  },
  {
    "path": "src/main/java/anichan/human/Workspace.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class Workspace {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Bookmark bookmark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected String workspaceName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Watchlist activeWatchlist;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private ArrayList\u003cWatchlist\u003e watchlistList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Workspace(String workspaceName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        this.workspaceName \u003d workspaceName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Workspace(String workspaceName, ArrayList\u003cWatchlist\u003e watchlistList, Bookmark bookmark) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.workspaceName \u003d workspaceName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.watchlistList \u003d watchlistList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setActiveWatchlist(Watchlist activeWatchlist) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.activeWatchlist \u003d activeWatchlist;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setWatchlistList(ArrayList\u003cWatchlist\u003e watchlistList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.watchlistList \u003d watchlistList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return workspaceName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Watchlist getActiveWatchlist() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return activeWatchlist;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String getActiveWatchlistName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return activeWatchlist.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public ArrayList\u003cWatchlist\u003e getWatchlistList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return watchlistList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getBookmarkListInString(AnimeData animeData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return bookmark.getListInString(animeData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void removeBookmarkEntry(Integer bookmarkIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmark.removeAnimeBookmark(bookmarkIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addBookmarkEntry(Integer animeIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmark.addAnimeBookmark(animeIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Integer getBookmarkSize() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return bookmark.getBookmarkSize();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Anime getAnimeFromBookmark(AnimeData animeData, Integer bookmarkIndex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return bookmark.getAnimeBookmarkByIndex(animeData, bookmarkIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void editBookmarkEpisode(Integer bookmarkIndex, Integer bookmarkEpisode) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmark.editAnimeBookmarkEpisode(bookmarkIndex, bookmarkEpisode);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getBookmarkInfo(AnimeData animeData, Integer bookmarkIndex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return bookmark.getAnimeBookmarkInfo(animeData, bookmarkIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addBookmarkNote(Integer bookmarkIndex, String note) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmark.addNote(bookmarkIndex, note);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getBookmarkNote(Integer bookmarkIndex) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return bookmark.getNoteInString(bookmarkIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return workspaceName;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 45,
      "OngDeZhi": 33,
      "ChanJianHao": 20
    }
  },
  {
    "path": "src/main/java/anichan/logger/AniLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.logger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class AniLogger {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final int MAX_LOG_COUNT \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final int MAX_LOG_SIZE \u003d (int) (Math.pow(1024, 3) * 5); // 5 Megabytes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String LOG_FILE \u003d \"data/AniChan.log\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Level LOG_FILE_LEVEL \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Level CONSOLE_LEVEL \u003d Level.SEVERE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public static Logger getAniLogger(String className) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Logger logger \u003d Logger.getLogger(className);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        clearHandlers(logger);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return Logger.getLogger(className);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert logger !\u003d null : \"Logger is null!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        consoleHandler.setLevel(CONSOLE_LEVEL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert logger !\u003d null : \"Logger is null!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } catch (IOException exceptionMessage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            logger.log(Level.WARNING, \"Failed to add file handler for logger.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        File file \u003d new File(LOG_FILE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        SimpleFormatter formatter \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_LOG_SIZE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                MAX_LOG_COUNT, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        fileHandler.setFormatter(formatter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        fileHandler.setLevel(LOG_FILE_LEVEL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static void clearHandlers(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert logger !\u003d null : \"Logger is null!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Handler[] handlers \u003d logger.getHandlers();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            logger.removeHandler(handler);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 95
    }
  },
  {
    "path": "src/main/java/anichan/parser/AddToWatchlistParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.AddToWatchlistCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class AddToWatchlistParser extends CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String ADD_PARAM \u003d \"a\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String NON_INTEGER_PROVIDED \u003d \"Please specify an Int value for Anime ID!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(AddToWatchlistParser.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private AddToWatchlistCommand addToWatchlistCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public AddToWatchlistParser() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        addToWatchlistCommand \u003d new AddToWatchlistCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public AddToWatchlistCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (paramGiven.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(\"-a ANIME_ID is required\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            parameterParser(paramGiven);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.INFO, \"Parameter parsed properly\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return addToWatchlistCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        for (String param : paramGiven) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            String[] paramParts \u003d param.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            if (paramParts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            case \"\": // skip empty param"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            case ADD_PARAM:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                if (!isInt(paramParts[1].trim())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    throw new AniException(NON_INTEGER_PROVIDED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                addToWatchlistCommand.setAnimeIndex(Integer.parseInt(paramParts[1].trim()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + param + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 6,
      "michaeldinata": 52
    }
  },
  {
    "path": "src/main/java/anichan/parser/AddWorkspaceParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.AddWorkspaceCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class AddWorkspaceParser extends CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public static final String REGEX_CHARACTER_HYPHEN \u003d \"-\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public static final String EXCEPTION_INVALID_PARAMETERS \u003d \"Invalid parameters detected!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public static final String REGEX_CHARACTER_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public static final String PARAMETER_NAME \u003d \"n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private final AddWorkspaceCommand addWorkspaceCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(BookmarkParser.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public AddWorkspaceParser() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        addWorkspaceCommand \u003d new AddWorkspaceCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public AddWorkspaceCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        paramIsSetCheck(paramGiven);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        parameterParser(paramGiven);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return addWorkspaceCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        for (String param : paramGiven) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            String[] paramParts \u003d param.split(REGEX_CHARACTER_SPACE, 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            if (paramParts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.WARNING, \"Exception:\" + EXCEPTION_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                throw new AniException(EXCEPTION_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            if ((paramParts[0].trim().equals(PARAMETER_NAME))) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                addWorkspaceCommand.setWorkspaceName(paramParts[1].trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.INFO, \"Parsed workspace name: \" + paramParts[1].trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (addWorkspaceCommand.getNewWorkspaceName() \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Exception:\" + EXCEPTION_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXCEPTION_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 51
    }
  },
  {
    "path": "src/main/java/anichan/parser/BookmarkParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.BookmarkAnimeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public class BookmarkParser extends CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String ADD_PARAM \u003d \"a\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String DELETE_PARAM \u003d \"d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String EPISODE_PARAM \u003d \"e\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String LIST_PARAM \u003d \"l\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String INFO_PARAM \u003d \"i\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String ADD_NOTE_PARAM \u003d \"n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String DASH_PARAM \u003d \"-\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String PARAMETER_ERROR_HEADER \u003d \"Parameter :\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String DESCRIPTION_ERROR_HEADER \u003d \"Description :\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_LOAD_ERROR_HEADER \u003d \"Could not load bookmark command :\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(BookmarkParser.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private BookmarkAnimeCommand bookmarkAnimeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public BookmarkParser() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmarkAnimeCommand \u003d new BookmarkAnimeCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public BookmarkAnimeCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String[] paramGiven \u003d getSplitDescription(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (paramGiven.length \u003e 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            parameterParser(paramGiven[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            setFirstParameter(paramGiven[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            setSingleParameter(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return bookmarkAnimeCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void parameterParser(String paramGiven) throws AniException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String[] paramParts \u003d paramGiven.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case EPISODE_PARAM:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkAnimeCommand.setBookmarkAction(paramParts[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (!isInt(paramParts[1].trim())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                        + System.lineSeparator() + \" Bookmark edit episode param requires integer.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidParameter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkAnimeCommand.setBookmarkEpisode(paramParts[1].trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case ADD_PARAM:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkAnimeCommand.setBookmarkAction(paramParts[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (!isInt(paramParts[1].trim())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                        + System.lineSeparator() + \" Bookmark Add param requires integer.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidParameter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkAnimeCommand.setAnimeIndex(paramParts[1].trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case DELETE_PARAM:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkAnimeCommand.setBookmarkAction(paramParts[0]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (!isInt(paramParts[1].trim())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                        + System.lineSeparator() + \" Bookmark delete param requires integer.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidParameter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkAnimeCommand.setBookmarkIndex(paramParts[1].trim());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case LIST_PARAM:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkAnimeCommand.setBookmarkAction(paramParts[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case ADD_NOTE_PARAM:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkAnimeCommand.setBookmarkAction(paramParts[0]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkAnimeCommand.setBookmarkNote(paramParts[1].trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void setFirstParameter(String paramGiven) throws AniException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //Action edit(e) requires first parameter as bookmarkIndex"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (bookmarkAnimeCommand.getBookmarkAction().equals(\"e\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                || bookmarkAnimeCommand.getBookmarkAction().equals(\"n\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (!isInt(paramGiven.trim())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                String invalidBookmarkIndex \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                        + System.lineSeparator() + \" Bookmark index for edit episode requires integer.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidBookmarkIndex);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                throw new AniException(invalidBookmarkIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkAnimeCommand.setBookmarkIndex(paramGiven.trim());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            boolean isEmpty \u003d paramGiven.trim().equals(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (!isEmpty) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                String invalidFirstParameter \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                        + System.lineSeparator() + \" Add or Delete should not have extra param.\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidFirstParameter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                throw new AniException(invalidFirstParameter);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void setSingleParameter(String paramGiven) throws AniException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (!isInt(paramGiven.trim())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidBookmarkIndex \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + \" Bookmark index for info requires integer.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidBookmarkIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidBookmarkIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmarkAnimeCommand.setBookmarkAction(INFO_PARAM);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmarkAnimeCommand.setBookmarkIndex(paramGiven.trim());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String[] getSplitDescription(String description) throws AniException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String[] paramGiven \u003d description.split(DASH_PARAM);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (paramGiven.length \u003e 2) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidDescription \u003d DESCRIPTION_ERROR_HEADER + description + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidDescription);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidDescription);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //        else if (paramGiven.length \u003c 2) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //            String invalidDescription \u003d DESCRIPTION_ERROR_HEADER + description + REQUIRE_ADDITIONAL_FIELD;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //            LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidDescription);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //            throw new AniException(invalidDescription);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return paramGiven;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 137,
      "ChanJianHao": 6
    }
  },
  {
    "path": "src/main/java/anichan/parser/BrowseParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.BrowseCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class BrowseParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_PARAM \u003d \"s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String FILTER_PARAM \u003d \"f\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ORDER_PARAM \u003d \"o\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String PAGE_PARAM \u003d \"p\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ASCENDING_FIELD \u003d \"asc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DESCENDING_FIELD \u003d \"dsc\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NAME_FIELD \u003d \"name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String RATING_FIELD \u003d \"rating\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String PARAMETER_ERROR_HEADER \u003d \"Parameter : -\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_OPTION \u003d \" is not a valid option\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NOT_RECOGNISED \u003d \" is not recognised!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NON_INTEGER_PROVIDED \u003d \"Please specify an Int value for page number!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String BROWSE_SETTINGS_CHANGED_INFO \u003d \"Default values modified\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(BrowseParser.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private BrowseCommand browseCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public BrowseParser() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        browseCommand \u003d new BrowseCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public BrowseCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramGiven.length \u003e 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            parameterParser(paramGiven);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, BROWSE_SETTINGS_CHANGED_INFO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return browseCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (String param : paramGiven) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String[] paramParts \u003d param.split(SPLIT_WHITESPACE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (paramParts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case \"\": //skip empty param"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case SORT_PARAM:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                checkSortType(paramParts);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case FILTER_PARAM:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                browseCommand.setFilter(paramParts[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case ORDER_PARAM:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                checkOrderType(paramParts[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case PAGE_PARAM:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                if (!isInt(paramParts[1].trim())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                    throw new AniException(NON_INTEGER_PROVIDED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                browseCommand.setPage(Integer.parseInt(paramParts[1].trim()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + param + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void checkOrderType(String paramField) throws AniException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        switch (paramField.trim()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case ASCENDING_FIELD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            browseCommand.setOrder(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case DESCENDING_FIELD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            browseCommand.setOrder(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String paramFieldError \u003d paramField + INVALID_OPTION;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(paramFieldError);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void checkSortType(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        switch (paramParts[1].trim()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case NAME_FIELD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            browseCommand.setSortType(1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case RATING_FIELD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            browseCommand.setSortType(2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String paramFieldError \u003d paramParts[1] + INVALID_OPTION;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(paramFieldError);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 103,
      "ChanJianHao": 6
    }
  },
  {
    "path": "src/main/java/anichan/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public abstract class CommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    //Shared Constants by Parsers"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String NAME_PARAM \u003d \"n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String GENRE_PARAM \u003d \"g\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final int FIELD_SPLIT_LIMIT \u003d 2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String SPLIT_WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String NOT_RECOGNISED \u003d \" is not recognised!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String PARAMETER_ERROR_HEADER \u003d \"Parameter : -\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String REQUIRE_ADDITIONAL_FIELD \u003d \" requires an additional field\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String TOO_MUCH_FIELDS \u003d \" has too much fields\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String NO_PARAMETER_PROVIDED \u003d \"No parameter provided\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String DESCRIPTION_CANNOT_BE_NULL \u003d \"description should not be null.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INTEGER_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Splits the parameters into individual parts for parsing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param parameter unprocessed parameter strings"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @return parameters in parts"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected String[] parameterSplitter(String parameter) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return parameter.split(\"-\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Checks if there is a parameter set."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramParts Array of parameters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if there is no parameter provided"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected void paramIsSetCheck(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramParts.length \u003c 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(NO_PARAMETER_PROVIDED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Checks if parameter has a single additional field or not."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramParts the param to check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if the parameter is missing the additional field"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected void paramFieldCheck(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramParts[0] + REQUIRE_ADDITIONAL_FIELD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramParts.length \u003c 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramParts[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Checks if parameter has more than one field."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramParts the param to check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if the parameter has too many fields"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected void paramExtraFieldCheck(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramParts.length \u003e 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramParts[0] + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Checks if the string is an integer."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param checkStr the string to check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @return true if it can be parsed into an integer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected boolean isInt(String checkStr) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return checkStr.matches(INTEGER_REGEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 75,
      "OngDeZhi": 4,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/main/java/anichan/parser/EstimateParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.EstimateCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class EstimateParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WORDS_PER_HOUR_OPTION \u003d \"wph\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_SCRIPT_FILE_FORMAT \u003d \".txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int NO_WORDS_PER_HOUR_PROVIDED \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String TOO_MUCH_ARGUMENTS \u003d \"Estimate command\" + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String NO_SCRIPT_FILE_SPECIFIED \u003d \"No script file specified!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String MULTIPLE_SCRIPT_FILE_SPECIFIED \u003d \"AniChan can only process one script file at a time!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_SCRIPT_FILE_FORMAT \u003d \"Only \\\".txt\\\" script files are accepted!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_OPTION \u003d \"Only \\\"-wph\\\" is accepted!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String NO_WORDS_PER_HOUR_SPECIFIED \u003d \"Words per hour information is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String MULTIPLE_WORDS_PER_HOUR_SPECIFIED \u003d \"Only one words per hour value is needed!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WORDS_PER_HOUR_IS_NOT_INTEGER \u003d \"Words per hour must be a positive integer!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WORDS_PER_HOUR_IS_ZERO \u003d \"Words per hour cannot be zero!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(EstimateParser.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public EstimateCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert description !\u003d null : DESCRIPTION_CANNOT_BE_NULL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (paramGiven.length \u003e 2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(TOO_MUCH_ARGUMENTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (paramGiven[0].isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NO_SCRIPT_FILE_SPECIFIED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileName \u003d paramGiven[0].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isValidFileName(fileName)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_SCRIPT_FILE_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        int wordsPerHour \u003d NO_WORDS_PER_HOUR_PROVIDED;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (paramGiven.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            wordsPerHour \u003d parameterParser(paramGiven);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Returning a EstimateCommand object with file: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                    + fileName + \", and wph: \" + wordsPerHour + \".\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return new EstimateCommand(fileName, wordsPerHour);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private int parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] parsedParts \u003d paramGiven[1].split(SPLIT_WHITESPACE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String option \u003d parsedParts[0].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!parsedParts[0].equals(WORDS_PER_HOUR_OPTION)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_OPTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (parsedParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NO_WORDS_PER_HOUR_SPECIFIED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (parsedParts.length \u003e 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(MULTIPLE_WORDS_PER_HOUR_SPECIFIED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        int wordsPerHour \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String wordsPerHourString \u003d parsedParts[1].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            wordsPerHour \u003d Integer.parseInt(wordsPerHourString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WORDS_PER_HOUR_IS_NOT_INTEGER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (wordsPerHour \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WORDS_PER_HOUR_IS_ZERO);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return wordsPerHour;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private boolean isValidFileName(String fileName) throws AniException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (fileName.split(SPLIT_WHITESPACE).length !\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(MULTIPLE_SCRIPT_FILE_SPECIFIED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return fileName.trim().endsWith(VALID_SCRIPT_FILE_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 83,
      "ChanJianHao": 4
    }
  },
  {
    "path": "src/main/java/anichan/parser/InfoParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.InfoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class InfoParser extends CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String ANIME_ID_PARAM \u003d \"a\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String NON_INTEGER_PROVIDED \u003d \"Please specify an Int value for Anime ID!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(InfoParser.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private InfoCommand infoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public InfoParser() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        infoCommand \u003d new InfoCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public InfoCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (paramGiven.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(\"-a ANIME_ID is required\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            parameterParser(paramGiven);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.INFO, \"Parameter parsed properly\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return infoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        for (String param : paramGiven) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            String[] paramParts \u003d param.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            if (paramParts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            case \"\": // skip empty param"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            case ANIME_ID_PARAM:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                if (!isInt(paramParts[1].trim())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    throw new AniException(NON_INTEGER_PROVIDED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                infoCommand.setAnimeIndex(Integer.parseInt(paramParts[1].trim()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + param + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 6,
      "michaeldinata": 52
    }
  },
  {
    "path": "src/main/java/anichan/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.HelpCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Prints the main menu of the application"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * and requests for command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public Command getCommand(String fullCommand) throws AniException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parse: \" + fullCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] fullCommandSplit \u003d parseUserInput(fullCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String command \u003d fullCommandSplit[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (fullCommandSplit.length \u003e 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            description \u003d fullCommandSplit[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case \"addws\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return new AddWorkspaceParser().parse(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case \"switchws\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            return new SwitchWorkspaceParser().parse(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"browse\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            return new BrowseParser().parse(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            return new SearchParser().parse(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"watchlist\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new WatchlistParser().parse(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new ViewWatchlistParser().parse(description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new AddToWatchlistParser().parse(description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new RemoveCommandParser().parse(description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"bookmark\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            return new BookmarkParser().parse(description);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case \"estimate\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new EstimateParser().parse(description);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"info\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new InfoParser().parse(description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(\"Unknown command\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public static String[] parseUserInput(String input) throws AniException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (input \u003d\u003d null || input.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Exception occurred\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(\"Input is empty\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parser processing succeeded\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] inputSplit \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return inputSplit;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 6,
      "n3wsoldier": 1,
      "OngDeZhi": 5,
      "ChanJianHao": 15,
      "michaeldinata": 59
    }
  },
  {
    "path": "src/main/java/anichan/parser/RemoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.RemoveCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class RemoveCommandParser extends CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String REMOVE_PARAM \u003d \"d\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String NON_INTEGER_PROVIDED \u003d \"Please specify an Int value for Anime ID!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(RemoveCommandParser.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private RemoveCommand removeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public RemoveCommandParser() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        removeCommand \u003d new RemoveCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public RemoveCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (paramGiven.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(\"-d ANIME_ID_IN_WATCHLIST is required\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            parameterParser(paramGiven);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.INFO, \"Parameter parsed properly\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return removeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        for (String param : paramGiven) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            String[] paramParts \u003d param.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            if (paramParts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            case \"\": // skip empty param"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            case REMOVE_PARAM:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                if (!isInt(paramParts[1].trim())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    throw new AniException(NON_INTEGER_PROVIDED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                removeCommand.setWatchlistListIndex(Integer.parseInt(paramParts[1].trim()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + param + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 6,
      "michaeldinata": 52
    }
  },
  {
    "path": "src/main/java/anichan/parser/SearchParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.SearchCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class SearchParser extends CommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private SearchCommand searchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public SearchParser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        searchCommand \u003d new SearchCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public SearchCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        paramIsSetCheck(paramGiven);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        parameterParser(paramGiven);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return searchCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (String param : paramGiven) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String[] paramParts \u003d param.split(SPLIT_WHITESPACE, FIELD_SPLIT_LIMIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (paramParts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case \"\": //skip the first empty param"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case NAME_PARAM:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchCommand.setSearchTerm(paramParts[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case GENRE_PARAM:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchCommand.setSearchGenre(paramParts[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + param + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 42,
      "ChanJianHao": 3
    }
  },
  {
    "path": "src/main/java/anichan/parser/SwitchWorkspaceParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.SwitchWorkspaceCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class SwitchWorkspaceParser extends CommandParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private final SwitchWorkspaceCommand switchWorkspaceCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public SwitchWorkspaceParser() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        switchWorkspaceCommand \u003d new SwitchWorkspaceCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public SwitchWorkspaceCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        paramIsSetCheck(paramGiven);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        parameterParser(paramGiven);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return switchWorkspaceCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (String param : paramGiven) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String[] paramParts \u003d param.split(SPLIT_WHITESPACE, FIELD_SPLIT_LIMIT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (paramParts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case \"\": //skip the first empty param"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case \"n\": //Name of Workspace"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                switchWorkspaceCommand.setSwitchToThisWorkspace(paramParts[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + param + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 36,
      "ChanJianHao": 3
    }
  },
  {
    "path": "src/main/java/anichan/parser/ViewWatchlistParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.command.ViewWatchlistCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class ViewWatchlistParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String VIEW_PARAM \u003d \"v\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String NON_INTEGER_PROVIDED \u003d \"Please specify an Int value for watchlist ID!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(AddToWatchlistParser.class.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private ViewWatchlistCommand viewWatchlistCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public ViewWatchlistParser() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        viewWatchlistCommand \u003d new ViewWatchlistCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        // LOGGER.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public ViewWatchlistCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (paramGiven.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(\"-v WATCHLIST_ID is required\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            parameterParser(paramGiven);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.INFO, \"Parameter parsed properly\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return viewWatchlistCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        for (String param : paramGiven) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            String[] paramParts \u003d param.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            if (paramParts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            case \"\": // skip empty param"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            case VIEW_PARAM:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                if (!isInt(paramParts[1].trim())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    throw new AniException(NON_INTEGER_PROVIDED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                viewWatchlistCommand.setWatchlistIndex(Integer.parseInt(paramParts[1].trim()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + param + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michaeldinata": 59
    }
  },
  {
    "path": "src/main/java/anichan/parser/WatchlistParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.WatchlistCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class WatchlistParser extends CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String CREATE_OPTION \u003d \"n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String LIST_OPTION \u003d \"l\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SELECT_OPTION \u003d \"s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String DELETE_OPTION \u003d \"d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String BLANK \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String TOO_MUCH_ARGUMENTS \u003d \"Watchlist command\" + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_OPTION \u003d \"Watchlist command only accepts the options: -n, -l, -s, and -d.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_NAME_IS_EMPTY \u003d \"Watchlist name cannot be empty!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_INDEX_IS_EMPTY \u003d \"Watchlist index cannot be empty!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_INDEX_IS_NOT_POSITIVE_INTEGER \u003d \"Watchlist index is not a positive integer!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int CREATION_REQUIRED_PARAMETER_COUNT \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int LIST_REQUIRED_PARAMETER_COUNT \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int MODIFICATION_REQUIRED_PARAMETER_COUNT \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(WatchlistParser.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public WatchlistCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert description !\u003d null : DESCRIPTION_CANNOT_BE_NULL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        paramIsSetCheck(paramGiven);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (paramGiven.length \u003e 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(TOO_MUCH_ARGUMENTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (!paramGiven[0].isBlank()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(paramGiven[0] + NOT_RECOGNISED);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] parsedParts \u003d parameterParser(paramGiven[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Returning WatchlistCommand object with option: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                    + parsedParts[0] + \", and information: \" + parsedParts[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return new WatchlistCommand(parsedParts[0], parsedParts[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String[] parameterParser(String parameter) throws AniException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] parsedParts \u003d parameter.split(SPLIT_WHITESPACE, 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String option \u003d parsedParts[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        switch (option) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case CREATE_OPTION:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            checkCreationParameters(parsedParts);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return parsedParts;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case LIST_OPTION:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            checkListParameters(parsedParts);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new String[]{option, BLANK};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case SELECT_OPTION:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            // Fallthrough because SELECT will call checkModificationParameters method too."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case DELETE_OPTION:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            checkModificationParameters(parsedParts);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return parsedParts;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_OPTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void checkCreationParameters(String[] parsedParts) throws AniException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (parsedParts.length !\u003d CREATION_REQUIRED_PARAMETER_COUNT) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_NAME_IS_EMPTY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void checkListParameters(String[] parsedParts) throws AniException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (parsedParts.length !\u003d LIST_REQUIRED_PARAMETER_COUNT) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(TOO_MUCH_ARGUMENTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void checkModificationParameters(String[] parsedParts) throws AniException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (parsedParts.length !\u003d MODIFICATION_REQUIRED_PARAMETER_COUNT) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_INDEX_IS_EMPTY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistIndex \u003d parsedParts[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isInt(watchlistIndex)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_INDEX_IS_NOT_POSITIVE_INTEGER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 84,
      "ChanJianHao": 3
    }
  },
  {
    "path": "src/main/java/anichan/storage/BookmarkStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class BookmarkStorage extends Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String BOOKMARK_FILE_NAME \u003d \"bookmark.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String BOOKMARK_LINE_DELIMITER \u003d \",\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String storageDirectory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public BookmarkStorage(String storageDirectory) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.storageDirectory \u003d storageDirectory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Save and Load \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void save(String workspaceName, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String bookmarkDirectory \u003d storageDirectory + workspaceName + File.separator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String bookmarkFilePath \u003d bookmarkDirectory + BOOKMARK_FILE_NAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String encodedWatchlistString \u003d encode(bookmark);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        new File(bookmarkDirectory).mkdirs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        writeFile(bookmarkFilePath, encodedWatchlistString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String load(String workspaceName, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String bookmarkFilePath \u003d storageDirectory + workspaceName + File.separator + BOOKMARK_FILE_NAME;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileString \u003d readFile(bookmarkFilePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (fileString.isBlank()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return \"Empty bookmark file.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] fileLines \u003d fileString.split(System.lineSeparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return decode(fileLines, bookmark);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Encode and Decode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String encode(Bookmark bookmark) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        StringBuilder sbBookmark \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cInteger\u003e animeBookmarkList \u003d bookmark.getAnimeBookmarkList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cInteger\u003e animeEpisode \u003d bookmark.getAnimeEpisode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (int i \u003d 0; i \u003c bookmark.getBookmarkSize(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbBookmark.append(animeBookmarkList.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbBookmark.append(\",\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbBookmark.append(animeEpisode.get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbBookmark.append(System.lineSeparator());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        sbBookmark.setLength(sbBookmark.length() - 2);  // Remove \", \" for the last item in the string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String encodedBookmarkString \u003d sbBookmark.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert (encodedBookmarkString.isBlank()) : \"Encoded bookmark string should not be blank.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return encodedBookmarkString;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String decode(String[] fileLines, Bookmark bookmark) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean hasCorruptedBookmark \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (String line : fileLines) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String[] lineSplit \u003d line.split(BOOKMARK_LINE_DELIMITER, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (!isValidBookmarkString(lineSplit)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                hasCorruptedBookmark \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            int bookmarkIndex \u003d Integer.parseInt(lineSplit[0]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            int bookmarkEpisode \u003d Integer.parseInt(lineSplit[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            bookmark.addAnimeBookmarkEpisode(bookmarkIndex, bookmarkEpisode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (hasCorruptedBookmark) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return \"Not all loaded successfully.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return \"Loaded successfully.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Validation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private boolean isValidBookmarkString(String[] lineSplit) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isValidSplitLength \u003d (lineSplit.length \u003d\u003d 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isValidSplitLength) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isFirstPartInteger \u003d isPositiveOrNegativeInteger(lineSplit[0]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isSecondPartInteger \u003d isPositiveOrNegativeInteger(lineSplit[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return isFirstPartInteger \u0026\u0026 isSecondPartInteger;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 88,
      "ChanJianHao": 3
    }
  },
  {
    "path": "src/main/java/anichan/storage/ScriptStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class ScriptStorage extends Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String storageDirectory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_SCRIPT_FILE \u003d \"Script file is empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(ScriptStorage.class.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public ScriptStorage(String storageDirectory) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.storageDirectory \u003d storageDirectory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String readScript(String workspaceName, String fileName) throws AniException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String scriptFilePath \u003d storageDirectory + workspaceName + File.separator + fileName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileContent \u003d readFile(scriptFilePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (fileContent.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Empty script file: \" + scriptFilePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(EMPTY_SCRIPT_FILE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return fileContent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 28,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/main/java/anichan/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public abstract class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String NEGATIVE_INTEGER_REGEX \u003d \"^[-]\\\\d+$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String POSITIVE_INTEGER_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String FILE_DOES_NOT_EXIST \u003d \"File does not exist.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WRITE_TO_FILE_FAILED \u003d \"Failed to write to file.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(Storage.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String readFile(String filePath) throws AniException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileContent \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fileContent \u003d new String(Files.readAllBytes(Paths.get(filePath)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Read from file: \" + filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"File does not exist at: \" + filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return fileContent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void writeFile(String filePath, String fileContent) throws AniException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Wrote to file: \" + filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Failed to write to file at: \" + filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WRITE_TO_FILE_FAILED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean isPositiveInteger(String integerString) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return integerString.matches(POSITIVE_INTEGER_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean isPositiveOrNegativeInteger(String integerString) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return integerString.matches(POSITIVE_INTEGER_REGEX) || integerString.matches(NEGATIVE_INTEGER_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 53,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/main/java/anichan/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(StorageManager.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String storageDirectory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final UserStorage userStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final WatchlistStorage watchlistStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final BookmarkStorage bookmarkStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final ScriptStorage scriptStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public StorageManager(String storageDirectory) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.storageDirectory \u003d storageDirectory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userStorage \u003d new UserStorage(this.storageDirectory);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistStorage \u003d new WatchlistStorage(this.storageDirectory);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        bookmarkStorage \u003d new BookmarkStorage(this.storageDirectory);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        scriptStorage \u003d new ScriptStorage(this.storageDirectory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String[] retrieveWorkspaceList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        File file \u003d new File(storageDirectory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] workspaceList \u003d file.list((current, name) -\u003e new File(current, name).isDirectory());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (workspaceList \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Found 0 workspace.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new String[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Found \" + workspaceList.length + \" workspace(s).\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return workspaceList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void saveUser(User user) throws AniException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userStorage.save(user);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public User loadUser() throws AniException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return userStorage.load();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Workspace Saving \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void saveWorkspace(Workspace workspace) throws AniException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        new File(storageDirectory + workspace.getName()).mkdirs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistStorage.save(workspace.getName(), workspace.getWatchlistList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Watchlist Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void saveWatchlistList(String workspaceName, ArrayList\u003cWatchlist\u003e watchlistList) throws AniException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistStorage.save(workspaceName, watchlistList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String loadWatchlistList(String workspaceName, ArrayList\u003cWatchlist\u003e watchlistList) throws AniException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return watchlistStorage.load(workspaceName, watchlistList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bookmark Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void saveBookmark(String workspaceName, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        bookmarkStorage.save(workspaceName, bookmark);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String loadBookmark(String workspaceName, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return bookmarkStorage.load(workspaceName, bookmark);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Script Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String loadScript(String workspaceName, String fileName) throws AniException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return scriptStorage.readScript(workspaceName, fileName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 80,
      "ChanJianHao": 6
    }
  },
  {
    "path": "src/main/java/anichan/storage/UserStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class UserStorage extends Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String USER_FILE_NAME \u003d \"user.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String USER_LINE_DELIMITER_FOR_DECODE \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String USER_LINE_DELIMITER_FOR_ENCODE \u003d \" | \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_USER_FILE \u003d \"Empty user file.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String NO_USER_LOADED \u003d \"Not loaded successfully.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String USER_DETAILS_CANNOT_BE_NULL \u003d \"User details should not have any null.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(UserStorage.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String storageDirectory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public UserStorage(String storageDirectory) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.storageDirectory \u003d storageDirectory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Save and Load \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void save(User user) throws AniException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userFilePath \u003d storageDirectory + USER_FILE_NAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String encodedUserString \u003d encode(user);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        new File(storageDirectory).mkdirs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        writeFile(userFilePath, encodedUserString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public User load() throws AniException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userFilePath \u003d storageDirectory + USER_FILE_NAME;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileContent \u003d readFile(userFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (fileContent.isBlank()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Empty user file: \" + userFilePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(EMPTY_USER_FILE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] fileContentSplit \u003d fileContent.split(USER_LINE_DELIMITER_FOR_DECODE, 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.FINE, \"Processing: \" + System.lineSeparator() + fileContent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isValidUserString(fileContentSplit)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Invalid user file: \" + userFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NO_USER_LOADED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return decode(fileContentSplit);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Encode and Decode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String encode(User user) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userName \u003d user.getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userGender \u003d user.getGender().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String encodedUserString \u003d userName + USER_LINE_DELIMITER_FOR_ENCODE + userGender;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert (userName !\u003d null \u0026\u0026 userGender !\u003d null) : USER_DETAILS_CANNOT_BE_NULL;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return encodedUserString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private User decode(String[] fileContentSplit) throws AniException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userName \u003d fileContentSplit[0].trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userGender \u003d fileContentSplit[1].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return new User(userName, userGender);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Validation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private boolean isValidUserString(String[] fileContentSplit) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return (fileContentSplit.length \u003d\u003d 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 75,
      "ChanJianHao": 3
    }
  },
  {
    "path": "src/main/java/anichan/storage/WatchlistStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class WatchlistStorage extends Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_FILE_NAME \u003d \"watchlist.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_LINE_DELIMITER_FOR_DECODE \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_LINE_DELIMITER_FOR_ENCODE \u003d \" | \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String DELIMITER_FOR_ENCODED_ANIME_LIST \u003d \", \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ENCODED_ANIME_LIST_FIRST_CHARACTER \u003d \"[\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ENCODED_ANIME_LIST_LAST_CHARACTER \u003d \"]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_WATCHLIST_FILE \u003d \"Empty watchlist file.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String NO_WATCHLIST_LOADED \u003d \"No watchlist loaded successfully (all invalid).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SOME_WATCHLIST_LOADED \u003d \"Not all loaded successfully (some invalid).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String LOAD_SUCCESS \u003d \"Loaded successfully.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ENCODED_WATCHLIST_CANNOT_BE_BLANK \u003d \"Encoded watchlist string should not be blank.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(WatchlistStorage.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String storageDirectory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public WatchlistStorage(String storageDirectory) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.storageDirectory \u003d storageDirectory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Save and Load \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void save(String workspaceName, ArrayList\u003cWatchlist\u003e watchlistList) throws AniException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistDirectory \u003d storageDirectory + workspaceName + File.separator;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistFilePath \u003d watchlistDirectory + WATCHLIST_FILE_NAME;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String encodedWatchlistString \u003d encode(watchlistList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        new File(watchlistDirectory).mkdirs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        writeFile(watchlistFilePath, encodedWatchlistString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String load(String workspaceName, ArrayList\u003cWatchlist\u003e watchlistList) throws AniException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistFilePath \u003d storageDirectory + workspaceName + File.separator + WATCHLIST_FILE_NAME;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileContent \u003d readFile(watchlistFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (fileContent.isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Empty watchlist file: \" + watchlistFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return EMPTY_WATCHLIST_FILE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean hasInvalidWatchlist \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] fileLines \u003d fileContent.split(System.lineSeparator());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.FINE, \"Processing: \" + System.lineSeparator() + fileContent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (String line : fileLines) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Watchlist decodedWatchlist \u003d decode(line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            boolean isValidWatchlist \u003d (decodedWatchlist !\u003d null) \u0026\u0026 !(watchlistList.contains(decodedWatchlist));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (!isValidWatchlist) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                hasInvalidWatchlist \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistList.add(decodedWatchlist);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (hasInvalidWatchlist \u0026\u0026 watchlistList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"All invalid watchlist entries at: \" + watchlistFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return NO_WATCHLIST_LOADED;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (hasInvalidWatchlist) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Some invalid watchlist entries at: \" + watchlistFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return SOME_WATCHLIST_LOADED;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Loaded successfully: \" + watchlistFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return LOAD_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Encode and Decode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String encode(ArrayList\u003cWatchlist\u003e watchlistList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        StringBuilder sbWatchlist \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (Watchlist watchlist : watchlistList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlist.append(watchlist.getName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlist.append(WATCHLIST_LINE_DELIMITER_FOR_ENCODE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlist.append(watchlist.getAnimeList().toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlist.append(System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String encodedWatchlistString \u003d sbWatchlist.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert (!encodedWatchlistString.isBlank()) : ENCODED_WATCHLIST_CANNOT_BE_BLANK;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return encodedWatchlistString;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Watchlist decode(String line) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] lineSplit \u003d line.split(WATCHLIST_LINE_DELIMITER_FOR_DECODE, 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isValidWatchlistString(lineSplit)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistName \u003d lineSplit[0];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String animeListString \u003d lineSplit[1].substring(1, lineSplit[1].length() - 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (animeListString.isBlank()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new Watchlist(watchlistName, animeList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] animes \u003d animeListString.split(DELIMITER_FOR_ENCODED_ANIME_LIST);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (String animeIndex : animes) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (!isValidAnimeIndex(animeIndex)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            animeList.add(Integer.parseInt(animeIndex));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return new Watchlist(watchlistName, animeList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Validation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private boolean isValidWatchlistString(String[] lineSplit) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isValidSplitLength \u003d (lineSplit.length \u003d\u003d 2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isValidSplitLength) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return (lineSplit[1].startsWith(ENCODED_ANIME_LIST_FIRST_CHARACTER))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                \u0026\u0026 (lineSplit[1].endsWith(ENCODED_ANIME_LIST_LAST_CHARACTER));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private boolean isValidAnimeIndex(String animeIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isAnimeIndexBlank \u003d animeIndex.isBlank();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isAnimeIndexInteger \u003d isPositiveInteger(animeIndex);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return !isAnimeIndexBlank \u0026\u0026 isAnimeIndexInteger;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 134,
      "ChanJianHao": 3,
      "michaeldinata": 1
    }
  },
  {
    "path": "src/main/java/anichan/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Scanner CONSOLE \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(Main.class.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String LOGO \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    \"                  _  _____ _\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    + \"      /\\\\         (_)/ ____| |\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    + \"     /  \\\\   _ __  _| |    | |__   __ _ _ __\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    + \"    / /\\\\ \\\\ | \u0027_ \\\\| | |    | \u0027_ \\\\ / _` | \u0027_ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    + \"   / ____ \\\\| | | | | |____| | | | (_| | | | |\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    + \"  /_/    \\\\_\\\\_| |_|_|\\\\_____|_| |_|\\\\__,_|_| |_|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            \"-------------------------------------------------------------\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!message.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            System.out.println(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printErrorMessage(String errorMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        System.out.println(\"OOPS!!! \" + errorMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printHorizontalLine() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        System.out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        printMessage(\"Welcome to AniChan!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        printMessage(LOGO);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void printGoodbyeMessage(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        printMessage(\"Sayonara \" + name + \"!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"Printed goodbye message, exiting program!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean hasNextLine(User user) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String workspaceName \u003d user.getActiveWorkspace().getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistName \u003d user.getActiveWorkspace().getActiveWatchlistName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        System.out.print(System.lineSeparator() + workspaceName + \" (\" + watchlistName + \") #\u003e \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return CONSOLE.hasNextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return CONSOLE.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String[] createUserDialogue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"No existing user file found, prompting user to create one!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String[] userDialogueInput \u003d new String[3];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        printMessage(\"What\u0027s your name?\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userDialogueInput[0] \u003d readUserInput();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        printMessage(\"Hello \" + userDialogueInput[0] + \"! What might your gender be? (Male/Female/Other)\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userDialogueInput[1] \u003d readUserInput();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return userDialogueInput;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void shutdownUi() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        CONSOLE.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 2,
      "OngDeZhi": 42,
      "ChanJianHao": 22,
      "michaeldinata": 9
    }
  },
  {
    "path": "src/main/java/anichan/watchlist/Watchlist.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.watchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class Watchlist {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private final ArrayList\u003cInteger\u003e animeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_WATCHLIST_MESSAGE \u003d \"Uhh.. It\u0027s empty.. :(\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Watchlist(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public Watchlist(String name, ArrayList\u003cInteger\u003e animeList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.animeList \u003d animeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public ArrayList\u003cInteger\u003e getAnimeList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return animeList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void addAnimeToList(Integer animeIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.animeList.add(animeIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void removeAnimeFromList(int watchlistListIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.animeList.remove(watchlistListIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public int getWatchlistSize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return this.animeList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public int getWatchlistListAnimeIndex(int watchlistListIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return this.animeList.get(watchlistListIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String animeListToString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        StringBuilder sbAnimeList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (animeList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbAnimeList.append(EMPTY_WATCHLIST_MESSAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbAnimeList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (int i \u003d 0; i \u003c animeList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbAnimeList.append(i + 1).append(\". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbAnimeList.append(animeList.get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbAnimeList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return sbAnimeList.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return name + System.lineSeparator() + animeListToString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean equals(Object otherObject) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (otherObject \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (getClass().equals(otherObject.getClass())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Watchlist otherWatchlist \u003d (Watchlist) otherObject;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return this.getName().equals(otherWatchlist.getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 56,
      "ChanJianHao": 1,
      "michaeldinata": 19
    }
  },
  {
    "path": "src/test/data/Default/script.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Ima omotte mo fushigidakedo Demo nandaka sore wa fushigi janai yōna ki mo shite\u0027 `"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Tonikaku sore wa boku no jinsei ga kawatte shimau yōna koto de"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Jitsuwa nanihitotsu kawatte inai yōna…"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Totemo totemo kimyōde keredo doko ni demo aru keiken o shita\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Kono Ikebukuro no machi de\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado ) Aah! Ss- su- su sumi ma- sen…. Haa… kaeritai."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Ryūgamine Mikado narēshon)  `Warawanaide hoshī\u0027 Shōgakkō mo chūgakkō mo shūgakuryokō wa kesseki shite Jimoto kara ippo mo deta koto wanaku Hajimete no Tōkyō ni tomadotte iru gojuu-sai no shōnen\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Sore ga boku ryūgamine Mikado da\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Son\u0027na boku ga naze tōbutō jōsen no kaisatsu mae de Me o mawashite iru no ka\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Kono shigatsu kara Higashi ikebukuro ni aru Shiritsu raira gakuen ni Nyūgaku suru koto ni nattakarada\u0027 Hensa-chi wa Chū no ue gurai de Kireidashi setsubi mo totono~o teru\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Tte iu yori Shōgakusei kara no shin\u0027yū ni Sasowa reta koto ga ōkī\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Oya ni wa jimoto no kōritsu-kō ni iku yō Hantai sa retakedo Tōkyō ni mo akogare tetashi\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kida masaomi) Mi ~ kado!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) E~e? E~e? Are? Kida-kun?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Gimon katachi ka yo ~. Naraba kotaete yarou. Mitaku de erabe yo? 1 Kida masaomi. 2 Kida masaomi. 3 Kida masaomi!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Uwa ~! Kida-kun! Kida-kun\u0027na no? A~a…"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ore no sannen kakete amidashita Konshin no neta wa surū kā? Hi~i sashi-burida nā oi!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Zenzen kawa~a terukara Bikkuri shita yo. Kaminoke some tari shi teru to wa Omowanakatta. Ato sono neta samui."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Sorya yonen mo tateba nā ~. Tte yori Mikado wa shōgakkō no toki kara Zenzen kawa~a tenaijan yo ~! Tte iu ka Sarigenaku samui toka iu na."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Sō Korega-dai no shin\u0027yū kida masaomi\u0027 `Shōgakkō no toki Kare ga tenkō shite iraidattakedo Mitame igai wa Nan\u0027nimo kawa~ ttenakatta\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Jā ikou ze. Toriaezu soto ni deyou. Kibun wa masashiku gō uesuto! Nishiguchi to misekakete Seibu kuchi e mukau Torikkīna an\u0027naibito…."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Gyagu wa samuikedo Honto wa ī Yatsuna nda\u0027 Kida-kun to wa Mainichi chatto de hanashite itakara Jikan mo kyori mo Ishiki shita koto wa nakatta\u0027 `Keredo kōshite yon-Nen-buri ni atte miruto Yappari hanareta basho de Kurashite ita nda nā to jikkan suru\u0027 Ā ~ kuso ~tsu. Ichido subetta neta no Kaisetsu o suru ore…."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) `Kedo gyagu no samu-sa mo fukumete Nakami wa Hontoni nani mo kawattenai\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ikitai toko aru ka?"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) E ~ tto… Sanshain 60 to ka."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ima kara? Iku n\u0027nara kanojo no hitori demo Tsurete itta kata ga ī zo."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Ja… jā Ikebukuro uesutogētopāku toka."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Futsū ni nishiguchi kōen tte ie yo."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) E~tsu? Demo Ikebukuro hito wa Min\u0027na sō yon deru n ja…."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Nanda yo Ikebukuro hito tte. A~a nani? Yukitai?"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) E~e? Iya… demo…. Ā ~a cho ~o… chotto! Ya… yameyou yo. Mō yoruda yo? Karāgyangu ttenoni Korosa re chau yo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Majide Son\u0027na ko to iwa rete mo komaru ~. Tsuu ka mada roku-ji da zo? Ttaku… Okubyōna no mo aikawarazuda nā."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) Konbanwa ̄"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton) Ban wa ̄"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) A ̄setton-san Jitsuwa watashi, ashita kara Ikebukuro ni sumu koto ni narimashite"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton) He~e sōna nda ̄ Moshikashite go kinjo kamo janaidesu ka ̄"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) Kamodesu ne ♪ Ima wa jikka kara tsunaidemasukedo, ashita kara wa, Sanshain chikaku no apāto ni sumu koto ni nattemasu."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Ikebukuro ni yōkoso~ ‘"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado kokoro no koe)≪ sugoi…≫≪ Netto ya manga de shika Mita koto no nakatta sekai ga Me no mae ni hiroga~a teru…≫"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Uezakura-chō Ginza yori sugoi."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Wa wa haa! Jā kondo Shibuya ni tsuretette yaru yo. A~a hitogomi ga mezurashī n\u0027nara Keiba-ba ni tsuretette yarou ka? Wa ha~a…. Saikin wa karāgyangu mo hetta yo. Kyonen-atari wa Medatsu no ōkatta ndakedo Saitama to kōsō ya~a te Nan jū-ri mo paku rarete sa Sorekara wa onaji-iro no fuku kita renchū ga Sukoshi demo atsumarou mon\u0027nara Sokkō de keisatsu ga Tonde kuru yō ni na~a chimatta no yo."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Jā ima no Ikebukuro wa anzen\u0027na no?"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) A~a… Iya ore mo Hanbun shitta kadakara Seikakuna koto wa Wakan\u0027ne~e ndakedo sa. Hoka ni mo abunai renchū Yama hodo irushi Ki ~itsukeroyo."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Sōnanda…."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Chinamini koko wa 60-kai dōride Betsuni Sanshain tōri tte no moarukara."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Yappari Sanshain tōri no kata ga Sakini dekita no ka na? \u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Uwa~a! Su~u sumimasen! E~e…."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa Yumazaki) n? A~a Kida-kun jan."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) A~a karisawa-san ni Yumazaki-san. Dōmo desu."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) iyaiya hisashi buri."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Togusa) u ~ su."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kadota) genki ka? Kida."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Gobusata de ~ su."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) Sotchi no ko wa dare? Tomodachi?"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ā koitsu wa osananajimi de Kyō Ikebukuro ni Hikkoshite kita ndesu yo."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) hē ~-sōna nda."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Kono hito wa karisawa-san."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) A~a…."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Kotchi ga Yumazaki-san de Atchi ga Kadota-san to Togusa-san."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) A~a. E~e… e ~ tto Ryūgamine Mikado tte īmasu."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) n? N n ~?"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado kokoro no koe) `Nani ka mazui koto Ittadarou ka? \u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) pen\u0027nēmu?"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) nande kōkōsei ga Pen\u0027nēmu tsukau no yo. A~a rajio toka zasshi tōkō toka?"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Iya ano… ichiō honmyōdesu."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa \u0026 Yumazaki) n?"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) uso ~! Honmyōna no! ?"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) iya sugoi! Kakkōī janaissu ka! Iya iyaiya manga no shujinkō mitaida."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) son\u0027na ~ tereru janaidesu ka!"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado kokoro no koe)≪-dōshi-yō… hanashi no tenkai ni tsuiteikenai ≫"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) kaimono kaerissu ka?"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) so~tsu!"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) Dengeki bunko no shinkan ga deta mon de Zenbu de 30-satsu gurai katta ndesu yo."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) dengeki bunko tte 1-kagetsu ni son\u0027nani deru ndesu ka?"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) iya ~ ne~e chigau wa yo. Watashi no bun to kare no bun o 1-satsu zutsu to ato wa… mā iroiro-yō ni 10-satsu gurai mitsukurotta no."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) iroiro-yō ni ne!"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Futari) e e e he~e."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado kokoro no koe) ≪ Iroiro-yō ttena nda? ≫≪ Hozon-yō toka Gyōmu-yō toka kanshō-yō toka Sō iu kotodarou ka? ≫"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) jā sorosoro idō surukara."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) mata chikaiuchini."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) hai. Sore jā!"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) a~a jā kore atama kara…."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kadota) mata na."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) gan!"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Togusa) omaera-sha ni ateru n jane~e yo!"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) mā ano hito-tachi mo kawa~tsu terukedo nakayoku shite sae irya futsū ni ī hito-tachidakara."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) e… hē ~. Kida-kun ā iu taipu no hito tomo shiriaina nda ne."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) ore wa iron\u0027na toko ni kubi tsukkon derukara nā. Mise no basho ya yasui furugi jōhō…."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `4-Nen no ma ni kare wa dore dake Don\u0027na keiken o shita ndarou? \u0027 `Boku ga jimoto de hitori Ishuku shite ita koro ni\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Arayuru wadai ni tsūji tereba Taitei no on\u0027na to hanashi awase rarerukara."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Fujunda\u0027"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "__________________________________________________"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) imashita yo ~."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) machigaine~e no?"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) atama no ue kara ashi no saki made Iwa reta tōride machigainaissu."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) fu~u… rajā. Iki ma~a se."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) u ~i ~ su."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) omae-ryō machigaen na yo. Me samasanakattara agari ga Gakutto sagaru ndakara na."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) ī janaissu ka. 10-Dai joshinara 5 warimashidesho?"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) 2-warida 2-wari."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) hisabisa ni oishīssu ne 10-dai joshi."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) ā. Jōhō-ya-sama-samada na."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "_________________________________________________"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `konbanwa ~\u0027"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `Kanra-san Σ（ °Д°）biku~u!\u0027"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `itandesu ka!?\u0027"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)`chotto denwa shi tetakara ̄ (´ ∀`)\u0027"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `a \u0027"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `ima, rogu yomimashita ~a. Tōkyō ni kuru ndesu kā?\u0027"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `omedetōgozai ma ~ su\u0027"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `kondo, ofu-kai demo yarimasu kā.\u0027"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `a , ofu-kai, īdesu ne\u0027"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `ne ~~♪\u0027"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `a ...\u0027"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `ofu-kai toieba,\u0027 Kanra `jisatsu ofu tte aru janaidesu kā\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton)`a~a, hayarimashita yo ne\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton)`netto de shiriatte, shinjū…….\u0027 Tanaka tarō `iyana hanashidesu yo nē\u0027 Tanaka tarō `demo saikin wa amari nyūsu ni nattemasen yo ne?\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton)`misui de owa~a teru no ka……\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `aruiwa takusan aru ndakedo\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)  `dare mo kidzui tenai dake kamo shiremasen yo ~\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `mada shitai ga mitsuka~a tenai toka...\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `(;´ D `)…\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton)`fukinshindesu yo\u0027"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `sōiya saikin, shissō jiken ōishi...\u0027"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `?\u0027"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `son\u0027na nyūsu ga?\u0027"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)  `e ̄ to...\u0027 Kanra `taitei fuhō taizai shi teru gaikoku hito toka,\u0027"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)  `chihō kara iede shite kita ko toka,\u0027"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `Ikebukuro kara Shibuya no ma de, ōi mitaida yo ~o\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "________________________________________________"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) ano…."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) hai."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) mazenda-san? (As in, Magenta-san?)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) hai. A~a Nakura-sandesu ka?"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) Yokatta ~! Yappari sōdatta ka."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) hajimemashite. Yoroshiku onegai shimasu."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) Kochira koso. Jā ikimasu ka."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) Hai…."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) sugu soko nande. Hoka ni mo futari kitemasukara."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) wa a…."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) are desu."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) dōmo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) dōmo."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) mawari daijōbu?"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) hitokko hitoriinai shi."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) jā mā… Damashi chatte sunmasen!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) wa~a! Kyā ~~! Ū ~u! Kyā!"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) ku~u! Koko ni ichi-ri iru ttsu Uno."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "______________________________________________________"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Kida-kun wa Yodomi naku shaberi tsudzuketa\u0027 `Boku wa chotto tsukarete ita\u0027 `Aruku no ni tsukareta no ka Kida-kun no samui gyagu ni Tsukkomi o ireru no ni tsukareta no ka. Tabun ryōhōdatta\u0027"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Mada hanashi tarinai nā."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) So…-sōda ne."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ore no nakade wa mada Zentai no yonhyaku bun\u0027no go kurai shika Shabe~e tenai kanjida yo"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Chinamini yonhyaku-Bun\u0027no yon wa Karisawa-san-tachi no kotona."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Koko de Tsukkomou ka mayotte ita toki Me no mae ni sore ga arawareta\u0027"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) onē San hisashi ~ buri."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Itamae no kakkō o shite kyakuhiki o… Iya itamae no kakkō o shita kokujin ga Kyokan de… Iya kyakuhiki ga Itamae no ishō o shite iruga Sore wa naze ka kokujin de…\u0027"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) o ni i san hisashiburi ~. E~e?"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) n n ~."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Yō Saimon! Hisashiburijan yo ~!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) N ~ Kida sushi kuu? Ī yo. Yasuku suru yo. Sushi wa ī yo."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) A~a kin naikara kyō wa kanben. Baito shite kin haittara kuukara Sābisu shite yo."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) Ō ~ dame ~. Sore shitara watashi Roshia no daichi no mokuzu ni Kieru ~ yo."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Daichinanoni mo-kuzu ka yo. Soi jā na."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) O ni i san hisashi ~ buri."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Ima no hito mo shiriai?"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ā. Simon tte sa Roshia-kei no kokujin de Soko no roshia hito ga ya~a teru Sushi-ya no kyakuhiki ya-a tenda."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado)E-e…. Gomen doko kara tsukkomubeki?"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi )Iya maji nandatte."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Honto wa Sāmya tte iu ndakedo yo Min\u0027na eigo yomide Saimon tte yonderunda. Yoku shin\u0027ne~ekedo ryōshin ga Amerika kara bōmei shita toka nantoka. De shiriai no roshiahito ga Sushi-ya hajimetakara ￫ Kyakuhiki ni natta n datte yo ~. Aitsu wa Teki ni mawashicha ikenaikara na. Aitsu ga Mae ni kenka tometa toki yo ~o Onaji kurai no Yatsu o Katate de mochiage tetashi. Ā ato tsuide ni Teki ni mawashicha ikenai Yatsu no Mōhitori wa…."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Bako~o! Gan! Gashān!"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Mikado: E~e nani? Nanina nda?"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Shizuo) o ~-ra ~a ~~!! U wa~a ~~!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ā… uwasa o surebada na. E~e? Ma~a tonikaku Heiwajima Shizuo tte Yatsu ni wa Chikadzuku na yo. Futsū ni iki terya Hanashikake rareru koto mo Naidaroukedo na."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "≪ I… ittai dōiu hitonanda? ≫"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Gacha (kuruma no doa no oto)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) are? Mada ki tene~e ya. O~tsu kashī na."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita)-jō mo īkagenda nā. Motto ki o hikishimete morawa nē to."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) ma~a ījan. Ore-ra himadashi."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) sōssu ne."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) fu ~u ~. Yappa kōiu jikan wa Daijissu yo ne ~. Susanda nichijō ni Tsukanoma uruoi no hitotoki."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Buo~ō̄ !"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(futari) n?"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) sōiya kyō Mimashita yo ~ rei no kuroi baiku ♪"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) kuroi baiku?"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton) a ̄."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) Shiranai n desu ka ~ saikin, Shinjuku toka Ikebukuro de wadai no yatsu Mukashi kara toshi densetsu mitaina kanji Dattarashīkedo"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Koko n toko, Shashin totta hito toka ga ōkute…."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton) a ̄ , shii teru shii teru ￫Tte iu ka, are wa Futsu ̄ no bōzōzoku tte iu ka. A,-betsu ni murete Chinsō shi teru wake janain dakedo."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) Niwananoni Raito tsukenaide hashii terunara, jūbun aho datte. Ningen dattara,dakedo …"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka)sorette, dou iu imi desuka?"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)aa, eto ne bucchake"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)bakemono mitai na mon nandesu…"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Buo~ō̄ ! (Asanuma) oi."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita \u0026 Kanazawa) n?"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) ano ~-jō no hitossu ka?"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita)tsu ka dō mite mo tagawane~e?"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) jā daressu ka?"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita)tsuu ka namete nē? Bokutachi chotto otorikomichūnande Jama sundattara shinde moraemasu ~!? Gan!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) uwa~a!"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) ma… majikayo! A~a…. E he~tsu e he~e e e he~e…."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma)ya be ~e!"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) cho ~o… cho ~o cho ~o! Uwa~a! Yame… yamero! Yamero ~! Bachibachi! Bachibachi! Da ~ kara yamero ~o tsuttanoni."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) n! ?"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Doka~a! Baki~i!"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) hi ~i ~…. Ya be ~e! Ya be ~e! Ya be ~e! Ha~a!"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) na~a… nanina nda yo."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) nanina nda yo ~~!!"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō)Bakemono tte, dō iu koto desu ka?"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)Dotachin nanka wa shinigami natte itteru"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) Dotachin?"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō)Dotachin tte dare?"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)Kurobaiku ni notteru otoko niwa ne…"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) Teyu-ka Dotachin wa suru-? ? ? ( ‘ . w . ’)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Ku~u… u~u…"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) Chi kishouga ~!!"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Kikyī̄ ! Gan! Gashān!"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) E e he~e e he~e…. Hi ~yahha ~! Zama ~amiro! Konchikushō!"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kanra: Kubi kara ue ga nai no…"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "A~a? U~u… u~u…."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) a~a a~a…. U~u… u~u…."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) Kubi ga ne demo kirei ni naku natteru no ni ugo iterundatte…"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Tsu…tsuu ka nan\u0027na no? Omae. Na~a… nanina nda yo ~~!!"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) a~a…. Ano sa hoka ni mo Chikadzuicha ikenai hito tte iru no?"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) U ~ n… yāsan\u0027ya Gyangu mitaina no wa iumademonai to shite…. Orihara Izaya Tte hito ga iru ndakedo yo."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado)Orihara Izaya? Kawatta namaeda ne."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Omaegaiuna. Koitsu wa Yabaikara zettai ni kakawaru na yo. Ma~a Shinjuku shutai no hitodakara Mazu awanaidaroukedo. Ā atona, darāzu tte renchū ni mo Kakawaranai kata ga ī ze."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Darāzu?"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ō. Wandarāzu no darāzu."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "≪ Wandarāzu ttenani? ≫"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ā ore mo kuwashī koto wa wakan\u0027ne~e ndakedo yo Tonikaku ninzū ga ōkute sen ga Ippon buchi kireta chīmurashī. Karāgyangurashī ndakedo Don\u0027na irona no kamo wakarane~e. Ma~a ima wa ukatsu ni Shūkai wa dekine~ekara Soitsu-ra mo itsunomanika Kaisan shi chimatte tari shite na. Sō nanda. A~a…."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX)Don!"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Uwa~a! Ā~a! Oi daijōbu ka yo? U~u…. Kimi daijōbu? U~u…."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado)Ā ano… sumimasen. Daijōbudesuka?"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika)A~a…. Ano… ha~a…. Ha~a! Iya… iya~a ~! Iya ~a! Uwaa! A a~a oi!"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi)Nandaarya…. Rei mo nashi ka yo."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Nani ga atta ndarou? Ano hito."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi)Sā? Nan demo okoru no ga Kono machidakara na."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Omae un ga ī yo. (Mikado) E~e?"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Kyō dake de Kadota-san-tachi ya Saimon ni aete Shizuo ga nageta jihanki ya ningen mo mirete An\u0027na bijin ni butsukatta. Sore ungaī tte iu no ka na?"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ureshī yo. E~e?"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Kono machi de omae to gakkō ni itte Mata issho ni asoberu nante sa."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Boku moda yo."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Buo~ō̄ ! (Masaomi) Omae hontoni un ga ī zo! E~e? Omake ni toshi densetsu o menomaede mi rare ndakara!"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Kida-kun!"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) e ̄ , kuro baiku mokugeki shita no? Tanaka tarō-san."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton)Hyotte shite yoru no hachi-ji sugi kurai"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka Taro)A, shitterundesuka?\u003esetton-san"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton) N, maa, watashi sokoni itakara…"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka Taro)?!"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Ha~a ha~a… toshi densetsu ttenani?"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Kuro baikuda yo. Kubi nashi raidāda!"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Boku wa sono toki jibun no karada ga Furuete iru no ni kidzuita\u0027"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Kowakatta n janai\u0027 `Tabun kandō shite ita noda\u0027 `Sugoi mono o mita\u0027"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Boku wa koko de konomachide Yosode wa Tōtei dekinai yōna keiken o shita\u0027"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Ima made kesshite Tegatodokanai to omotte ita Arienai genjitsu ga me no mae ni Hirogatte iru nda to kanjite ita\u0027"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Saisho ni itta koto to Mujun suru mitaidakedo Sukunakutomo Kono toki wa sō omotte ita\u0027"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Boku wa, boku no atarashī genjitsu ga hajimaru yokan ni furuete ita\u0027"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) hontōdesuka! Jā, shiranai uchi ni Surechiga~a teta kamo shiremasen ne!"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setto n) sō kamo."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) tokorode… dotachin tte dare?"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003c Jikai yokoku \u003e `Doko ka in no aru shōjo ga Jibun no mishiranu genjitsu o kaimamiru\u0027 `Daremoga deai-sōde Deawanai genjitsu\u0027 `Hontōnara shinde ita hazu no Shōjo ga mita mono wa…\u0027 Jikai: Ikkyoichijitsu"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 521
    }
  },
  {
    "path": "src/test/data/Default/watchlist.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "First | []"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Second | [1, 2]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Third | [3]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Test | []"
      }
    ],
    "authorContributionMap": {
      "michaeldinata": 4
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithInvalidFile/AllInvalidWorkspace/watchlist.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a |"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [[[]]]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| []"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| [, , , , ,]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "hello /|\\ []"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [testing, this, thing]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [1, 2, test?]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "c | [1, 2, -1, -100]"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 9
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithInvalidFile/SomeInvalidWorkspace/watchlist.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a |"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [[[]]]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| []"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| [, , , , ,]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "duplicate | []"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "duplicate | []"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "hello /|\\ []"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [testing, this, thing]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [1, 2, test?]"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 10
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithInvalidFile/user.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "abc /|\\ Male"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithValidFile/ValidWorkspace/script.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Ima omotte mo fushigidakedo Demo nandaka sore wa fushigi janai yōna ki mo shite\u0027 `"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Tonikaku sore wa boku no jinsei ga kawatte shimau yōna koto de"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Jitsuwa nanihitotsu kawatte inai yōna…"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Totemo totemo kimyōde keredo doko ni demo aru keiken o shita\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Kono Ikebukuro no machi de\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado ) Aah! Ss- su- su sumi ma- sen…. Haa… kaeritai."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Ryūgamine Mikado narēshon)  `Warawanaide hoshī\u0027 Shōgakkō mo chūgakkō mo shūgakuryokō wa kesseki shite Jimoto kara ippo mo deta koto wanaku Hajimete no Tōkyō ni tomadotte iru gojuu-sai no shōnen\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Sore ga boku ryūgamine Mikado da\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Son\u0027na boku ga naze tōbutō jōsen no kaisatsu mae de Me o mawashite iru no ka\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Kono shigatsu kara Higashi ikebukuro ni aru Shiritsu raira gakuen ni Nyūgaku suru koto ni nattakarada\u0027 Hensa-chi wa Chū no ue gurai de Kireidashi setsubi mo totono~o teru\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Tte iu yori Shōgakusei kara no shin\u0027yū ni Sasowa reta koto ga ōkī\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Oya ni wa jimoto no kōritsu-kō ni iku yō Hantai sa retakedo Tōkyō ni mo akogare tetashi\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kida masaomi) Mi ~ kado!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) E~e? E~e? Are? Kida-kun?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Gimon katachi ka yo ~. Naraba kotaete yarou. Mitaku de erabe yo? 1 Kida masaomi. 2 Kida masaomi. 3 Kida masaomi!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Uwa ~! Kida-kun! Kida-kun\u0027na no? A~a…"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ore no sannen kakete amidashita Konshin no neta wa surū kā? Hi~i sashi-burida nā oi!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Zenzen kawa~a terukara Bikkuri shita yo. Kaminoke some tari shi teru to wa Omowanakatta. Ato sono neta samui."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Sorya yonen mo tateba nā ~. Tte yori Mikado wa shōgakkō no toki kara Zenzen kawa~a tenaijan yo ~! Tte iu ka Sarigenaku samui toka iu na."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Sō Korega-dai no shin\u0027yū kida masaomi\u0027 `Shōgakkō no toki Kare ga tenkō shite iraidattakedo Mitame igai wa Nan\u0027nimo kawa~ ttenakatta\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Jā ikou ze. Toriaezu soto ni deyou. Kibun wa masashiku gō uesuto! Nishiguchi to misekakete Seibu kuchi e mukau Torikkīna an\u0027naibito…."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Gyagu wa samuikedo Honto wa ī Yatsuna nda\u0027 Kida-kun to wa Mainichi chatto de hanashite itakara Jikan mo kyori mo Ishiki shita koto wa nakatta\u0027 `Keredo kōshite yon-Nen-buri ni atte miruto Yappari hanareta basho de Kurashite ita nda nā to jikkan suru\u0027 Ā ~ kuso ~tsu. Ichido subetta neta no Kaisetsu o suru ore…."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) `Kedo gyagu no samu-sa mo fukumete Nakami wa Hontoni nani mo kawattenai\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ikitai toko aru ka?"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) E ~ tto… Sanshain 60 to ka."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ima kara? Iku n\u0027nara kanojo no hitori demo Tsurete itta kata ga ī zo."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Ja… jā Ikebukuro uesutogētopāku toka."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Futsū ni nishiguchi kōen tte ie yo."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) E~tsu? Demo Ikebukuro hito wa Min\u0027na sō yon deru n ja…."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Nanda yo Ikebukuro hito tte. A~a nani? Yukitai?"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) E~e? Iya… demo…. Ā ~a cho ~o… chotto! Ya… yameyou yo. Mō yoruda yo? Karāgyangu ttenoni Korosa re chau yo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Majide Son\u0027na ko to iwa rete mo komaru ~. Tsuu ka mada roku-ji da zo? Ttaku… Okubyōna no mo aikawarazuda nā."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) Konbanwa ̄"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton) Ban wa ̄"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) A ̄setton-san Jitsuwa watashi, ashita kara Ikebukuro ni sumu koto ni narimashite"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton) He~e sōna nda ̄ Moshikashite go kinjo kamo janaidesu ka ̄"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) Kamodesu ne ♪ Ima wa jikka kara tsunaidemasukedo, ashita kara wa, Sanshain chikaku no apāto ni sumu koto ni nattemasu."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Ikebukuro ni yōkoso~ ‘"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado kokoro no koe)≪ sugoi…≫≪ Netto ya manga de shika Mita koto no nakatta sekai ga Me no mae ni hiroga~a teru…≫"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Uezakura-chō Ginza yori sugoi."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Wa wa haa! Jā kondo Shibuya ni tsuretette yaru yo. A~a hitogomi ga mezurashī n\u0027nara Keiba-ba ni tsuretette yarou ka? Wa ha~a…. Saikin wa karāgyangu mo hetta yo. Kyonen-atari wa Medatsu no ōkatta ndakedo Saitama to kōsō ya~a te Nan jū-ri mo paku rarete sa Sorekara wa onaji-iro no fuku kita renchū ga Sukoshi demo atsumarou mon\u0027nara Sokkō de keisatsu ga Tonde kuru yō ni na~a chimatta no yo."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Jā ima no Ikebukuro wa anzen\u0027na no?"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) A~a… Iya ore mo Hanbun shitta kadakara Seikakuna koto wa Wakan\u0027ne~e ndakedo sa. Hoka ni mo abunai renchū Yama hodo irushi Ki ~itsukeroyo."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Sōnanda…."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Chinamini koko wa 60-kai dōride Betsuni Sanshain tōri tte no moarukara."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Yappari Sanshain tōri no kata ga Sakini dekita no ka na? \u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Uwa~a! Su~u sumimasen! E~e…."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa Yumazaki) n? A~a Kida-kun jan."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) A~a karisawa-san ni Yumazaki-san. Dōmo desu."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) iyaiya hisashi buri."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Togusa) u ~ su."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kadota) genki ka? Kida."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Gobusata de ~ su."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) Sotchi no ko wa dare? Tomodachi?"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ā koitsu wa osananajimi de Kyō Ikebukuro ni Hikkoshite kita ndesu yo."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) hē ~-sōna nda."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Kono hito wa karisawa-san."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) A~a…."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Kotchi ga Yumazaki-san de Atchi ga Kadota-san to Togusa-san."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) A~a. E~e… e ~ tto Ryūgamine Mikado tte īmasu."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) n? N n ~?"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado kokoro no koe) `Nani ka mazui koto Ittadarou ka? \u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) pen\u0027nēmu?"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) nande kōkōsei ga Pen\u0027nēmu tsukau no yo. A~a rajio toka zasshi tōkō toka?"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Iya ano… ichiō honmyōdesu."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa \u0026 Yumazaki) n?"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) uso ~! Honmyōna no! ?"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) iya sugoi! Kakkōī janaissu ka! Iya iyaiya manga no shujinkō mitaida."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) son\u0027na ~ tereru janaidesu ka!"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado kokoro no koe)≪-dōshi-yō… hanashi no tenkai ni tsuiteikenai ≫"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) kaimono kaerissu ka?"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) so~tsu!"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) Dengeki bunko no shinkan ga deta mon de Zenbu de 30-satsu gurai katta ndesu yo."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) dengeki bunko tte 1-kagetsu ni son\u0027nani deru ndesu ka?"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) iya ~ ne~e chigau wa yo. Watashi no bun to kare no bun o 1-satsu zutsu to ato wa… mā iroiro-yō ni 10-satsu gurai mitsukurotta no."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) iroiro-yō ni ne!"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Futari) e e e he~e."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado kokoro no koe) ≪ Iroiro-yō ttena nda? ≫≪ Hozon-yō toka Gyōmu-yō toka kanshō-yō toka Sō iu kotodarou ka? ≫"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) jā sorosoro idō surukara."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Yumazaki) mata chikaiuchini."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) hai. Sore jā!"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Karisawa) a~a jā kore atama kara…."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kadota) mata na."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) gan!"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Togusa) omaera-sha ni ateru n jane~e yo!"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) mā ano hito-tachi mo kawa~tsu terukedo nakayoku shite sae irya futsū ni ī hito-tachidakara."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) e… hē ~. Kida-kun ā iu taipu no hito tomo shiriaina nda ne."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) ore wa iron\u0027na toko ni kubi tsukkon derukara nā. Mise no basho ya yasui furugi jōhō…."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `4-Nen no ma ni kare wa dore dake Don\u0027na keiken o shita ndarou? \u0027 `Boku ga jimoto de hitori Ishuku shite ita koro ni\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Arayuru wadai ni tsūji tereba Taitei no on\u0027na to hanashi awase rarerukara."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Fujunda\u0027"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "__________________________________________________"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) imashita yo ~."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) machigaine~e no?"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) atama no ue kara ashi no saki made Iwa reta tōride machigainaissu."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) fu~u… rajā. Iki ma~a se."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) u ~i ~ su."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) omae-ryō machigaen na yo. Me samasanakattara agari ga Gakutto sagaru ndakara na."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) ī janaissu ka. 10-Dai joshinara 5 warimashidesho?"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) 2-warida 2-wari."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) hisabisa ni oishīssu ne 10-dai joshi."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) ā. Jōhō-ya-sama-samada na."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "_________________________________________________"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `konbanwa ~\u0027"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `Kanra-san Σ（ °Д°）biku~u!\u0027"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `itandesu ka!?\u0027"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)`chotto denwa shi tetakara ̄ (´ ∀`)\u0027"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `a \u0027"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `ima, rogu yomimashita ~a. Tōkyō ni kuru ndesu kā?\u0027"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `omedetōgozai ma ~ su\u0027"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `kondo, ofu-kai demo yarimasu kā.\u0027"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `a , ofu-kai, īdesu ne\u0027"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `ne ~~♪\u0027"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `a ...\u0027"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `ofu-kai toieba,\u0027 Kanra `jisatsu ofu tte aru janaidesu kā\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton)`a~a, hayarimashita yo ne\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton)`netto de shiriatte, shinjū…….\u0027 Tanaka tarō `iyana hanashidesu yo nē\u0027 Tanaka tarō `demo saikin wa amari nyūsu ni nattemasen yo ne?\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton)`misui de owa~a teru no ka……\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `aruiwa takusan aru ndakedo\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)  `dare mo kidzui tenai dake kamo shiremasen yo ~\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `mada shitai ga mitsuka~a tenai toka...\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `(;´ D `)…\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton)`fukinshindesu yo\u0027"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `sōiya saikin, shissō jiken ōishi...\u0027"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `?\u0027"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) `son\u0027na nyūsu ga?\u0027"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)  `e ̄ to...\u0027 Kanra `taitei fuhō taizai shi teru gaikoku hito toka,\u0027"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)  `chihō kara iede shite kita ko toka,\u0027"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) `Ikebukuro kara Shibuya no ma de, ōi mitaida yo ~o\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "________________________________________________"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) ano…."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) hai."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) mazenda-san? (As in, Magenta-san?)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) hai. A~a Nakura-sandesu ka?"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) Yokatta ~! Yappari sōdatta ka."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) hajimemashite. Yoroshiku onegai shimasu."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) Kochira koso. Jā ikimasu ka."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) Hai…."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) sugu soko nande. Hoka ni mo futari kitemasukara."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) wa a…."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) are desu."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) dōmo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) dōmo."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) mawari daijōbu?"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) hitokko hitoriinai shi."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) jā mā… Damashi chatte sunmasen!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika) wa~a! Kyā ~~! Ū ~u! Kyā!"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) ku~u! Koko ni ichi-ri iru ttsu Uno."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "______________________________________________________"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Kida-kun wa Yodomi naku shaberi tsudzuketa\u0027 `Boku wa chotto tsukarete ita\u0027 `Aruku no ni tsukareta no ka Kida-kun no samui gyagu ni Tsukkomi o ireru no ni tsukareta no ka. Tabun ryōhōdatta\u0027"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Mada hanashi tarinai nā."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) So…-sōda ne."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ore no nakade wa mada Zentai no yonhyaku bun\u0027no go kurai shika Shabe~e tenai kanjida yo"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Chinamini yonhyaku-Bun\u0027no yon wa Karisawa-san-tachi no kotona."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Koko de Tsukkomou ka mayotte ita toki Me no mae ni sore ga arawareta\u0027"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) onē San hisashi ~ buri."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon) `Itamae no kakkō o shite kyakuhiki o… Iya itamae no kakkō o shita kokujin ga Kyokan de… Iya kyakuhiki ga Itamae no ishō o shite iruga Sore wa naze ka kokujin de…\u0027"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) o ni i san hisashiburi ~. E~e?"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) n n ~."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Yō Saimon! Hisashiburijan yo ~!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) N ~ Kida sushi kuu? Ī yo. Yasuku suru yo. Sushi wa ī yo."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) A~a kin naikara kyō wa kanben. Baito shite kin haittara kuukara Sābisu shite yo."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) Ō ~ dame ~. Sore shitara watashi Roshia no daichi no mokuzu ni Kieru ~ yo."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Daichinanoni mo-kuzu ka yo. Soi jā na."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Saimon) O ni i san hisashi ~ buri."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Ima no hito mo shiriai?"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ā. Simon tte sa Roshia-kei no kokujin de Soko no roshia hito ga ya~a teru Sushi-ya no kyakuhiki ya-a tenda."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado)E-e…. Gomen doko kara tsukkomubeki?"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi )Iya maji nandatte."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Honto wa Sāmya tte iu ndakedo yo Min\u0027na eigo yomide Saimon tte yonderunda. Yoku shin\u0027ne~ekedo ryōshin ga Amerika kara bōmei shita toka nantoka. De shiriai no roshiahito ga Sushi-ya hajimetakara ￫ Kyakuhiki ni natta n datte yo ~. Aitsu wa Teki ni mawashicha ikenaikara na. Aitsu ga Mae ni kenka tometa toki yo ~o Onaji kurai no Yatsu o Katate de mochiage tetashi. Ā ato tsuide ni Teki ni mawashicha ikenai Yatsu no Mōhitori wa…."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Bako~o! Gan! Gashān!"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Mikado: E~e nani? Nanina nda?"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Shizuo) o ~-ra ~a ~~!! U wa~a ~~!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ā… uwasa o surebada na. E~e? Ma~a tonikaku Heiwajima Shizuo tte Yatsu ni wa Chikadzuku na yo. Futsū ni iki terya Hanashikake rareru koto mo Naidaroukedo na."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "≪ I… ittai dōiu hitonanda? ≫"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Gacha (kuruma no doa no oto)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) are? Mada ki tene~e ya. O~tsu kashī na."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita)-jō mo īkagenda nā. Motto ki o hikishimete morawa nē to."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) ma~a ījan. Ore-ra himadashi."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) sōssu ne."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) fu ~u ~. Yappa kōiu jikan wa Daijissu yo ne ~. Susanda nichijō ni Tsukanoma uruoi no hitotoki."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Buo~ō̄ !"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(futari) n?"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) sōiya kyō Mimashita yo ~ rei no kuroi baiku ♪"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) kuroi baiku?"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton) a ̄."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) Shiranai n desu ka ~ saikin, Shinjuku toka Ikebukuro de wadai no yatsu Mukashi kara toshi densetsu mitaina kanji Dattarashīkedo"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Koko n toko, Shashin totta hito toka ga ōkute…."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton) a ̄ , shii teru shii teru ￫Tte iu ka, are wa Futsu ̄ no bōzōzoku tte iu ka. A,-betsu ni murete Chinsō shi teru wake janain dakedo."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) Niwananoni Raito tsukenaide hashii terunara, jūbun aho datte. Ningen dattara,dakedo …"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka)sorette, dou iu imi desuka?"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)aa, eto ne bucchake"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)bakemono mitai na mon nandesu…"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Buo~ō̄ ! (Asanuma) oi."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita \u0026 Kanazawa) n?"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) ano ~-jō no hitossu ka?"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita)tsu ka dō mite mo tagawane~e?"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) jā daressu ka?"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita)tsuu ka namete nē? Bokutachi chotto otorikomichūnande Jama sundattara shinde moraemasu ~!? Gan!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanazawa) uwa~a!"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) ma… majikayo! A~a…. E he~tsu e he~e e e he~e…."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma)ya be ~e!"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) cho ~o… cho ~o cho ~o! Uwa~a! Yame… yamero! Yamero ~! Bachibachi! Bachibachi! Da ~ kara yamero ~o tsuttanoni."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Morita) n! ?"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Doka~a! Baki~i!"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) hi ~i ~…. Ya be ~e! Ya be ~e! Ya be ~e! Ha~a!"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) na~a… nanina nda yo."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) nanina nda yo ~~!!"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō)Bakemono tte, dō iu koto desu ka?"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)Dotachin nanka wa shinigami natte itteru"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) Dotachin?"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō)Dotachin tte dare?"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra)Kurobaiku ni notteru otoko niwa ne…"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) Teyu-ka Dotachin wa suru-? ? ? ( ‘ . w . ’)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Ku~u… u~u…"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) Chi kishouga ~!!"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Kikyī̄ ! Gan! Gashān!"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) E e he~e e he~e…. Hi ~yahha ~! Zama ~amiro! Konchikushō!"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kanra: Kubi kara ue ga nai no…"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "A~a? U~u… u~u…."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Asanuma) a~a a~a…. U~u… u~u…."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) Kubi ga ne demo kirei ni naku natteru no ni ugo iterundatte…"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Tsu…tsuu ka nan\u0027na no? Omae. Na~a… nanina nda yo ~~!!"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) a~a…. Ano sa hoka ni mo Chikadzuicha ikenai hito tte iru no?"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) U ~ n… yāsan\u0027ya Gyangu mitaina no wa iumademonai to shite…. Orihara Izaya Tte hito ga iru ndakedo yo."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado)Orihara Izaya? Kawatta namaeda ne."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Omaegaiuna. Koitsu wa Yabaikara zettai ni kakawaru na yo. Ma~a Shinjuku shutai no hitodakara Mazu awanaidaroukedo. Ā atona, darāzu tte renchū ni mo Kakawaranai kata ga ī ze."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Darāzu?"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ō. Wandarāzu no darāzu."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "≪ Wandarāzu ttenani? ≫"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ā ore mo kuwashī koto wa wakan\u0027ne~e ndakedo yo Tonikaku ninzū ga ōkute sen ga Ippon buchi kireta chīmurashī. Karāgyangurashī ndakedo Don\u0027na irona no kamo wakarane~e. Ma~a ima wa ukatsu ni Shūkai wa dekine~ekara Soitsu-ra mo itsunomanika Kaisan shi chimatte tari shite na. Sō nanda. A~a…."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX)Don!"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Uwa~a! Ā~a! Oi daijōbu ka yo? U~u…. Kimi daijōbu? U~u…."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado)Ā ano… sumimasen. Daijōbudesuka?"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Rio Kamichika)A~a…. Ano… ha~a…. Ha~a! Iya… iya~a ~! Iya ~a! Uwaa! A a~a oi!"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi)Nandaarya…. Rei mo nashi ka yo."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Nani ga atta ndarou? Ano hito."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi)Sā? Nan demo okoru no ga Kono machidakara na."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Omae un ga ī yo. (Mikado) E~e?"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Kyō dake de Kadota-san-tachi ya Saimon ni aete Shizuo ga nageta jihanki ya ningen mo mirete An\u0027na bijin ni butsukatta. Sore ungaī tte iu no ka na?"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Ureshī yo. E~e?"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Kono machi de omae to gakkō ni itte Mata issho ni asoberu nante sa."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Boku moda yo."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(SFX) Buo~ō̄ ! (Masaomi) Omae hontoni un ga ī zo! E~e? Omake ni toshi densetsu o menomaede mi rare ndakara!"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Kida-kun!"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Kanra) e ̄ , kuro baiku mokugeki shita no? Tanaka tarō-san."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton)Hyotte shite yoru no hachi-ji sugi kurai"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka Taro)A, shitterundesuka?\u003esetton-san"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setton) N, maa, watashi sokoni itakara…"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka Taro)?!"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado) Ha~a ha~a… toshi densetsu ttenani?"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Masaomi) Kuro baikuda yo. Kubi nashi raidāda!"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Mikado narēshon)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Boku wa sono toki jibun no karada ga Furuete iru no ni kidzuita\u0027"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Kowakatta n janai\u0027 `Tabun kandō shite ita noda\u0027 `Sugoi mono o mita\u0027"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Boku wa koko de konomachide Yosode wa Tōtei dekinai yōna keiken o shita\u0027"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Ima made kesshite Tegatodokanai to omotte ita Arienai genjitsu ga me no mae ni Hirogatte iru nda to kanjite ita\u0027"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Saisho ni itta koto to Mujun suru mitaidakedo Sukunakutomo Kono toki wa sō omotte ita\u0027"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`Boku wa, boku no atarashī genjitsu ga hajimaru yokan ni furuete ita\u0027"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) hontōdesuka! Jā, shiranai uchi ni Surechiga~a teta kamo shiremasen ne!"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Setto n) sō kamo."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "(Tanaka tarō) tokorode… dotachin tte dare?"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003c Jikai yokoku \u003e `Doko ka in no aru shōjo ga Jibun no mishiranu genjitsu o kaimamiru\u0027 `Daremoga deai-sōde Deawanai genjitsu\u0027 `Hontōnara shinde ita hazu no Shōjo ga mita mono wa…\u0027 Jikai: Ikkyoichijitsu"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 521
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithValidFile/ValidWorkspace/watchlist.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [1, 2, 3]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "b | [2, 3, 4]"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 2
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithValidFile/user.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Testing | Male"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1
    }
  },
  {
    "path": "src/test/java/anichan/MainTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/anichan/anime/AnimeDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.anime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "class AnimeDataTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final Integer NEGATIVE_INTEGER \u003d -1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final Integer NULL_PARAM \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        ArrayList\u003cAnime\u003e animeStorageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        animeStorageList.add(new Anime());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        animeStorageList.add(new Anime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        animeData \u003d new AnimeData(animeStorageList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void getAnime_negativeInteger_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeData.getAnime(NEGATIVE_INTEGER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void getAnime_nullInput_expectException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeData.getAnime(NULL_PARAM);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void getAnimeByID_negativeInteger_expectException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeData.getAnimeByID(NEGATIVE_INTEGER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void getAnimeByID_nullInput_expectException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeData.getAnimeByID(NULL_PARAM);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 48,
      "OngDeZhi": 1,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/test/java/anichan/anime/AnimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.anime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "class AnimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void setReleaseDate_singleDigits_usableDateFormat() throws java.text.ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime \u003d new Anime();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String[] inputDate \u003d {\"2020\", \"5\", \"1\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testAnime.setReleaseDate(inputDate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        System.out.println(testAnime.getReleaseDate());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SimpleDateFormat stringToDate \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Date testDate \u003d stringToDate.parse(\"2020-05-01\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testAnime.getReleaseDate(), testDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void setRating_greaterThan100_ratingWillBeZero() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime \u003d new Anime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        int largeRating \u003d 9999;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testAnime.setRating(largeRating);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testAnime.getRating(), 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void setRating_negativeNumbers_ratingWillBeZero() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime \u003d new Anime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        int negativeRating \u003d -1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testAnime.setRating(negativeRating);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testAnime.getRating(), 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 37,
      "ChanJianHao": 1
    }
  },
  {
    "path": "src/test/java/anichan/command/AddToWatchlistCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.AddToWatchlistParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class AddToWatchlistCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    User user;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Bookmark bookmark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Workspace workspace;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String ZERO_ANIME_INDEX \u003d \"-a 0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String DUPLICATE_ANIME_INDEX \u003d \"-a 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String LARGE_ANIME_INDEX \u003d \"-a 3\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime1 \u003d new Anime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime2 \u003d new Anime();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeList.add(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist watchlist \u003d new Watchlist(\"TestWatchlist\", animeList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        watchlistList.add(watchlist);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        workspace \u003d new Workspace(\"TestWorkspace\", watchlistList, bookmark);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user \u003d new User(\"TestUser\", \"Male\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user.setActiveWorkspace(workspace);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        storageManager \u003d new StorageManager(\"test\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_zeroInteger_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParser \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistCommand testAdd \u003d testParser.parse(ZERO_ANIME_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testAdd.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_duplicateIndex_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParser \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistCommand testAdd \u003d testParser.parse(DUPLICATE_ANIME_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testAdd.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_indexLargerThanDataSize_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParser \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistCommand testAdd \u003d testParser.parse(LARGE_ANIME_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testAdd.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 10,
      "michaeldinata": 69
    }
  },
  {
    "path": "src/test/java/anichan/command/AddWorkspaceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.AddWorkspaceParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class AddWorkspaceCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_TEST_DIRECTORY \u003d \"src\" + File.separator + \"test\" + File.separator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                       + \"data\" + File.separator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    User user;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Anime testAnime1 \u003d new Anime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager \u003d new StorageManager(VALID_TEST_DIRECTORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user \u003d new User(\"Tom\", \"Male\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void execute_validName_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        AddWorkspaceParser testParse \u003d new AddWorkspaceParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        AddWorkspaceCommand testAddWorkspace \u003d testParse.parse(\"-n Crunchy rail 12345\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e testAddWorkspace.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 5,
      "ChanJianHao": 36
    }
  },
  {
    "path": "src/test/java/anichan/command/BookmarkAnimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class BookmarkAnimeCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 9
    }
  },
  {
    "path": "src/test/java/anichan/command/BrowseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.BrowseParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class BrowseCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    User user;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String LARGE_PAGE_NUM \u003d \"-p 9999\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String NEGATIVE_PAGE_NUM \u003d \"-p -1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String ZERO_PAGE_NUM \u003d \"-p 0\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003cAnime\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime1 \u003d new Anime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime2 \u003d new Anime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testList.add(testAnime2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager \u003d new StorageManager(\"test\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_invalidPageNum_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(LARGE_PAGE_NUM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(NEGATIVE_PAGE_NUM);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse2 \u003d testParse.parse(ZERO_PAGE_NUM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testBrowse2.getPage(), 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 44,
      "OngDeZhi": 1,
      "ChanJianHao": 7
    }
  },
  {
    "path": "src/test/java/anichan/command/EstimateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "class EstimateCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SCRIPT_FILE_NAME \u003d \"script.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_WORKSPACE \u003d \"ValidWorkspace\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_TEST_DIRECTORY \u003d \"a\" + File.separator + \"b\" + File.separator + \"c\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                         + File.separator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_TEST_DIRECTORY \u003d \"src\" + File.separator + \"test\" + File.separator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                       + \"data\" + File.separator + \"StorageManagerTest\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                       + File.separator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_FILE_DIRECTORY \u003d VALID_TEST_DIRECTORY + \"DirectoryWithValidFile\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                       + File.separator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_FILE_DIRECTORY \u003d VALID_TEST_DIRECTORY + \"DirectoryWithEmptyFileAndDirectory\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                       + File.separator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int NO_WORDS_PER_HOUR_PROVIDED \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager validSM;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager emptySM;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager invalidDirectorySM;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private AnimeData animeData;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        animeData \u003d new AnimeData(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validSM \u003d new StorageManager(VALID_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        emptySM \u003d new StorageManager(EMPTY_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        invalidDirectorySM \u003d new StorageManager(INVALID_TEST_DIRECTORY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user \u003d new User(\"Testing\", \"Male\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(new Watchlist(\"First\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Workspace newWorkspace \u003d user.addWorkspace(VALID_WORKSPACE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        newWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user.setActiveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_validScriptFile_success() throws AniException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Words per hour not specified."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedNoWphResult \u003d \"Average translator (400 words per hour) takes: 5 hour(s) 47 minute(s).\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        expectedNoWphResult +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        expectedNoWphResult +\u003d \"Average translator (500 words per hour) takes: 4 hour(s) 38 minute(s).\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        expectedNoWphResult +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        expectedNoWphResult +\u003d \"Average translator (600 words per hour) takes: 3 hour(s) 51 minute(s).\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        EstimateCommand estimateCommandNoWph \u003d new EstimateCommand(SCRIPT_FILE_NAME, NO_WORDS_PER_HOUR_PROVIDED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String noWphResult \u003d estimateCommandNoWph.execute(animeData, validSM, user);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(expectedNoWphResult, noWphResult);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Words per hour specified."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedWphResult \u003d \"You would need 2 hour(s) 58 minute(s).\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        EstimateCommand estimateCommandHaveWph \u003d new EstimateCommand(SCRIPT_FILE_NAME, 777);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String haveWphResult \u003d estimateCommandHaveWph.execute(animeData, validSM, user);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(expectedWphResult, haveWphResult);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_invalidDirectory_throwsAniException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        EstimateCommand estimateCommand \u003d new EstimateCommand(SCRIPT_FILE_NAME, NO_WORDS_PER_HOUR_PROVIDED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateCommand.execute(animeData, invalidDirectorySM, user);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_emptyFile_throwsAniException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        EstimateCommand estimateCommand \u003d new EstimateCommand(SCRIPT_FILE_NAME, NO_WORDS_PER_HOUR_PROVIDED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateCommand.execute(animeData, emptySM, user);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 88,
      "ChanJianHao": 7
    }
  },
  {
    "path": "src/test/java/anichan/command/InfoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.InfoParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class InfoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    User user;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String ZERO_ANIME_INDEX \u003d \"-a 0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String LARGE_ANIME_INDEX \u003d \"-a 3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime1 \u003d new Anime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime2 \u003d new Anime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_zeroInteger_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParser \u003d new InfoParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoCommand testInfo \u003d testParser.parse(ZERO_ANIME_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testInfo.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_indexLargerThanDataSize_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParser \u003d new InfoParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoCommand testInfo \u003d testParser.parse(LARGE_ANIME_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testInfo.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 7,
      "michaeldinata": 45
    }
  },
  {
    "path": "src/test/java/anichan/command/RemoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.RemoveCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class RemoveCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    User user;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Bookmark bookmark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Workspace workspace;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String ZERO_WATCHLIST_INDEX \u003d \"-d 0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String LARGE_WATCHLIST_INDEX \u003d \"-d 3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime1 \u003d new Anime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime2 \u003d new Anime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeList.add(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist watchlist \u003d new Watchlist(\"TestWatchlist\", animeList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        watchlistList.add(watchlist);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        workspace \u003d new Workspace(\"TestWorkspace\", watchlistList, bookmark);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user \u003d new User(\"TestUser\", \"Male\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user.setActiveWorkspace(workspace);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        storageManager \u003d new StorageManager(\"test\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_zeroInteger_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommand testRemove \u003d testParser.parse(ZERO_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testRemove.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_indexLargerThanWatchlistSize_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommand testRemove \u003d testParser.parse(LARGE_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testRemove.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 10,
      "michaeldinata": 59
    }
  },
  {
    "path": "src/test/java/anichan/command/SearchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "class SearchCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    User user;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final int ABOVE_RANGE \u003d 9999;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final int BELOW_RANGE \u003d -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime1 \u003d new Anime();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime2 \u003d new Anime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testList.add(testAnime2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        storageManager \u003d new StorageManager(\"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_invalidSearchType_throwsAniExcetion() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchCommand testSearch \u003d new SearchCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testSearch.setSearchTerm(\"test\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testSearch.setSearchType(ABOVE_RANGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testSearch.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testSearch.setSearchType(BELOW_RANGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testSearch.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 42,
      "ChanJianHao": 6
    }
  },
  {
    "path": "src/test/java/anichan/command/ViewWatchlistCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.parser.ViewWatchlistParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class ViewWatchlistCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    User user;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Bookmark bookmark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Workspace workspace;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String ZERO_WATCHLIST_INDEX \u003d \"-v 0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String LARGE_WATCHLIST_INDEX \u003d \"-v 3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime1 \u003d new Anime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime2 \u003d new Anime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeList.add(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist watchlist \u003d new Watchlist(\"TestWatchlist\", animeList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        watchlistList.add(watchlist);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        workspace \u003d new Workspace(\"TestWorkspace\", watchlistList, bookmark);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user \u003d new User(\"TestUser\", \"Male\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user.setActiveWorkspace(workspace);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        storageManager \u003d new StorageManager(\"test\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_zeroInteger_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParser \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistCommand testView \u003d testParser.parse(ZERO_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testView.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_indexLargerThanDataSize_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParser \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistCommand testView \u003d testParser.parse(LARGE_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testView.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michaeldinata": 69
    }
  },
  {
    "path": "src/test/java/anichan/command/WatchlistCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "class WatchlistCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String STORAGE_DIRECTORY \u003d \"src\" + File.separator + \"test\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                    + File.separator + \"data\" + File.separator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private AnimeData animeData;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Workspace activeWorkspace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        animeData \u003d new AnimeData(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager \u003d new StorageManager(STORAGE_DIRECTORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user \u003d new User(\"Testing\", \"Male\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist secondWatchlist \u003d new Watchlist(\"Second\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        secondWatchlist.addAnimeToList(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        secondWatchlist.addAnimeToList(2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist thirdWatchlist \u003d new Watchlist(\"Third\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        thirdWatchlist.addAnimeToList(3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(new Watchlist(\"First\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(secondWatchlist);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(thirdWatchlist);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Workspace newWorkspace \u003d user.addWorkspace(\"Default\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        newWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user.setActiveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d General \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_invalidParameters_throwsAniException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Blanks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand blankOption \u003d new WatchlistCommand(\"\", \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e blankOption.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Unknown Option"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand unknownOption \u003d new WatchlistCommand(\"UNKNOWN\", \"TEST\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e unknownOption.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_nullParameters_throwsAssertionError() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Null Option and Option Information"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand nullOption \u003d new WatchlistCommand(null, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e nullOption.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Null WatchlistList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand nullWatchlistList \u003d new WatchlistCommand(\"n\", \"First\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setWatchlistList(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e nullWatchlistList.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Create \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_validParametersForCreateWatchlist_success() throws AniException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand watchlistCommand \u003d new WatchlistCommand(\"n\", \"Test\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(4, activeWorkspace.getWatchlistList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_duplicateWatchlistNameForCreateWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand watchlistCommand \u003d new WatchlistCommand(\"n\", \"First\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistCommand.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_validParametersForListWatchlist_success() throws AniException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand watchlistCommand \u003d new WatchlistCommand(\"l\", \"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String emptyListMessage \u003d \"Uhh.. You have no watchlist to list..\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotEquals(emptyListMessage, watchlistCommand.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_emptyWatchlistListForListAllWatchlist_emptyListMessage() throws AniException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand watchlistCommand \u003d new WatchlistCommand(\"l\", \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setWatchlistList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expected \u003d \"Uhh.. You have no watchlist..\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(expected, watchlistCommand.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Select \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_validParametersForSelectWatchlist_success() throws AniException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand watchlistCommand \u003d new WatchlistCommand(\"s\", \"3\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist selectedWatchlist \u003d activeWorkspace.getWatchlistList().get(2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(activeWatchlist, selectedWatchlist);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Delete \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_validParametersForDeleteWatchlist_success() throws AniException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Delete non-active watchlist"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWatchlist \u003d new WatchlistCommand(\"d\", \"2\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        deleteWatchlist.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(2, activeWorkspace.getWatchlistList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Delete active watchlist"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteActiveWatchlist \u003d new WatchlistCommand(\"d\", \"2\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setActiveWatchlist(activeWorkspace.getWatchlistList().get(1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        deleteActiveWatchlist.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Assertions.assertEquals(activeWorkspace.getWatchlistList().get(0), activeWorkspace.getActiveWatchlist());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Select and Delete \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_emptyWatchlistListForSelectAndDeleteWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setWatchlistList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand selectWatchlist \u003d new WatchlistCommand(\"s\", \"1\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e selectWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWatchlist \u003d new WatchlistCommand(\"d\", \"1\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e deleteWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_notIntegerStringForSelectAndDeleteWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand selectWatchlist \u003d new WatchlistCommand(\"s\", \"one\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e selectWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWatchlist \u003d new WatchlistCommand(\"d\", \"one\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e deleteWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_negativeWatchlistIndexForSelectAndDeleteWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand selectWatchlist \u003d new WatchlistCommand(\"s\", \"-2\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e selectWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWatchlist \u003d new WatchlistCommand(\"d\", \"-2\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e deleteWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_invalidWatchlistIndexForSelectAndDeleteWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand selectWatchlist \u003d new WatchlistCommand(\"d\", \"999\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e selectWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWatchlist \u003d new WatchlistCommand(\"s\", \"999\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e deleteWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_oneWatchlistInWatchlistListForSelectAndDeleteWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(new Watchlist(\"Only One\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setActiveWatchlist(watchlistList.get(0));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand selectWatchlist \u003d new WatchlistCommand(\"s\", \"1\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e selectWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWatchlist \u003d new WatchlistCommand(\"d\", \"1\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e deleteWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 177,
      "ChanJianHao": 9,
      "michaeldinata": 3
    }
  },
  {
    "path": "src/test/java/anichan/human/CharacterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class CharacterTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void testCharacterCreation() throws AniException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Character kirito \u003d new Character(\"Kirito\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Kirito\", kirito.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalVoiceActors_emptyList_returnZero() throws AniException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Character kirito \u003d new Character(\"Kirito\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(0, kirito.getTotalVoiceActors());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalVoiceActors_addTwo_returnTwo() throws AniException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Character kirito \u003d new Character(\"Kirito\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Make voice actors"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        VoiceActor yoshitsuguMatsuoka \u003d new VoiceActor(\"Yoshitsugu Matsuoka\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        VoiceActor brycePapenbrook \u003d new VoiceActor(\"Bryce Papenbrook\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Assign characters voiced by voice actor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        kirito.addVoiceActor(yoshitsuguMatsuoka);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        kirito.addVoiceActor(brycePapenbrook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(2, kirito.getTotalVoiceActors());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 36
    }
  },
  {
    "path": "src/test/java/anichan/human/UserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class UserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void testUserCreation() throws AniException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"Jessica Williams\", \"feMale\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\" Name: Jessica Williams-chan | Gender: Female\", user.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void testCreateUser_emptyName_throwsAniException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            User user \u003d new User(\"\", \"Male\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void changeName_TommytoJohnny_Johnny() throws AniException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"Tommy\", \"Male\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.setName(\"Johnny\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Johnny\", user.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void setGender_Female_returnFemale() throws AniException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"A changeGender\", \"MaLE\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Notice how case is not sensitive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.setGender(\"FEMAle\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Female\", user.getGender().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void setGender_Monster_throwAniException() throws AniException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"Monster\", \"MaLE\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            user.setGender(\"Monster\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getHonorificName_testGender_nameWithHonorific() throws AniException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User maleUser \u003d new User(\"Robinson\", \"MaLE\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Robinson-san\", maleUser.getHonorificName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User femaleUser \u003d new User(\"Bella\", \"Female\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Bella-chan\", femaleUser.getHonorificName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User otherUser \u003d new User(\"Thomas\", \"Other\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Thomas-san\", otherUser.getHonorificName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalWorkspace_noWorkspace_sizeZero() throws AniException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"User getTotalWorkspace\", \"Male\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(0, user.getTotalWorkspaces());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalWorkspace_twoWorkspaces() throws AniException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"A test workspace\", \"Male\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.addWorkspace(\"Test Workspace\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.addWorkspace(\"Test Workspace 2\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(2, user.getTotalWorkspaces());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 81
    }
  },
  {
    "path": "src/test/java/anichan/human/VoiceActorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class VoiceActorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void testVoiceActorCreation() throws AniException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        VoiceActor yoshitsuguMatsuoka \u003d new VoiceActor(\"Yoshitsugu Matsuoka\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Yoshitsugu Matsuoka\", yoshitsuguMatsuoka.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalCharacters_emptyList_returnZero() throws AniException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        VoiceActor yoshitsuguMatsuoka \u003d new VoiceActor(\"Yoshitsugu Matsuoka\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(0, yoshitsuguMatsuoka.getTotalCharacters());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalCharacters_addTwo_returnTwo() throws AniException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        VoiceActor yoshitsuguMatsuoka \u003d new VoiceActor(\"Yoshitsugu Matsuoka\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Make characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Character kirito \u003d new Character(\"Kirito\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Character somaYukihira \u003d new Character(\"Soma Yukihira\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Assign characters voiced by voice actor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        yoshitsuguMatsuoka.addCharacter(kirito); // Japanese va"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        yoshitsuguMatsuoka.addCharacter(somaYukihira);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(2, yoshitsuguMatsuoka.getTotalCharacters());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 36
    }
  },
  {
    "path": "src/test/java/anichan/human/WorkspaceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class WorkspaceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void testWorkspaceCreation() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace testWorkspace \u003d new Workspace(\"Translation Company A\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Translation Company A\", testWorkspace.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 16
    }
  },
  {
    "path": "src/test/java/anichan/parser/AddToWatchlistParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class AddToWatchlistParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST1 \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST2 \u003d \"-a\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST3 \u003d \"-n 1\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_FIELD_TEST1 \u003d \"-a Gundam\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyDescription_throwsAniException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyField_throwsAniException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_invalidOption_throwsAniException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_nonIntegerField_throwsAniException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_FIELD_TEST1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 2,
      "michaeldinata": 44
    }
  },
  {
    "path": "src/test/java/anichan/parser/AddWorkspaceParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class AddWorkspaceParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void parse_invalidParameter_ThrowsAniException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        AddWorkspaceParser testParse \u003d new AddWorkspaceParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" -\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" -x\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" -n\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" - \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" -abcdefg12345!@#$%^*\u0026(#)$%| \"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void parser_legitimateName_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        AddWorkspaceParser testParse \u003d new AddWorkspaceParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e testParse.parse(\"-n Crunchy\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void parser_legitimateNameComplex_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        AddWorkspaceParser testParse2 \u003d new AddWorkspaceParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e testParse2.parse(\"-n Crunchy OREO c00k!3s\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 39
    }
  },
  {
    "path": "src/test/java/anichan/parser/BookmarkParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "class BookmarkParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIRST_PARAMETERS_ADD_TEST1 \u003d \"1 -a 123\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIRST_PARAMETERS_ADD_TEST2 \u003d \"a -a 123\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIRST_PARAMETERS_DELETE_TEST1 \u003d \"1 -d 123\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIRST_PARAMETERS_DELETE_TEST2 \u003d \"a -d 123\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIELD_ADD_TEST1 \u003d \"-a   \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIELD_ADD_TEST2 \u003d \"-a beepboopbeep\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIELD_ADD_TEST3 \u003d \"-a 123 123\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIELD_DELETE_TEST1 \u003d \"-d   \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIELD_DELETE_TEST2 \u003d \"-d beepboopbeep\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIELD_DELETE_TEST3 \u003d \"-d 123 123\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIELD_EDIT_TEST1 \u003d \"1 -e   \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIELD_EDIT_TEST2 \u003d \"1 -e beepboopbeep\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String INVALID_FIELD_EDIT_TEST3 \u003d \"1 -e 123 123\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String NEGATIVE_BOOKMARKID_DELETE_TEST \u003d \"-d -1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String NEGATIVE_ANIMEID_ADD_TEST \u003d \"-a -3\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String NEGATIVE_BOOKMARKID_EDIT_TEST \u003d \"-1 -e 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String PROPER_INPUT1 \u003d \"-a 410\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String PROPER_INPUT2 \u003d \"-a 430\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidFirstParameter_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testAdd1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testAdd1.parse(INVALID_FIRST_PARAMETERS_ADD_TEST1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testAdd2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testAdd2.parse(INVALID_FIRST_PARAMETERS_ADD_TEST2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testDelete1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testDelete1.parse(INVALID_FIRST_PARAMETERS_DELETE_TEST1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testDelete2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testDelete2.parse(INVALID_FIRST_PARAMETERS_DELETE_TEST2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidFieldForAdd_ThrowsAniException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(INVALID_FIELD_ADD_TEST1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test2.parse(INVALID_FIELD_ADD_TEST2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test3 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test3.parse(INVALID_FIELD_ADD_TEST3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidFieldForDelete_ThrowsAniException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(INVALID_FIELD_DELETE_TEST1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test2.parse(INVALID_FIELD_DELETE_TEST2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test3 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test3.parse(INVALID_FIELD_DELETE_TEST3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidFieldForEdit_ThrowsAniException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(INVALID_FIELD_EDIT_TEST1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test2.parse(INVALID_FIELD_EDIT_TEST2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test3 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test3.parse(INVALID_FIELD_EDIT_TEST3);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_negativeBookmarkIdForDelete_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(NEGATIVE_BOOKMARKID_DELETE_TEST);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_negativeBookmarkIdForEdit_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(NEGATIVE_BOOKMARKID_EDIT_TEST);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_negativeAnimeIdForAdd_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(NEGATIVE_ANIMEID_ADD_TEST);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 127,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/test/java/anichan/parser/BrowseParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.command.BrowseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "class BrowseParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST1 \u003d \"-n name\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST2 \u003d \"-sort name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String INVALID_FIELD_TEST1 \u003d \"-s   \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String INVALID_FIELD_TEST2 \u003d \"-s beepboopbeep\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String INVALID_FIELD_TEST3 \u003d \"-s -o -p\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String DIFF_ORDER_TEST \u003d \"-p 1 -s rating -o asc\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String DIFF_ORDER_TEST2 \u003d \"-s rating -o asc -p 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager \u003d new StorageManager(\"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_invalidParameter_ThrowsAniException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_invalidField_ThrowsAniException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_FIELD_TEST1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse2 \u003d new BrowseParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse2.parse(INVALID_FIELD_TEST2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse3 \u003d new BrowseParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse3.parse(INVALID_FIELD_TEST3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_differentParameterOrder_identicalBrowseSettings() throws AniException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(DIFF_ORDER_TEST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse2 \u003d testParse.parse(DIFF_ORDER_TEST2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testBrowse.getPage(), testBrowse2.getPage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testBrowse.getSortType(), testBrowse2.getSortType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testBrowse.getOrder(), testBrowse2.getOrder());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 69,
      "OngDeZhi": 1,
      "ChanJianHao": 6
    }
  },
  {
    "path": "src/test/java/anichan/parser/EstimateParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class EstimateParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private EstimateParser estimateParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        estimateParser \u003d new EstimateParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_validParameters_success() throws AniException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        estimateParser.parse(\"script.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        estimateParser.parse(\"random_script.txt -wph 777\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_invalidParameters_throwsAniException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -one -two\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt script_two.txt\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -o\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph one\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph 0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph 777 0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_nullDescription_throwsAssertionError() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e estimateParser.parse(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 39,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/test/java/anichan/parser/InfoParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class InfoParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST1 \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST2 \u003d \"-a\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST3 \u003d \"-n 1\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_FIELD_TEST1 \u003d \"-a Gundam\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyDescription_throwsAniException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse \u003d new InfoParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyField_throwsAniException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse \u003d new InfoParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_invalidOption_throwsAniException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse \u003d new InfoParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_nonIntegerField_throwsAniException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse \u003d new InfoParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_FIELD_TEST1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 2,
      "michaeldinata": 43
    }
  },
  {
    "path": "src/test/java/anichan/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void parseUserInput_emptyInput_showInvalidCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            parser.parseUserInput(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void parseUserInput_oneWord_returnsOneString() throws AniException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String input \u003d \"test\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] stringParts \u003d parser.parseUserInput(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertEquals(stringParts.length, 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void parseUserInput_moreThanTwoWords_returnsTwoStrings() throws AniException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String input \u003d \"test more than two\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] stringParts \u003d parser.parseUserInput(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertEquals(stringParts.length, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 5,
      "michaeldinata": 36
    }
  },
  {
    "path": "src/test/java/anichan/parser/RemoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class RemoveCommandParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST1 \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST2 \u003d \"-d\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST3 \u003d \"-n 1\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_FIELD_TEST1 \u003d \"-d Gundam\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyDescription_throwsAniException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyField_throwsAniException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_invalidOption_throwsAniException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_nonIntegerField_throwsAniException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_FIELD_TEST1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 2,
      "michaeldinata": 43
    }
  },
  {
    "path": "src/test/java/anichan/parser/SearchParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "class SearchParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST1 \u003d \"-n \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String INVALID_PARAMETERS_TEST2 \u003d \"-a Cowboy Bebop\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_invalidParameter_throwsAniException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchParser testParse \u003d new SearchParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 21,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/test/java/anichan/parser/ViewWatchlistParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class ViewWatchlistParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String EMPTY_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String EMPTY_FIELD \u003d \"-v\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String INVALID_OPTION \u003d \"-n 1\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String NON_INTEGER_FIELD_TEST \u003d \"-v Default\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyDescription_throwsAniException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyField_throwsAniException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(EMPTY_FIELD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_invalidOption_throwsAniException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(INVALID_OPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_nonIntegerField_throwsAniException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(NON_INTEGER_FIELD_TEST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michaeldinata": 45
    }
  },
  {
    "path": "src/test/java/anichan/parser/WatchlistParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "class WatchlistParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private WatchlistParser watchlistParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistParser \u003d new WatchlistParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_validParameters_success() throws AniException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistParser.parse(\"-n correct\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistParser.parse(\"-l\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistParser.parse(\"-s 1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistParser.parse(\"-d 1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_invalidParameters_throwsAniException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-invalid\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-n one -one two\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"hello -n testing\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-n\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-s\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-d\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-l a\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-s one\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-d one\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_nullDescription_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e watchlistParser.parse(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 43,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/test/java/anichan/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static junit.framework.Assert.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static junit.framework.Assert.assertNotNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static junit.framework.Assert.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "class StorageManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_WORKSPACE \u003d \"ValidWorkspace\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_FILE_WORKSPACE \u003d \"EmptyFileWorkspace\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_WORKSPACE \u003d \"EmptyWorkspace\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SOME_INVALID_WORKSPACE \u003d \"SomeInvalidWorkspace\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ALL_INVALID_WORKSPACE \u003d \"AllInvalidWorkspace\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SCRIPT_FILE_NAME \u003d \"script.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_TEST_DIRECTORY \u003d \"a\" + File.separator + \"b\" + File.separator + \"c\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                         + File.separator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_TEST_DIRECTORY \u003d \"src\" + File.separator + \"test\" + File.separator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                        + \"data\" + File.separator + \"StorageManagerTest\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                        + File.separator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_FILE_DIRECTORY \u003d VALID_TEST_DIRECTORY + \"DirectoryWithValidFile\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                        + File.separator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_FILE_DIRECTORY \u003d VALID_TEST_DIRECTORY + \"DirectoryWithEmptyFileAndDirectory\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                         + File.separator;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_FILE_DIRECTORY \u003d VALID_TEST_DIRECTORY + \"DirectoryWithInvalidFile\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                         + File.separator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager validFileSM;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager invalidFileSM;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager emptySM;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager invalidDirectorySM;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private User userToSave;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private User userToLoad;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private ArrayList\u003cWatchlist\u003e watchlistListForLoad;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private ArrayList\u003cWatchlist\u003e watchlistListForSave;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setUp() throws AniException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validFileSM \u003d new StorageManager(VALID_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        invalidFileSM \u003d new StorageManager(INVALID_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        emptySM \u003d new StorageManager(EMPTY_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        invalidDirectorySM \u003d new StorageManager(INVALID_TEST_DIRECTORY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userToLoad \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userToSave \u003d new User(\"Testing\", \"Male\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistListForLoad \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistListForSave \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist firstWatchlist \u003d new Watchlist(\"a\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        firstWatchlist.addAnimeToList(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        firstWatchlist.addAnimeToList(2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        firstWatchlist.addAnimeToList(3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist secondWatchlist \u003d new Watchlist(\"b\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        secondWatchlist.addAnimeToList(2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        secondWatchlist.addAnimeToList(3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        secondWatchlist.addAnimeToList(4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistListForSave.add(firstWatchlist);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistListForSave.add(secondWatchlist);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void testRetrieveWorkspaceList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Valid Workspace Directory"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] validWorkspaceList \u003d invalidFileSM.retrieveWorkspaceList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(2, validWorkspaceList.length);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Invalid Workspace Directory"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] invalidWorkspaceList \u003d invalidDirectorySM.retrieveWorkspaceList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotNull(invalidWorkspaceList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void testSaveUser() throws AniException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validFileSM.saveUser(userToSave);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void testLoadUser() throws AniException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Invalid Directory"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            userToLoad \u003d invalidDirectorySM.loadUser();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Valid Directory (Use result from testSaveUser())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userToLoad \u003d validFileSM.loadUser();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(userToLoad.getName(), userToSave.getName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(userToLoad.getGender(), userToSave.getGender());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadUser_emptyUserFile_throwsAniException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            userToLoad \u003d emptySM.loadUser();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadUser_invalidUserFile_throwsAniException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            userToLoad \u003d invalidFileSM.loadUser();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Watchlist Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void testSaveWatchlistList() throws AniException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validFileSM.saveWatchlistList(VALID_WORKSPACE, watchlistListForSave);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void testLoadWatchlistList() throws AniException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Valid Watchlist File"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String validResult \u003d validFileSM.loadWatchlistList(VALID_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedValidResult \u003d \"Loaded successfully.\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(expectedValidResult, validResult);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Invalid Directory"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            invalidDirectorySM.loadWatchlistList(VALID_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Empty Watchlist File"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String emptyResult \u003d emptySM.loadWatchlistList(EMPTY_FILE_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedEmptyFileResult \u003d \"Empty watchlist file.\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(expectedEmptyFileResult, emptyResult);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // No Watchlist File"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            emptySM.loadWatchlistList(EMPTY_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadWatchlistList_someInvalidWatchlist_failToLoadSome() throws AniException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String someInvalidResult \u003d invalidFileSM.loadWatchlistList(SOME_INVALID_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedSomeInvalidResult \u003d \"Not all loaded successfully (some invalid).\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(1, watchlistListForLoad.size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(someInvalidResult, expectedSomeInvalidResult);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadWatchlistList_allInvalidWatchlist_failToLoadAll() throws AniException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String allInvalidResult \u003d invalidFileSM.loadWatchlistList(ALL_INVALID_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedAllInvalidResult \u003d \"No watchlist loaded successfully (all invalid).\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(0, watchlistListForLoad.size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(allInvalidResult, expectedAllInvalidResult);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Script Reading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void testReadScriptFile() throws AniException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Valid Script File"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileString \u003d validFileSM.loadScript(VALID_WORKSPACE, SCRIPT_FILE_NAME);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotNull(fileString);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Invalid Directory"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            invalidDirectorySM.loadScript(VALID_WORKSPACE, SCRIPT_FILE_NAME);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Empty Script File"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            emptySM.loadScript(EMPTY_FILE_WORKSPACE, SCRIPT_FILE_NAME);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 183,
      "ChanJianHao": 4
    }
  },
  {
    "path": "src/test/java/anichan/watchlist/WatchlistTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.watchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static junit.framework.Assert.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "class WatchlistTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int SAMPLE_ANIME_INDEX_ONE \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int SAMPLE_ANIME_INDEX_TWO \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Watchlist firstWatchlist;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Watchlist secondWatchlist;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        animeList.add(SAMPLE_ANIME_INDEX_ONE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        animeList.add(SAMPLE_ANIME_INDEX_TWO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        firstWatchlist \u003d new Watchlist(\"First Watchlist\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        secondWatchlist \u003d new Watchlist(\"Second Watchlist\", animeList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void testEqual() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Test Equals on duplicated named watchlist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist duplicateNameWatchlist \u003d new Watchlist(\"First Watchlist\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(duplicateNameWatchlist, firstWatchlist);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotEquals(secondWatchlist, duplicateNameWatchlist);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Test Equals on non-Watchlist object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Bookmark bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotEquals(bookmark, firstWatchlist);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Test Equals on Null object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotEquals(firstWatchlist, null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 40,
      "ChanJianHao": 2,
      "michaeldinata": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Abec Steiner 33rd"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Female"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "addws -n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "addws  - "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "addws"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "addws -n Crunchy Cinnamon"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "addws -n CrispyDonut"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "addws -n RED VELVET Crumblesss "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n b"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n ops"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -s 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -d 4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -l"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "add -a 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "add -a 3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bookmark -a 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bookmark -a 410"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bookmark 1 -e 5"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bookmark -l"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "add -a 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "search -n cowboy"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -p 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 2,
      "OngDeZhi": 11,
      "ChanJianHao": 8,
      "michaeldinata": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "set dataDir\u003d\"data\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "cd ..\\.."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "rmdir /s /q %dataDir% 2\u003enul"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "java -jar build\\libs\\%jarloc% \u003c text-ui-test\\input.txt \u003e text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 3,
      "OngDeZhi": 2,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "java  -jar $(find build/libs/ -mindepth 1 -print -quit) \u003c text-ui-test/input.txt \u003e text-ui-test/ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 2,
      "-": 22
    }
  }
]
