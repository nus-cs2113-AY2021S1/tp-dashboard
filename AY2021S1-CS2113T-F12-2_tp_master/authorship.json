[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "# AniChan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![AniChan Logo](docs/images/AniChan-Logo.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg) ![Support OS](https://img.shields.io/badge/platform-windows%20%7C%20macos%20%7C%20linux-blue) ![Size](https://img.shields.io/github/repo-size/AY2021S1-CS2113T-F12-2/tp) ![Java](https://img.shields.io/badge/built--in-java-brightgreen)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**AniChan** is an all-rounded tool for Anime translators and professionals. It features a suite of functionality that can help reduce administration workload, as well as improve translation efficiency and accuracy."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   [User Guide](https://ay2021s1-cs2113t-f12-2.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   [Developer Guide](https://ay2021s1-cs2113t-f12-2.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   [About Us](https://ay2021s1-cs2113t-f12-2.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Downloads"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The latest release of **AniChan** can be found [here](https://github.com/AY2021S1-CS2113T-F12-2/tp/releases)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Support \u0026 Contribution"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We welcome all forms of contributions to **AniChan** and appreciate for your feedback very much! "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "You can join us in developing this tool by making a fork of this project and making a pull request with your changes. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Acknowledgement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   [AniList](https://anilist.co/) for providing us anime information."
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 15,
      "-": 13
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    compile group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            srcDirs \u003d [\u0027src/main/java\u0027]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            srcDirs \u003d [\u0027src/main/resources\u0027]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    mainClassName \u003d \"anichan.Main\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    archiveBaseName \u003d \"main\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        xml.enabled true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        html.enabled false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 1,
      "n3wsoldier": 12,
      "ChanJianHao": 10,
      "-": 44
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 19
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 11
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "# About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Hello! AniChan was developed by a group of passionate students from team [F12-2](https://github.com/AY2021S1-CS2113T-F12-2) as part of their team project for [CS2113T  Software Engineering \u0026 Object-Oriented Programming](https://nus-cs2113-ay2021s1.github.io/website/index.html)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Display | Name | GitHub Profile | Portfolio   "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Michael Dinata | [Github](https://github.com/michaeldinata) | [Portfolio](team/michaeldinata.md)  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Eyo Wei Chin | [Github](https://github.com/EyoWeiChin) | [Portfolio](team/eyoweichin.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cimg src\u003d\"https://avatars1.githubusercontent.com/u/39303087?s\u003d400\u0026v\u003d4\" width\u003d\"150\"/\u003e | Ong De Zhi | [Github](https://github.com/OngDeZhi) | [Portfolio](team/ongdezhi.md)  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cimg src\u003d\"https://i.pinimg.com/564x/c4/0d/7a/c40d7a7060fb74926c257db982b6ddaf--funny-stuff-funny-things.jpg\" width\u003d\"150\"/\u003e | Chan Jian Hao | [Github](https://github.com/ChanJianHao) | [Portfolio](team/chanjianhao.md)  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Xin Bin | [Github](https://github.com/n3wsoldier) | [Portfolio](team/xinbin.md)"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 2,
      "OngDeZhi": 3,
      "ChanJianHao": 4,
      "-": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![AniChan Logo](images/AniChan-Logo.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "[![Build Status](https://travis-ci.org/AY2021S1-CS2113T-F12-2/tp.svg?branch\u003dmaster)](https://travis-ci.org/AY2021S1-CS2113T-F12-2/tp) [![Open Issues](https://img.shields.io/github/issues-raw/AY2021S1-CS2113T-F12-2/tp)](https://github.com/AY2021S1-CS2113T-F12-2/tp/issues) [![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT) [![Last Commit](https://img.shields.io/github/last-commit/AY2021S1-CS2113T-F12-2/tp)](https://github.com/AY2021S1-CS2113T-F12-2/tp/commits/master) [![Codecov](https://codecov.io/gh/AY2021S1-CS2113T-F12-2/tp/branch/master/graph/badge.svg?token\u003d2H6O4KMWRA)](https://codecov.io/gh/AY2021S1-CS2113T-F12-2/tp) [![Codacy Badge](https://app.codacy.com/project/badge/Grade/fac33332a53745f990829c425c499621)](https://www.codacy.com/gh/AY2021S1-CS2113T-F12-2/tp/dashboard?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY2021S1-CS2113T-F12-2/tp\u0026amp;utm_campaign\u003dBadge_Grade)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1.  [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;1.1 [Purpose](#11-purpose)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "2.  [Setting up](#2-setting-up)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3.  [Design](#3-design)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.1  [Architecture](#31-architecture)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.2  [UI Component](#32-ui-component)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.3  [Parser Component](#33-parser-component)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.4  [Command Component](#34-command-component)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.5  [AnimeData Component](#35-animedata-component)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.6  [User Component](#36-user-component)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.7  [StorageManager Component](#37-storagemanager-component)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "4.  [Implementation](#4-implementation)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.1  [Estimate Feature](#41-estimate-feature)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.2  [Browse Feature](#42-browse-feature)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.3  [View Anime Information Feature](#43-view-anime-information-feature)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.4  [Workspace Feature](#44-workspace-feature)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.5  [Watchlist Management Feature](#45-watchlist-management-feature)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.6  [Add To Watchlist Feature](#46-add-to-watchlist)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.7  [Remove From Watchlist Feature](#47-remove-from-watchlist)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.8  [View Anime In Watchlist Feature](#48-view-all-anime-in-watchlist)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;4.9  [Bookmark Feature](#49-bookmark-feature)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "5.  [Documentation, Logging, Testing, and DevOps](#5-documentation-logging-testing-and-devops)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;5.1 [Documentation](#51-documentation)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;5.2 [Logging](#52-logging)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;5.3 [Testing](#53-testing)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;5.4 [DevOps](#54-development-and-operations-devops)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "[Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "[Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "[Appendix C: Non-Functional Requirements](#appendix-c-non-functional-requirements)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "[Appendix D: Instructions For Manual Testing](#appendix-d-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**AniChan** is a command-line application written in **Java 11**. It is written using the Object-Oriented Programming (OOP) paradigm which provides us with means to structure a software program into organized, reusable and reusable pieces of code that makes it good for future improvements and revisions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 1.1 Purpose"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This document is meant for new and current developers of **AniChan**. It describes the overall architecture design of **AniChan**, and lays out the current implementation details of our notable features with the rationale and considerations behind each one. It is a living document that would continue to be edited and updated for each major release, and the current edition of this document is intended for the release v2.1."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 2.1 Setting up the project in your computer"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Ensure that you have the following installed: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   JDK 11."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   IntelliJ IDE (highly recommended)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Firstly, **fork** this repo and **clone** a copy into your computer."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "If you plan to use Intellij IDEA: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1.  **Ensure IntelliJ is configured to use JDK 11**."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1.  Click on `Configure` \u003e `Structure for New Projects` \u003e `Project Settings` \u003e `Project`, and ensure the `Project SDK` is using **JDK 11**."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "2.  **Import the project as a Gradle project**."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1.  Click on `Import Project` and locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    2.  If asked, choose to `Open as Project` (not `Open as File`)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    3.  Click `OK` to accept the default settings but do ensure that the selected version of `Gradle JVM` matches the JDK being used for the project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    4.  The import process could take a few minutes to finish."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3.  **Verify the setup**: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1.  Run `Main.main()` and try a few commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    2.  You may want to refer to our [User Guide](UserGuide.md) for the list of commands supported by **AniChan**."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 2.2 Before writing code"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 2.2.1 Configuring the Coding Style"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "If using IDEA, follow this guide [IDEA: Configuring the code style](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to setup IDEA’s coding style to match ours."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 2.2.2 Set up CI"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "There is no set up required as the project comes with a GitHub Actions config files, located in `.github/workflows` folder. When GitHub detects these files, it will run the CI for the project automatically at each push to the master branch or to any PR."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 2.2.3 Learn the Design"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "When you are ready to start writing codes, we recommended that you have a look at **AniChan**\u0027s overall design by reading about it at [AniChan\u0027s architecture](DeveloperGuide.md#31-architecture)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 3. Design "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The following section describes the architecture design of **Anichan**. This section starts off by looking at the overall architecture design in a general view, before going into the specific implementation details of the individual features."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 3.1 Architecture"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "This section will help provide insight to the general overview of **Anichan**’s architecture."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![Architecture Diagram](images/Architecture-Design.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*Figure 1: Architecture Design Diagram*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :bulb: The images used are stored in the directory: `images/`. If you wish to update a diagram you may replace the images in this folder."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The **Architecture Diagram** presented above explains the high-level design of **AniChan**, and given below is a quick overview of each component involved."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The `Main` class is the starting point of the application and has only one class called `Main`, it is responsible for, "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   At launch: Initializes the various components in the correct sequence, connects them up with each other, and loads any saved data."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   At shut down: Shuts down the components and invokes any clean up methods where necessary."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The rest of **AniChan** consists of 6 components: "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   `Ui`: Manages the user interface of **AniChan**."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `Parser`: Parses the user input."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `Command`: Executes the command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `User`: Manages the workspace(s) and user data."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `AnimeData`: Provides data from the anime source file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `StorageManager`: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Below are some example sequence diagram to help illustrate the general program flow and how the different objects interact with each other."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The first sequence diagram shows the program flow of starting AniChan as an existing user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "![Starting Sequence Diagram](images/Starting-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 2: Starting Up Sequence Diagram*"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The next sequence diagram shows an example command execution."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "![Command Execution Sequence Diagram](images/Command-Execution-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 3: Command Execution Sequence Diagram*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 3.2 UI Component"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![UI Class Diagram](images/Ui-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 4: UI Class Diagram*"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The UI component consists of a `UI` class that handles all user input and system output. The UI is only dependent on the `Main` class and does not interact directly with other classes ensuring high cohesiveness and separation of roles."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The `Ui` component listens for: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   the execution of commands to print the result of the Command."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   any exceptions thrown to show an error message to the user, instead of a program termination."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 3.3 Parser Component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![Parser Class Diagram](images/Parser-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 5: Parser Class Diagram*"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The `Parser` component consists of a `Parser` class and multiple `XYZParser` each representing a specific command’s parser. The Parser class will first receive a user command from `Main` and will proceed to determine the command type."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Once the command type is known, it will then create the respective `XYZParser` class."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Example: If Browse command was parsed, `Parser` will create `BrowseParser`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`XYZParser` will then parse the parameter and perform input validation, before creating the Command object to return to `Main`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### 3.4 Command Component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![Command Class Diagram](images/Command-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 6: Command Class Diagram*"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `Command` component consists of different commands represented together as `XYZCommand` which all inherits from the abstract `Command` class. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Example: The Browse command would be represented by a `BrowseCommand`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "`Main` would utilise the `Command.execute` operation to carry out the execution of the command and retrieve a String output that will contain the successful result of the `Command`. If the `Command` was not successful an exception will be thrown with details of the failure."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### 3.5 AnimeData Component"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![AnimeData Class Diagram](images/AnimeData-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 7: AnimeData Class Diagram*"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The `AnimeData` component is responsible for retrieving offline json data and parsing it into `Anime` objects that will be stored in program memory. The `AnimeData` will manage an ArrayList of `Anime` objects providing **AniChan** with an interface for the program to retrieve with the source data."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `AnimeData `component:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   can retrieve Anime objects using ID."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   can view detailed  information of each Anime Object."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   can browse the Anime catalog with sorting algorithms."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### 3.6 User Component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![User Class Diagram](images/User-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 8: User Class Diagram*"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The User inherits from the abstract `Human` class and stores the name and gender of the user. It represents the user\u0027s interaction with `Workspace` class."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `User`component: "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   can provide user information like `name`, `gender`, and `honorific name`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   stores an array list of type `Workspace`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   can add, set, and switch between workspaces "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `Workspace` component:  "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   can allow `User` to create and get the list of `Watchlist` and `Bookmark`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   can allow `User` to change his active `Watchlist`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 3.7 StorageManager Component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![StorageManager Class Diagram](images/StorageManager-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*Figure 9: StorageManager Class Diagram*"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The `StorageManager` component:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   can **save** workspace created by the user as a folder."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   can **save** user, watchlist and bookmark data in `.txt` format and **read it back** using their respective storage class, `UserStorage`, `WatchlistStorage`, and `BookmarkStorage`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   can **read** script files that are in `.txt` format using the class `ScriptStorage`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**AniChan** saved these data as `.txt` files so advanced users will be able to view and manipulate these saved data easily with any available text editor."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "This section introduces the specific implementation details and design consideration of some features in **AniChan**."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 4.1 Estimate Feature"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The estimate feature aims to provide translators with better estimates on the time needed to translate a script based on their capability. Hence, allowing users to better manage their time and be able to provide clients with much accurate estimation timings."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "#### 4.1.1 Current Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The estimate feature is facilitated by `EstimateCommand`. By running the command `estimate` with the relevant arguments, `EstimateParser` will construct `EstimateCommand` which will be used to execute the user\u0027s instruction. The command takes in two parameters: "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `scriptFileName` (mandatory)."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `wordsPerHour` (optional)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Given below is an example usage scenario showing how the `EstimateCommand` behaves at each step."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 1:** User executes the command `estimate script.txt -wph 300`. The application invokes `Parser#getCommand()` and because the command type is \"estimate\", `EstimateParser#parse()` is invoked to parse, validate, and construct `EstimateCommand` with \"script.txt\" and \"300\". The created object is then returned to `Main`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 2:** `EstimateParser` is terminated at this point. The application invokes `EstimateCommand#execute()` to execute the user\u0027s instruction."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 3:** `EstimateCommand` first invokes `User#getActiveWorkspace()` to identify the workspace the user is currently using, then it invokes `StorageManager#loadScriptFile()` to read and store the content of `scriptFileName` in the active workspace folder in `fileContent`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: Every workspace is actually a folder in the system."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: The application assumes that the user has the file placed in the active (currently using) workspace."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 4:** Once the file has been read, it calculates the estimated time using `fileContent` and `wordsPerHour`, then invokes `EstimateCommand#timeNeededToString()` to convert the estimated time into a human-readable format, and finally, returns the result to `Main` for it to be printed via `Ui#printMessage()`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: If `wordsPerHour` was not specified, the values 400, 500, and 600 words per hour (average translator\u0027s speed) will be used and this will generate 3 estimation timings, unlike the current scenario, only 1 estimation timing will be generated."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 5:** `EstimateCommand` is terminated."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The sequence diagram presented below depicts the interaction between the components for running the command, `estimate script.txt -wph 300`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: The sequence diagram shows the interaction from step 2 onward."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![EstimateCommand Sequence Diagram](images/EstimateCommand-Sequence-Diagram.png)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 10: Sequence Diagram for `estimate script.txt -wph 300`*"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 4.1.2 Design Considerations"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This section shows some design considerations taken when implementing the estimate feature."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Aspect: **When should the program read the script file**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Approach | Pros | Cons |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| During command execution **(current design)**. | Easy to implement since `Command` already handle file matters. | Memory resources are wasted if file validation fails during the execution. |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| During parsing. | No memory resource wasted as it will not fail due to invalid file. | Decreases cohesion as `Parser` now has to handle file matters on top of parsing matters. |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Having considered both of the alternatives, we have decided to implement the first alternative, **read script file content during command execution** because we do not want to decrease the cohesion of Parser, and we find that the memory resource wasted in the process is a worthy exchange for the cohesion preserved."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Aspect: **The way user can specify the script file**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Approach | Pros | Cons |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Specify file extension **(current design)**. |  Ensures the correct file will be read. | Some users may not know how to identify the file extension. |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Do not have to specify file extension. | Users can easily specify the file to read. | May read the wrong file due to identical names but different file extension. |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "We have decided to the implement the first alternative, **users should specify the file extension in their input** because there is great importance in getting a correct estimation timing, and it far outweighs and compensates for the hassle of entering the file extension, and we believe such mistakes are costly for our users."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 4.2 Browse Feature"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The browse feature is a useful feature that will allow users to quickly look through all "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "the different anime series available in a browsing fashion. The feature will have several enhancements such "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "as sorted browsing to browse in alphabetical or by the rating of the anime."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 4.2.1 Current Implementation"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The `BrowseCommand` is executed by `BrowseCommandParser` after parsing the user input. It will then fetch `Anime` objects matching the parameters specified by `BrowseCommandParser` that are stored in `AnimeData`. It extends the `Command` class and implements the following operations:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `BrowseCommand#sortBrowseList()` - Handles any sorting of `Anime` objects. "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `BrowseCommand#buildBrowseOutput()` - Creates the output string to be printed to users."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "These are the two fundamental operations that will carry out the execution of the browse command."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`BrowseCommand` will be constructed with default values. This ensures that even when there is no input provided, "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "it can still perform a default browse and return relevant useful information."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Before going any further, please refer to this helpful table of the `BrowseCommand` parameters for reference."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "These are the attributes that will define the scope of a browse command."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Attribute | Value  | Function          |"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| ---       | ---    | ---               |"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| order     | 0      | Ascending         |"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| order\t    | 1      | Descending        |"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| sortType  | 0      | No Sort           |"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| sortType  | 1      | by name           |"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| sortType  | 2      | by rating         |"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| sortType  | 3      | back to original  |"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| page      | \\\u003e\u003d 1  | page number       |"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003e :bulb: The magic values have already been refactored out into constant variables."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Given below is an example usage scenario to showcase how a `BrowseCommand` will behave at each step. "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "This example will utilise a small sample list of `AnimeData` and a page size of `3`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003e :memo: It is set to `20` as default in actual execution. "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "**Step 1:** When the user enters the command for `Browse`, the input will be processed and parsed by `parser.java` and "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "then further parsed by `BrowseParser.java`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "**Step 2:** Upon completion of parsing and input validation, `BrowseParser.java` will create an executable `BrowseCommand` "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "object and return it to `main`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "**Step 3:** Once the `BrowseCommand` object is executed, it will firstly process the `AnimeData` by calling on its `BrowseCommand#sortBrowseList()` operation to identify the order that the list will need to be in (if any)."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "For this case since it is a default browse operation, there is no sorting performed."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "**Step 4:** Now `BrowseCommand` will utilise its `BrowseCommand#buildBrowseOutput()` operation to access all "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`Anime objects within the page window, as shown in the diagram below."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![Browse Object Diagram 1](images/Browse-Default-State.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 11: Browse Default State Object Diagram*"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "In this example, it fetches the following `Anime` objects."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```text"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Charlie"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Echo"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Gamma"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "If the 2nd page of the list was requested instead with the command `browse -p 2`. "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "`BrowseCommand#buildBrowseOutput()` will shift its page window down by 1 page as depicted in the diagram below."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![Browse Object Diagram 2](images/Browse-Default-State2.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 12: Browse Next Page Object Diagram*"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "**Step 5:** At each `Anime` object, it will access its methods to get the relevant information about that anime series and construct a printable result for the user to view."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "**Step 6:** After all `Anime` objects in the page window have been retrieved, it will return the printable result back to `BrowseCommand#execute()`. At this point it will utilise `BrowseCommand#sortBrowseOption()` again to reset the `AnimeData` list to its original form if it has been altered."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "**Step 7:** Once `AnimeData` has been sorted, it will return the result back to `Main` for printing."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Currently, this result is not very exciting as it is just based on the Anime ID which is assigned randomly by our data source, AniList."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "An example scenario would be browsing the 2nd page of a **sorted** list in ascending order."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The only step that would change would be at Step 3, where it will perform sorting of `AnimeData` list. "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![Browse Object Diagram 3](images/Browse-Sorted-State.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 13: Browse Sorted State Object Diagram*"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "As you can see, even though the page window is at the same position as the previous command, "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "the list is different as it has been sorted."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "From this point onwards, the operation will continue as per the steps above but during the final `BrowseCommand#sortBrowseList()` call in step 6. It will perform a sort to reset the list."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Here is the sequence diagram to better illustrate the lifecycle of a browse command."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![Browse Sequence Diagram](images/Browse-SequenceDiagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 14: Browse Sorted Sequence Diagram*"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 4.2.2 Design Consideration"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Here are some various design considerations that was taken when implementing the `browse` feature."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Aspect: **How should the program handle the sorted list**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The first design consideration was how the sorting should be carried out. The main issues here are the time and storage complexity."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Approach | Pros | Cons  |"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| 1. Leaving the list unsorted        | - No complexity and fastest approach  | - List will be unsorted and may cause confusion to users |"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| 2. Resorting the list again         | - The list will be back into its original form before browsing    | - May hinder performance as resorting could take time \u003cbr/\u003e - Requires altering of the main list |"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| 3. Cloning a duplicate list to sort | - The list will be back to its original form \u003cbr/\u003e - The main list will not be affected at all | - Expensive operation that will require large storage and time complexity |"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "While the 1st approach is the fastest, the consequence of leaving the main list unsorted is too great and may produce a "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "lot of uncertain results as well as confuse the user. Although the 3rd approach provides the best benefit, "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "its complexity may end up violating the project’s memory limit constraint if the list is large. "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Therefore, the 2nd approach was adopted, as its performance cost outweighs the others."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Aspect: **Should the program use an interactive or static browsing approach**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The second design consideration was how to carry out the page by page browsing as demonstrated above."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The main concern here was cohesiveness and interactivity."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Approach | Pros | Cons  |"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| 1. Interactive browsing, users can `flip` pages and `pick` to view specific anime | - Fluid and seamless browsing session. \u003cbr/\u003e- Very good usability. | - Would require `BrowseCommand` to get user input. |"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| 2. Static browsing, users specify the page they want to access. | - Completely decoupled from Ui component \u003cbr/\u003e- Allows for browse to be more precise in finding what the user wants |  - Not as seamless as the first approach but still usable. |"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Though the 1st approach could have created a more authentic browsing feature it is not a good fit of the OOP requirements."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "While the 2nd approach allows for more precise browsing of pages means that more experienced users are able to utilise the "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "tool quicker and to the same effect as the first approach. "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "As a result, the 2nd approach was adopted in favour of having an application that is highly object-oriented."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 4.3 View Anime Information Feature"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The `info` command allows the user to view all the relevant information regarding a specific anime that the user specifies. This allows them to know more about a particular anime."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "#### 4.3.1 Current Implementation"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The view information command is currently implemented by the `InfoCommand`. The user has to give an input of the form `info -a \u003cANIME_ID\u003e`, and this would allow users to check all the information available for the ANIME_ID they have specified."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Given below is an example of the usage scenario of view information command and how it behaves at each step."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 1:** `Ui` would receive input in form of `info \u003cANIME_ID\u003e` in the `Main` class and pass it into `Parser` class"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003e :bulb: The ANIME_ID specified has to be an integer value as specified by the index of Anime in the AnimeData. "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 2:** The `Parser` class would then extract out `info` from the input given, which will instantiate a new `InfoParser` object, in which `InfoCommand` object is constructed as well."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 3:** The `InfoParser#parse()` method will be invoked, and this will validate the field given by the user. Once validated, ANIME_ID will be set inside the `InfoCommand` object that was created previously. `InfoCommand` object will be returned back all the way to `Main`. `InfoParser` is then terminated."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Figure 14 below shows the sequence diagram for steps 1 to 3 of the Information feature"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "![Info Command Step 1 to 3 Sequence Diagram](images/InfoCommand-Step1-3-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 15: Info feature steps 1 to 3 sequence diagram*"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 4:** `Main` will then call `InfoCommand#execute()`. In here the ANIME_ID will be validated and `AnimeData#returnAnimeInfo()` method is invoked, returning a string containing information regarding that particular ANIME_ID."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 5:** The string is returned all the way back to `Main` and printed out by `Ui`."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 6:** `InfoCommand` is terminated"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The diagram below is the sequence diagram from steps 4 onward."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "![Info Command Step 4 to 6 Sequence Diagram](images/InfoCommand-Step4-6-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 16: Info feature steps 4 to 6 sequence diagram*"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "#### 4.3.2 Design Consideration"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "This section shows the considerations taken when designing this feature."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Aspect: **Using anime title or Anime ID as the field for input**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| Approach | Pros | Cons  |"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| 1. Use anime title as input | - Easier for users who know anime titles | - Users will have to input the full anime title \u003cbr/\u003e - The program has to search through the whole list of anime data |"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| 2. Use anime ID as input | - Users will only need to input one single integer | - Users will have to search for the anime ID if they do not know the ID |"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "We decided to go with approach 2, as it would enhance the user experience of not having to key in the full anime title. At the same time, using anime ID as input would allow the program to be able to retrieve the full anime information much quicker, instead of having a title to search against the whole data of anime to retrieve information."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 4.4 Workspace Feature"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Similar to a desktop, **AniChan** has a workspace feature which allows users to organise data in separate containers and switch between them to avoid intermixing of information."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "`Workspace` is primarily the layer of code that sits between the user, and the rest of **AniChan** data management features (i.e., `Watchlist`, `Bookmark`). "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "As such, most of the code that manages `Workspace` can be found in [User.java](https://github.com/AY2021S1-CS2113T-F12-2/tp/blob/master/src/main/java/anichan/human/User.java) "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "and [Workspace.java](https://github.com/AY2021S1-CS2113T-F12-2/tp/blob/master/src/main/java/anichan/human/Workspace.java)."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003e :memo: Upon running the program for the first time, a workspace named `Default` is created. A similarly named folder will also be created in `/data` directory, managed by our `Storage` class."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "#### 4.4.1 Current Implementation"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Command Option        | Workspace Command                      | Description field |"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "|---|---|---|"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| `-n`       | `WorkspaceCommand#createWorkspace()`              | Creates new workspace |"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| `-s`       | `WorkspaceCommand#switchWorkspace()`              | Switches to specified workspace |"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| `-l`       | `WorkspaceCommand#listWorkspace()`                | Lists existing workspace(s)           |"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| `-d`       | `WorkspaceCommand#deleteWorkspace()`              | Deletes specified workspace |"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The `WorkspaceCommand` is instantiated by `WorkspaceParser`, and it requires 2 parameters: "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   `commandOption` (mandatory)."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   `workspaceName` (mandatory unless option `-l` is specified)."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Given below is an example usage scenario showing how the command behaves at each step when the user tries "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "to **create new** `Workspace`:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Step 1:** User launches the application for the first time. The `User` will be initialized with an initial `Workspace` named `Default`, and the `activeWorkspace` pointing to it and `workspaceList` `ArrayList` containing it."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![Workspace Command Initial State Diagram](images/WorkspaceCommand-Initial-State.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 17: Workspace Command Initial State*"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Step 2:** User enters the command `workspace -n Netflix Animation Studio`, the input will be processed and parsed by `Parser.java` and then further parsed by `WorkspaceParser.java`."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Step 3:** Upon completion of parsing and input validation, `WorkspaceParser.java` will create a `WorkspaceCommand` object with the extracted `commandOption` and `workspaceName` parameter and return it to `Main`."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Step 4:** `Main` calls `WorkspaceCommand#execute()` and it checks the `commandOption` before running `WorkspaceCommand#createWorkspace()` accordingly."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Step 5:** `WorkspaceCommand` firstly calls `User#addWorkspace()` to add a new `Workspace` to `User`, then makes an empty `ArrayList` of `Watchlist` using `User#setWatchlistList` for the `User`."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Finally, it uses `storageManager#saveWorkspace()` to save the `Workspace` to disk."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![Workspace Command After Creation Diagram](images/WorkspaceCommand-After-Create.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 18: Workspace Command After New Workspace Creation*"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Step 6:** If successful, `WorkspaceCommand` returns the successfully created workspace message to `Main`."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Likewise, the operations to switch, list, and delete follows a similar execution process. "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The following diagrams will continue **from step 6**, and will illustrate the changes to the `Workspace` `ArrayList`."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Step 7:** User keys in `workspace -s Netflix Animation Studio` to switch active workspace."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![Workspace Command After Switch Diagram](images/WorkspaceCommand-After-Switch.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 19: Workspace Command After Workspace Switch*"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Step 8:** User keys in `workspace -d Default` to delete the workspace named `Default`."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![Workspace Command After Switch Diagram](images/WorkspaceCommand-After-Delete.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 20: Workspace Command After New Workspace Delete*"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The following sequence diagram illustrates how `Workspace` creation in the example above works:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003e :memo: The other options (`-s`, `-l`, `-d`) follows a similar process, only the list and switch option does not interact with `StorageManager` and `Watchlist`."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![Workspace Command Sequence Diagram](images/WorkspaceCommand-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 21: Workspace Command After New Workspace Delete*"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "#### 4.4.2 Design Consideration"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "This section shows some design considerations taken when implementing the `Workspace` feature."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Aspect: **How can `Workspace` be identified?**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "As most commands in `WorkspaceCommand` operates on an individual `Workspace`, there needs to be some way to identify each of them uniquely. "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Approach | Pros | Cons  |"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Identify using a number ID | Users can quickly `switch` and `delete` `Workspace` just by keying in a number | Operations like `delete` is irreversible and is not done often, accidentally keying in the wrong number can be catastrophic |"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Identify using name  | If user remembers the name, he can easily `switch`/`delete` without using the `List` command first | User may waste time typing long workspace names |"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We have decided to use `name` to identify `Workspace` as it is more intuitive for the end-user. "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "This also avoids the need to maintain an integer `ID` for each `Workspace`."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Aspect: **`Workspace` name restrictions**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "As `Workspace` is identified by their names, and other classes like `Storage` relies on the name to make folders for data storage purposes."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Should we allow the user full discretion to naming `Workspace`?"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Approach | Pros | Cons  |"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Yes  | Allows user more flexibility | Confusing or unexpected names may lead to unexpected outcomes |"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| No   | Eliminate unexpected names which could lead to unexpected outcomes | Less flexibility and more code required to enforce |"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "For example, a user may provide `new workspace__` as a `Workspace` name, this may confuse the user in future when he tries to list "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "all `Workspace` as the space characters are whitespaces. Hence, enforcing no extra whitespaces was implemented. "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "In addition, we also prevent case-insensitive `Workspace` creation, use of special characters, and long names (i.e. length above 30), as they may cause issues when creating folders on certain file systems."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Aspect: **Loading `Workspace` on program start**"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "As there needs to be an `activeWorkspace` set at all times for operations such as adding `Watchlist`. How do we determine which `Workspace` should be chosen if the `User` owns multiple `Workspaces`?"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Approach | Pros | Cons  |"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Scan from data folder and pick first result  | Able to adapt to changes even if malicious edits were made to file system | User may need to switch to his favourite `Workspace` on each startup, if any |"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| Store last used `Workspace`                  | `User` might gain some convenience of not needing to switch to his favourite `Workspace` | Prone to potential issues from the file system |"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We picked the first approach as it is the safer option. By allowing **AniChan** to scan and adapt to file system changes (e.g. `User` accidentally moves/renames/deletes `Workspace` on his hard drive), we avoid potential issues of relying on old information created in previous runtime which may hinder user experience."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 4.5 Watchlist Management Feature"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The watchlist management feature aims to provide translators with a simple way to keep track of animes by being able to group animes based on their own criteria. This allows them to stay organized and focused on their work rather than being concerned over management issues."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "#### 4.5.1 Current Implementation"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The watchlist management feature is facilitated by `WatchlistCommand`. By running the command `watchlist` with the relevant options and arguments, `WatchlistParser` will construct `WatchlistCommand` which will be used to execute the user\u0027s instruction. The command takes in three parameters: "
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `option` (mandatory)."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `watchlistName` (mandatory only if the option `-n` was specified)."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   `watchlistIndex` (mandatory only if the option `-s` and `-d` was specified)."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Below is a table describing the 4 options supported by the `watchlist` command, including the methods (parameters are omitted) invoked for the option."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: The term **active watchlist** refers to the watchlist that the user is using to add anime into or remove anime from, and this is tracked by `activeWatchlist` in `Workspace`."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Option | Method | Description |"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| `-n` | `WatchlistCommand#createWatchlist()` | Creates a new watchlist |"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| `-l` | `WatchlistCommand#listAllWatchlist()` | Lists all watchlist in the workspace |"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| `-s` | `WatchlistCommand#selectWatchlist()` | Selects a watchlist to be the new active watchlist |"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| `-d` | `WatchlistCommand#deleteWatchlist()` | Deletes a watchlist |"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Given below is an example usage scenario showing how the `WatchlistCommand` behaves at each step. In this example, we will look at the **watchlist creation process**."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![WatchlistCommand Initial State](images/WatchlistCommand-Initial-State.png)"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 22: WatchlistCommand Initial State*"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 1:** User executes the command `watchlist -n NewAnime`. The application invokes `Parser#getCommand()` and because the command type is \"watchlist\", `WatchlistParser#parse()` is invoked to parse, validate, and construct `WatchlistCommand` with \"-n\" and \"NewAnime\". The created object is then returned to `Main`."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 2:** `WatchlistParser` is terminated at this point. The application invokes `WatchlistCommand#execute()` to execute the user\u0027s instruction."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 3:** `WatchlistCommand` first invokes `User#getActiveWorkspace()` to identify the workspace to add the new watchlist, and according to the instruction \"-n\", `WatchlistCommand#createWatchlist()` is invoked."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 4:** It first invokes `activeWorkspace.getWatchlistList()` to initialise `watchlistList`. A `Watchlist` object is then constructed with the name \"NewAnime\" and validated before it is added to `watchlistList`."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 5:** `StorageManager#saveWatchlist()` is invoked to save the updated `watchlistList`, and finally, the result of this command execution is returned to `Main` for it to be printed via `Ui#printMessage()`."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: The validation checks ensure the watchlist name is unique in `watchlistList`, is not empty, and contains less than or equal to 30 alphanumeric characters and/or spaces. "
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: The details of all `Watchlist` object for a workspace will be saved in the file \"watchlist.txt\" in the workspace folder."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 6:** `WatchlistCommand` is terminated."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![WatchlistCommand After Create State](images/WatchlistCommand-After-Create-State.png)"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 23: WatchlistCommand After Create State*"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "All the other options in the watchlist command also follows a similar execution process. The following diagrams will **continue from step 6**, and it will show you how the state of the application changes as it continues to execute the select and delete option."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: The list option (`-l`) is not shown as there will not be any change in the application state after its execution."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 7:** The user executes `watchlist -s 2` to change his active watchlist to the second watchlist (“NewAnime”) in the list."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![WatchlistCommand After Select State](images/WatchlistCommand-After-Select-State.png)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 24: WatchlistCommand After Select State*"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Step 8:** The user now decides that the \"NewAnime\" watchlist is no longer needed and decides to execute `watchlist -d 2` to delete it."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![WatchlistCommand After Delete State](images/WatchlistCommand-After-Delete-State.png)"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 25: WatchlistCommand After Delete State*"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The sequence diagram presented below depicts the interaction between the components for running the command, `watchlist -n NewAnime`."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: The sequence diagram shows the interaction from step 2 onward."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: The other options (`-l`, `-s`, `-d`) follow a similar process, only the list and select option does not interact with `StorageManager`."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![WatchlistCommand Create Watchlist Sequence Diagram](images/WatchlistCommand-CreateWatchlist-Sequence-Diagram.png)"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 26: Sequence Diagram for `watchlist -n NewAnime`*"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 4.5.2 Design Considerations"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This section shows some design considerations taken when implementing the watchlist management features."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Aspect: **Saving watchlist data**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Approach | Pros | Cons |"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| After each command execution **(current design)**. | Data would not be lost if the application or system crashes midway. | Application might slow down when the data grows large. |"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| When the user exits the program. | Saving is more efficient and could improve performance. | User may lose their data if the application or system crashes midway. |"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Having considered both of these alternatives, we have decided to save watchlist data **after each command execution** because users may work on the application for long period and unexpected events can always happen. Losing work data can also be a frustrating and costly mistake to translators especially if these data are important."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aspect: **Watchlist name restriction**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Approach | Pros | Cons |"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| No restriction. | Users have more flexibility. | This may hinder user\u0027s vision of the input prompt and affects the usability. |"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Maximum of 30 alphanumeric characters and/or spaces, but cannot contain spaces only **(current design)**. | Ensure users have a easy to read input prompt. | Users have less flexibility in naming. |"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "While both alternatives are valid in their own ways, we have decided to **restrict watchlist name to a maximum of 30 alphanumeric characters and/or spaces, but cannot contain spaces only** because having a watchlist name that is lengthy and have special characters can muddle up the readability of the input prompt, and that would also affect the usability of the application."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 4.6 Add To Watchlist"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The `add` feature allows users to add an anime into the active watchlist they are currently at. This helps them keep track of the anime they would like to watch next."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "#### 4.6.1 Current Implementation"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The current implementation of the add to watchlist command requires the user to give an input in the form of `add \u003cANIME_ID\u003e`. This will allow users to add the ANIME_ID of the anime they want to add by calling the `addAnimeToList` method in the active `Watchlist` object. "
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Add to watchlist command extends the `Command` class, and the `parse` method in `AddToWatchlistParser` class is being called to validate the parameter that the user has entered."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Below is an example usage scenario of how add to watchlist command behaves at each step."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 1:** Starting from the `Main` class, the user first inputs `add \u003cANIME_ID\u003e`. The input will be taken in by the `Ui` class, and passed into `Parser` through `Parser#getCommand(userInput)`. "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003e :bulb: The ANIME_ID specified has to be an integer value as specified by the index of anime in the AnimeData. "
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 2:** The `Parser` class would then extract the `add` command out of the input and it will instantiate a new `AddToWatchlistParser` object, and its constructor would create a new `AddToWatchlistCommand` object."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 3:** `AddToWatchlistParser#parse()` is then called by the `Parser` class. This will validate the field that has been given, and then sets the anime index in the `AddToWatchlistCommand` object by calling the setter method. The `AddToWatchlistCommand` object will then be returned back to `Main` class. At this point, `AddToWatchlistParser` is terminated."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The figure below shows the sequence diagram of steps 1 to 3."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "![Add To Watchlist Command Step 1 to 3](images/AddToWatchlist-Step1-3-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 27: Sequence diagram for Add To Watchlist feature steps 1 to 3*"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 4:** `AddToWatchlistCommand#execute()` is then invoked in `Main`, which retrieve the active `workspace` through `AddToWatchlistCommand#getActiveWorkspace()`, and `Watchlist` object from `ActiveWorkspace#getActiveWatchlist()`."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 5:** `Watchlist#AddAnimeToList()` will then be called, passing in the anime index. This will then add the anime index into the ArrayList of integers storing all the animes in that `Watchlist`."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 6:** `commandResult` will then be passed back to `Main` to be printed out by `Ui`, and `AddToWatchlistCommand` is  terminated"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "For better illustration, Figure 27 below shows the sequence diagram of steps 4 to 6."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "![Add To Watchlist Command Step 4 to 6](images/AddToWatchlist-Step4-6-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 28: Sequence diagram for Add To Watchlist feature steps 4 to 6*"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "#### 4.6.2 Design consideration"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Below shows the considerations taken when implementing the `AddToWatchlist` feature. "
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Aspect: **Using anime title or anime ID as the field for input**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "This consideration is similar to our `info` feature consideration, so below is the same table we find in our `info` deature section."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| Approach | Pros | Cons  |"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| 1. Use anime title as input | Easier for users who remember anime titles | Users will have to input the full anime title  |"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| 2. Use anime ID as input | Users will only need to input one single integer | Users will have to search for the anime ID if they do not know the ID |"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Similarly, we decided to go with the second approach as this would be much easier for users to key in, and also faster for the program to find the anime the user wants to add into the watchlist."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 4.7 Remove From Watchlist"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The remove from watchlist feature allows users to remove a particular anime from their currently active watchlist. This would allow them to keep their watchlist clean of the anime that they have watched, leaving only those that they have not watched."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "#### 4.7.1 Current Implementation"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The remove from watchlist command currently requires the user to give an input in the format: `remove \u003cANIME_ID_IN_WATCHLIST\u003e`. The implementation of remove from watchlist command is similar to the add to watchlist feature with the only difference being that the user has to delete the index of the anime in that watchlist, instead of the actual ANIME_ID."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The usage scenario of remove from watchlist is similar to the add to watchlist command, but we will be using `RemoveCommand`, `RemoveCommandParser` and `Watchlist#removeAnimeFromList()`."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003e :bulb: ANIME_ID_IN_WATCHLIST is the index of anime inside the watchlist itself, not the anime index in AnimeData."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "#### 4.7.2 Design Consideration"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "This section describes the design considerations taken when implementing this feature."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Aspect: **which index to use when removing an anime**"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| Approach | Pros | Cons  |"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| 1. Use anime title as input | - Easier for users who know anime titles | - Users will have to input the full anime title \u003cbr/\u003e - The program has to search through the whole list of anime data |"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| 2. Use anime ID as input | - Users will only need to input one single integer | - Users will have to search for the anime ID if they do not know the ID |"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "We have decided to use approach 2 instead of 1, as it will not only will it be much faster for the program to delete one particular index instead of having to search through the whole list, it would be provide better user experience as the user will not need to search for the anime ID that he wants to remove in the case that he does not know the anime ID."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 4.8 View All Anime in Watchlist"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Users can view the anime that they have stored in a specific watchlist by using the `view` command. In doing so, they can easily check what anime they would like to watch next."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "#### 4.8.1 Current Implementation"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The `view` command is currently implemented by the `ViewWatchlistCommand`. It is instantiated by `Parser` and executed by `Main`. This allows users to view all the anime currently inside a `Watchlist` object. "
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "An example usage scenario on how view anime in watchlist behaves is given below."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 1:** In the `Main` class, the user will input `view [-v \u003cWATCHLIST_ID\u003e]`. `Ui` will take in this input and is passed into `Parser`."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 2:** In `Parser`, `view` will be extracted out of the input, leading to a new `ViewWatchlistParser` object being instantiated, and in the constructor, a new `ViewWatchlistCommand` is created."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 3:** `ViewWatchListParser#parse()` is then called in `Parser`, which will validate the parameter that was given by the user, if given. If the parameter is correct, the watchlist index will be set in the `ViewWatchlistCommand` object. If no parameter is given, then the active `Watchlist` object will be used."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 4:** The `ViewWatchlistCommand` object is then returned back to `Parser`, and back to `Main`. `ViewWatchlistParser` is terminated."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The sequence diagram for steps 1 to 4 is as shown in the figure below."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "![View Watchlist Command Step 1 to 4](images/ViewWatchlist-Step1-4-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 29: Sequence diagram for View Watchlist feature steps 1 to 4*"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 5:** The `ViewWatchlistCommand#execute()` would then be called by `Main`, in which the WATCHLIST_ID will be validated."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 6:** `ViewWatchlistCommand#buildAnimeInWatchlist()` will build a string containing all the anime name inside the seleceted `Watchlist`, and it will be returned to `Main`, where it will be printed out by `Ui`."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "**Step 7:** `ViewWatchlistCommand` is terminated"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The figure below is the sequence diagram for steps 5 to 7"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "![View Watchlist Command Step 5 to 7](images/ViewWatchlist-Step5-7-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 30: Sequence diagram for View Watchlist feature steps 5 to 7*"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 4.9 Bookmark Feature"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The `bookmark` feature aims to provide the user with the ability to create shortcuts to anime they wish to track. This feature further provides tools to monitor the progress of a series and make informative notes."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "#### 4.9.1 Current Implementation"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The Bookmark class uses three ArrayList to store bookmark entries of the user, these arraylists maintain information about the anime index, episode and notes. The synchronisation between arraylist is required so that it enables easy retrieval of bookmark information using the bookmark index on the three arraylist."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![Bookmark Class Diagram](images/Bookmark-Class-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 31: Bookmark Class Diagram*"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "`BookmarkCommand` is instantiated by `BookmarkParser`, and requires a mandatory BookmarkAction. With the BookmarkAction the parser will determine the required field for the BookmarkCommand. Below table shows the required field for each action:"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| Bookmark Command | Bookmark Action | Required field |"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "|---|---|---|"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| Add              | a               | Anime ID       |"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| Delete           | d               | Bookmark ID    |"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| List             | l               | Not required |"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| Episode          | e               | Bookmark ID, Episode |"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| Note             | n               | Bookmark ID, Note |"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| Remove Note      | r               | Bookmark ID, Note ID |"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| Info             | i               | Bookmark ID |"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Given below is the example usage scenario and how the `Bookmark` command behaves at each step."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003e :bulb: The command is using one-based indexing while the program stores and recognises the zero-based indexing. The following example will use one-based to be consistent with the command. "
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 1:** User inputs command `bookmark`,  the application then calls `Parser#getCommand()` and passes the command to it."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 2:** `BookmarkParser` extracts “Bookmark Action” from the command, and based on the command type, it will determine the respective required field. The `BookmarkParser` is responsible for validating the input parameters and will throw an `AniException` when encountering unrecognised inputs."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "For example: `bookmark 2 -e 5`, the parser will create `BookmarkCommand` and call the method setBookmarkAction(“e”), setBookmarkIndex(2) and setBookmarkEpisode(5)."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 3:** The application calls `BookmarkCommand#execute()` and the command will use the `BookmarkAction` to do a corresponding validation check on the field before calling the  Bookmark Operations."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Below is a list of bookmark operations:"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   `Bookmark#addAnimeBookmark()`: Adds the `Anime` index provided into the bookmark list."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   `Bookmark#getListInString()`: List all entries within the `Bookmark` using the `Bookmark` index together with the `Anime` name."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   `Bookmark#deleteAnimeBookmark()`: Remove the `Bookmark` index provided from the bookmark list."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   `Bookmark#editBookmarkEpisode()`: Edit the current episode for a Bookmark entry ."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   `Bookmark#addNote()`: Add a note for a Bookmark entry."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   `Bookmark#removeNote()`: Remove a note from a Bookmark entry."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   `Bookmark#getAnimeInfoFromBookmark()`: Retrieve the anime info on the anime id kept at the specified bookmark entry."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   `Bookmark#getBookmarkEpisode()`: Retrieve the episode field for a Bookmark entry."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   `Bookmark#getNoteInString()`: Retrieve notes in a list within the specified bookmark entry."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 4:** The user executes `bookmark -a 430` command to add the anime id: 430 into the bookmark. `Bookmark#addAnimeBookmark()` will then add the anime index to the ArrayList within the bookmark."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![Bookmark State After Add Diagram](images/Bookmark-After-Step4.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 32: Bookmark Entry After Add*"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003e :memo: The table shows the three ArrayList objects in the column with the bookmark id. When adding a new anime id into the bookmark, the bookmark will initialise the anime episode to be 0 together with an empty note object."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 4.5:** The user executes `bookmark -a 1` and `bookmark -a 410` to add anime id 1 and 410 to the bookmark."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![Bookmark State After More Add Diagram](images/Bookmark-After-Step4.5.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 33: Bookmark Entries with more Add*"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The following sequence diagram shows how the `Add Bookmark` operation works:"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![Bookmark Add Command Sequence Diagram](images/Bookmark-Add-Sequence-Diagram.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 34: Bookmark Add Command Sequence Diagram*"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 5:** The user executes `bookmark -l` command to list all anime within the bookmark. `Bookmark#getListInString()` will use the Anime index stored in the bookmark list and retrieve the anime name from AnimeData, the method then returns the bookmark index with the anime name."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```text"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Listing all anime in bookmark:"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\t1. To Heart 2"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\t2. Cowboy Bebop"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\t3. InuYasha the Movie 2: The Castle Beyond the Looking Glass"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 6:** The user executes `bookmark -d 1` command to delete the bookmark entry at bookmark id: 1. `Bookmark#deleteAnimeBookmark()` will then remove the Bookmark index from the `Bookmark`."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![Bookmark State After Delete Diagram](images/Bookmark-After-Step6.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 35: Bookmark Entries After Delete*"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003e :memo: The ArrayList comes with an inbuilt function to enable easy deletion at index, but the bookmark index of subsequent entries will decrease by 1."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 7:** The user executes `bookmark 1 -e 5` command to edit the episode for the first bookmark entry. `Bookmark#editBookmarkEpisode()` will change the episode field for that bookmark entry."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![Bookmark State After Edit Episode Diagram](images/Bookmark-After-Step7.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 36: Bookmark Entries After Edit Episode*"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 8:** The user executes `bookmark 1 -n Schedule push back` command to add a note for a bookmark entry. `Bookmark#addNote()\u0027 will then add a note to the bookmark entry at bookmark id:1."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![Bookmark State After Add Note Diagram](images/Bookmark-After-Step8.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*Figure 37: Bookmark Entries After Add Note*"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 9:** The user executes `bookmark 1` command to view all information of the first bookmark entry. The command will use `Bookmark#getAnimeInfoFromBookmark()` to retrieve the detailed anime info for the anime id at that bookmark, `Bookmark#getBookmarkEpisode()` for the tracked episode by the user and `Bookmark#getAnimeNotesFromBookmark()` will retrieve all notes in a list format. With all the relevant information on the bookmark entry, the result will be displayed to the user (Figure 26: Bookmark Entries After Edit Episode)."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```text"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Here is the information for that anime."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Index: 1"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Name: Cowboy Bebop"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Episodes: 26"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Release Date: 03/Apr/1998"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Rating: 86"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Genre: [Action, Adventure, Drama, Sci-Fi]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Current Episode: 5"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Notes for anime:"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "1. Schedule push back"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "**Step 10:** The user executes `bookmark 1 -r 1` command to remove a note from a bookmark entry. `Bookmark#removeNote()` will remove the note id:1 from the first bookmark entry. The resulting state of the remove note command will look exactly the same to the state before the note was added."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "![Bookmark State After Edit Episode Diagram](images/Bookmark-After-Step7.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*Figure 38: Bookmark Entries After Edit Episode*"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "#### 4.9.2 Design consideration"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "This section describes the various design considerations taken when implementing the `Bookmark` feature."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Aspect: **How should the bookmark entries be kept**"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The first design consideration was the data structure on how to bookmark entries should be maintained. The main issue here was the cohesiveness between the `bookmark` object and the `workspace`."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| Approach | Pros | Cons  |"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| 1. Usage of three ArrayList to store anime index, Episode, and Notes **(current design)**     | - Easy to reference objects within ArrayList using its index and it is easy to implement | - Require to synchronise the three ArrayList so the same index reference the components of the same bookmark entry |"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| 2. Use a `BookmarkManager` to handle bookmark features                  | - Do not need to maintain multiple Arraylist    | - One extra layer of unnecessary abstraction (nesting), while introducing more coupling and dependency.  |"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "While both alternatives have their own benefits, we have decided to use **three ArrayList to keep the information of the bookmark entries**. Considering the structure of how bookmark is within the workspace, we prefer to directly use the bookmark as the bookmark manager will create another layer of unrequired abstraction."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Aspect: **How should bookmark entries keep anime information**"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The second design consideration was how to keep the reference to the anime object. The main issue here was the storage and duplication of data."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| Approach | Pros | Cons  |"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| --- | --- | --- |"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| 1. Keep only the anime index information within the bookmark **(current design)** | - Easy to add and delete, which also simplifies the information to keep in offline storage. | - Bookmark Commands have to communicate with AnimeData for anime-related functionalities. |"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| 2. Keep the entire anime object in Bookmark                  | - Do not need to reference AnimeData for anime information    | - Keep a duplicate of anime data, requires synchronisation \u003cbr/\u003e - Hard to keep anime object information offline |"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "We have decided to implement the first alternative, **the bookmark will keep the anime index within bookmark entries**. Although the lookup for anime information of a bookmark entry requires a query to AnimeData, the management and offline storage of the bookmark entries will be more efficient (keeping only anime index). There are more considerations like synchronisation and duplication of the object data that comes with using anime object."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 5. Documentation, Logging, Testing, and DevOps"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "This section details the documentation, logging, testing and dev-ops setup used in this project as well as information on how to use them."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 5.1 Documentation"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We use **Jekyll** to manage documentation. We recommend that you document your features implementation and code changes so that other developers are aware of its architecture."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The `docs/` folder stores the documentation of this project. You can learn more about how to setup and maintain the project website at with [this guide](https://se-education.org/guides/tutorials/jekyll.html)."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 5.2 Logging"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We encourage the use of logger in this project as they provide deeper insights than error messages which can greatly help developers identify bugs and simplify their logging process."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We are using `java.util.logging`  package for logging. The logger can be accessed using the  `AniLogger`  class. "
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "`AniLogger` is used to manage the logging levels and logging destinations. Based on the default setting, logs will be written to both console and file `data/AniChan.log`."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The  `Logger`  for a class can be obtained using  `AniLogger.getAniLogger(Class)`  which will log messages according to the specified logging level."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We use the following log levels:"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   `Level.SEVERE` A critical failure, which prevents normal execution of the program."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   `Level.WARNING`Indicates a potential problem, but can proceed with caution."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   `Level.INFO` General noteworthy information of the program."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 5.3 Testing"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Testing is integral to the development of a reliable software. Before making a pull request, please ensure that all tests pass. You are recommended to write tests as you add new code to the program."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We employ both unit and integration tests for our codes. They are located in `./src/test` directory."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 5.3.1 Running Tests"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "There are primarily 2 ways to run the tests."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Method 1: Using IntelliJ**"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   To run all tests, right-click on the `src/test/java` folder in the project panel and choose `Run Tests`."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Method 2: Using Gradle**"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   Open a terminal and navigate to project directory, run command `./gradlew clean checkstyleMain checkstyleTest test`."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "### 5.4 Development and Operations (DevOps)"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We employ DevOps to ensure consistent release of good quality code and write-ups. "
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "These tools allow us to detect and mitigate bugs before they are merged to the repository."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "#### 5.4.1 Build Automation"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "This project uses Gradle for build automation and dependency management."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "It automates tasks such as:"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   Managing library dependencies"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   Analyzing code for style compliance"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   Running tests"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The gradle configuration file can be located in `build.gradle`."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "#### 5.4.2 Continuous integration (CI)"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We use [GitHub Actions](https://github.com/features/actions) and [Travis CI](https://travis-ci.org/) as our tool for Continuous integration."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Their configuration is complete and there is no need to modify them, these CI will automatically run checks on every commit to **AniChan** repository."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "If you wish to modify these tools, you may find their configuration at:"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **GitHub Workflow:** `.github/workflows`"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **Travis CI:** `.travis.yml`"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "##### 5.4.2.1 Code Coverage"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "As part of CI, this project uses [Codecov](https://codecov.io/) to generate coverage reports. "
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "If you wish to configure Codecov for your fork, you may refer to [Codecov Docs](https://docs.codecov.io/docs)."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "##### 5.4.2.2 Repository-wide checks"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. "
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "These checks include files from the entire repository and are useful in checking for rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "These checks are POSIX shell scripts (i.e. platform dependent to Linux and macOS). "
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "To run all checks, execute the following at project root `./config/travis/run-checks.sh`."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "If you wish to add new checks, simply add the check file with a filename `check-*` to the `./config/travis/` and the `run-checks.sh` script will automatically run it."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### A.1 Target User Profile"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Professional anime translators."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Works on multiple projects and with various companies."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Has difficulty managing their time and information."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Prefers command-line desktop applications."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Able to type fast."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### A.2 Value Proposition"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Helps the target user estimate the time needed to translate their scripts."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Allows the user to organise work from different projects and companies into workspaces."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Allows the user to write and refer to notes on different anime series while translating."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Find relevant information regarding an anime series quickly."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Organize anime into different watchlists for different genres."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Portable and works offline."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| Version | As a ... | I want to ... | So that I ... |"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| --- | --- | --- | --- |"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| v1.0 | user | create new watchlist | can keep track of animes easily based on my defined criteria |"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| v1.0 | user | add and remove an anime to a watchlist | can organise my anime into the defined criterias |"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| v1.0 | forgetful user | find out all watchlist I have created | can find out what watchlist I have |"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| v1.0 | user | save the data I have created | can remember what I have done |"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| v1.0 | user | load the data I created previously | can continue to work on these data |"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| v1.0 | new user | view all available commands | can easily find a specific command and its usage |"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| v1.0 | user | be able to browse through all anime series | can see easily what anime are available  |"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| v1.0 | user | be able to sort my browsing session | will only browse through relevant data |"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| v1.0 | freelance translator | be able to create new workspaces | can have a clear separation of my work at different companies |"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "| v1.0 | freelance translator | switch between workspaces | can swap my workspace to a specific company that my current project is tied to |"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| v1.0 | forgetful user | bookmark specific anime | remember which anime I am currently interested in |"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| v1.0 | forgetful user | set an episode for each bookmarked anime | can remember which episode I\u0027m watching or translating |"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| v2.0 | translator | write notes for a bookmark | can remember helpful information regarding a specific anime series |"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| v2.0 | translator | remove notes for a bookmark | can remove outdated information or mistakes in my notes |"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| v2.0 | user | view detailed information of a specific anime | can find out more about that anime series |"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| v2.0 | user | be able to select a watchlist from my list of watchlist to use | can stay focus on working on one watchlist |"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| v2.0 | user | delete watchlist that I no longer needs | can keep my list of watchlist organized and up-to-date |"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| v2.0 | translator | estimate the time needed to translate a script | can better manage and plan my time |"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| v2.0 | user | search for a specific anime with a keyword | can find an anime series without remember its full title |"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| v2.0 | user | search for all anime in a genre | can find all similar types anime  |"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1.  The application should work on major operating systems (OS) such as Windows and Linux that have `Java 11` installed."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "2.  Users with fast typing speed should be able to accomplish tasks easily and faster than when they were using mouse."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3.  The application should be easy to use with an accompanying User Guide and/or Developer Guide."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "4.  The application should utilize memory resources efficiently."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "5.  The application should be responsive."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## Appendix D: Instructions for Manual Testing"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### D.1: Launch and Shutdown"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### Initial Launch"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1.  Download the jar file and copy it into an empty folder."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "2.  Open a new command prompt or terminal and navigate to the directory containing `AniChan.jar`."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3.  Enter the command `java -jar AniChan.jar` to launch **AniChan**."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "4.  { user setup process to be added }."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :bulb: This is what the input prompt means: **WORKSPACE-NAME (WATCHLIST-NAME) #\u003e**"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### Shutdown"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1.  To exit **AniChan**, enter the `exit` command."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### D.2: Estimate the time needed to translate a script"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1.  Estimating the time needed to translate a script."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1.  Prerequisite: Have a non-empty `script.txt` file in the current workspace folder."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        1.  Create a `.txt` file and name it \"script\" such that the file name with the file extension is `script.txt`, then fill it up with some content (i.e. random words and sentences)."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        2.  Go to the folder containing `AniChan.jar`."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        3.  Open the `data` folder (if it does not exist, restart **AniChan**)."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        4.  In the `data` folder, find and open the folder named after the current workspace (if the input prompt shows `Default (myWatchlist) #\u003e`, then look for the folder named \"Default\" as that is the current workspace name)."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        5.  Move `script.txt` into this folder (i.e. `data/Default/script.txt`)."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    2.  Test case: `estimate script.txt`. \u003cbr/\u003e"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    Expected: 3 estimation timings are generated and printed."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    3.  Test case: `estimate script.txt -wph 550`. \u003cbr/\u003e"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    Expected: 1 estimation timing is generated and printed."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        1.  `estimate`."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        2.  `estimate x` (where x is not a `.txt` file, or it is a file path)."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        3.  `estimate script.txt -wph x` (where x is a negative number or a word)."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :memo: The file name (including extension) does not have to be `script.txt`, it is named as such for the convenience of testing."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### D.3: Creating watchlist"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1.  Creating a watchlist with a unique name."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1.  Prerequisite: Watchlist list does not have a watchlist named \"newWatchlist\"."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    2.  Test case: `watchlist -n newWatchlist`. \u003cbr/\u003e"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    Expected: A empty watchlist named \"newWatchlist\" is created, and a message indicating the watchlist was created successfully is printed."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        "
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    3.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        1.  `watchlist -n`."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        2.  `watchlist -n x` (where x is a non-unique watchlist name, exceeds 30 characters, or it contains non-alphanumeric characters)."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### D.4: Listing all watchlist(s)"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1.  Listing all created watchlist(s)."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1.  Prerequisite: The watchlist list in the current workspace is not empty."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    2.  Test case: `watchlist -l` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    Expected: The names of all watchlist in the current workspace is printed."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    3.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        1.  `watchlist -l x` (where x is any additional parameters or values)."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### D.5: Selecting a watchlist to be the new active watchlist"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1.  Selecting a watchlist to be the new active watchlist."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1.  Prerequisite: The watchlist list in the current workspace has at least 2 watchlist, and **the first watchlist is the active watchlist**."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    2.  Test case: `watchlist -s 2` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    Expected: The second watchlist in the list becomes the new active watchlist, and a message indicating the name of the new active watchlist is printed."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    3.  Test case: `watchlist -s 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    Expected: An error message indicating that the selected watchlist is already the active watchlist is printed."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        1.  `watchlist -s`"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        2.  `watchlist -s x` (where x is a negative number, a word, or an additional parameter)."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### D.6: Deleting a watchlist"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "1.  Deleting a watchlist."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1.  Prerequisite: The watchlist list in the current workspace has at least 2 watchlist, and **the first watchlist is the active watchlist**."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    2.  Test case: `watchlist -d 2` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    Expected: The second watchlist in the list is deleted, and a message indicating the name of the deleted watchlist is printed."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    3.  Test case: `watchlist -d 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    Expected: The first watchlist in the list is deleted, and a message indicating the name of the deleted watchlist, and the name of the new active watchlist is printed."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    "
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        1.  `watchlist -d`"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        2.  `watchlist -d x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### D.X: Adding an anime to active watchlist"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "1.  Adding an anime to active watchlist."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    1.  Prerequisite: The active watchlist does not contain the anime to be added."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    2.  Test case: `add 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Expected: The anime with index of 1 is added into the active watchlist, and a message with the name of the anime is printed."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    3.  Test case: `add 3` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Expected: The anime with index of 3 is added into the active watchlist, and a message with the name of the anime is printed."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    4.  Other incorrect commands to try:"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        1.  `add`"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        2.  `add x` (where x is a negative number, zero, a word, or a number exceeding the number of anime in the database)"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### D.X: Removing an anime from active watchlist"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "1.  Removing an anime from active watchlist."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    1.  Prerequisite: The active watchlist must contain at least one anime."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    2.  Test case: `remove 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Expected: The first anime in the watchlist is deleted, and a message with the name of the anime is printed."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    3.  Test case: `remove 3` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Expected: The third anime in the watchlist is deleted, and a message with the name of the anime is printed."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    4.  Other incorrect commands to try:"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        1.  `remove`"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        2.  `remove x` (where x is a negative number, zero, a word, or a number exceeding the number of anime in the watchlist)"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### D.X: Viewing all anime in a specific or active watchlist"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "1.  Viewing all anime in a specific or active watchlist."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    1.  Prerequisite: The watchlist must contain at least one anime."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    2.  Test case: `view` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Expected: Lists out the name of all anime in the active watchlist."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    3.  Test case: `view 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Expected: Lists out the name of all anime in the first watchlist."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    4.  Other incorrect commands to try:"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        1.  `view x` (where x is a negative number, zero, a word, or a number exceeding the number of watchlists)"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### D.X: Viewing the information of a specific anime"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "1.  Viewing the information of a specific anime."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    1.  Prerequisite:"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    2.  Test case: `info 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Expected: Lists out the information of the anime with index 1."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    3.  Test case: `info 3` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Expected: Lists out the information of the anime with index 3."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    4.  Other incorrect commands to try:"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        1.  `info`"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        2.  `info x` (where x is a negative number, zero, a word, or a number exceeding the number of anime in the database)"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### D.x: Listing bookmark entries"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "1.  Listing bookmark entries."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    1.  Prerequisite: None."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    2.  Test case: `bookmark -l` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: All bookmark entries will be listed, if the bookmark list is empty then a bookmark empty message will be printed."
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### D.x: Adding a bookmark entry"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "1.  Adding a bookmark entry."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    1.  Prerequisite: Look up the anime id using the `info` command. The anime id is in `AnimeData` source."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    2.  Test case: `bookmark -a 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: The anime id will be added as a bookmark entry, and a message indicating the name of anime is added to the bookmark."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    3.  Test case: `bookmark -a 0` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: No anime is added to the bookmark. Error details show that anime id cannot be 0."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        1.  `bookmark -a`"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        2.  `bookmark -a x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### D.x: Deleting a bookmark entry"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "1.  Deleting a bookmark entry."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    1.  Prerequisite: List all bookmark entries using the `bookmark -l` command. Multiple bookmark entries in the list."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    2.  Test case: `bookmark -d 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: The bookmark id will be deleted from the bookmark, and a message indicating the name of anime deleted from the bookmark."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    3.  Test case: `bookmark -d 0` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: No bookmark entry is deleted from the bookmark. Error details show that bookmark id cannot be 0."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        1.  `bookmark -d`"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        2.  `bookmark -d x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### D.x: View info of a bookmark entry"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "1.  View info of a bookmark entry."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    1.  Prerequisite: List all bookmark entries using the `bookmark -l` command. Multiple bookmark entries in the list."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    2.  Test case: `bookmark 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: All information on a bookmark entry will be printed."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    3.  Test case: `bookmark 0` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: No bookmark entry information is displayed. Error details show that bookmark id cannot be 0."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        1.  `bookmark -d x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### D.x: Editing a bookmark entry episode"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "1.  Editing a bookmark entry episode."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    1.  Prerequisite: "
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        1.  List all bookmark entries using the `bookmark -l` command. Multiple bookmark entries in the list."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        2.  View the information of bookmark entry using `bookmark \u003cBOOKMARK_ID\u003e`. The total episode of the anime series."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    2.  Test case: `bookmark 1 -e 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: The bookmark episode for that id will be edited to 1, and a message indicating the anime current episode has been edited."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    3.  Test case: `bookmark 0 -e 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: No bookmark entry will have its episode edited. Error details show that bookmark id cannot be 0."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        1.  `bookmark -e`"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        2.  `bookmark -e x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        3.  `bookmark x -e` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        4.  `bookmark x -e x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### D.x: Adding a note to a bookmark entry"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "1.  Adding a note to a bookmark entry."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    1.  Prerequisite: List all bookmark entries using the `bookmark -l` command. Multiple bookmark entries in the list."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "         "
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    2.  Test case: `bookmark 1 -n test` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: The note will be added to bookmark id, and a message indicating the note has been edited for that anime."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    3.  Test case: `bookmark 0 -n test` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: No bookmark note will be added. Error details show that bookmark id cannot be 0."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        1.  `bookmark -n`"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        2.  `bookmark -n x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        3.  `bookmark x -n` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        4.  `bookmark x -n x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### D.x: Removing a note from a bookmark entry"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "1.  Removing a note from a bookmark entry."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    1.  Prerequisite:  View the information on bookmark entry using \u0027bookmark \u003cBOOKMARK_ID\u003e\u0027. Multiple notes for that bookmarked anime."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    2.  Test case: `bookmark 1 -r 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: The first note of the bookmark entry will be removed, and a message indicating the note has been removed from the anime."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    3.  Test case: `bookmark 0 -r 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    Expected: No notes will be removed. Error details show that bookmark id cannot be 0."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    "
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        1.  `bookmark -r`"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        2.  `bookmark -r x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        3.  `bookmark x -r` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        4.  `bookmark x -r x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### D.x: Browse "
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "1.  Utilising the `browse` feature"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    1.  Prerequisite:  None."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    2.  Test case: `browse` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    Expected: Will list 20 anime series according to the anime ID."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    3.  Test case: `browse -s rating` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    Expected: Will list 20 anime series according to the most popular anime ratings."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    4.  Test case: `browse -s rating -o asc` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    Expected: Will list 20 anime series from the lowest rated anime series."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    5.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        1.  `browse -s alpha`"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        2.  `browse -p x` (where x is a negative number, a word, or an additional parameter)"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        3.  `browse -s name -s rating`"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        4.  `browse ---`"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        5.  `browse -s rating-o asc`"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### D.x: Search by name"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "1.  Finding an anime series with `search` feature"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    1.  Prerequisite:  None."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    2.  Test case: `search -n Mushi` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    Expected: Will return anime with the keyword \u0027Mush\u0027. In this case it would return MUSHI-SHI."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    3.  Test case: `search -n MUSHI-` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    Expected: Will return anime with the keyword \u0027MUSHI-\u0027. In this case it would return MUSHI-SHI."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        1.  `search`"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        2.  `search -n mush -n shi` In this case it would attempt to search for `mush -n shi`. And return no results."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        3.  `search -n`"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### D.x: Search by genre"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "1.  Finding all anime series that has a specific genre with `search` feature"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    1.  Prerequisite:  None."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    2.  Test case: `search -g Music` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    Expected: Will return all anime that has \u0027Music\u0027 as its genre"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    3.  Test case: `search -n slice of life` \u003cbr/\u003e"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    Expected: Will return anime that has \u0027Slice of Life\u0027 as its genre"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    "
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    4.  Other incorrect commands to try: "
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        1.  `search`"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        2.  `search -g musik` In this case it would attempt to search for `mush -n shi`. And return no results."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        3.  `search -g`"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 274,
      "n3wsoldier": 300,
      "OngDeZhi": 400,
      "ChanJianHao": 231,
      "-": 17,
      "michaeldinata": 224
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "# AniChan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![AniChan Logo](images/AniChan-Logo.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg) ![Support OS](https://img.shields.io/badge/platform-windows%20%7C%20macos%20%7C%20linux-blue) ![Size](https://img.shields.io/github/repo-size/AY2021S1-CS2113T-F12-2/tp) ![Java](https://img.shields.io/badge/built--in-java-brightgreen)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**AniChan** is an all-rounded tool for Anime translators and professionals. It features a suite of functionality that can help reduce administration workload, as well as improve translation efficiency and accuracy."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   [User Guide](https://ay2021s1-cs2113t-f12-2.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   [Developer Guide](https://ay2021s1-cs2113t-f12-2.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   [About Us](https://ay2021s1-cs2113t-f12-2.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Downloads"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The latest release of **AniChan** can be found [here](https://github.com/AY2021S1-CS2113T-F12-2/tp/releases)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Support \u0026 Contribution"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "We welcome all forms of contributions to **AniChan** and appreciate for your feedback very much! "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "You can join us in developing this tool by making a fork of this project and making a pull request with your changes. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Acknowledgement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   [AniList](https://anilist.co/) for providing us anime information."
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 25,
      "-": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "# AniChan User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![AniChan Logo](images/AniChan-Logo.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg) ![Support OS](https://img.shields.io/badge/platform-windows%20%7C%20macos%20%7C%20linux-blue) ![Size](https://img.shields.io/github/repo-size/AY2021S1-CS2113T-F12-2/tp) ![Java](https://img.shields.io/badge/built--in-java-brightgreen)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "2. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "3. [Features](#3-features)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.1 [View the help](#31-view-the-help)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.2 [Estimate time need to translate the script](#32-estimate-time-needed-to-translate-the-script)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.3 [Browse through all anime](#33-browse-through-anime)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.4 [Search](#34-search-for-anime)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1 [Search by anime title](#341-search-by-anime-title)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2 [Search by genre](#342-search-by-genre)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.5 [View the information of an anime](#35-view-the-information-of-an-anime)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.6 [Workspace management](#36-workspace-management)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.6.1 [Create new workspace](#361-create-new-workspace)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.6.2 [Switch workspace](#362-switch-workspace)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.6.3 [List workspaces](#363-list-workspaces)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.6.4 [Delete workspace](#364-delete-workspace)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.7 [Watchlist management](#37-watchlist-management)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.7.1 [Create a new watchlist](#371-create-new-watchlist)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.7.2 [List all created watchlist(s)](#372-list-all-created-watchlists)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.7.3 [Select a watchlist to use](#373-select-a-watchlist-to-use)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.7.4 [Delete a watchlist](#374-delete-a-watchlist)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.7.5 [Add an anime to the current watchlist](#375-add-an-anime-to-the-current-watchlist)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.7.6 [Remove an anime from the current watchlist](#376-remove-an-anime-from-the-current-watchlist)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.7.7 [View all anime in watchlist](#377-view-all-anime-in-watchlist)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.8 [Bookmark](#38-bookmark)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.8.1 [List all bookmark entries](#381-list-all-bookmark-entries)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.8.2 [Add a bookmark entry](#382-add-a-bookmark-entry)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.8.3 [Delete a bookmark entry](#383-delete-a-bookmark-entry)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.8.4 [Edit a bookmark entry episode](#384-edit-a-bookmark-entry-episode)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.8.5 [Add a note to bookmark entry](#385-add-a-note-to-bookmark-entry)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.8.6 [Remove a note from bookmark entry](#386-remove-a-note-from-bookmark-entry)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.8.7 [View information of a bookmark entry](#387-view-information-of-a-bookmark-entry)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.9 [Exit AniChan](#39-exit-anichan)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e\u0026nbsp;3.10 [Saving and loading data](#310-saving-and-loading-data)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "4. [FAQ](#4-faq)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "5. [Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Welcome to AniChan!**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "AniChan is a free desktop command-line application aimed to improve the efficiency of anime translators. With AniChan, translators could manage their time more effectively by identifying the time needed to translate a script. Moreover, AniChan comes with management features such as workspace, watchlist and bookmark that can help them stay organized and focused on their work."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "AniChan can also be used on all major operating systems such as Windows and Linux. You can refer to the [Quick Start](#2-quick-start) guide located below for more information on getting your journey started with AniChan!"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 1.1 Purpose"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This guide provides you with in-depth information on setting up AniChan and how to use the various features offered."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 1.2 Using this guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Along the way you might encounter several icons. These icons can help provide several types of information that may be useful to you. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003e :bulb: Take note when you see this icon, as it might tell you something important."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003e :memo: This icon represents a friendly tip that might be useful when using our application."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003e :warning: A caution that you have to keep in mind when using the command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Lastly, text that are blue like this [example](#12-using-this-guide), are clickable links that will bring you to the relevant part of this user guide. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "2.  Download the latest version of **AniChan** from [here](https://github.com/AY2021S1-CS2113T-F12-2/tp/releases/tag/V2.0)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "3.  Copy the file to the folder you want to use as the home folder for **AniChan**."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "4.  Open **command prompt** or **terminal** and change directory into the folder. Run `java -jar AniChan.jar`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "5.  You will be first greeted by the **command prompt** for your name and gender as shown below."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "6.  Upon completing these 2 prompts, you can begin using **AniChan**!"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "7.  Type a command into the **command prompt** and press `Enter` to execute it. For example, typing `help` and pressing `Enter` will display a useful help message to get you started."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "![First Time Setup](images/User-Guide-Setting-Up.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*Figure 1: Example of First Time Setup*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "**Some useful notes on the command format of AniChan**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Commands are case-sensitive. \u003cbr/\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "E.g. Only `help` will work, and so `HELP`, `hElp`, and its other variant will not work."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   All parameter options are lowercase letters. \u003cbr/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "E.g. `-l` in this case would be a lowercase letter of \u0027L\u0027. Not to be mistaken with `1` or `I`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Words in UPPERCASE are values that can be supplied to the command. \u003cbr/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "E.g. In `browse -s \u003cSORT_CATEGORY\u003e -p \u003cPAGE_NO.\u003e`, `SORT_CATEGORY` and `PAGE_NO.` can be replaced with `name` and `1` respectively. "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Angle brackets (`\u003cMANDATORY\u003e`) are mandatory, while square brackets (`[OPTIONAL]`) are optional. \u003cbr/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "E.g. `estimate \u003cSCRIPT_NAME\u003e [-t WORDS_PER_HOUR]` can be used as `estimate script.txt` or `estimate script.txt -wph 300`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Order of parameters (`-n`, `-l`, etc.) are not important, but they have to be defined after the non-parameter fields. \u003cbr/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "E.g. Both `browse -s name -p 2` and `browse -p 2 -s name` gives the same result, but in the case of `estimate script.txt -wph 300` and `estimate -wph 300 script.txt`, the latter will not work because \"script.txt\" is not an parameter."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :bulb: This is what the input prompt means: **WORKSPACE-NAME (WATCHLIST-NAME) #\u003e**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 3.1 View the help"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "This command will provide the details of all available commands and their usage. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "This is done by displaying the ‘Command Summary’ as listed below to the user. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 3.2 Estimate time needed to translate the script"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "This command allows you to estimate the time needed to translate a script. It estimates based on the amount of words you can translate in an hour, or by using the average translators’ speed of 400, 500, and 600 words per hour. Hence, this would allow you to better manage and plan your time."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `estimate \u003cSCRIPT_FILE_NAME\u003e [-wph WORDS_PER_HOUR]`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   It only accepts one `.txt` file (other file extensions will be supported in a future version)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   If the parameter `-wph` is not specified, the average translator\u0027s speed will be used to generate three estimations for you to consider."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :bulb: Remember to specify the file extension. For example, `script.txt` and not `script`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :bulb: Put the script in the current workspace folder. If the current workspace is \"Default\", then from the folder containing `AniChan.jar`, put it in the subfolder named \"Default\" of the \"data\" folder (i.e. `data/Default/script.txt`) as shown in the diagram below. "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e \u003cbr/\u003e\u003cbr/\u003e ![Estimate Folder Structure Diagram](images/Estimate-Folder-Structure-Diagram.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `estimate script.txt`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Average translator (400 words per hour) takes: 5 hour(s) 47 minute(s)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Average translator (500 words per hour) takes: 4 hour(s) 38 minute(s)."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Average translator (600 words per hour) takes: 3 hour(s) 51 minute(s)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `estimate script.txt -wph 777`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "You would need 2 hour(s) 58 minute(s)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 3.3 Browse through anime"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "This command will provide a realistic **browsing** experience as you are able to ‘flip’ through pages of different anime series. This is a useful way to get a quick overview of all available anime series."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "`browse` will also has various options to customise each browsing session by being able to sort the anime list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Format: `browse [-s SORT_CATEGORY] [-o DISPLAY_ORDER] [-p PAGE_NUMBER`]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   `-s` will indicate how the list is sorted and will accept the values `name` or `rating` "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   `-o` will arrange the list in descending or ascending order by using the values `asc` or `dsc`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   The order of the options does not matter"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   If no option or only `-o` is specified then it will display anime in no particular order."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003e :memo: It will actually be sorted according to its ID which is assigned randomly by our data source."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Here are some commonly used `browse` commands to get you started. Feel free to experiment with different combinations!"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   `browse -s name` browse alphabetically from A - Z"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   `browse -s rating -o dsc` browse starting from the most highly rated anime"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Example of usage: `browse -s name -o asc`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "1.   .hack//Gift                                         [Id: 413]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "2.   .hack//Legend Of The Twilight                       [Id: 267]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "3.   .hack//Liminality                                   [Id: 268]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "4.   .hack//Sign                                         [Id: 30 ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "5.   3x3 Eyes                                            [Id: 269]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "6.   A Chinese Ghost Story                               [Id: 284]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "7.   ARIA The ANIMATION                                  [Id: 436]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "8.   Abashiri Ikka                                       [Id: 274]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "9.   Ace wo Nerae!                                       [Id: 280]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "10.  Ace wo Nerae! 2                                     [Id: 283]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "11.  Ace wo Nerae: Final Stage                           [Id: 281]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "12.  After War Gundam X                                  [Id: 72 ]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "13.  Agatha Christie\u0027s Great Detectives Poirot and Ma... [Id: 213]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "14.  Agent Aika                                          [Id: 333]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "15.  Ah! My Goddess: The Movie                           [Id: 273]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "16.  Ai Yori Aoshi                                       [Id: 35 ]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "17.  Ai Yori Aoshi: Enishi                               [Id: 360]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "18.  Aim for the Ace! (1979)                             [Id: 282]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "19.  Air                                                 [Id: 81 ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "20.  Air Master                                          [Id: 199]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Browsing Page: 1"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 3.4 Search for anime"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Search is a versatile tool that will allow you to search through all available anime for a specific anime, anime belonging to a certain genre, or all anime that has a keyword."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The following subsections below describes the various search-relation operations."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 3.4.1 Search by anime title"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Search for all anime titles that contain or match precisely the search term."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Format: `search -n \u003cSEARCH_TERM\u003e` "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003e :bulb: The search term is not case-sensitive."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Example of usage: `search -n bey`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:216] Haruka: Beyond the Stream of Time – A Tale of the Eight Guardians"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:257] Beyblade"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:410] InuYasha the Movie 2: The Castle Beyond the Looking Glass"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### 3.4.2 Search by genre"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Search for anime that has the genre matching the search term."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Format: `search -g \u003cSEARCH_TERM\u003e`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Here are some popular anime genres that you can try out!"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Action"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Adventure"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Music"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Mecha"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Sci-Fi"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Example of usage: `search -g Slice of Life`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:7] Honey and Clover"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:8] Hungry Heart: Wild Striker"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:35] Ai Yori Aoshi"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:39] Beck: Mongolian Chop Squad"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:48] Azumanga Daioh: The Animation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:81] Air"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "..."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:446] Strawberry Marshmallow"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:447] KamiChu!"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:464] I My Me! Strawberry Eggs"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:467] Kiki\u0027s Delivery Service"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:475] Marmalade Boy Movie"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "[ID:488] Teacher\u0027s Time"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.5 View the information of an anime"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "View all the information regarding a specific anime."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Format: `info \u003cANIME_ID\u003e`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Example of usage: `info 1`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Here is the information for the anime:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Index: 1"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Name: Cowboy Bebop"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Episodes: 26"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Release Date: 03/Apr/1998"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Rating: 86"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Genre: [Action, Adventure, Drama, Sci-Fi]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "### 3.6 Workspace management"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The workspace management feature provides translators the flexibility of organising their application data like watchlist and bookmark easily."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The following subsections below describes the various workspace-relation operations."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "#### 3.6.1 Create new workspace"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Creates a new workspace to manage your watchlist(s) and bookmark."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003e :memo: Every new workspace you create will generate a similarly named folder to store the watchlist(s) and bookmark. This helps to avoid accidental intermixing of data when you are working on multiple translation projects."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003e :bulb: Workspace name can only consist of alphanumeric characters and/or spaces."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Format: `workspace -n \u003cNAME\u003e`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Example of usage: `workspace -n Crispy Donuts Studio`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Successfully added new workspace: Crispy Donuts Studio"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "#### 3.6.2 Switch workspace"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Switches your currently active workspace."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003e :memo: As you may create multiple workspaces to organise your translation work, this command allows you to switch between them. A workspace named `Default` is created when you run AniChan for the first time."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Format: `workspace -s \u003cNAME\u003e`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Example of usage: `workspace -s Crispy Donuts Studio`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Workspace switched to Crispy Donuts Studio"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "#### 3.6.3 List workspaces"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Lists all your existing workspaces."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Format: `workspace -l`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Example of usage: `workspace -l`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Currently, you have 2 workspace(s):"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "1. Default"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "2. Crispy Donuts Studio"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "#### 3.6.4 Delete workspace"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Deletes an existing workspace and all its data."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003e :bulb: Note the command is irreversible and case-sensitive. All watchlists and bookmark created in this workspace will be deleted along with it."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Format: `workspace -d \u003cNAME\u003e`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Example of usage: `workspace -d Default`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Successfully deleted workspace: Default"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "```"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 3.7 Watchlist management"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The watchlist management feature provide translators with a simple way to keep track of animes and group them based on their own criteria. This enables translators to stay organized, productive, and focus on their work rather than being concerned over irrelevant issues."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The following subsections below describes the various watchlist-relation operations."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :bulb: The term **active watchlist** refers to the watchlist that you are using for adding anime into or removing anime from."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.7.1 Create new watchlist"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Creates a new watchlist to keep track of anime(s)."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `watchlist -n \u003cWATCHLIST_NAME\u003e`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :bulb: Watchlist name can only contain a maximum of 30 alphanumeric characters and/or spaces, but cannot contain spaces only."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :warning: Watchlist name has to be unique in the workspace."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `watchlist -n Adventure Anime`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Watchlist \"Adventure Anime\" has been created successfully!"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.7.2 List all created watchlist(s)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Lists all watchlist(s) that has been created."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Format: `watchlist -l`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `watchlist -l`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Currently, you have 2 watchlist(s):"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    1. Default"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    2. Adventure Anime"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.7.3 Select a watchlist to use"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "If you have created multiple watchlists, you can select another watchlist to be the active watchlist, which you can use for adding anime into or removing anime from."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Format: `watchlist -s \u003cWATCHLIST_ID\u003e`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :bulb: Notice how the name of the watchlist in your prompt has changed."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `watchlist -s 2`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\"Adventure Anime\" is now your active watchlist!"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "#### 3.7.4 Delete a watchlist"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Delete a watchlist that is no longer needed or was created by mistake."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Format: `watchlist -d \u003cWATCHLIST_ID\u003e`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :bulb: Deletion only works when you have at least two watchlist."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003e :warning: If you delete the active watchlist, then the watchlist whose index is 1 in the list (after the deletion) will become the new active watchlist."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Example of usage: `watchlist -d 2`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Watchlist \"Adventure Anime\" has been deleted successfully!"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Changed active watchlist to: \"Default\"."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "```"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.7.5 Add an anime to the current watchlist"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Add an anime to the currently selected watchlist"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Format: `add \u003cANIME_ID\u003e`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003e :warning: You cannot add duplicate anime into the same watchlist."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Example of usage: `add 3`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The expected outcome: "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Trigun added to watchlist!"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.7.6 Remove an anime from the current watchlist"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Remove an anime from the currently selected watchlist"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Format: `remove \u003cANIME_ID_IN_WATCHLIST\u003e`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003e :bulb: The index used has to be the anime ID in the watchlist, and not the general anime ID"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Example of usage: `remove 1`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Trigun successfully removed from watchlist"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.7.7 View all anime in watchlist"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "View all the anime that you have stored in your current watchlist, or in a specific watchlist"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Format: `view [-v \u003cWATCHLIST_ID\u003e]`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "*   If the parameter `-v` is not specified, the anime in the current watchlist you are using will be shown."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Example of usage: `view`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Here are the anime in Default watchlist:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\t1. Cowboy Bebop"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "   \t2. Witch Hunter Robin"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Example of usage: \u0027view -v 2\u0027"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Here are the anime in To Translate watchlist:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\t1. Naruto"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        2. Yakitate!! Japan"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### 3.8 Bookmark"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "`Bookmark` is the feature to use when you need your own customised list of anime. It provides you with greater personalisation such as tracking each episode and writing useful notes for each series. These features further enhance the manageability of translation jobs and allow you to easily access important information. "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "The following subsections below describes the various bookmark-relation operations."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "#### 3.8.1 List all bookmark entries"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "List all anime within the bookmark."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Format: `bookmark -l`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003e :bulb: List Bookmark displays `\u003cBOOKMARK_ID\u003e`s together with anime names. This command is especially useful since `\u003cBOOKMARK_ID\u003e` is used by many other `bookmark` commands."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Example of usage: `bookmark -l`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Listing all anime in bookmark:"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "  1. InuYasha the Movie 3: Swords of an Honorable Ruler"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "  2. To Heart 2"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "#### 3.8.2 Add a bookmark entry"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Add an anime to the bookmark."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Format: `bookmark -a \u003cANIME_ID\u003e`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003e :memo: Add Bookmark `\u003cANIME_ID\u003e` is identified using `[Id: 1]` from `1. Cowboy Bebop [Id: 1]` which can be found in both outputs of `search` and `browse` command"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Example of usage: `bookmark -a 3`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Saving 3. Trigun to bookmark."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "#### 3.8.3 Delete a bookmark entry"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Delete an anime from the bookmark."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Format: `bookmark -d \u003cBOOKMARK_ID\u003e`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Example of usage: `bookmark -d 2`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Removing To Heart 2! :("
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "#### 3.8.4 Edit a bookmark entry episode "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Edit the current episode for an anime within a bookmark."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Format: `bookmark \u003cBOOKMARK_ID\u003e -e \u003cEPISODE\u003e`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Example of usage: `bookmark 2 -e 5`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Editing Trigun to have 5 episode(s)."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "#### 3.8.5 Add a note to bookmark entry"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Add a note for an anime within the bookmark."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Format: `bookmark \u003cBOOKMARK_ID\u003e -n \u003cNOTE\u003e`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Example of usage: `bookmark 2 -n Episode 5: Schedule push back`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Adding note:\"Episode 5: Schedule push back\" to Trigun!"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "#### 3.8.6 Remove a note from bookmark entry"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Remove a note from an anime within the bookmark."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Format: `bookmark \u003cBOOKMARK_ID\u003e -r \u003cNOTE_ID\u003e`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Example of usage: `bookmark 2 -r 1`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Deleting note: Episode 5: Schedule push back"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "From: Trigun."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "#### 3.8.7 View information of a bookmark entry"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "View the detailed information for an anime, the current episode you are working on and the important notes you might have."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Format: `bookmark \u003cBOOKMARK_ID\u003e`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Example of usage: `bookmark 2`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Here is the information for that anime."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Index: 3"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Name: Trigun"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Episodes: 26"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Release Date: 01/Apr/1998"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Rating: 79"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Genre: [Action, Adventure, Comedy, Drama, Sci-Fi]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Current Episode: 5"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Notes for anime:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "1. Episode 5: Schedule push back"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "```"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "### 3.9 Exit AniChan"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Exit **AniChan**."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Example of usage: `exit`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "The expected outcome:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Sayonara \u003cNAME\u003e!"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "```"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### 3.10 Saving and loading data"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "User, workspace(s), watchlist(s), and bookmark(s) data will be **saved automatically** when they are created or modified, and will be **loaded automatically** when **AniChan** is launched. "
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "In the folder where **AniChan** is launched, there will be a `data` folder which would contain these data:"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   User data will be stored in `data/user.txt`."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Watchlist(s) data will be stored in `data/\u003cWORKSPACE-NAME\u003e/watchlist.txt`, e.g. if \"AniTranslator\" is the name of your workspace, then the watchlist data can be found in `data/AniTranslator/watchlist.txt`."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   Bookmark(s) data will also be stored in the same location as watchlist data, `data/WORKSPACE-NAME/bookmark.txt`."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "![Data Loaded on Startup](images/Data-Loaded-On-Startup.png)"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*Figure 2: Example of Data Loaded On Startup*"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003c!-- @@author ChanJianHao --\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Q:** What is a workspace?"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**A:** Workspace is a functionality in **AniChan** which provides users the flexibility to organise information. "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "As application data like watchlist and bookmarks are linked to workspace, switching workspace would provide a "
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "clean slate environment to work in."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Q:** How can I save my data?"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**A:** **AniChan** automatically saves your data on every action you take. You can find them in `/data` folder in the same"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "directory you run **AniChan** in."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**Q:** Can I edit the information in `data` directory?"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**A:** Yes! As **AniChan** saves and loads your information from the data directory, editing the files in `data` folder"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "works. However, we would strongly recommend you not to as you may cause data corruption. Use **AniChan** instead if you wish to edit your information!"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Feature                                      | Command                                                  |"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| ---                                          | ---                                                      |"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Help                                         | `help`                                                   |"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Estimate time needed to translate the script | `estimate \u003cSCRIPT_FILE_NAME\u003e [-wph WORDS_PER_HOUR]`      |"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| Browse                                       | `browse [-s SORT_OPTION] [-p PAGE_NO.] [-o SORT_ORDER]`  |"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Search by title                              | `search -n \u003cSEARCH_TERM\u003e`                                |"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Search by genre                              | `search -g \u003cSEARCH_TERM\u003e`                                |"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| View anime information                       | `info \u003cANIME_ID\u003e`                                        |"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Create new workspace                         | `workspace -n \u003cNAME\u003e`                                    |"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Switch workspace                             | `workspace -s \u003cNAME\u003e`                                    |"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| List workspace                               | `workspace -l`                                           |"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Delete workspace                             | `workspace -d \u003cNAME\u003e`                                    |"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Create watchlist                             | `watchlist -n \u003cWATCHLIST_NAME\u003e`                          |"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| List all watchlist                           | `watchlist -l`                                           |"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| Select watchlist                             | `watchlist -s \u003cWATCHLIST_ID\u003e`                            |"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| Delete watchlist                             | `watchlist -d \u003cWATCHLIST_ID\u003e`                            |"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| Add to watchlist                             | `add \u003cANIME_ID\u003e`                                         |"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| Remove from watchlist                        | `remove \u003cANIME_ID_IN_WATCHLIST\u003e`                         |"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "| View anime in watchlist                      | `view [-v WATCHLIST_ID]`                                 |"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| List bookmark                                | `bookmark -l`                                            |"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Add bookmark entry                           | `bookmark -a \u003cANIME_ID\u003e`                                 |"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Delete bookmark entry                        | `bookmark -d \u003cBOOKMARK_ID\u003e`                              |"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Edit bookmark episode                        | `bookmark \u003cBOOKMARK_ID\u003e -e \u003cEPISODE\u003e`                    |"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Add note to bookmark                         | `bookmark \u003cBOOKMARK_ID\u003e -n \u003cNOTE\u003e`                       |"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "| Remove note from bookmark                    | `bookmark \u003cBOOKMARK_ID\u003e -r \u003cNOTE_ID\u003e`                    |"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| View bookmark                                | `bookmark \u003cBOOKMARK_ID\u003e`                                 |"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "| Exit                                         | `exit`                                                   |"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 188,
      "n3wsoldier": 132,
      "OngDeZhi": 204,
      "ChanJianHao": 106,
      "-": 20,
      "michaeldinata": 93
    }
  },
  {
    "path": "docs/team/chanjianhao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "# Chan Jian Hao - Project Portfolio Page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "**AniChan** is a desktop application created for anime translators to help efficiently manage their workload and time. It has a wide variety of tools that can help improve their workflow efficacy and translation accuracy. **AniChan** is built for fast-typists, as such the user will interact with it through a CLI. It is written in Java with almost 14K LOC."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **New Feature:** Added the ability to create `User`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   What it does: On first execution, prompts user for his name and gender to create `User` profile."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Justification: This feature allows program to know user better so that program may greet user appropriately as part of good user experience we hope to provide."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Highlights: Notably, `User` is a subclass of `Human` abstract class. Other classes such as `Character` and `VoiceActor` inherits `Human` class as part of our OOP practice when coding **AniChan** which stores lots of anime data which comes with lots of voice actors and characters. **User** class contains many interesting methods meant for controlling `Workspace` feature of **AniChan**."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **New Feature:** Added the ability to create, list, switch, and delete `Workspace`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   What it does: Allows the user to create, list, select, and delete `Workspace`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Justification: This feature enables the user to have segregation in his translation work. As `Watchlist` and `Bookmark` are contained in individual `Workspaces`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Highlights: `Workspace` works closely with core components of **AniChan** such as `User`, `Watchlist`, `Bookmark` and notably, `Storage`. To ensure secure and safe creation of `Workspace` when program exits, layers of string validation and sanitization are implemented to ensure no unexpected behaviors when creating `Workspace` in `data` folder."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **New Feature:** Added customised exception class, `AniException`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   What it does: Allows application to throw custom exceptions specific to **AniChan**."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Justification: There needs to be a way to handle exception which are caused by **AniChan**."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Highlights: Made a special exception package and class which extends Java default `Exception` class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **New Feature:** Added logging class `AniLogger`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   What it does: Logs information during **AniChan** runtime to both console and file system `data/AniChan.log` file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Justification: There needs to be a way to handle logging for all the classes in **AniChan** without duplicating Java `logger` everywhere."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Highlights: Implemented method for all classes to easily get logger for their own logging usage. Standardized application-wide **AniChan** logging settings and level for both console and file system. **AniLogger** is fully capable of handling add and removals of console and file handlers and manage logs creation and exceptions, if any."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **New Feature:** Implemented Workspace delete feature for `Storage`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   What it does: Deletes `Workspace` on the file system when `Workspace` is deleted in **AniChan**."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Justification: When `Workspace` is deleted in **AniChan**, the leftover folder and files in `data` should be deleted as well."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Highlights: Implemented a safe recursive delete approach for `Workspace` deletion, where it searches recursively for leftover `Watchlist`/`Bookmark` data to delete first before deleting the folder. Exceptions and input validation built in for deletion to prevent file system related issues to crash the program or cause unexpected results."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **Documentation:**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   README.md:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        * Designed **AniChan** logo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        * Created badges on various DevOps and statuses (for UG and DG too)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        * Add short writeup to introduce **AniChan** and provide useful links to pages like user guide and developer guide."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   User Guide: "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        *   Contributed to writeup on Quick Start."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        *   Documented guide on `Workspace` management."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Developer Guide:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        *   Contributed to writeup on `User` architecture and diagram."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        *   Contributed to `Workspace` related user stories."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        *   Documented `Workspace` implementation and its diagrams."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        *   Documented the section on \u0027Documentation, Logging, Testing, and DevOps\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **Team-based Tasks**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Created team organisation and GitHub repository"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Contributed to input sanitization and validation of overall program"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Refactored common code found in Main and Ui, and assisted to delete redundant imports and variables"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Setting up GitHub pages and Gradle"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Maintaining the issue tracker"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Setup of team\u0027s Telegram \u0026 Discord channel for communication"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Implemented additional CI checks for repository quality"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Assisted in team\u0027s request for Java libraries"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **Beyond Project Team Tasks**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Reported substantial amount of bugs in another team\u0027s repository (e.g. [#101](https://github.com/AY2021S1-CS2113-T13-4/tp/issues/101), [#94](https://github.com/AY2021S1-CS2113-T13-4/tp/issues/94), [#93](https://github.com/AY2021S1-CS2113-T13-4/tp/issues/93), [#96](https://github.com/AY2021S1-CS2113-T13-4/tp/issues/96))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Provided helpful feedback for team NavNUS (e.g. [#9](https://github.com/nus-cs2113-AY2021S1/tp/pull/9/files/cabbf353f022bfb19f0bdeeeb17ba7572bed1484))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **Tools:**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Integrated **Codacy** static code analysis to improve code and documentation quality within team"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Integrated **Travis CI** for DevOps purposes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Integrated **Codecov** for coverage tracking"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    *   Added **Discord** bot for GitHub tracking"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "*   **Code Contributed:** [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dchanjianhao\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dChanJianHao\u0026tabRepo\u003dAY2021S1-CS2113T-F12-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other) "
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 72
    }
  },
  {
    "path": "docs/team/eyoweichin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "# Eyo Wei Chin - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "## Project: AniChan"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "AniChan is a desktop application created for anime translators to help efficiently manage their workload and time. It has a wide variety of tools that can help improve their workflow efficiency and translation accuracy. AniChan is built for fast-typers, as such the user will interact with it through a CLI. It is written in Java with almost 14K LOC. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   **New Feature**: Added `Browse` which is the ability to access and view all anime with ease."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   What it does: Is a useful feature that allows users to look through all available anime series. The browse feature utilises a page system, so that the user can \u0027flip\u0027 through the list of anime series. Users will be able to browse through highly rated anime or in alphabetical order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Justification: By having a `browse` feature, users can easily access and view all anime series that are available. As a translator, this will be an essential tool to find a series for potential work opportunity or for future references"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Highlights: The implementation was challenging as many of the anime titles have special unicode characters which is viewed by the system as more than 1 char, which seen by users as 1 char only. This made it difficult to print the anime in a consistent format. Additionally, there was several design considerations that I had to make in order to ensure that `browse` was able to fulfil its purpose and adhere to the constraints, these considerations could is further elaborated in the developer guide [here](#docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   **New Feature**: Added `Search` which is the ability to find any anime with a search term."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   What it does: Allows users to search for a specific anime by its full title, just a keyword or with a genre."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Justification: `search` was built to find difficult to remember anime titles such as `MUSHI-SHI` or long anime titles (\u003e52 characters). This feature should be used in conjunction with the watchlist and bookmark feature to effectively find the anime that the translator wants quickly without much hassle."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Highlights: The challenges of this implementation was with input validation, parsing the parameters into the command and finding the anime that fits the search term."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   **Existing Features**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Helped contributed to development of the Switch Workspace feature [#106](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/106) [#101](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/101) [#99](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/99)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Helped contribute to writing of the CommandParser logic [#128](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/128)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Helped to refactor Main.java [#261](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/261)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Decoupled UI from Parser, Command classes for better cohesiveness [#80](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/80)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Contributed to the development of Anime Class [#22](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/22)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   Code contributed: [RepoSense](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#search\u003dEYOWEICHIN\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dEyoWeiChin\u0026tabRepo\u003dAY2021S1-CS2113T-F12-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   **Documentation**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        *   Add documentation for the features `browse` and `search` [#190](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/190) [#111](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/111/files)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Developer Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        *   Add Command and Starting Up sequence diagrams [#261](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/261)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        *   Add implementation details of `browse` feature [#196](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/196) [#161](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/161)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        *   Contributed to the design of Architectural diagram"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        *   Contributed to the design and their write-ups of Ui, Parser, Command, User Class diagram designs [#173](https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/173) [#149](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/149/files)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   **Team-based tasks**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Created labels and milestones for the team GitHub"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Created issues based on team\u0027s discussions and meeting "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Compiled and built the final jar files for releases"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Added comprehensive JUnit testing to increase code coverage [#182](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/182)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "*   **Beyond Project Team Tasks**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Reported bugs for a team in PE-D"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Reviewed another team\u0027s Developer Guide "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    *   Reviewed another team\u0027s User Guide "
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 47
    }
  },
  {
    "path": "docs/team/michaeldinata.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "# Michael Dinata - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "michaeldinata": 1
    }
  },
  {
    "path": "docs/team/ongdezhi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "# Ong De Zhi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "AniChan is a desktop application created for anime translators to help efficiently manage their workload and time. It has a wide variety of tools that can help improve their workflow efficiency and translation accuracy. AniChan is built for fast-typers, as such the user will interact with it through a CLI. It is written in Java with almost 14K LOC. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   **New Feature:** Added the ability to estimate the time needed to translate a script."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   What it does: Allows the user to estimate the time needed to translate one script at a time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Justification: This feature allows users to find out the time needed to translate a script. This will help users to better manage and plan their time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Highlights: A file name could contain special characters, whitespaces, and even file extensions in some cases, and that makes the validation process highly complicated, and hence, this feature would need to perform extensive checks on the file name to ensure that it is a single valid file. Moreover, there is a need to validate the existence and value of the optional parameter to ensure that it is not missed or accidentally validated as part of the file name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   **New Feature:** Added the ability to create, list, select, and delete watchlist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   What it does: Allows the user to create, list, select, and delete watchlist."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Justification: This feature provides users with a simple way to keep track of animes and group them based on their criteria. This will help users to be more organized during their translation work."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Highlights: Besides the need to validate the inputs (i.e. not empty, is a positive integer, etc.), this feature is also in-charge of maintaining the active watchlist pointer. This pointer is used by the input prompt, and if it is ever invalid, the application would not function as intended."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   **New Feature:** Added the ability to save and load watchlist data automatically."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   What it does: Helps the user to automatically save their watchlist data into the file `watchlist.txt`, and loads the data found in this file automatically when the application is launched."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Justification: Being an application to help users keep track of their animes and ensure they stay organized, persistent storage would be needed otherwise, users would have to re-enter their data every time they use the application and that can result in a frustrating experience."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Highlights: During the loading of the watchlist data, each entry recorded in `watchlist.txt` would be validated to ensure they are not corrupted. **If a watchlist is corrupted, then only that watchlist will not be loaded**, the rest of the watchlist(s) will still be loaded if they are valid. A corrupted watchlist is defined as one that has information missing, has an invalid format, or it contains anime ids that are not found in our database."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   **Code Contributed:** [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dongdezhi\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dOngDeZhi\u0026tabRepo\u003dAY2021S1-CS2113T-F12-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   **Documentation:**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   User Guide: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        *   Added documentation for the features `watchlist` and storage: [#138](https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/138)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        *   Added documentation for the feature `estimate`: [#146](https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/146)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        *   Added setting up guide, architecture design, and StorageManager component: [#151](https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/151)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        *   Added implementation details of `estimate` and `watchlist` feature: [#197](https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/197)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        *   Added target user profile, user stories, and non-functional requirements: [#207](https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/207)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   **Team-based Tasks**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Helped to organize the classes into packages: [#63](https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/63)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Fixed bugs: [#158](https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/158)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Helped to fix formatting issues with the user guide: [#199](https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/199), [#226](https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/226)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "*   **Beyond Project Team Tasks**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    *   Reported bugs and suggestions for other teams in PE-D."
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 1,
      "OngDeZhi": 40
    }
  },
  {
    "path": "docs/team/xinbin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "# Ong Xin Bin - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "## Project: AniChan"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "AniChan is a desktop application created for anime translators to help efficiently manage their workload and time. It has a wide variety of tools that can help improve"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "their workflow efficiency and translation accuracy. AniChan is built for fast typists, as such the user will interact with it through a CLI. It is written in Java with almost 14K LOC. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   **Application setup**: Loading of anime information from JSON data file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   What it does: Setting up the anime information from offline data sources, the data sources are stored as JSON files embed within our program. The file data requires a parser to properly extract anime information and convert it into an anime object, which will be used by many features to query anime information.   "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Justification: By extracting anime data, the program can easily use anime-related functions. As a translator, it is crucial to have anime information that is required by the translator."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Highlights: The implementation was challenging as the JSON parser library I was familiar with was rejected, this means I have to use a new JSON library. JSON simple which was the library approved, could not read our entire JSON file and our data files have to be divided into smaller JSON files. In addition, the need to embed our data file into our release file took us a while to figure the mechanism out. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   **New Feature**: Added the ability to add, list, delete a bookmark. With extended features to view, edit the episode, add a note and remove a note for a bookmark entry."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   What it does: Allows the user to track the anime of their interest, with additional personalisation like specifying the current episode or adding notes to the bookmark entry."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Justification: This bookmarking feature was designed to be a shortcut to the anime information they require, then extended features then allow the bookmark to keep additional information for particular anime that is useful to the translators."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Highlights: The biggest challenge was the requirement for all bookmark features to share a single bookmark command, bookmark command has to accommodate seven bookmark actions without being too complicated to the users. This is done using multiple parameters and different combinations of variable signature types. Additionally, the bookmark parser and bookmark command logic are branched by the type of bookmark action to perform with various checks and validations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   **New Feature:** Added the ability to save and load bookmark data automatically."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   What it does: Helps the user to automatically save their bookmark data into the file `bookmark.txt`, and loads the data found in this file automatically when the application is launched."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Justification: Being an application to help users keep track of their anime, the current episodes, and the anime notes, persistent storage would be essential to ensure users not would have to re-enter their bookmark information each time they use the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Highlights: When loading bookmark data, each entry (each line) recorded in `bookmark.txt` would be split into parts that form a bookmark entry. If the object do not properly form each bookmark object they are deemed corrupted. If the bookmark is corrupted, then only that specific bookmark cannot be loaded, the rest of the bookmark(s) will still be loaded if they are valid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   **Code contributed:** [RepoSense](#https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#search\u003dn3wsoldier\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dn3wsoldier\u0026tabRepo\u003dAY2021S1-CS2113T-F12-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   **Documentation**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        *   Add documentation for the feature `bookmark`: [#193](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/193)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        *   Add implementation details of `bookmark` feature: [#201](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/201)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        *   Contributed to the design and their write-ups of Command, AnimeData, User and Storage Manager Class diagram designs: [#174](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/174)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        *   Contributed to manual testing of `bookmark` feature: [#271](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/271)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        *   Contributed to user stories: [#215](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/215)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   **Team-based tasks**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Created issues based on team\u0027s discussions and meeting"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Review and comment on PR by other team members "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Added comprehensive JUnit testing to increase code coverage [#183](#https://github.com/AY2021S1-CS2113T-F12-2/tp/pull/183)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "*   **Beyond Project Team Tasks**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Review the Developer Guide of another team"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Review the User Guide of another team"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    *   Perform System and Acceptance testing for PE-D"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 47
    }
  },
  {
    "path": "src/main/java/anichan/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ANICHAN_STORAGE_DIRECTORY \u003d \"data\" + File.separator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(Main.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String DEFAULT_NAME \u003d \"Default\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final StorageManager storageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private AnimeData animeData;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager \u003d new StorageManager(ANICHAN_STORAGE_DIRECTORY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        displayWelcome();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        userSetup();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeDataSetup();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        while (ui.hasNextLine(user)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                String userInput \u003d ui.readUserInput();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                Command command \u003d parser.getCommand(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                String commandOutput \u003d command.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printMessage(commandOutput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                if (command.getShouldExit()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    ui.printGoodbyeMessage(user.getHonorificName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            } catch (AniException exception) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ui.printErrorMessage(exception.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * The starting point of AniChan."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param args are the arguments parsed in (if any)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void displayWelcome() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        LOGGER.log(Level.INFO, \"AniChan started! Initializing...\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Calls the relevant methods to load or setup the user and his workspaces."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void userSetup() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        loadUserData();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        ArrayList\u003cWorkspace\u003e workspaceList \u003d loadWorkspaceData();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (user \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            newUserSetup();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        workspaceSetup(workspaceList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Performs the loading of the source data, AnimeData."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void animeDataSetup() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            animeData \u003d new AnimeData();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } catch (AniException exception) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            ui.printMessage(\"\\tAnimeData: \" + exception.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Loads existing user data (if any)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void loadUserData() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            user \u003d storageManager.loadUser();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"User: Loaded successfully.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.INFO, \"Loaded \" + user.getName() + \" from storage\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (AniException exception) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"User: \" + exception.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Loads existing workspace data (if any)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return list of Workspace objects"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private ArrayList\u003cWorkspace\u003e loadWorkspaceData() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWorkspace\u003e workspaceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] workspaceNameList \u003d storageManager.retrieveWorkspaceList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (String workspaceName : workspaceNameList) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"Workspace \\\"\" + workspaceName + \"\\\":\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ArrayList\u003cWatchlist\u003e watchlistList \u003d loadWatchlistData(workspaceName);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Bookmark bookmark \u003d loadBookmarkData(workspaceName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (watchlistList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                watchlistList.add(new Watchlist(\"Default\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Workspace workspace \u003d new Workspace(workspaceName, watchlistList, bookmark);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            workspaceList.add(workspace);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return workspaceList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Loads existing watchlist data for the workspace (if any)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param workspaceName the workspace to retrieve watchlist data from"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return all watchlist created for that workspace"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private ArrayList\u003cWatchlist\u003e loadWatchlistData(String workspaceName) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String loadWatchlistResult \u003d storageManager.loadWatchlistList(workspaceName, watchlistList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"\\tWatchlist: \" + loadWatchlistResult);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Loaded watchlist(s) \" + loadWatchlistResult + \" from storage.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (AniException exception) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"\\tWatchlist: \" + exception.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return watchlistList;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Loads existing bookmark data for the workspace (if any)."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param workspaceName the workspace to retrieve watchlist data from"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return all bookmark created for that workspace"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Bookmark loadBookmarkData(String workspaceName) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Bookmark bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String loadBookmarkResult \u003d storageManager.loadBookmark(workspaceName, bookmark);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"\\tBookmark:  \" + loadBookmarkResult);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Loaded bookmark(s) \" + loadBookmarkResult + \" from storage.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (AniException exception) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            ui.printMessage(\"\\tBookmark:  \" + exception.getMessage());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return bookmark;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Setups the Workspace for User."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param workspaceList ArrayList of Workspaces the User manages"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private void workspaceSetup(ArrayList\u003cWorkspace\u003e workspaceList) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Workspace setup..\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user.setWorkspaceList(workspaceList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (user.getTotalWorkspaces() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                Workspace newWorkspace \u003d user.addWorkspace(DEFAULT_NAME);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                watchlistList.add(new Watchlist(DEFAULT_NAME));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                newWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                user.setActiveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.INFO, \"Workspace created: \" + newWorkspace);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                storageManager.saveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.INFO, \"Workspace saved to storage: \" + newWorkspace.getName());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            } catch (AniException exception) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                ui.printErrorMessage(exception.getMessage());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setActiveWatchlist(watchlistList.get(0));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Setups a new User for program."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private void newUserSetup() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"Creating new user..\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                String[] userDialogueInput \u003d ui.createUserDialogue();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                user \u003d new User(userDialogueInput[0], userDialogueInput[1]);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.INFO, \"Created: \" + user);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                storageManager.saveUser(user);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            } catch (AniException exception) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                ui.printErrorMessage(exception.getMessage());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                LOGGER.log(Level.WARNING, \"Exception: \" + exception.getMessage());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 48,
      "n3wsoldier": 2,
      "OngDeZhi": 127,
      "ChanJianHao": 51,
      "-": 2,
      "michaeldinata": 1
    }
  },
  {
    "path": "src/main/java/anichan/anime/Anime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.anime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " * Represents a single anime series."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class Anime {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SET_RELEASE_DATE_PARSE_ERROR_MESSAGE \u003d \"Tried to parse an invalid date format!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DATE_PATTERN_PARSED \u003d \"yyyy-MM-dd\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DASH_DELIMIT \u003d \"-\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DATE_PATTERN_PRINT \u003d \"dd/MMM/yyyy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ZERO_VALUE \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static int totalAnime \u003d ZERO_VALUE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int animeID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String animeName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private Date releaseDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String[] genre;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int avgEpisodeLength;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int totalEpisodes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public Anime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.animeID \u003d ZERO_VALUE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.animeName \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.rating \u003d ZERO_VALUE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.totalEpisodes \u003d ZERO_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.genre \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeID \u003d totalAnime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public Anime(String animeName, String[] releaseDate, int rating,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                 String[] genre, int avgEpisodeLength, int totalEpisodes) throws AniException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setAnimeID(animeID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setAnimeName(animeName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setReleaseDate(releaseDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setRating(rating);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setGenre(genre);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setAvgEpisodeLength(avgEpisodeLength);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setTotalEpisodes(totalEpisodes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        totalAnime++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeID \u003d totalAnime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getAnimeID() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return animeID;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setAnimeID(int animeID) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.animeID \u003d animeID;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setTotalEpisodes(int totalEpisodes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.totalEpisodes \u003d totalEpisodes;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setAvgEpisodeLength(int avgEpisodeLength) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.avgEpisodeLength \u003d avgEpisodeLength;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getTotalEpisodes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return totalEpisodes;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public String getAnimeName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return animeName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setAnimeName(String animeName) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.animeName \u003d animeName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public Date getReleaseDate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return releaseDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public String getReleaseDateInString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SimpleDateFormat newDateFormat \u003d new SimpleDateFormat(DATE_PATTERN_PRINT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return newDateFormat.format(releaseDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Sets the release date of this anime. Will parse in a String array and set it as a Date object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param releaseDate is a String Array containing the date information."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setReleaseDate(String[] releaseDate) throws AniException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String dateInString \u003d releaseDate[0] + DASH_DELIMIT + releaseDate[1] + DASH_DELIMIT + releaseDate[2];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            SimpleDateFormat stringToDate \u003d new SimpleDateFormat(DATE_PATTERN_PARSED);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            this.releaseDate \u003d stringToDate.parse(dateInString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } catch (java.text.ParseException invalidDateFormat) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(SET_RELEASE_DATE_PARSE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getRating() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Sets the rating of anime, by performing a check to ensure that it is within a specified range."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param rating is the rating to set it to"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setRating(int rating) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (rating \u003e 100 || rating \u003c ZERO_VALUE) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            this.rating \u003d ZERO_VALUE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public String[] getGenre() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return genre;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setGenre(String[] genre) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.genre \u003d genre;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return getAnimeName();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public static void setTotalAnime(int totalAnime) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime.totalAnime \u003d totalAnime;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 133,
      "OngDeZhi": 1,
      "ChanJianHao": 1
    }
  },
  {
    "path": "src/main/java/anichan/anime/AnimeData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.anime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " * Manages the all anime data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public class AnimeData {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private ArrayList\u003cAnime\u003e animeDataList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public AnimeData(ArrayList\u003cAnime\u003e animeDataList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime.setTotalAnime(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeDataList \u003d animeDataList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public AnimeData() throws AniException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime.setTotalAnime(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        AnimeStorage animeStorage \u003d new AnimeStorage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        loadAnimeData(animeStorage.readAnimeDatabase());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void loadAnimeData(ArrayList\u003cAnime\u003e animeDataList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeDataList \u003d animeDataList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Anime getAnime(Integer animeIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeDataList.get(animeIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeDataList.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public ArrayList\u003cAnime\u003e getAnimeDataList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeDataList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String returnAnimeInfo(int animeIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime anime \u003d animeDataList.get(animeIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Index: \" + (animeIndex + 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Name: \" + anime.getAnimeName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Episodes: \" + anime.getTotalEpisodes());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Release Date: \" + anime.getReleaseDateInString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Rating: \" + anime.getRating());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Genre: \" + Arrays.toString(anime.getGenre()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 1,
      "n3wsoldier": 40,
      "ChanJianHao": 1,
      "michaeldinata": 19
    }
  },
  {
    "path": "src/main/java/anichan/anime/AnimeStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.anime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " * Manages the storage of anime data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class AnimeStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String FILE_RESOURCE_ERROR \u003d \"File within resource stream could not be found!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(Anime.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Read anime data from offline database."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return ArrayList of anime object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if have error reading file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public ArrayList\u003cAnime\u003e readAnimeDatabase() throws AniException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        LOGGER.log(Level.INFO, \"Retrieving information from DataSource.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        ArrayList\u003cAnime\u003e animeDataList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        for (int i \u003d 1; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, \"Currently extracting from /AniListData/AniList-Data\" + i + \".json\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String fileData \u003d getDataFromJarFile(\"/AniListData/AniList-Data\" + i + \".json\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, \"Extraction of /AniListData/AniList-Data\" + i + \".json successful\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, \"Parsing Json data.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            parseJson(animeDataList, fileData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, \"Parse Successful.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        LOGGER.log(Level.INFO, \"Retrieval and Parsing for anime object in DataSource Successful.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeDataList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Parse the json file into anime object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeDataList the list to keep anime object data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param fileData      the json filedata to be parse into anime object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if error parsing string into json object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void parseJson(ArrayList\u003cAnime\u003e animeDataList, String fileData) throws AniException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        JSONArray jsonList \u003d new JSONArray();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            jsonList \u003d (JSONArray) parser.parse(fileData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Parsing file failed!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Iterator iterator \u003d jsonList.iterator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        JSONObject jsonObject \u003d new JSONObject();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String animeName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            int animeEpisode \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            int animeRating \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            int animeDuration \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //Advance the Iterator"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            jsonObject \u003d (JSONObject) iterator.next();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            jsonObject \u003d (JSONObject) jsonObject.get(\"data\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            jsonObject \u003d (JSONObject) jsonObject.get(\"Media\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //Getting anime name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            JSONObject jsonTitle \u003d (JSONObject) jsonObject.get(\"title\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (jsonTitle.get(\"english\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeName \u003d (String) jsonTitle.get(\"romaji\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeName \u003d (String) jsonTitle.get(\"english\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            assert animeName !\u003d null : \"Anime Name should not be null.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //getting anime episode"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (jsonObject.get(\"episodes\") !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeEpisode \u003d (int) (long) jsonObject.get(\"episodes\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //getting start date"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            JSONObject jsonDate \u003d (JSONObject) jsonObject.get(\"startDate\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String[] animeReleaseDate;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeReleaseDate \u003d new String[]{String.valueOf((long) jsonDate.get(\"year\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    String.valueOf((long) jsonDate.get(\"month\")), String.valueOf((long) jsonDate.get(\"day\"))};"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            assert animeReleaseDate !\u003d null : \"Release date should not be null.\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //getting rating"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (jsonObject.get(\"averageScore\") !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeRating \u003d (int) (long) jsonObject.get(\"averageScore\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //getting genre"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            ArrayList\u003cString\u003e animeGenre;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeGenre \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            JSONArray jsonGenre \u003d (JSONArray) jsonObject.get(\"genres\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            for (Object genre : jsonGenre) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeGenre.add((String) genre);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String[] animeGenreArray;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeGenreArray \u003d new String[animeGenre.size()];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeGenreArray \u003d animeGenre.toArray(animeGenreArray);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            assert animeGenreArray !\u003d null : \"Genre should not be null.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            //getting duration"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (jsonObject.get(\"duration\") !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                animeDuration \u003d (int) (long) jsonObject.get(\"duration\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            Anime anime \u003d new Anime(animeName, animeReleaseDate, animeRating, animeGenreArray, animeDuration,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    animeEpisode);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeDataList.add(anime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Read file from resource stream. (Files embedded within the program)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param filename name of the resource stream file"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return file read in string"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if error reading resourse stream file"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getDataFromJarFile(String filename) throws AniException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assert filename !\u003d null : \"Filename should not be null.\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            InputStream inputStream \u003d AnimeStorage.class.getResourceAsStream(filename);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String fileLine \u003d \"\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String fileData \u003d \"\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            while ((fileLine \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                fileData +\u003d fileLine;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            return fileData;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.SEVERE, FILE_RESOURCE_ERROR);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(FILE_RESOURCE_ERROR);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 4,
      "n3wsoldier": 153,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/main/java/anichan/bookmark/Bookmark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " * Represent the bookmark of a workspace."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public class Bookmark {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private ArrayList\u003cInteger\u003e animeBookmarkList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private ArrayList\u003cInteger\u003e animeEpisode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private ArrayList\u003cNote\u003e noteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Bookmark() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeEpisode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeBookmarkList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addAnimeBookmark(int animeIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeBookmarkList.add(animeIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeEpisode.add(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList.add(new Note());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addAnimeBookmark(int animeIndex, int episodeNumber, Note note) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.animeBookmarkList.add(animeIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.animeEpisode.add(episodeNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList.add(note);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void removeAnimeBookmark(int bookmarkIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeBookmarkList.remove(bookmarkIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeEpisode.remove(bookmarkIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList.remove(bookmarkIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void editAnimeBookmarkEpisode(int bookmarkIndex, int episode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeEpisode.set(bookmarkIndex, episode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public ArrayList\u003cInteger\u003e getAnimeBookmarkList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return animeBookmarkList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public ArrayList\u003cInteger\u003e getAnimeEpisode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return animeEpisode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public ArrayList\u003cNote\u003e getAnimeNote() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return noteList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public int getBookmarkEpisode(int bookmarkIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeEpisode.get(bookmarkIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Anime getAnimeBookmarkByIndex(AnimeData animeData, int bookmarkIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        int animeIndex \u003d this.animeBookmarkList.get(bookmarkIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeData.getAnime(animeIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public int getBookmarkSize() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeBookmarkList.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public int getNotesSize(int bookmarkIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return this.noteList.get(bookmarkIndex).getSize();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addNote(int bookmarkIndex, String note) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteList.get(bookmarkIndex).addNote(note);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String removeNote(int bookmarkIndex, int noteIndex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Note note \u003d noteList.get(bookmarkIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String removeNoteOutput \u003d note.removeNote(noteIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return removeNoteOutput;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Retrieve all notes of a bookmark entry."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmarkIndex the bookmark entry id"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return list of all notes or \"notes is empty\" string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getNoteInString(int bookmarkIndex) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        StringBuilder sbNoteList \u003d new StringBuilder(System.lineSeparator());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (noteList.get(bookmarkIndex).getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbNoteList.append(\"\\tNotes is empty.. :(\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbNoteList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            for (int i \u003d 0; i \u003c noteList.get(bookmarkIndex).getSize(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                sbNoteList.append(i + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                sbNoteList.append(\". \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                sbNoteList.append(noteList.get(bookmarkIndex).getNote(i) + System.lineSeparator());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return sbNoteList.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Construct the list of bookmark into a string which consist of the bookmark id with the anime name."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Animedata is used to retrieve the anime name of the anime id each bookmark id keeps."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData anime data source"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return List of the bookmark"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getListInString(AnimeData animeData) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        StringBuilder sbAnimeList \u003d new StringBuilder(System.lineSeparator());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (animeBookmarkList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(\"\\tUhh.. It\u0027s empty.. :(\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        for (int i \u003d 0; i \u003c animeBookmarkList.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(\"\\t\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(i + 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(\". \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            int animeIndex \u003d this.animeBookmarkList.get(i);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(animeData.getAnime(animeIndex).getAnimeName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            sbAnimeList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return sbAnimeList.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getAnimeBookmarkInfo(AnimeData animeData, int bookmarkIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeData.returnAnimeInfo(this.animeBookmarkList.get(bookmarkIndex));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Check if anime id already exist within the bookmark."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeIndex anime id to be added"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return true if already exit, else otherwise"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public boolean checkExist(int animeIndex) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        boolean alreadyExist \u003d false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        for (Integer animeID : animeBookmarkList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (animeID.equals(animeIndex)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                alreadyExist \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return alreadyExist;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 132,
      "OngDeZhi": 12,
      "ChanJianHao": 3
    }
  },
  {
    "path": "src/main/java/anichan/bookmark/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "package anichan.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " * Represents a note for a bookmark entry."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private ArrayList\u003cString\u003e notes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public Note() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public void addNote(String note) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.notes.add(note);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getNote(int noteIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return notes.get(noteIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return notes.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String removeNote(int noteIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String note \u003d notes.get(noteIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.notes.remove(noteIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 34
    }
  },
  {
    "path": "src/main/java/anichan/commands/AddToWatchlistCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Represents the command to add an anime to active Watchlist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class AddToWatchlistCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String DUPLICATE_ANIME_ERROR \u003d \"Anime is already in this watchlist!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String OUT_OF_BOUND_INDEX_ERROR \u003d \"Anime ID is invalid!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String SUCCESSFUL_ADD \u003d \"Successfully added and stored anime into active watchlist\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer animeIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(AddToWatchlistCommand.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Creates a new instance of AddToWatchlistCommand with the specified anime index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeIndex the specified anime index to add"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public AddToWatchlistCommand(Integer animeIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.animeIndex \u003d animeIndex - 1; // 1-based to 0-based numbering"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Executes addition of anime into active Watchlist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        addToWatchlist(animeData, storageManager, activeWorkspace);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime anime \u003d animeData.getAnime(animeIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String animeName \u003d anime.getAnimeName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return animeName + \" added to watchlist!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Adds selected anime to active Watchlist."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param storageManager used to save watchlist data"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param activeWorkspace used to update watchlist list and save watchlist data to correct folder"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while creating the watchlist"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void addToWatchlist(AnimeData animeData, StorageManager storageManager, "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                               Workspace activeWorkspace) throws AniException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e activeWatchlistList \u003d activeWatchlist.getAnimeList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        int indexSize \u003d animeData.getSize();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (activeWatchlistList.contains(animeIndex)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, DUPLICATE_ANIME_ERROR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(DUPLICATE_ANIME_ERROR);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (animeIndex \u003c 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (animeIndex \u003e\u003d indexSize) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assert this.animeIndex \u003e\u003d 0 : \"Anime index has to be valid\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        activeWatchlist.addAnimeToList(animeIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        storageManager.saveWatchlistList(activeWorkspace.getName(), watchlistList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, SUCCESSFUL_ADD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 8,
      "michaeldinata": 80
    }
  },
  {
    "path": "src/main/java/anichan/commands/BookmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.parser.BookmarkParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " * Represents the command that allows the user to bookmark an anime or add additional information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public class BookmarkCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Error Header"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_ERROR_HEADER \u003d \"Bookmark command execute failed:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_ERROR_MESSAGE \u003d \" provided is invalid.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Error Message Trailer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String ANIME_ID_ERROR \u003d \" Anime index is outside AnimeData range \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"(Bigger than number of anime).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String ANIME_ID_EXIST_ERROR \u003d \" Anime index is already in bookmark.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_ID_ERROR \u003d \" Bookmark index is outside Bookmark range \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"(Bigger than bookmark entries).\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String NOTES_ID_ERROR \u003d \" Note index is outside Bookmark range \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"(Bigger than number of notes).\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EPISODE_ERROR \u003d \" is invalid.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Episode provided is bigger than the total episode.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_NOTE_ERROR_MESSAGE \u003d \" provided contain \\\"~\\\" which is not allowed.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String ANIME_ID_ZERO_ERROR \u003d \" Anime index start from 1.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String NOTE_ID_ZERO_ERROR \u003d \" Note index start from 1.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_ID_ZERO_ERROR \u003d \" Bookmark index start from 1.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_ACTION_NULL \u003d \"Bookmark action cannot be null.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_NOTE_NULL_ERROR \u003d \"Bookmark note cannot be null.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Output message header"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String EPISODE_HEADER \u003d \"Current Episode: \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String NOTES_HEADER \u003d \"Notes for anime:\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String LIST_HEADER \u003d \"Listing all anime in bookmark:\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INFO_HEADER \u003d \"Here is the information for that anime.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Logging message"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_EDIT \u003d \"Executing Edit Episode.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_ADD \u003d \"Executing Add Anime to Bookmark.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_DELETE \u003d \"Executing Delete Anime from Bookmark.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_LIST \u003d \"Executing List all anime in Bookmark.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_INFO \u003d \"Executing anime info for bookmark.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_ADD_NOTE \u003d \"Executing bookmark add note.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_REMOVE_NOTE \u003d \"Executing bookmark remove note.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EXECUTE_SUCCESS \u003d \"Execute Bookmark command successful.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Constant Parameter"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final int ZERO_PARAM \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_NOTE_FORBIDDEN_CHAR \u003d \"~\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Bookmark required field"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int bookmarkIndex;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int animeIndex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int noteIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int bookmarkEpisode;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String bookmarkAction;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String bookmarkNote;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(BookmarkCommand.class.getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public BookmarkCommand(String bookmarkAction, int bookmarkIndex, int animeIndex, int bookmarkEpisode,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                           int noteIndex, String bookmarkNote) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assert bookmarkAction !\u003d null : BOOKMARK_ACTION_NULL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.bookmarkAction \u003d bookmarkAction;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.bookmarkIndex \u003d bookmarkIndex;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.animeIndex \u003d animeIndex;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.bookmarkEpisode \u003d bookmarkEpisode;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.noteIndex \u003d noteIndex;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        this.bookmarkNote \u003d bookmarkNote;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        LOGGER.log(Level.INFO, \"Successfully loaded fields for Bookmark command.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Handles the main execution of bookmark command using the bookmark action."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *     \u003cli\u003ee: edit bookmark episode\u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *     \u003cli\u003ea: add a bookmark entry\u003c/li\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *     \u003cli\u003ed: delete a bookmark entry\u003c/li\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *     \u003cli\u003el: list all bookmark entry\u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *     \u003cli\u003ei: display all information for a bookmark entry \u003c/li\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *     \u003cli\u003en: add a note to bookmark entry\u003c/li\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *     \u003cli\u003er: remove a note from bookmark entry\u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData      used to retrieve anime information"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param user           used to modify user data"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return a printable string that contains the bookmark output message"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Workspace workspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Bookmark bookmark \u003d user.getActiveWorkspace().getBookmark();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        switch (bookmarkAction) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.EPISODE_PARAM:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_EDIT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d editBookmarkEpisode(animeData, bookmark);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            storageManager.saveBookmark(workspace.getName(), bookmark);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.ADD_PARAM:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_ADD);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d addBookmarkEntry(animeData, bookmark);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            storageManager.saveBookmark(workspace.getName(), bookmark);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.DELETE_PARAM:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_DELETE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d deleteBookmarkEntry(animeData, bookmark);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            storageManager.saveBookmark(workspace.getName(), bookmark);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.LIST_PARAM:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_LIST);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d LIST_HEADER;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String bookmarkList \u003d listBookmark(animeData, bookmark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result +\u003d bookmarkList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.INFO_PARAM:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_INFO);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d INFO_HEADER + System.lineSeparator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result +\u003d getBookmarkInfo(animeData, bookmark);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.ADD_NOTE_PARAM:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            assert bookmarkNote !\u003d null : BOOKMARK_NOTE_NULL_ERROR;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_ADD_NOTE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d addNoteToBookmark(animeData, bookmark);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            storageManager.saveBookmark(workspace.getName(), bookmark);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case BookmarkParser.REMOVE_NOTE_PARAM:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_REMOVE_NOTE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result \u003d removeNoteFromBookmark(animeData, bookmark);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            storageManager.saveBookmark(workspace.getName(), bookmark);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        LOGGER.log(Level.INFO, BOOKMARK_EXECUTE_SUCCESS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Retrieve the information of bookmark entry."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Information retrieve is anime info, episode info and anime notes."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark  used to manage bookmark entries"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return a printable string that contain information of bookmark entry"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String getBookmarkInfo(AnimeData animeData, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String animeInfo \u003d getAnimeInfoFromBookmark(animeData, bookmark);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result +\u003d animeInfo + System.lineSeparator() + System.lineSeparator();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Integer bookmarkEpisodeInfo \u003d bookmark.getBookmarkEpisode(bookmarkIndex - 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (bookmarkEpisodeInfo !\u003d 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result +\u003d EPISODE_HEADER;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result +\u003d bookmarkEpisodeInfo;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            result +\u003d System.lineSeparator() + System.lineSeparator();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result +\u003d NOTES_HEADER;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String notesInfo \u003d getAnimeNotesFromBookmark(bookmark);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result +\u003d notesInfo;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Retrieve all Notes from a bookmark entry."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark used to manage bookmark entries"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return the notes in list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String getAnimeNotesFromBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String notesInfo \u003d bookmark.getNoteInString(bookmarkIndex - 1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return notesInfo;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Remove note from a bookmark entry."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark  used to manage bookmark entries"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return message of removing note"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String removeNoteFromBookmark(AnimeData animeData, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkBookmarkIndex(bookmark);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkNoteIndex(bookmark);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d \"Deleting note: \";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result +\u003d bookmark.removeNote(bookmarkIndex - 1, noteIndex - 1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime animeToRemoveNote \u003d bookmark.getAnimeBookmarkByIndex(animeData, bookmarkIndex - 1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result +\u003d System.lineSeparator() + \"From: \" + animeToRemoveNote.getAnimeName() + \".\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Add a note to a bookmark entry."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark  used to manage bookmark entries"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return message of adding note"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String addNoteToBookmark(AnimeData animeData, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkBookmarkIndex(bookmark);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkNoteForForbiddenChar();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmark.addNote(bookmarkIndex - 1, bookmarkNote);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime animeToDelete \u003d bookmark.getAnimeBookmarkByIndex(animeData, bookmarkIndex - 1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result \u003d \"Adding note:\\\"\" + bookmarkNote + \"\\\"\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                + \" to \" + animeToDelete.getAnimeName() + \"!\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Retrieve anime info from bookmark entry."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark  used to manage bookmark entries"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return the anime information in string"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String getAnimeInfoFromBookmark(AnimeData animeData, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkBookmarkIndex(bookmark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String animeInfo \u003d bookmark.getAnimeBookmarkInfo(animeData, bookmarkIndex - 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return animeInfo;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Delete a bookmark entry."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark  used to manage bookmark entries"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return delete bookmark entry message"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String deleteBookmarkEntry(AnimeData animeData, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkBookmarkIndex(bookmark);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime animeToDelete \u003d bookmark.getAnimeBookmarkByIndex(animeData, bookmarkIndex - 1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result \u003d \"Removing \" + animeToDelete.getAnimeName() + \"! :(\";"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmark.removeAnimeBookmark(bookmarkIndex - 1);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Add a bookmark entry."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark  used to manage bookmark entries"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return add bookmark entry message"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String addBookmarkEntry(AnimeData animeData, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkAnimeIndex(animeData);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkAnimeNotInBookmark(bookmark);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmark.addAnimeBookmark(animeIndex - 1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime animeToAdd \u003d animeData.getAnime(animeIndex - 1);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result \u003d \"Saving \" + animeToAdd.getAnimeID() + \". \" + animeToAdd.getAnimeName() + \" to bookmark.\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Check that the bookmark does not already have the bookmark entry."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark used to manage bookmark entries"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if bookmark entry already exist"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void checkAnimeNotInBookmark(Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (bookmark.checkExist(animeIndex - 1)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidAnimeIndex \u003d \"Anime index \" + animeIndex + BOOKMARK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + ANIME_ID_EXIST_ERROR;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidAnimeIndex);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidAnimeIndex);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Edit bookmark episode."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark  used to manage bookmark entries"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return edit bookmark episode message"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String editBookmarkEpisode(AnimeData animeData, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkBookmarkIndex(bookmark);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Anime animeToEdit \u003d bookmark.getAnimeBookmarkByIndex(animeData, bookmarkIndex - 1);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        checkEpisode(animeToEdit.getTotalEpisodes());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmark.editAnimeBookmarkEpisode(bookmarkIndex - 1, bookmarkEpisode);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        result \u003d \"Editing the current episode for \" + animeToEdit.getAnimeName() + \" to episode(s) \""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                + bookmarkEpisode + \".\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Check that the bookmark index is valid."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark used to manage bookmark entries"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if bookmark id is outside the number of bookmark"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void checkBookmarkIndex(Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //Bookmark index is one based numbering"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (bookmarkIndex \u003e bookmark.getBookmarkSize()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidBookmarkIndex \u003d \"Bookmark index \" + bookmarkIndex + BOOKMARK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + BOOKMARK_ID_ERROR;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidBookmarkIndex);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidBookmarkIndex);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } else if (bookmarkIndex \u003d\u003d ZERO_PARAM) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidBookmarkIndex \u003d \"Bookmark index \" + bookmarkIndex + BOOKMARK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + BOOKMARK_ID_ZERO_ERROR;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidBookmarkIndex);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidBookmarkIndex);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Check that note does not consist \"~\"."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if note consist \"~\""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void checkNoteForForbiddenChar() throws AniException {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (bookmarkNote.contains(BOOKMARK_NOTE_FORBIDDEN_CHAR)) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidBookmarkNote \u003d \"Bookmark note \" + bookmarkNote + BOOKMARK_NOTE_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidBookmarkNote);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidBookmarkNote);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Check that the episode is not larger than the total episode."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param totalEpisode the total episode for an anime"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if the bookmark episode to be edited is bigger than total episode"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void checkEpisode(int totalEpisode) throws AniException {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (bookmarkEpisode \u003e totalEpisode) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidBookmarkNote \u003d \"Bookmark episode \" + bookmarkEpisode + BOOKMARK_EPISODE_ERROR;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidBookmarkNote);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidBookmarkNote);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Check that note id is valid."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark used to manage bookmark entries"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if the note does not exist"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void checkNoteIndex(Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //Bookmark index is one based numbering"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (noteIndex \u003e bookmark.getNotesSize(bookmarkIndex - 1)) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidBookmarkIndex \u003d \"Notes index \" + noteIndex + BOOKMARK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + NOTES_ID_ERROR;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidBookmarkIndex);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidBookmarkIndex);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } else if (noteIndex \u003d\u003d ZERO_PARAM) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidBookmarkIndex \u003d \"Notes index \" + noteIndex + BOOKMARK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + NOTE_ID_ZERO_ERROR;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidBookmarkIndex);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidBookmarkIndex);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Check that the anime id is valid."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if the anime id is outside the range of our anime data source"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void checkAnimeIndex(AnimeData animeData) throws AniException {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //Anime index is one based numbering"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (animeIndex \u003e animeData.getSize()) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidAnimeIndex \u003d \"Anime index \" + animeIndex + BOOKMARK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + ANIME_ID_ERROR;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidAnimeIndex);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidAnimeIndex);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } else if (animeIndex \u003d\u003d ZERO_PARAM) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidAnimeIndex \u003d \"Anime index \" + animeIndex + BOOKMARK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + ANIME_ID_ZERO_ERROR;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_EXECUTE_ERROR_HEADER + invalidAnimeIndex);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidAnimeIndex);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Retrieve bookmark list from bookmark."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmark  used to manage bookmark entries"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return the bookmark list in string"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String listBookmark(AnimeData animeData, Bookmark bookmark) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return bookmark.getListInString(animeData);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Getters and Setters"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public String getBookmarkAction() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return this.bookmarkAction;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 2,
      "n3wsoldier": 401,
      "OngDeZhi": 2,
      "ChanJianHao": 6,
      "michaeldinata": 6
    }
  },
  {
    "path": "src/main/java/anichan/commands/BrowseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " * Represents the command that allows the user to browse through all anime series."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class BrowseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int MAX_NAME_LEN \u003d 51;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int MAX_ID_LEN \u003d 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int MAX_INDEX_LEN \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int TRIM_TITLE_END \u003d 48;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int TRIM_TITLE_START \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int sortType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int page;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int indexToPrint;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int animePerPage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    //Constant values used for sortBrowseList()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ANIME_PER_PAGE \u003d 20;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ORDER_ASCENDING \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ORDER_DESCENDING \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ID_SORT \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int NAME_SORT \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int RATING_SORT \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int RESET_SORT \u003d 3;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    //Constant Strings used for buildBrowseOutput()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ID_HEADER \u003d \" [Id: \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ID_CLOSER \u003d \"]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ASCII_ONLY_REGEX \u003d \"[^\\\\x00-\\\\x7F]\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String THREE_DOTS \u003d \"...\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String PERCENTAGE_STRING \u003d \"%\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String S_STRING \u003d \"s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DOT_SPACE \u003d \". \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String LAST_PAGE_INDICATOR \u003d \"You have reached the last page!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    //Log Messages"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String LAST_ANIME_WARNING \u003d \"Printing Last Anime Series from source\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String BROWSE_PAGE_INDICATOR \u003d \"Browsing Page: \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String OUT_OF_BOUND_PAGE_WARNING \u003d \"Getting page: Tried to start at index: \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String OUT_OF_BOUND_PAGE_ERROR \u003d \"Invalid Page size!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ASSERT_SORT_TYPE \u003d \"sortType should be \u003c 3\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ASSERT_ORDER_TYPE \u003d \"order should be \u003c 2\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_ID_DESCENDING \u003d \"Sorting by ID descending\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_ID_ASCENDING \u003d \"Sorting by ID ascending\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_NAME_ASCENDING \u003d \"Sorting by Name Ascending (A to Z)\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_NAME_DESCENDING \u003d \"Sorting by Name Descending (Z to A)\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_RATING_ASCENDING \u003d \"Sorting by Rating Ascending (low to high)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_RATING_DESCENDING \u003d \"Sorting by Rating Descending (high to low)\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(BrowseCommand.class.getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public BrowseCommand(int sortType, int order, int page) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.indexToPrint \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animePerPage \u003d ANIME_PER_PAGE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setSortType(sortType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setOrder(order);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setPage(page);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Handles the main execution of browse command with calls to two core operations buildBrowseOutput() and"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * sortBrowseList()."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @return a printable string that contains the browse output"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        ArrayList\u003cAnime\u003e usableList \u003d animeData.getAnimeDataList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assert (sortType \u003c 4) : ASSERT_SORT_TYPE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assert (order \u003c 3) : ASSERT_ORDER_TYPE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        sortBrowseList(usableList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d buildBrowseOutput(usableList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setSortType(RESET_SORT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        sortBrowseList(usableList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Called by execute to build a printable output in browse format."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param usableList used to retrieve the Anime object within the browse window"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @return printable string that is formatted for browse output"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if the starting index of the page supplied exceeds total number of anime"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String buildBrowseOutput(ArrayList\u003cAnime\u003e usableList) throws AniException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        checkForPageBound(usableList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (int i \u003d indexToPrint; i \u003c indexToPrint + animePerPage; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            Anime browseAnime \u003d usableList.get(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String animeName \u003d browseAnime.getAnimeName();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            //Removes non-ascii and trim long titles."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            animeName \u003d animeName.replaceAll(ASCII_ONLY_REGEX, EMPTY_STRING);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (animeName.length() \u003e\u003d MAX_NAME_LEN) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                animeName \u003d animeName.substring(TRIM_TITLE_START, TRIM_TITLE_END);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                animeName +\u003d THREE_DOTS;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            //Pads the output if necessary"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String currAnimeID \u003d Integer.toString(browseAnime.getAnimeID());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String browseIndex \u003d i + 1 + DOT_SPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            animeName \u003d String.format(PERCENTAGE_STRING + (-MAX_NAME_LEN) + S_STRING, animeName.trim());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            currAnimeID \u003d String.format(PERCENTAGE_STRING + (-MAX_ID_LEN) + S_STRING, currAnimeID);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            browseIndex \u003d String.format(PERCENTAGE_STRING + (-MAX_INDEX_LEN) + S_STRING, browseIndex);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            result.append(browseIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            result.append(animeName);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            result.append(ID_HEADER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            result.append(currAnimeID);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            result.append(ID_CLOSER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (i + 1 \u003e\u003d usableList.size()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                result.append(LAST_PAGE_INDICATOR).append(System.lineSeparator());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                LOGGER.log(Level.WARNING, LAST_ANIME_WARNING);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        result.append(BROWSE_PAGE_INDICATOR).append(page);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Checks if the page supplied exceed the initial starting index."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param usableList the list containing Anime objects to be sorted"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if the page supplied too big to be used."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void checkForPageBound(ArrayList\u003cAnime\u003e usableList) throws AniException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (indexToPrint \u003e\u003d usableList.size()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_PAGE_WARNING + indexToPrint);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_PAGE_ERROR);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Called by execute to sort the list depending on the optional parameters supplied. May also be called to"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * reset the list back to its original state."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param usableList the list containing Anime objects to be sorted"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void sortBrowseList(ArrayList\u003cAnime\u003e usableList) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (sortType \u003d\u003d ID_SORT \u0026\u0026 order \u003d\u003d ORDER_DESCENDING) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_ID_DESCENDING);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getAnimeID).reversed());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else if (sortType \u003d\u003d NAME_SORT \u0026\u0026 order \u003d\u003d ORDER_DESCENDING) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_NAME_DESCENDING);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getAnimeName).reversed());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else if (sortType \u003d\u003d NAME_SORT) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_NAME_ASCENDING);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getAnimeName));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else if (sortType \u003d\u003d RATING_SORT \u0026\u0026 order \u003d\u003d ORDER_ASCENDING) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_RATING_ASCENDING);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getRating));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else if (sortType \u003d\u003d RATING_SORT) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_RATING_DESCENDING);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getRating).reversed());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else if (sortType \u003d\u003d RESET_SORT) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            usableList.sort(Comparator.comparing(Anime::getAnimeID));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, SORT_ID_ASCENDING);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Sets the page to the supplied parameter unless it is a negative value."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param page the page that was requested"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setPage(int page) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.page \u003d Math.max(page, 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        indexToPrint \u003d (page - 1) * getAnimePerPage();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getPage() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return page;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setSortType(int sortType) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.sortType \u003d sortType;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getSortType() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return sortType;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setOrder(int order) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getOrder() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public int getAnimePerPage() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return animePerPage;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setAnimePerPage(int animePerPage) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.animePerPage \u003d animePerPage;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 207,
      "n3wsoldier": 1,
      "OngDeZhi": 2,
      "ChanJianHao": 5,
      "michaeldinata": 2
    }
  },
  {
    "path": "src/main/java/anichan/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private boolean shouldExit \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean getShouldExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return shouldExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setShouldExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.shouldExit \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        throw new AniException(\"This method should be implemented in the child class\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 10,
      "ChanJianHao": 4,
      "michaeldinata": 8
    }
  },
  {
    "path": "src/main/java/anichan/commands/EstimateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the command to estimate the time needed to translate a script."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class EstimateCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int DEFAULT_WORDS_PER_HOUR \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int MINUTES_PER_HOUR \u003d 60;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SPLIT_WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // The values 400, 500, and 600 refers to the amount of words an average translator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // can translates in an hour."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int[] AVERAGE_TRANSLATOR_WORDS_PER_HOUR \u003d {400, 500, 600};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(EstimateCommand.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String scriptFileName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final int wordsPerHour;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new instance of EstimateCommand with the specified script file name and words per hour."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param scriptFileName specified script file name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param wordsPerHour specified words per hour"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public EstimateCommand(String scriptFileName, int wordsPerHour) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.scriptFileName \u003d scriptFileName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.wordsPerHour \u003d wordsPerHour;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"EstimateCommand object is created.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Depending on whether the optional parameter, words per hour (wph) is specified."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eSpecified: Calculates using the value.\u003c/li\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eNot specified: Calculates using the values defined in {@link #AVERAGE_TRANSLATOR_WORDS_PER_HOUR}.\u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return estimation timing generated after executing the command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileContent \u003d storageManager.loadScript(activeWorkspace.getName(), scriptFileName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        int wordCount \u003d fileContent.split(SPLIT_WHITESPACE).length;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, wordCount + \" words in the script (\" + scriptFileName + \").\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert (wordsPerHour \u003e 0 || wordsPerHour \u003d\u003d DEFAULT_WORDS_PER_HOUR) : \"Words per hour value cannot be zero!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        StringBuilder commandResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (wordsPerHour !\u003d DEFAULT_WORDS_PER_HOUR) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            double timeNeeded \u003d wordCount / (double) wordsPerHour;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            commandResult.append(\"You would need \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            commandResult.append(timeNeededToString(timeNeeded));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            for (int averageWordsPerHour : AVERAGE_TRANSLATOR_WORDS_PER_HOUR) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                double timeNeeded \u003d wordCount / (double) averageWordsPerHour;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandResult.append(\"Average translator (\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandResult.append(averageWordsPerHour);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandResult.append(\" words per hour) takes: \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandResult.append(timeNeededToString(timeNeeded));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                commandResult.append(System.lineSeparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            // Remove extra new line."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            commandResult.setLength(commandResult.length() - System.lineSeparator().length());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Returning estimate result for \" + scriptFileName"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                    + \" with \" + wordsPerHour + \"wph.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return commandResult.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Converts the estimated timing to a human-readable format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param timeNeeded the estimated timing"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a human-readable format of the estimated timing"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String timeNeededToString(double timeNeeded) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        double hoursNeeded \u003d Math.floor(timeNeeded);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        double minutesNeeded \u003d (timeNeeded - hoursNeeded) * MINUTES_PER_HOUR;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String hoursAndMinutesNeeded \u003d (int) hoursNeeded + \" hour(s)\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if ((int)minutesNeeded !\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            hoursAndMinutesNeeded +\u003d \" \" + (int) minutesNeeded + \" minute(s).\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            hoursAndMinutesNeeded +\u003d \".\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Converted \" + timeNeeded + \" to: \" + hoursAndMinutesNeeded);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return hoursAndMinutesNeeded;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 102,
      "ChanJianHao": 5
    }
  },
  {
    "path": "src/main/java/anichan/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Represents the command to exit the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String NULL_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Exits the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        setShouldExit();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return NULL_STRING;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 3,
      "michaeldinata": 23
    }
  },
  {
    "path": "src/main/java/anichan/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Represents the command to show the full command list of the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_ESTIMATE \u003d \"estimate\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_BROWSE \u003d \"browse\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_SEARCH \u003d \"search\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_INFO \u003d \"info\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_WORKSPACE \u003d \"workspace\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_WATCHLIST \u003d \"watchlist\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_REMOVE \u003d \"remove\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_BOOKMARK \u003d \"bookmark\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(HelpCommand.class.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private String commandOption;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Creates a new instance of HelpCommand with the specified command option."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param commandOption the specified command option to show help"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public HelpCommand(String commandOption) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.commandOption \u003d commandOption;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Returns a string representation of the specified command list of the program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return buildHelpOutput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns a string representation of the specified command list of the program."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return a string representation of the specified command list of the program."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private String buildHelpOutput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, \"Start of build help output\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        switch (commandOption) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_EMPTY:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildFullResult();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_ESTIMATE:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildEstimateResult();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_BROWSE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildBrowseResult();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_SEARCH:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildSearchResult();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_INFO:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildInfoResult();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_WORKSPACE:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildWorkspaceResult();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_WATCHLIST:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildWatchlistResult();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_ADD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildAddResult();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_REMOVE:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildRemoveResult();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_VIEW:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildViewResult();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_BOOKMARK:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            result \u003d buildBookmarkResult();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, \"End of build help output\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for all commands."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for all commands"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildFullResult() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(buildEstimateResult());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(appendLineSeparators());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(buildBrowseResult());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(appendLineSeparators());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(buildSearchResult());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(appendLineSeparators());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(buildInfoResult());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(appendLineSeparators());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(buildWorkspaceResult());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(appendLineSeparators());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(buildWatchlistResult());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(appendLineSeparators());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(buildAddResult());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(appendLineSeparators());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(buildRemoveResult());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(appendLineSeparators());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(buildViewResult());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(appendLineSeparators());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(buildBookmarkResult());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(appendLineSeparators());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Click on the link below for more information on all of our commands: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"https://ay2021s1-cs2113t-f12-2.github.io/tp/UserGuide.html\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for \u0027estimate\u0027 command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for \u0027estimate\u0027 command"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildEstimateResult() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Estimate time needed to translate a script:\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"estimate \u003cSCRIPT_FILE_NAME\u003e [-wph WORDS_PER_HOUR]\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for \u0027browse\u0027 command."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for \u0027browse\u0027 command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildBrowseResult() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Browse through the anime list:\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"browse [-s SORT_CATEGORY] [-o SORT_ORDER] [-p PAGE_NUMBER]\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - SORT_CATEGORY: name, rating\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - SORT_ORDER: asc, dsc\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - PAGE_NUMBER: 1, 2, 3, ...\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for \u0027search\u0027 command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for \u0027search\u0027 command"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildSearchResult() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Search for anime:\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - By title: search -n \u003cSEARCH_TERM\u003e\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - By genre: search -g \u003cSEARCH_TERM\u003e\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for \u0027info\u0027 command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for \u0027info\u0027 command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildInfoResult() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"View information of an anime:\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"info \u003cANIME_ID\u003e\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for \u0027workspace\u0027 command."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for \u0027workspace\u0027 command"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildWorkspaceResult() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Workspace management:\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Create new workspace:  workspace -n \u003cNAME\u003e\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Switch workspace:      workspace -s \u003cNAME\u003e\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - List workspace:        workspace -l\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Delete workspace:      workspace -d \u003cNAME\u003e\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for \u0027watchlist\u0027 command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for \u0027watchlist\u0027 command"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildWatchlistResult() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Watchlist management:\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Create a new watchlist:    watchlist -n \u003cWATCHLIST_NAME\u003e\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - List all watchlist:        watchlist -l\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Select a watchlist to use: watchlist -s \u003cWATCHLIST_ID\u003e\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Delete a watchlist:        watchlist -d \u003cWATCHLIST_ID\u003e\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for \u0027add\u0027 command."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for \u0027add\u0027 command"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildAddResult() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Add an anime to active watchlist:\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"add \u003cANIME_ID\u003e\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for \u0027remove\u0027 command."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for \u0027remove\u0027 command"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildRemoveResult() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Remove anime from active watchlist:\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"remove \u003cANIME_ID_IN_WATCHLIST\u003e\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for \u0027view\u0027 command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for \u0027view\u0027 command"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildViewResult() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"View all anime in watchlist:\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"view [-v WATCHLIST_ID]\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns help for \u0027bookmark\u0027 command."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return help for \u0027bookmark\u0027 command"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder buildBookmarkResult() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Bookmark management:\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Bookmark an anime:         bookmark -a \u003cANIME_ID\u003e\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Delete bookmark:           bookmark -d \u003cBOOKMARK_ID\u003e\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - List bookmark entries:     bookmark -l\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Edit a bookmark:           bookmark \u003cBOOKMARK_ID\u003e -e \u003cEPISODE\u003e\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Add note to bookmark:      bookmark \u003cBOOKMARK_ID\u003e -n \u003cNOTE\u003e\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - Remove note from bookmark: bookmark \u003cBOOKMARK_ID\u003e -r \u003cNOTE_ID\u003e\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"    - View info of bookmark:     bookmark \u003cBOOKMARK_ID\u003e\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns line separators to distinguish different commands."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return line separators to distinguish different commands."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private StringBuilder appendLineSeparators() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 3,
      "michaeldinata": 307
    }
  },
  {
    "path": "src/main/java/anichan/commands/InfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Represents the command to view the information of an anime."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class InfoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String OUT_OF_BOUND_INDEX_ERROR \u003d \"Anime ID is invalid!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer animeIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(InfoCommand.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Creates a new instance of InfoCommand with the specified anime index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeIndex the specified anime index to show information"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public InfoCommand(Integer animeIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.animeIndex \u003d animeIndex - 1; // 1-based to 0-based numbering"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns a string representation of the information of"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * the specified anime."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        int indexSize \u003d animeData.getSize();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (animeIndex \u003c 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (animeIndex \u003e\u003d indexSize) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(\"Here is the information for the anime:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(System.lineSeparator());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String animeInfo \u003d animeData.returnAnimeInfo(animeIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        result.append(animeInfo);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 5,
      "michaeldinata": 55
    }
  },
  {
    "path": "src/main/java/anichan/commands/RemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Represents the command to remove an anime from the active Watchlist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String OUT_OF_BOUND_INDEX_ERROR \u003d \"Invalid Watchlist Index!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_WATCHLIST_ERROR \u003d \"Watchlist is empty!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String SUCCESSFUL_REMOVE \u003d \"Successfully removed anime from active watchlist\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer animeIndexInWatchlist;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer animeIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(RemoveCommand.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Creates a new instance of RemoveCommand  with the specified anime index in watchlist to remove."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeIndexInWatchlist specified anime index in Watchlist to remove"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public RemoveCommand(Integer animeIndexInWatchlist) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.animeIndexInWatchlist \u003d animeIndexInWatchlist - 1; // 1-based to 0-based numbering"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Executes removing of anime from active Watchlist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        removeFromWatchlist(storageManager, activeWorkspace);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime anime \u003d animeData.getAnime(animeIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String animeName \u003d anime.getAnimeName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return animeName + \" successfully removed from watchlist!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Removes selected anime from active Watchlist."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param storageManager used to save watchlist data"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param activeWorkspace used to update watchlist list and save watchlist data to correct folder"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while creating the watchlist"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private void removeFromWatchlist(StorageManager storageManager, Workspace activeWorkspace) throws AniException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (activeWatchlist.getWatchlistSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, EMPTY_WATCHLIST_ERROR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(EMPTY_WATCHLIST_ERROR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (activeWatchlist.getWatchlistSize() \u003c\u003d animeIndexInWatchlist) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (animeIndexInWatchlist \u003c 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assert this.animeIndexInWatchlist \u003e\u003d 0 : \"anime index in watchlist has to be valid\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeIndex \u003d activeWatchlist.getWatchlistListAnimeIndex(animeIndexInWatchlist);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        activeWatchlist.removeAnimeFromList(animeIndexInWatchlist);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        storageManager.saveWatchlistList(activeWorkspace.getName(), watchlistList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, SUCCESSFUL_REMOVE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 8,
      "michaeldinata": 78
    }
  },
  {
    "path": "src/main/java/anichan/commands/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " * Represents the command that allows the user to search for a specific anime series."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ID_HEADER \u003d \"[ID:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ID_CLOSER \u003d \"] \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NO_RESULTS_FOUND \u003d \"No results found!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SEARCHING_BY_GENRE \u003d \"Searching By Genre\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SEARCHING_BY_ANIME_NAME \u003d \"Searching By Anime Name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SEARCH_TYPE_INVALID \u003d \"Something went wrong with search input\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SEARCH_TYPE_INVALID_LOG \u003d \"Search Type has the wrong values.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int SEARCH_BY_NAME \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int SEARCH_BY_GENRE \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int NO_SEARCH_SELECTED \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(SearchCommand.class.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INIT_STRING \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String searchTerm;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String result;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String searchGenre;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int searchType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public SearchCommand(String searchTerm, String searchGenre, int searchType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setSearchTerm(searchTerm);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setSearchType(searchType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setSearchGenre(searchGenre);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        result \u003d INIT_STRING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public SearchCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        searchTerm \u003d INIT_STRING;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        searchGenre \u003d INIT_STRING;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        result \u003d INIT_STRING;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        searchType \u003d NO_SEARCH_SELECTED;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Handles the execution of the search and the returning of a printable result."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @return a printable string that contains the browse output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException when an invalid searchType is being executed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        switch (searchType) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case SEARCH_BY_NAME:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            searchForAnime(animeData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case SEARCH_BY_GENRE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            searchForGenre(animeData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.SEVERE, SEARCH_TYPE_INVALID_LOG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(SEARCH_TYPE_INVALID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            return NO_RESULTS_FOUND;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Finds all anime that contains the genre that is within the search term."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param animeData the data to search from"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void searchForGenre(AnimeData animeData) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        LOGGER.log(Level.INFO, SEARCHING_BY_GENRE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        StringBuilder searchOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (Anime anime : animeData.getAnimeDataList()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (doesAnimeContainThatGenre(anime)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchOutput.append(ID_HEADER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchOutput.append(anime.getAnimeID());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchOutput.append(ID_CLOSER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchOutput.append(anime.getAnimeName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchOutput.append(System.lineSeparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        result \u003d searchOutput.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Loops through all genre that the anime has and find the search term."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param anime the anime to check."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @return true if a genre matches the search term"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private boolean doesAnimeContainThatGenre(Anime anime) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (String genre: anime.getGenre()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (genre.equalsIgnoreCase(searchGenre)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Finds all anime that contains the keyword or matches the keyword exactly."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param animeData the data to search from"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void searchForAnime(AnimeData animeData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        LOGGER.log(Level.INFO, SEARCHING_BY_ANIME_NAME);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        StringBuilder searchOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (Anime anime : animeData.getAnimeDataList()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (anime.getAnimeName().toLowerCase().contains(searchTerm)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchOutput.append(ID_HEADER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchOutput.append(anime.getAnimeID());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchOutput.append(ID_CLOSER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchOutput.append(anime.getAnimeName());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                searchOutput.append(System.lineSeparator());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        result \u003d searchOutput.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setSearchTerm(String searchTerm) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.searchTerm \u003d searchTerm.toLowerCase();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        setSearchType(SEARCH_BY_NAME);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setSearchType(int searchType) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.searchType \u003d searchType;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void setSearchGenre(String searchGenre) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        this.searchGenre \u003d searchGenre;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 137,
      "OngDeZhi": 1,
      "ChanJianHao": 5,
      "michaeldinata": 2
    }
  },
  {
    "path": "src/main/java/anichan/commands/ViewWatchlistCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Represents the command to view all anime in a certain Watchlist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class ViewWatchlistCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String OUT_OF_BOUND_INDEX_ERROR \u003d \"Watchlist ID is invalid!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String NO_WATCHLIST_ERROR \u003d \"There are no watchlists in your workspace!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_WATCHLIST_ERROR \u003d \"There are no anime in \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer watchlistIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(ViewWatchlistCommand.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Creates a new instance of ViewWatchlistCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public ViewWatchlistCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Creates a new instance of ViewWatchlistCommand with the specified watchlist index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param watchlistIndex the specified watchlist index to view"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public ViewWatchlistCommand(Integer watchlistIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.watchlistIndex \u003d watchlistIndex - 1; // 1-based to 0-based numbering"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Returns a string representation of all the anime in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * specified Watchlist."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        int watchlistSize \u003d watchlistList.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (watchlistSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, NO_WATCHLIST_ERROR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(NO_WATCHLIST_ERROR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist selectedWatchlist;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (watchlistIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            selectedWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            checkValidWatchlistIndex(watchlistSize, watchlistIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            selectedWatchlist \u003d watchlistList.get(watchlistIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeInWatchlist \u003d selectedWatchlist.getAnimeList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String selectedWatchlistName \u003d selectedWatchlist.getName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (animeInWatchlist.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(EMPTY_WATCHLIST_ERROR + selectedWatchlistName + \" watchlist!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String result \u003d buildAnimeInWatchlist(animeData, selectedWatchlist);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Builds and returns a string representation of all the anime"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * in the specific Watchlist."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param selectedWatchlist the Watchlist that was selected to be viewed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return a string representation of all the anime in the specific Watchlist"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private String buildAnimeInWatchlist(AnimeData animeData, Watchlist selectedWatchlist) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeInWatchlist \u003d selectedWatchlist.getAnimeList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String selectedWatchlistName \u003d selectedWatchlist.getName();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder sbWatchlistAnime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        sbWatchlistAnime.append(\"Here are the anime in \").append(selectedWatchlistName).append(\" watchlist:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        for (int i \u003d 0; i \u003c animeInWatchlist.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            Integer animeIndex \u003d animeInWatchlist.get(i);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            Anime anime \u003d animeData.getAnime(animeIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            String animeName \u003d anime.getAnimeName();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            sbWatchlistAnime.append(System.lineSeparator());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            sbWatchlistAnime.append(\"\\t\").append(i + 1).append(\". \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            sbWatchlistAnime.append(animeName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return sbWatchlistAnime.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Checks if watchlist index given is negative or larger than size of watchlist list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param watchlistSize size of the list of watchlists"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param watchlistIndex the specified watchlist index to be viewed"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when watchlist index is negative or larger than size of watchlist list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private void checkValidWatchlistIndex(int watchlistSize, Integer watchlistIndex) throws AniException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (watchlistIndex \u003c 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        } else if (watchlistIndex \u003e\u003d watchlistSize) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(OUT_OF_BOUND_INDEX_ERROR);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "michaeldinata": 125
    }
  },
  {
    "path": "src/main/java/anichan/commands/WatchlistCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the command to manage the watchlist(s) in AniChan."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class WatchlistCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String CREATE_PARAM \u003d \"n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String LIST_PARAM \u003d \"l\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SELECT_PARAM \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String DELETE_PARAM \u003d \"d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_LIST_IS_NULL \u003d \"Watchlist list should not be null.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String PARAMETER_IS_NULL \u003d \"Parameter should not be null.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_PARAMETER \u003d \"Watchlist command only accepts the parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                    + \"-n, -l, -s, and -d.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_NAME_IS_NOT_UNIQUE \u003d \"Watchlist name is used already!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_WATCHLIST_LIST \u003d \"Uhh.. You have no watchlist..\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_WATCHLIST_INDEX \u003d \"This is not a valid watchlist index.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String CANNOT_SELECT_ACTIVE_WATCHLIST \u003d \"You cannot select the active watchlist..\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String CANNOT_DELETE_LAST_WATCHLIST \u003d \"You cannot delete the last watchlist!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_NAME_TOO_LONG \u003d \"Watchlist name should not be longer than 30 characters!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int MAX_WATCHLIST_NAME_LENGTH \u003d 30;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(WatchlistCommand.class.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String parameter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String watchlistName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private int watchlistIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new instance of WatchlistCommand with the specified parameter and watchlist name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * This is meant for creating watchlist."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param parameter specified watchlist command type"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param watchlistName specified watchlist name"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public WatchlistCommand(String parameter, String watchlistName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.watchlistName \u003d watchlistName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"WatchlistCommand object for creating watchlist is created.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new instance of WatchlistCommand with the specified parameter."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * This is meant for listing watchlist."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param parameter specified watchlist command type"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public WatchlistCommand(String parameter) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"WatchlistCommand object for listing all watchlist is created.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new instance of WatchlistCommand with the specified parameter and watchlist index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * This is meant for selecting and deleting watchlist."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param parameter specified watchlist command type"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param watchlistIndex specified watchlist index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public WatchlistCommand(String parameter, int watchlistIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.watchlistIndex \u003d watchlistIndex - 1; // 1-based to 0-based numbering"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"WatchlistCommand object for selecting or deleting watchlist is created.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Depending on the parameter supplied, it can perform one of the following operations."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eCreates a watchlist\u003c/li\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eList all watchlist\u003c/li\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eSelect a watchlist to be the new active watchlist\u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eDelete a watchlist\u003c/li\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param animeData used to retrieve anime information"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert activeWorkspace.getWatchlistList() !\u003d null : WATCHLIST_LIST_IS_NULL;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert parameter !\u003d null : PARAMETER_IS_NULL;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        switch (parameter) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case CREATE_PARAM:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return createWatchlist(storageManager, activeWorkspace);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case LIST_PARAM:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return listAllWatchlist(activeWorkspace);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case SELECT_PARAM:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return selectWatchlist(activeWorkspace);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case DELETE_PARAM:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return deleteWatchlist(storageManager, activeWorkspace);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_PARAMETER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a watchlist."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storageManager used to save watchlist data"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param activeWorkspace used to update watchlist list and save watchlist data to correct folder"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while creating the watchlist"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String createWatchlist(StorageManager storageManager, Workspace activeWorkspace) throws AniException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert !(watchlistName.isBlank()) : \"Watchlist name cannot be empty!\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist createdWatchlist \u003d new Watchlist(watchlistName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isWatchlistNameUnique \u003d !watchlistList.contains(createdWatchlist);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isWatchlistNameUnique) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_NAME_IS_NOT_UNIQUE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistName.length() \u003e MAX_WATCHLIST_NAME_LENGTH) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_NAME_TOO_LONG);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(createdWatchlist);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager.saveWatchlistList(activeWorkspace.getName(), watchlistList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Watchlist \\\"\" + watchlistName + \"\\\" created successfully.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"Watchlist \\\"\" + watchlistName + \"\\\" has been created successfully!\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Lists all watchlist created in the workspace in a readable format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param activeWorkspace used to retrieve all watchlist created in the workspace"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return all watchlist created in the workspace"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String listAllWatchlist(Workspace activeWorkspace) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Empty watchlistList message because size is 0\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return EMPTY_WATCHLIST_LIST;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        StringBuilder sbWatchlistList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        sbWatchlistList.append(\"Currently, you have \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        sbWatchlistList.append(watchlistList.size()).append(\" watchlist(s):\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (int i \u003d 0; i \u003c watchlistList.size(); i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Watchlist watchlist \u003d watchlistList.get(i);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlistList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlistList.append(\"\\t\").append(i + 1).append(\". \");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlistList.append(watchlist.getName());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Listing watchlist of size: \" + watchlistList.size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return sbWatchlistList.toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Selects a watchlist to be the new active watchlist."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param activeWorkspace used to update the active watchlist for the active workspace"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while selecting a new active watchlist"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String selectWatchlist(Workspace activeWorkspace) throws AniException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validateWatchlistIndex(watchlistList, watchlistIndex);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist selectedWatchlist \u003d watchlistList.get(watchlistIndex);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (selectedWatchlist.equals(activeWatchlist)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Select failed because the active watchlist is selected.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(CANNOT_SELECT_ACTIVE_WATCHLIST);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setActiveWatchlist(selectedWatchlist);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"New active watchlist: \" + activeWorkspace.getActiveWatchlistName());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return \"\\\"\" + selectedWatchlist.getName() + \"\\\" is now your active watchlist!\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Deletes a watchlist."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storageManager used to save watchlist data"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param activeWorkspace used to update watchlist list and save watchlist data to correct folder"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while deleting a watchlist"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String deleteWatchlist(StorageManager storageManager, Workspace activeWorkspace) throws AniException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validateWatchlistIndex(watchlistList, watchlistIndex);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist deletedWatchlist \u003d watchlistList.get(watchlistIndex);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.remove(watchlistIndex);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String commandOutput \u003d \"Watchlist \\\"\" + deletedWatchlist.getName() + \"\\\" has been deleted successfully!\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (deletedWatchlist.equals(activeWatchlist)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            activeWorkspace.setActiveWatchlist(watchlistList.get(0));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String activeWatchlistName \u003d activeWorkspace.getActiveWatchlistName();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            commandOutput +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            commandOutput +\u003d \"Changed active watchlist to: \\\"\" + activeWatchlistName + \"\\\".\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager.saveWatchlistList(activeWorkspace.getName(), watchlistList);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Watchlist: \\\"\" + deletedWatchlist.getName() + \"\\\" deleted successfully.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return commandOutput;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Validates that the watchlist index supplied for the select and delete watchlist command is valid."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eThere is no watchlist created before.\u003c/li\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eAttempts to delete the last watchlist.\u003c/li\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eWatchlist index specified is out of range.\u003c/li\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param watchlistList a list containing all of the watchlist for the active workspace"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param index the watchlist index to check"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when the watchlist index is invalid"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void validateWatchlistIndex(ArrayList\u003cWatchlist\u003e watchlistList, int index) throws AniException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(EMPTY_WATCHLIST_LIST);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistList.size() \u003d\u003d 1 \u0026\u0026 parameter.equals(DELETE_PARAM)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(CANNOT_DELETE_LAST_WATCHLIST);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d watchlistList.size()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 240,
      "ChanJianHao": 7
    }
  },
  {
    "path": "src/main/java/anichan/commands/WorkspaceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " * Represents the command to manage the workspace(s) in AniChan."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class WorkspaceCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    // Constants for command option, logger, and errors"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String CREATE_OPTION \u003d \"n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String SWITCH_OPTION \u003d \"s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String LIST_OPTION \u003d \"l\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String DELETE_OPTION \u003d \"d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(WatchlistCommand.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String EXPECTED_PARAMETERS_MESSAGE \u003d \"Workspace command only accepts the \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            + \"options: -n, -s, -l, and -d.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String EXCEPTION_WORKSPACE_IN_USE \u003d \"Please switch workspace before trying to delete it.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private final String commandOption;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private final String workspaceName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Creates a new instance of WorkspaceCommand with the specified option and workspace name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param commandOption command option parameter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param workspaceName workspace name for command to operate on"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public WorkspaceCommand(String commandOption, String workspaceName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        this.commandOption \u003d commandOption;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        this.workspaceName \u003d workspaceName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Depending on the option supplied, it can perform one of the following operations."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *     \u003cli\u003eCreates a new workspace\u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *     \u003cli\u003eSwitches to workspace\u003c/li\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *     \u003cli\u003eLists all workspace\u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *     \u003cli\u003eDelete a workspace\u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param animeData      used to retrieve anime information"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param user           used to modify user data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String execute(AnimeData animeData, StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert commandOption !\u003d null : \"Option should not be null.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        switch (commandOption) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case CREATE_OPTION:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return createWorkspace(storageManager, user);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case SWITCH_OPTION:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return switchWorkspace(user);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case LIST_OPTION:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return listWorkspace(user);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case DELETE_OPTION:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return deleteWorkspace(storageManager, user);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Invalid workspace command provided.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXPECTED_PARAMETERS_MESSAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Creates a workspace."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param user           used to modify user data"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private String createWorkspace(StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace newWorkspace \u003d user.addWorkspace(workspaceName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Watchlist newWatchlist \u003d new Watchlist(\"Default\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        watchlistList.add(newWatchlist);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        newWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        storageManager.saveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"Successfully added new workspace: \" + newWorkspace);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return \"Successfully added new workspace: \" + newWorkspace;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Switches to specified workspace."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private String switchWorkspace(User user) throws AniException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String trimmedName \u003d workspaceName;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.switchActiveWorkspace(trimmedName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"Successfully switched to workspace: \" + trimmedName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return \"Workspace switched to \" + trimmedName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Deletes specified workspace."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param user           used to modify user data"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param storageManager used to save or read AniChan data"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private String deleteWorkspace(StorageManager storageManager, User user) throws AniException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (user.getActiveWorkspace().toString().equals(workspaceName)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXCEPTION_WORKSPACE_IN_USE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.deleteWorkspace(workspaceName);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        storageManager.deleteWorkspace(workspaceName);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"Successfully deleted workspace: \" + workspaceName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return \"Successfully deleted workspace: \" + workspaceName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Lists all existing workspace."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param user used to modify user data"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return result after executing the command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private String listWorkspace(User user) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        StringBuilder workspacesString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ArrayList\u003cWorkspace\u003e userWorkspaces \u003d user.getWorkspaceList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        workspacesString.append(\"Currently, you have \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        workspacesString.append(userWorkspaces.size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        workspacesString.append(\" workspace(s):\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        for (int i \u003d 0; i \u003c userWorkspaces.size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            int workspaceIndex \u003d i + 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            workspacesString.append(System.lineSeparator()).append(workspaceIndex);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            workspacesString.append(\". \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            workspacesString.append(userWorkspaces.get(i).toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return workspacesString.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 157
    }
  },
  {
    "path": "src/main/java/anichan/exception/AniException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " * Represents the exception handler used in this project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class AniException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Constructor for exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param exceptionMessage exception message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public AniException(String exceptionMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        super(exceptionMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 12,
      "ChanJianHao": 4
    }
  },
  {
    "path": "src/main/java/anichan/human/Character.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " * Represents a Character from AniList data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class Character extends Human {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected ArrayList\u003cVoiceActor\u003e voiceActors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Creates an instance of Character."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param name name of the Character"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException if name is invalid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Character(String name) throws AniException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Adds voice actor to Character."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param newVoiceActor voice actor who voiced this character"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void addVoiceActor(VoiceActor newVoiceActor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        voiceActors.add(newVoiceActor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Gets total number of voice actors who played as this Character."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return number of voice actors"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public int getTotalVoiceActors() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return voiceActors.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 44
    }
  },
  {
    "path": "src/main/java/anichan/human/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    Male,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    Female,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    Other"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 7
    }
  },
  {
    "path": "src/main/java/anichan/human/Human.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " * Abstract class to represent a Human."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public abstract class Human {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final int MAX_NAME_LENGTH \u003d 200;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String EXCEPTION_INVALID_NAME \u003d \"Invalid name!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String REGEX_ALPHANUMERIC_WITH_SPACE \u003d \"^[a-zA-Z0-9\\\\s]*$\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Creates an instance of a Human object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param name of the Human"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException if name is empty, beyond max length, or contain non alphanumerical characters"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Human(String name) throws AniException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        checkName(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Checks if name is legal."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param name of the Human"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException if name is empty, beyond max length, or contain non alphanumerical characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private void checkName(String name) throws AniException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXCEPTION_INVALID_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } else if (name.length() \u003e MAX_NAME_LENGTH) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXCEPTION_INVALID_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } else if (!name.matches(REGEX_ALPHANUMERIC_WITH_SPACE)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXCEPTION_INVALID_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Returns name of the Human."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return name of Human"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Sets name of the Human."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param name of Human"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 5,
      "ChanJianHao": 54
    }
  },
  {
    "path": "src/main/java/anichan/human/User.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " * Represents the User."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class User extends Human {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String GENDER_MALE \u003d \"male\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String GENDER_FEMALE \u003d \"female\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String GENDER_OTHER \u003d \"other\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(Main.class.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String EXCEPTION_WORKPLACE_NOT_FOUND \u003d \"Workspace does not exist!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String EXCEPTION_SIMILAR_WORKPLACE_FOUND \u003d \"Workspace with similar name found!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String HONORIFIC_FEMALE \u003d \"-chan\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String HONORIFIC_NEUTRAL \u003d \"-san\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String ASSERTION_INVALID_MESSAGE \u003d \"Input invalid.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private Workspace activeWorkspace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private ArrayList\u003cWorkspace\u003e workspaceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User related methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Creates an instance of a User."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param name   name of User"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param gender gender of User"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException if an error occurred while creating User"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public User(String name, String gender) throws AniException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        setGender(gender);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        activeWorkspace \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Sets gender of user using Gender enum."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param genderString gender input provided by user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException if gender string is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void setGender(String genderString) throws AniException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert genderString !\u003d null : ASSERTION_INVALID_MESSAGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String genderStringLowered \u003d genderString.toLowerCase(Locale.ROOT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        switch (genderStringLowered) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case GENDER_MALE:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            gender \u003d Gender.Male;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case GENDER_FEMALE:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            gender \u003d Gender.Female;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case GENDER_OTHER:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            gender \u003d Gender.Other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(\"Unexpected gender: \" + genderString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Returns gender of User."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return Gender of User."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Provides the name of the User with Japanese honorifics depending on gender."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return name of User with honorifics."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String getHonorificName() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (gender \u003d\u003d Gender.Female) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return name + HONORIFIC_FEMALE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return name + HONORIFIC_NEUTRAL;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return \" Name: \" + getHonorificName() + \" | Gender: \" + getGender();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User\u0027s workspace related methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Initialises the ArrayList of Workspace for User to manage."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param workspaceList Workspace ArrayList"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setWorkspaceList(ArrayList\u003cWorkspace\u003e workspaceList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.workspaceList \u003d workspaceList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (workspaceList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            activeWorkspace \u003d workspaceList.get(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Get Workspace ArrayList which the User manages."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return Workspace ArrayList"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public ArrayList\u003cWorkspace\u003e getWorkspaceList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return workspaceList;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Sets the active Workspace of user to the specified Workspace."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param inputWorkspace workspace to switch to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException if unable to switch to current Workspace"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void setActiveWorkspace(Workspace inputWorkspace) throws AniException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert inputWorkspace !\u003d null : ASSERTION_INVALID_MESSAGE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            //Set the first watchlist to be the active watchlist"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            inputWorkspace.setActiveWatchlist(inputWorkspace.getWatchlistList().get(0));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.INFO, \"Workspace switched: \" + inputWorkspace.getName());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            activeWorkspace \u003d inputWorkspace;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXCEPTION_WORKPLACE_NOT_FOUND);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Get the current Workspace User is working on."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return active Workspace which the User is using"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Workspace getActiveWorkspace() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return activeWorkspace;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Finds the workplace that matches the string parameter to switch to."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param switchToThisWorkspace the requested workplace to switch to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if the workplace is not found"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void switchActiveWorkspace(String switchToThisWorkspace) throws AniException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert switchToThisWorkspace !\u003d null : ASSERTION_INVALID_MESSAGE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (Workspace existingWorkspace : workspaceList) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (existingWorkspace.getName().equals(switchToThisWorkspace)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                setActiveWorkspace(existingWorkspace);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.WARNING, \"Workspace \" + switchToThisWorkspace + \" does not exist!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        throw new AniException(\"Workspace \" + switchToThisWorkspace + \" does not exist!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Gets total number of workspace(s) the User have."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return size of Workspace(s) the User have"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public int getTotalWorkspaces() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return workspaceList.size();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Adds a new Workspace to the User."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param name of the new Workspace"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return the newly created Workspace"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException if unable to make a new Workspace"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Workspace addWorkspace(String name) throws AniException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert name !\u003d null : ASSERTION_INVALID_MESSAGE;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (findWorkspace(name) !\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(\"Workspace already exist!\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            checkWorkspaceName(name.toLowerCase());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            Workspace newWorkspace \u003d new Workspace(name);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            workspaceList.add(newWorkspace);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.INFO, \"Workspace created: \" + name);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return newWorkspace;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Deletes an existing Workspace."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param toDeleteWorkspace name of Workspace to be deleted"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException if Workspace is unable to be deleted"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void deleteWorkspace(String toDeleteWorkspace) throws AniException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert toDeleteWorkspace !\u003d null : \"Workspace details should not have any null.\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace targetWorkspace \u003d findWorkspace(toDeleteWorkspace);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (targetWorkspace !\u003d null) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            workspaceList.remove(targetWorkspace);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.WARNING, EXCEPTION_WORKPLACE_NOT_FOUND);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXCEPTION_WORKPLACE_NOT_FOUND);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Finds and return the Workspace if it exists."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param findString name of Workspace to search for"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return Workspace object is found, else null"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private Workspace findWorkspace(String findString) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert findString !\u003d null : ASSERTION_INVALID_MESSAGE;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        for (Workspace tempWorkspace : workspaceList) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            if (tempWorkspace.getName().equals(findString)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                return tempWorkspace;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Checks if there exist a workspace with same name (regardless of case sensitivity)."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param name of new workspace to be checked"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException if a workspace with same name is found"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private void checkWorkspaceName(String name) throws AniException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert name !\u003d null : ASSERTION_INVALID_MESSAGE;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        for (Workspace tempWorkspace : workspaceList) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            if (tempWorkspace.getName().equalsIgnoreCase(name)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                throw new AniException(EXCEPTION_SIMILAR_WORKPLACE_FOUND);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 18,
      "OngDeZhi": 6,
      "ChanJianHao": 231
    }
  },
  {
    "path": "src/main/java/anichan/human/VoiceActor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " * Represents a Voice Actor from AniList data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class VoiceActor extends Human {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected ArrayList\u003cCharacter\u003e characters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Creates an instance of Voice Actor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param name name of the Voice Actor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException if name is invalid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public VoiceActor(String name) throws AniException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Adds Character to Voice actor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param newCharacter Character who is voiced by this Voice Actor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void addCharacter(Character newCharacter) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        characters.add(newCharacter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Gets total number of Characters which was voiced by this Voice Actor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return number of voice actors"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public int getTotalCharacters() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return characters.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 44
    }
  },
  {
    "path": "src/main/java/anichan/human/Workspace.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " * Represents the Workspace of User."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class Workspace {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Workspace Initialization \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String ASSERTION_INVALID_MESSAGE \u003d \"Input should not be null.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private Bookmark bookmark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private final String workspaceName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Watchlist activeWatchlist;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private ArrayList\u003cWatchlist\u003e watchlistList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Creates an instance of a Workspace."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param workspaceName name of new Workspace"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Workspace(String workspaceName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert workspaceName !\u003d null : ASSERTION_INVALID_MESSAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        this.workspaceName \u003d workspaceName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Creates an instance of a Workspace."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param workspaceName name of new Workspace"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Workspace(String workspaceName, ArrayList\u003cWatchlist\u003e watchlistList, Bookmark bookmark) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.workspaceName \u003d workspaceName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.watchlistList \u003d watchlistList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Gets name of the Workspace."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return name of Workspace"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return workspaceName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return workspaceName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Watchlist \u0026 Bookmark \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public Bookmark getBookmark() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return bookmark;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setActiveWatchlist(Watchlist activeWatchlist) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.activeWatchlist \u003d activeWatchlist;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setWatchlistList(ArrayList\u003cWatchlist\u003e watchlistList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.watchlistList \u003d watchlistList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Watchlist getActiveWatchlist() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return activeWatchlist;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String getActiveWatchlistName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return activeWatchlist.getName();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public ArrayList\u003cWatchlist\u003e getWatchlistList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return watchlistList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 3,
      "OngDeZhi": 30,
      "ChanJianHao": 51
    }
  },
  {
    "path": "src/main/java/anichan/logger/AniLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.logger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " * Represents the Logger used in this project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class AniLogger {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    // Settings used by AniLogger"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final int MAX_LOG_COUNT \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final int MAX_LOG_SIZE \u003d (int) (Math.pow(1024, 3) * 5); // 5 Megabytes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String LOG_FILE \u003d \"data/AniChan.log\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Level LOG_FILE_LEVEL \u003d Level.INFO;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Level CONSOLE_LEVEL \u003d Level.SEVERE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Returns the logger when provided a class name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param className name of class requesting for logger"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return logger object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public static Logger getAniLogger(String className) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Logger logger \u003d Logger.getLogger(className);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        clearHandlers(logger);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return Logger.getLogger(className);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Adds Handler for console logging."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param logger logger object with console handler"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert logger !\u003d null : \"Logger is null!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Returns a console handler for logger."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return console handler"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        consoleHandler.setLevel(CONSOLE_LEVEL);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Adds Handler for file logging."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param logger logger object with file handler"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert logger !\u003d null : \"Logger is null!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } catch (IOException exceptionMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            logger.log(Level.WARNING, \"Failed to add file handler for logger.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Returns a file handler for logger."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return file handler"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws IOException when unable to initialise file handler"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        File file \u003d new File(LOG_FILE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Checks to ensure log file and folder creation is done correctly"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        boolean isFolderCreated \u003d file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        boolean isFileCreated \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (isFolderCreated) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            isFileCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (!isFileCreated) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new IOException(\"Failed to create log file/folder.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        SimpleFormatter formatter \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_LOG_SIZE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                MAX_LOG_COUNT, true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        fileHandler.setFormatter(formatter);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        fileHandler.setLevel(LOG_FILE_LEVEL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Clears the existing handlers from logger."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param logger logger object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static void clearHandlers(Logger logger) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert logger !\u003d null : \"Logger is null!\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Handler[] handlers \u003d logger.getHandlers();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            logger.removeHandler(handler);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 135
    }
  },
  {
    "path": "src/main/java/anichan/parser/AddToWatchlistParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.AddToWatchlistCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Handles parsing for add to watchlist command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class AddToWatchlistParser extends CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String ANIME_ID \u003d \"Anime ID!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String TOO_MUCH_ARGUMENTS \u003d \"Add To Watchlist command\" + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(AddToWatchlistParser.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the specified command description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param description the specified command description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return initialised {@code AddToWatchlistCommand} object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the command description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public AddToWatchlistCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        description \u003d description.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (description \u003d\u003d null || description.isBlank()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(DESCRIPTION_CANNOT_BE_NULL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Integer animeIndex \u003d parameterParser(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, PARAMETER_PARSED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return new AddToWatchlistCommand(animeIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the parameter provided in the command description and returns the field value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param fieldGiven a String Array containing the value given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return the anime index to be added "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the parameteres"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer parameterParser(String fieldGiven) throws AniException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String fieldValue \u003d fieldGiven.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] fieldParts \u003d fieldValue.split(WHITESPACE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (fieldParts.length \u003e 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(TOO_MUCH_ARGUMENTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        isIntegerCheck(fieldValue, ANIME_ID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return parseStringToInteger(fieldValue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 2,
      "michaeldinata": 54
    }
  },
  {
    "path": "src/main/java/anichan/parser/BookmarkParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.BookmarkCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " * Handles parsing for bookmark command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "public class BookmarkParser extends CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Bookmark action param"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String ADD_PARAM \u003d \"a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String DELETE_PARAM \u003d \"d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String EPISODE_PARAM \u003d \"e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String LIST_PARAM \u003d \"l\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String INFO_PARAM \u003d \"i\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String ADD_NOTE_PARAM \u003d \"n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public static final String REMOVE_NOTE_PARAM \u003d \"r\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Constant parameter"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String EMPTY_PARAM \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final int SPLIT_LIMIT \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Message error header"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String PARAMETER_ERROR_HEADER \u003d \"Parameter :\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String DESCRIPTION_ERROR_HEADER \u003d \"Description :\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_LOAD_ERROR_HEADER \u003d \"Could not load bookmark command :\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Message bookmark action type"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_EPISODE \u003d \"edit episode\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_REMOVE_NOTE \u003d \"remove note\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_INDEX \u003d \"index\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Message error trailer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_INDEX_INFO_ERROR \u003d \" Bookmark index for info requires integer.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String EXTRA_FIRST_PARAM_ERROR \u003d \" Add/Delete/List should not have extra first param.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String BOOKMARK_LIST_EXTRA_FIELD_ERROR \u003d \" Bookmark list should not have extra field.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String EMPTY_PARAM_ERROR \u003d \" The parameter is empty\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String NON_INTEGER_ERROR \u003d \" param requires integer.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String NO_SPACE_BETWEEN_PARAM_ERROR \u003d \"Please leave a spacing between each parameter!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //Bookmark required field"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int bookmarkIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int animeIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int noteIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private int bookmarkEpisode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String bookmarkAction;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String bookmarkNote;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(BookmarkParser.class.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Parses the string parameters and creates an executable bookmarkCommand according to the parameters."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * All command require 2 parameter except for bookmark info e.g bookmark bookmark_id."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param description is the parameters portion of the user input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return and executable BookmarkCommand object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if an error is encountered while parsing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    public BookmarkCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assert description !\u003d null : DESCRIPTION_CANNOT_BE_NULL;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String[] paramGiven \u003d getSplitDescription(description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (paramGiven.length \u003e 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            parameterParser(paramGiven[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            setFirstParameter(paramGiven[0]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            setSingleParameter(description);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return new BookmarkCommand(bookmarkAction, bookmarkIndex, animeIndex, bookmarkEpisode, noteIndex, bookmarkNote);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Bookmark commands only allow one dash parameter e.g \"-a\" or \"-d\"."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * The method based on the dach parameter will determine the checks to do"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * and the values to set for Bookmark Command required field."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param paramGiven is the string containing the processed parameters with field"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if invalid parameters are parsed in"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void parameterParser(String paramGiven) throws AniException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String[] paramParts \u003d paramGiven.split(WHITESPACE, SPLIT_LIMIT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmarkAction \u003d paramParts[0].trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        paramEmptyCheck(paramGiven, paramParts);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        switch (bookmarkAction) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case EPISODE_PARAM:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            checkIsInteger(paramGiven, paramParts[1], BOOKMARK_EPISODE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkEpisode \u003d parseStringToInteger(paramParts[1].trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case ADD_PARAM:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            checkIsInteger(paramGiven, paramParts[1], BOOKMARK_ADD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeIndex \u003d parseStringToInteger(paramParts[1].trim());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case DELETE_PARAM:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            checkIsInteger(paramGiven, paramParts[1], BOOKMARK_DELETE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkIndex \u003d parseStringToInteger(paramParts[1].trim());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case LIST_PARAM:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            listFieldCheck(paramParts);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case ADD_NOTE_PARAM:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkNote \u003d paramParts[1].trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        case REMOVE_NOTE_PARAM:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            checkIsInteger(paramGiven, paramParts[1], BOOKMARK_REMOVE_NOTE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            noteIndex \u003d parseStringToInteger(paramParts[1].trim());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Check that part of the parameter (the field) is integer."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Else, throw a custom error message based on the command type and the param given."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param paramGiven   the input with processed parameter and its field"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param paramPart    the field to check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param bookmarkType the type of bookmark command for error message"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void checkIsInteger(String paramGiven, String paramPart, String bookmarkType) throws AniException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isInteger(paramPart.trim())) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + \" Bookmark \" + bookmarkType + NON_INTEGER_ERROR;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidParameter);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Check that the field of parameters are not empty."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param paramGiven the parameter with its field"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param paramParts array of parameter parts"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if the parameter provided is empty"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void paramEmptyCheck(String paramGiven, String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (paramParts.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + EMPTY_PARAM_ERROR;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidParameter);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Check that bookmark list command does not contain a field."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param paramParts the processed parameter"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if the list field provided is not empty"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void listFieldCheck(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (paramParts.length \u003e 1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidExtraField \u003d PARAMETER_ERROR_HEADER + paramParts[1] + NOT_RECOGNISED"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + BOOKMARK_LIST_EXTRA_FIELD_ERROR;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidExtraField);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidExtraField);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Set the first parameter field, for commands that require two different variable."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * It includes the bookmark edit episode, bookmark note and bookmark remove note command."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param paramGiven the first field not accompanied by parameter"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if the first field is required but empty, or the first field is not required but not empty"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void setFirstParameter(String paramGiven) throws AniException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //Action edit(e), note(n), remove note(r) requires first parameter as bookmarkIndex"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (bookmarkAction.equals(EPISODE_PARAM)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                || bookmarkAction.equals(ADD_NOTE_PARAM)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                || bookmarkAction.equals(REMOVE_NOTE_PARAM)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            checkIsInteger(paramGiven, paramGiven, BOOKMARK_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            checkForParamStacking(paramGiven);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            bookmarkIndex \u003d parseStringToInteger(paramGiven.trim());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            boolean isEmpty \u003d paramGiven.trim().equals(EMPTY_PARAM);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            if (!isEmpty) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                String invalidFirstParameter \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                        + System.lineSeparator() + EXTRA_FIRST_PARAM_ERROR;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidFirstParameter);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                throw new AniException(invalidFirstParameter);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * This indicate that it is a bookmark info command."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param paramGiven the processed parameter"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if the only field is not integer or empty"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void setSingleParameter(String paramGiven) throws AniException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isInteger(paramGiven.trim())) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidBookmarkIndex \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "                    + System.lineSeparator() + BOOKMARK_INDEX_INFO_ERROR;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidBookmarkIndex);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidBookmarkIndex);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmarkAction \u003d INFO_PARAM;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        bookmarkIndex \u003d parseStringToInteger(paramGiven.trim());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Split the input provided by - to recognise the number of parameter."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * The string array will be returned for further processing."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param description is the parameters portion of the user input"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @return the individual parameter with its field"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if there is more than 2 parameter provided"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private String[] getSplitDescription(String description) throws AniException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String[] paramGiven \u003d description.split(DASH);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (paramGiven.length \u003e 2) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            String invalidDescription \u003d DESCRIPTION_ERROR_HEADER + description + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            LOGGER.log(Level.WARNING, BOOKMARK_LOAD_ERROR_HEADER + invalidDescription);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(invalidDescription);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        return paramGiven;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * Checks and prevents parameter stacking e.g. \"1-e 5\" or \"1-n test\"."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @param firstParam first parameter before -"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     * @throws AniException if there is no space between the parameter"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private void checkForParamStacking(String firstParam) throws AniException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        //Forgive the last param"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        if (!firstParam.endsWith(WHITESPACE)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            throw new AniException(NO_SPACE_BETWEEN_PARAM_ERROR);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 245,
      "OngDeZhi": 3,
      "ChanJianHao": 2,
      "michaeldinata": 1
    }
  },
  {
    "path": "src/main/java/anichan/parser/BrowseParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.BrowseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " * Handles parsing for browse command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class BrowseParser extends CommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    //Parameters and their fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SORT_PARAM \u003d \"s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ORDER_PARAM \u003d \"o\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String PAGE_PARAM \u003d \"p\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ASCENDING_FIELD \u003d \"asc\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DESCENDING_FIELD \u003d \"dsc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NAME_FIELD \u003d \"name\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String RATING_FIELD \u003d \"rating\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String PARAMETER_ERROR_HEADER \u003d \"Parameter : -\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_OPTION \u003d \" is not a valid option\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NOT_RECOGNISED \u003d \" is not recognised!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String BROWSE_SETTINGS_CHANGED_INFO \u003d \"Default values modified\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NO_PARAMETER_SPECIFIED_ERROR \u003d \"Seems like you did not specify a parameter type\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_INPUT_ERROR \u003d \"This input is not accepted, please try again!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NO_SPACE_BETWEEN_PARAM_ERROR \u003d \"Please leave a spacing between each parameter!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String MULTIPLE_PAGE_PARAM_ERROR \u003d \"Please specify only one -p parameter!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String MULTIPLE_ORDER_PARAM_ERROR \u003d \"Please specify only one -o parameter!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String MULTIPLE_SORT_PARAM_ERROR \u003d \"Please specify only one -s parameter!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final char CHAR_DASH \u003d \u0027-\u0027;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final char CHAR_WHITESPACE \u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ORDER_ASCENDING \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ORDER_DESCENDING \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ORDER_NOT_SET \u003d 2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int SORT_NAME \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int SORT_RATING \u003d 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int SORT_ID \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int FIRST_LOOP \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(BrowseParser.class.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int FIRST_PAGE \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private boolean sortFlag \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private boolean orderFlag \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private boolean pageFlag \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    //Default values of Browse"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int sortType \u003d SORT_ID;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int order \u003d ORDER_NOT_SET;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int page \u003d FIRST_PAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Parses the string parameters and creates an executable browseCommand according to the parameters."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param description is the parameters portion of the user input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @return an executable BrowseCommand object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if an error is encountered while parsing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public BrowseCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        checkForDashAbuse(description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramGiven.length \u003e 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            parameterParser(paramGiven);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            LOGGER.log(Level.INFO, BROWSE_SETTINGS_CHANGED_INFO);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return new BrowseCommand(sortType, order, page);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Prevents input that abuses dash splitting, such as \"- - \" or \"---\" inputs."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param description the raw parameter string"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if dash abuse is detected"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void checkForDashAbuse(String description) throws AniException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        //Check for invalid --- inputs"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (int i \u003d 0; i \u003c description.length(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (description.charAt(i) \u003d\u003d CHAR_DASH) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                if (i + 1 \u003e\u003d description.length() || description.charAt(i + 1) \u003d\u003d CHAR_WHITESPACE) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                    throw new AniException(NO_PARAMETER_SPECIFIED_ERROR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                if (description.charAt(i + 1) \u003d\u003d CHAR_DASH) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                    throw new AniException(INVALID_INPUT_ERROR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Loops through each parameter and sets the option specified by each parameter."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramGiven is a String Array containing the processed parameters"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if invalid parameters are parsed in"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        int paramLoops \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        for (String param : paramGiven) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            paramLoops++;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            //Skip first empty field which is a blank"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            if (paramLoops \u003d\u003d FIRST_LOOP) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String[] paramParts \u003d param.split(WHITESPACE, FIELD_SPLIT_LIMIT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case SORT_PARAM:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                parseSortParam(paramParts);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case ORDER_PARAM:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                checkOrderParam(paramParts);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            case PAGE_PARAM:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                parsePageParam(paramParts);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                String invalidParameter \u003d PARAMETER_ERROR_HEADER + param + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "                throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            checkForParamStacking(paramGiven.length, paramLoops, paramParts[1]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Checks and prevents parameter stacking e.g. \"-o asc-s rating\" or \"-s name-p 2\"."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param totalParams is the total numbber of parameters the user parsed in"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramLoops is the current parameter being handled"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param theParam is the parameter being handled"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if parameter stacking was found"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void checkForParamStacking(int totalParams, int paramLoops, String theParam) throws AniException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        //Forgive the last param"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (totalParams \u003e 2 \u0026\u0026 !theParam.endsWith(WHITESPACE) \u0026\u0026 paramLoops !\u003d totalParams) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(NO_SPACE_BETWEEN_PARAM_ERROR);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Performs input validation of the page parameter and its field before setting it."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramParts the parameter and field String array"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if previously page was set already."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void parsePageParam(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        page \u003d parseStringToInteger(paramParts[1].trim());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (pageFlag) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(MULTIPLE_PAGE_PARAM_ERROR);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            pageFlag \u003d true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Performs input validation of the order parameter and its field before setting it."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramParts the field of the order parameter."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if the field is invalid"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void checkOrderParam(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        switch (paramParts[1].trim()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case ASCENDING_FIELD:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            order \u003d ORDER_ASCENDING;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case DESCENDING_FIELD:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            order \u003d ORDER_DESCENDING;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String paramFieldError \u003d paramParts[1] + INVALID_OPTION;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(paramFieldError);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (orderFlag) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(MULTIPLE_ORDER_PARAM_ERROR);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            orderFlag \u003d true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Performs input validation of the sortType parameter and its field before setting it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramParts the field of the sortType parameter."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if the field is invalid"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private void parseSortParam(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        paramExtraFieldCheck(paramParts);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        switch (paramParts[1].trim()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case NAME_FIELD:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            sortType \u003d SORT_NAME;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case RATING_FIELD:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            sortType \u003d SORT_RATING;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String paramFieldError \u003d paramParts[1] + INVALID_OPTION;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(paramFieldError);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (sortFlag) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(MULTIPLE_SORT_PARAM_ERROR);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            sortFlag \u003d true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 208,
      "OngDeZhi": 1,
      "ChanJianHao": 1,
      "michaeldinata": 1
    }
  },
  {
    "path": "src/main/java/anichan/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " * Represents an abstract class which each command parser will inherit from."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public abstract class CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    //Shared Constants by Parsers"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String NAME_PARAM \u003d \"n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String GENRE_PARAM \u003d \"g\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String DASH \u003d \"-\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final String NOT_RECOGNISED \u003d \" is not recognised!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    protected static final String PARAMETER_ERROR_HEADER \u003d \"Parameter : -\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String REQUIRE_ADDITIONAL_FIELD \u003d \" requires an additional field.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String TOO_MUCH_FIELDS \u003d \" has too much fields.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String TOO_MUCH_PARAMETERS \u003d \" has too much parameters.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String NO_PARAMETER_PROVIDED \u003d \"No parameter provided.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String DESCRIPTION_CANNOT_BE_NULL \u003d \"description should not be null.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String NOT_INTEGER \u003d \"Please provide a integer instead!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String NOT_POSITIVE_INTEGER \u003d \"Please provide a positive integer instead!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String INTEGER_VALUE_OUTSIDE_OF_INTEGER_RANGE \u003d \"Please ensure the integer is not larger\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                                            + \" than \" + Integer.MAX_VALUE + \".\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String DESCRIPTION_NOT_REQUIRED \u003d \"Command does not require additional parameters!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    protected static final String REGEX_ALPHANUMERIC_WITH_SPACE \u003d \"^[a-zA-Z0-9\\\\s]*$\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final String REGEX_PARAMETER \u003d \"^.*-[a-zA-z]+.*$\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String NON_INTEGER_PROVIDED \u003d \"Please specify an integer value for \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String PARAMETER_PARSED \u003d \"Parameter parsed properly\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final int FIELD_SPLIT_LIMIT \u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String REGEX_POSITIVE_INTEGER \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String REGEX_NEGATIVE_INTEGER \u003d \"^[-]\\\\d+$\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Splits the parameters into individual parts for parsing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param parameter unprocessed parameter strings"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @return parameters in parts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected String[] parameterSplitter(String parameter) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return parameter.split(\"-\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Checks if there is a parameter set."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramParts Array of parameters"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if there is no parameter provided"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected void paramIsSetCheck(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramParts.length \u003c 2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(NO_PARAMETER_PROVIDED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Checks if parameter has a single additional field or not."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramParts the param to check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if the parameter is missing the additional field"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected void paramFieldCheck(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramParts[0] + REQUIRE_ADDITIONAL_FIELD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramParts.length \u003c 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramParts[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Checks if parameter has more than one field."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramParts the param to check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if the parameter has too many fields"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected void paramExtraFieldCheck(String[] paramParts) throws AniException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramParts.length \u003e 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramParts[0] + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Checks if the string is an integer."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param checkStr the string to check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @return true if it can be parsed into an integer"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected boolean isInteger(String checkStr) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return checkStr.matches(REGEX_POSITIVE_INTEGER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Check if the string is a negative integer."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param checkStr the string to check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code true} if it is a negative integer; {@code false} otherwise"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected boolean isNegativeInteger(String checkStr) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return checkStr.matches(REGEX_NEGATIVE_INTEGER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author OngDeZhi"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Parses the string argument as a signed integer. It also checks if the {@code integer} is within"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * the range of java.lang.Integer."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param stringInteger {@code String} argument to be parsed to {@code integer}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the {@code integer} that was parsed successfully"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while parsing the string to integer"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected int parseStringToInteger(String stringInteger) throws AniException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return Integer.parseInt(stringInteger);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                new BigInteger(stringInteger);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            } catch (NumberFormatException sameException) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                throw new AniException(NOT_INTEGER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            // Thrown when stringInteger represents a valid integer that is outside"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            // of java.lang.Integer range (overflow)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INTEGER_VALUE_OUTSIDE_OF_INTEGER_RANGE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Checks if the string is an integer, and throws an exception if not."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param paramPart a string containing the field value"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param id a string indicating which ID it should use"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while parsing the string to integer"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected void isIntegerCheck(String paramPart, String id) throws AniException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isInteger(paramPart)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NON_INTEGER_PROVIDED + id);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 71,
      "n3wsoldier": 1,
      "OngDeZhi": 68,
      "ChanJianHao": 3,
      "michaeldinata": 3
    }
  },
  {
    "path": "src/main/java/anichan/parser/EstimateParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.EstimateCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Handles parsing for estimate command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class EstimateParser extends CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WORDS_PER_HOUR_PARAM \u003d \"-wph\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SCRIPT_FILE_FORMAT \u003d \".txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String DOT \u003d \".\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String REGEX_LAST_DOT \u003d \"\\\\.(?\u003d[^.]*$)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String NO_SCRIPT_FILE_SPECIFIED_ERROR \u003d \"No script file specified!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SPECIFIED_PATH_TO_SCRIPT_FILE_ERROR \u003d \"Only specify the script file name!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_SCRIPT_FILE_FORMAT_ERROR \u003d \"Only \\\".txt\\\" script files are accepted!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_PARAMETER_ERROR \u003d \"Estimate command only accepts the parameter: -wph.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ESTIMATE_COMMAND_TOO_MUCH_FIELDS_ERROR \u003d \"Estimate command\" + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ESTIMATE_COMMAND_TOO_MANY_PARAMETERS_ERROR \u003d \"Estimate command\" + TOO_MUCH_PARAMETERS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String NO_WORDS_PER_HOUR_SPECIFIED_ERROR \u003d \"Words per hour information is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WORDS_PER_HOUR_IS_ZERO_ERROR \u003d \"Words per hour cannot be zero!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int DEFAULT_WORDS_PER_HOUR \u003d -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(EstimateParser.class.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private int wordsPerHour;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Parses the specified command description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param description the specified command description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return initialised {@code EstimateCommand} object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while parsing the command description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public EstimateCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert description !\u003d null : DESCRIPTION_CANNOT_BE_NULL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (description.isBlank() || !description.contains(DOT)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NO_SCRIPT_FILE_SPECIFIED_ERROR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // paramGiven[0] would be the file name"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // paramGiven[1] would have the file extension provided (and the parameter)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] paramGiven \u003d description.trim().split(REGEX_LAST_DOT, 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // secondParamGivenSplit[0] would have the file extension"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // secondParamGivenSplit[1] would not exist if there is no parameter provided"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] secondParamGivenSplit \u003d paramGiven[1].split(WHITESPACE, 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileName \u003d paramGiven[0] + \".\" + secondParamGivenSplit[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isValidFileName(fileName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_SCRIPT_FILE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        wordsPerHour \u003d DEFAULT_WORDS_PER_HOUR;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (secondParamGivenSplit.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            parameterParser(secondParamGivenSplit);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Returning a EstimateCommand object with file: \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                    + fileName + \", and wph: \" + wordsPerHour + \".\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return new EstimateCommand(fileName, wordsPerHour);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Parses the parameter provided in the command description."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param paramGiven an String Array containing the parameters and the value"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while parsing the parameters"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] parsedParts \u003d paramGiven[1].trim().split(WHITESPACE, 2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String parameter \u003d parsedParts[0].trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Check to ensure the correct parameter and its value is supplied and it is not just an argument"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!parameter.contains(DASH)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(ESTIMATE_COMMAND_TOO_MUCH_FIELDS_ERROR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (!parameter.equals(WORDS_PER_HOUR_PARAM)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_PARAMETER_ERROR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (parsedParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NO_WORDS_PER_HOUR_SPECIFIED_ERROR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Check for extra parameters or fields"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String wordsPerHourString \u003d parsedParts[1].trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (wordsPerHourString.matches(REGEX_PARAMETER)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(ESTIMATE_COMMAND_TOO_MANY_PARAMETERS_ERROR);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (wordsPerHourString.contains(WHITESPACE)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(ESTIMATE_COMMAND_TOO_MUCH_FIELDS_ERROR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Integer check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (isNegativeInteger(wordsPerHourString)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NOT_POSITIVE_INTEGER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (!isInteger(wordsPerHourString)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NOT_INTEGER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        wordsPerHour \u003d parseStringToInteger(wordsPerHourString);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (wordsPerHour \u003d\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WORDS_PER_HOUR_IS_ZERO_ERROR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Check to ensure the user specified a valid script file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param fileName script file name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code true} if the file name is valid; {@code false} otherwise"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when the file name is invalid"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private boolean isValidFileName(String fileName) throws AniException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (fileName.contains(SLASH)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(SPECIFIED_PATH_TO_SCRIPT_FILE_ERROR);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] fileNameSplit \u003d fileName.split(WHITESPACE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        int numberOfTextFiles \u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean hasAdditionalFields \u003d false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (String fileNameParts : fileNameSplit) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (numberOfTextFiles \u003d\u003d 1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                hasAdditionalFields \u003d true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (fileNameParts.endsWith(SCRIPT_FILE_FORMAT)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                numberOfTextFiles++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (hasAdditionalFields) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(ESTIMATE_COMMAND_TOO_MUCH_FIELDS_ERROR);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return fileName.trim().endsWith(SCRIPT_FILE_FORMAT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 139,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/main/java/anichan/parser/ExitParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.commands.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Handles parsing for Exit command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class ExitParser extends CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private ExitCommand exitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Creates a new instance of ExitParser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public ExitParser() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        exitCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the specified command description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param description the specified command description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return initialised {@ExitCommand} object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the command description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public ExitCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (!description.isBlank()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(DESCRIPTION_NOT_REQUIRED);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return exitCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michaeldinata": 32
    }
  },
  {
    "path": "src/main/java/anichan/parser/HelpParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.commands.HelpCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Handles parsing for Help command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class HelpParser extends CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_ESTIMATE \u003d \"estimate\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_BROWSE \u003d \"browse\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_SEARCH \u003d \"search\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_INFO \u003d \"info\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_WORKSPACE \u003d \"workspace\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_WATCHLIST \u003d \"watchlist\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_REMOVE \u003d \"remove\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String COMMAND_BOOKMARK \u003d \"bookmark\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private String commandOption;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the specified command description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param description the specified command description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return initialised {@HelpCommand} object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the command description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public HelpCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        parameterParser(description.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return new HelpCommand(commandOption);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the field provided in the command description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param description the specified command description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the command description"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void parameterParser(String description) throws AniException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] splitDescription \u003d description.split(WHITESPACE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (splitDescription.length \u003e 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(\"Help command\" + TOO_MUCH_FIELDS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        switch (description) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_EMPTY:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_EMPTY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_ESTIMATE:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_ESTIMATE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_BROWSE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_BROWSE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_SEARCH:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_SEARCH;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_INFO:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_INFO;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_WORKSPACE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_WORKSPACE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_WATCHLIST:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_WATCHLIST;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_ADD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_ADD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_REMOVE:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_REMOVE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_VIEW:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_VIEW;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case COMMAND_BOOKMARK:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            commandOption \u003d COMMAND_BOOKMARK;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(description + NOT_RECOGNISED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michaeldinata": 86
    }
  },
  {
    "path": "src/main/java/anichan/parser/InfoParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.InfoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Handles parsing for info command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class InfoParser extends CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String TOO_MUCH_ARGUMENTS \u003d \"Info command\" + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String ANIME_ID \u003d \"Anime ID!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(InfoParser.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the specified command description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param description the specified command description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return initialised {@code InfoCommand} object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the command description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public InfoCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        description \u003d description.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (description \u003d\u003d null || description.isBlank()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(DESCRIPTION_CANNOT_BE_NULL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Integer animeIndex \u003d parameterParser(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, PARAMETER_PARSED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return new InfoCommand(animeIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the parameter provided in the command description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param fieldGiven a String Array containing the value given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the parameters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer parameterParser(String fieldGiven) throws AniException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String fieldValue \u003d fieldGiven.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] fieldParts \u003d fieldValue.split(WHITESPACE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (fieldParts.length \u003e 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(TOO_MUCH_ARGUMENTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        isIntegerCheck(fieldValue, ANIME_ID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return parseStringToInteger(fieldValue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 3,
      "michaeldinata": 53
    }
  },
  {
    "path": "src/main/java/anichan/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Prints the main menu of the application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * and requests for command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public Command getCommand(String fullCommand) throws AniException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parse: \" + fullCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] fullCommandSplit \u003d parseUserInput(fullCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String command \u003d fullCommandSplit[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (fullCommandSplit.length \u003e 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            description \u003d fullCommandSplit[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        case \"workspace\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            return new WorkspaceParser().parse(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"browse\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            return new BrowseParser().parse(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            return new SearchParser().parse(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"watchlist\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new WatchlistParser().parse(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new ViewWatchlistParser().parse(description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new AddToWatchlistParser().parse(description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new RemoveCommandParser().parse(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"bookmark\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            return new BookmarkParser().parse(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case \"estimate\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new EstimateParser().parse(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"info\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new InfoParser().parse(description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new HelpParser().parse(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new ExitParser().parse(description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(\"Unknown command\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public static String[] parseUserInput(String input) throws AniException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (input \u003d\u003d null || input.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Exception occurred\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(\"Input is empty\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, \"Parser processing succeeded\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] inputSplit \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return inputSplit;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 5,
      "n3wsoldier": 1,
      "OngDeZhi": 6,
      "ChanJianHao": 9,
      "michaeldinata": 60
    }
  },
  {
    "path": "src/main/java/anichan/parser/RemoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.RemoveCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Handles parsing for remove command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class RemoveCommandParser extends CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String TOO_MUCH_ARGUMENTS \u003d \"Remove command\" + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String ANIME_ID_IN_WATCHLIST \u003d \"Anime ID in Watchlist!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(RemoveCommandParser.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the specified command description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param description the specified command description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return initialised {@code RemoveCommand} object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the command description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public RemoveCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        description \u003d description.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (description \u003d\u003d null || description.isBlank()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(DESCRIPTION_CANNOT_BE_NULL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Integer animeIndexInWatchlist \u003d parameterParser(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, PARAMETER_PARSED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return new RemoveCommand(animeIndexInWatchlist);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the parameter provided in the command description."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param fieldGiven a String Array containing the value given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the parameters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer parameterParser(String fieldGiven) throws AniException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String fieldValue \u003d fieldGiven.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] fieldParts \u003d fieldValue.split(WHITESPACE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (fieldParts.length \u003e 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(TOO_MUCH_ARGUMENTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        isIntegerCheck(fieldValue, ANIME_ID_IN_WATCHLIST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return parseStringToInteger(fieldValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 2,
      "michaeldinata": 53
    }
  },
  {
    "path": "src/main/java/anichan/parser/SearchParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.SearchCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " * Handles parsing for search command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class SearchParser extends CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NO_PARAM_PROVIDED \u003d \"Please provide a parameter type. Search will accept -n or -g.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INIT_STRING \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int INVALID_SEARCH_TYPE \u003d -1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String searchTerm \u003d INIT_STRING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private String searchGenre \u003d INIT_STRING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private int searchType \u003d INVALID_SEARCH_TYPE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Parses the string parameters and creates an executable searchCommand according to the parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param description is the parameters portion of the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @return an executable BrowseCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if an error is encountered while parsing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public SearchCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] paramGiven \u003d description.split(DASH, FIELD_SPLIT_LIMIT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        paramIsSetCheck(paramGiven);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        parameterParser(paramGiven);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        return new SearchCommand(searchTerm, searchGenre, searchType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * Loops through each parameter and sets the option specified by each parameter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @param paramGiven is a String Array containing the processed parameters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     * @throws AniException if invalid parameters are parsed in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    public void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        if (paramGiven[1].isBlank()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(NO_PARAM_PROVIDED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] paramParts \u003d paramGiven[1].split(WHITESPACE, FIELD_SPLIT_LIMIT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case NAME_PARAM:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            searchTerm \u003d paramParts[1].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            searchType \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        case GENRE_PARAM:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            searchGenre \u003d paramParts[1].trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            searchType \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramGiven[1] + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 54,
      "OngDeZhi": 3,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/main/java/anichan/parser/ViewWatchlistParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.ViewWatchlistCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " * Handles parsing for view watchlist command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class ViewWatchlistParser extends CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VIEW_PARAM \u003d \"v\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String TOO_MUCH_ARGUMENTS \u003d \"View command\" + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String WATCHLIST_ID \u003d \"Watchlist ID!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(AddToWatchlistParser.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the specified command description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param description the specified command description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return initialised {@code ViewCommand} object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the command description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public ViewWatchlistCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        description \u003d description.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        if (description !\u003d null \u0026\u0026 !description.isBlank()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            String[] paramGiven \u003d description.split(DASH, 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            paramIsSetCheck(paramGiven);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            Integer watchlistIndex \u003d parameterParser(paramGiven[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return new ViewWatchlistCommand(watchlistIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        LOGGER.log(Level.INFO, PARAMETER_PARSED);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return new ViewWatchlistCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Parses the parameter provided in the command description."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param paramGiven a String Array containing the parameters and the value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @throws AniException when an error occurred while parsing the parameters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private Integer parameterParser(String paramGiven) throws AniException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] paramParts \u003d paramGiven.split(WHITESPACE, FIELD_SPLIT_LIMIT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        switch (paramParts[0].trim()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        case VIEW_PARAM:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            paramFieldCheck(paramParts);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            String fieldValue \u003d paramParts[1].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            String[] fieldParts \u003d fieldValue.split(WHITESPACE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            if (fieldParts.length \u003e 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                throw new AniException(TOO_MUCH_ARGUMENTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            isIntegerCheck(fieldValue, WATCHLIST_ID);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            return parseStringToInteger(fieldValue);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            String invalidParameter \u003d PARAMETER_ERROR_HEADER + paramGiven + NOT_RECOGNISED;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            throw new AniException(invalidParameter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "michaeldinata": 66
    }
  },
  {
    "path": "src/main/java/anichan/parser/WatchlistParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.WatchlistCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Handles parsing for watchlist command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class WatchlistParser extends CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String CREATE_PARAM \u003d \"n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String LIST_PARAM \u003d \"l\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SELECT_PARAM \u003d \"s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String DELETE_PARAM \u003d \"d\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String BLANK \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_COMMAND_TOO_MUCH_FIELDS_ERROR \u003d \"Watchlist command\" + TOO_MUCH_FIELDS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_COMMAND_TOO_MANY_PARAMETERS_ERROR \u003d \"Watchlist command\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                                              + TOO_MUCH_PARAMETERS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_NAME_IS_EMPTY_ERROR \u003d \"Watchlist name cannot be empty!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_NAME_IS_INVALID_ERROR \u003d \"Watchlist name can only consist of up to \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                                  + \"30 alphanumeric characters and/or spaces!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_INDEX_IS_EMPTY_ERROR \u003d \"Watchlist index cannot be empty!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_INDEX_IS_ZERO_ERROR \u003d \"Watchlist index cannot be zero!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String NO_PARAMETER_TO_CHECK_ERROR \u003d \"There should be a one parameter to check!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_PARAMETER_ERROR \u003d \"Watchlist command only accepts the parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                    + \"-n, -l, -s, and -d.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int DEFAULT_WATCHLIST_INDEX \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int CREATION_REQUIRED_PARAMETER_COUNT \u003d 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int LIST_REQUIRED_PARAMETER_COUNT \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int MODIFICATION_REQUIRED_PARAMETER_COUNT \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(WatchlistParser.class.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String parameter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String watchlistName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private int watchlistIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Parses the specified command description."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param description the specified command description"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return initialised {@code WatchlistCommand} object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while parsing the command description"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public WatchlistCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert description !\u003d null : DESCRIPTION_CANNOT_BE_NULL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] paramGiven \u003d description.split(DASH, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        paramIsSetCheck(paramGiven);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!paramGiven[0].isBlank()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(paramGiven[0] + NOT_RECOGNISED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistName \u003d BLANK;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistIndex \u003d DEFAULT_WATCHLIST_INDEX;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        parameterParser(paramGiven);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_INDEX_IS_ZERO_ERROR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Returning WatchlistCommand object with parameter: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                    + parameter + \", and information: \" + watchlistName + \" OR \" + watchlistIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!watchlistName.equals(BLANK)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new WatchlistCommand(parameter, watchlistName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (watchlistIndex !\u003d DEFAULT_WATCHLIST_INDEX) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new WatchlistCommand(parameter, watchlistIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new WatchlistCommand(parameter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Parses the parameter provided in the command description."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param paramGiven an String Array containing the parameters and the value"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error while parsing the parameters"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (paramGiven[1].matches(REGEX_PARAMETER)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_COMMAND_TOO_MANY_PARAMETERS_ERROR);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (paramGiven[1].startsWith(WHITESPACE)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_PARAMETER_ERROR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] parsedParts \u003d paramGiven[1].trim().split(WHITESPACE, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        parameter \u003d parsedParts[0].trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        switch (parameter) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case CREATE_PARAM:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            checkCreationParameters(parsedParts);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistName \u003d parsedParts[1].trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case LIST_PARAM:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            checkListParameters(parsedParts);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case SELECT_PARAM:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            // Fallthrough because select parameter will call checkModificationParameters method too."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        case DELETE_PARAM:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            checkModificationParameters(parsedParts);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistIndex \u003d parseStringToInteger(parsedParts[1].trim());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(INVALID_PARAMETER_ERROR);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Validates that watchlist creation parameters are valid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eHave the exact required parameter count.\u003c/li\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param parsedParts the parsed parameters and the value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when the watchlist creation parameters are invalid"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void checkCreationParameters(String[] parsedParts) throws AniException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert parsedParts.length !\u003d 0 : NO_PARAMETER_TO_CHECK_ERROR;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (parsedParts.length !\u003d CREATION_REQUIRED_PARAMETER_COUNT) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_NAME_IS_EMPTY_ERROR);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!parsedParts[1].trim().matches(REGEX_ALPHANUMERIC_WITH_SPACE)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_NAME_IS_INVALID_ERROR);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Validates that the watchlist list parameters are valid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eHave the exact required parameter count.\u003c/li\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param parsedParts parsed parameters and the value"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when the watchlist list parameters are invalid"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void checkListParameters(String[] parsedParts) throws AniException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert parsedParts.length !\u003d 0 : NO_PARAMETER_TO_CHECK_ERROR;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (parsedParts.length \u003e LIST_REQUIRED_PARAMETER_COUNT) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_COMMAND_TOO_MUCH_FIELDS_ERROR);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Validates that the watchlist modification (select and delete) parameters are valid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eHave the exact required parameter count.\u003c/li\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *     \u003cli\u003eProvided a parameter value that can be parsed to a positive integer.\u003c/li\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param parsedParts the parsed parameters and the value"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when the watchlist modification parameters are invalid"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private void checkModificationParameters(String[] parsedParts) throws AniException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert parsedParts.length !\u003d 0 : NO_PARAMETER_TO_CHECK_ERROR;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (parsedParts.length !\u003d MODIFICATION_REQUIRED_PARAMETER_COUNT) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_INDEX_IS_EMPTY_ERROR);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistIndex \u003d parsedParts[1].trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistIndex.contains(WHITESPACE)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WATCHLIST_COMMAND_TOO_MUCH_FIELDS_ERROR);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (isNegativeInteger(watchlistIndex)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NOT_POSITIVE_INTEGER);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isInteger(watchlistIndex)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NOT_INTEGER);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 174,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/main/java/anichan/parser/WorkspaceParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.WorkspaceCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " * Handles parsing for workspace command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "public class WorkspaceParser extends CommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(BookmarkParser.class.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String ASSERTION_INVALID_MESSAGE \u003d \"Input should not be null.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String EXCEPTION_INVALID_PARAMETERS \u003d \"Invalid parameters detected!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String EXCEPTION_ILLEGAL_WORKSPACE_NAME \u003d \"Workspace name must be shorter than \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            + \"31 characters and consist only alphanumeric characters and/or spaces.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String COMMAND_NEW \u003d \"n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String COMMAND_SWITCH \u003d \"s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String COMMAND_LIST \u003d \"l\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String COMMAND_DELETE \u003d \"d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String REGEX_SPACE_CHARACTER \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final int MAXIMUM_WORKSPACE_NAME_LENGTH \u003d 30;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private String commandOption;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private String commandDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Parses the specified command description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param description the specified command description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @return initialised WorkspaceCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException when an error occurred while parsing the command description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public WorkspaceCommand parse(String description) throws AniException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert description !\u003d null : ASSERTION_INVALID_MESSAGE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String[] paramGiven \u003d parameterSplitter(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        paramIsSetCheck(paramGiven);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        paramFieldCheck(paramGiven);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        parameterParser(paramGiven);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"Returning WorkspaceCommand object with option: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                + commandOption + \", and description: \" + commandDescription);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return new WorkspaceCommand(commandOption, commandDescription);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Parses the parameter provided in the command description."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param paramGiven a String Array containing the parameters and the value"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException when an error occurred while parsing the parameters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private void parameterParser(String[] paramGiven) throws AniException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (paramGiven.length !\u003d 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.WARNING, EXCEPTION_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXCEPTION_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            String cleanedCommand \u003d paramGiven[1].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            String[] givenOption \u003d cleanedCommand.split(REGEX_SPACE_CHARACTER, 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            switch (givenOption[0]) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            case COMMAND_NEW:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                commandOption \u003d COMMAND_NEW;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            case COMMAND_SWITCH:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                commandOption \u003d COMMAND_SWITCH;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            case COMMAND_LIST:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                commandOption \u003d COMMAND_LIST;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            case COMMAND_DELETE:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                commandOption \u003d COMMAND_DELETE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.WARNING, EXCEPTION_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                throw new AniException(EXCEPTION_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            if (!commandOption.equals(COMMAND_LIST)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                commandDescription \u003d givenOption[1].trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                checkName(commandDescription);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.WARNING, EXCEPTION_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXCEPTION_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Checks if workspace name is valid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param workspaceName name of workspace"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException when name is not of valid format"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private void checkName(String workspaceName) throws AniException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        if (workspaceName !\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            boolean isValid \u003d workspaceName.matches(REGEX_ALPHANUMERIC_WITH_SPACE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            if (!isValid || workspaceName.length() \u003e MAXIMUM_WORKSPACE_NAME_LENGTH) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                LOGGER.log(Level.WARNING, EXCEPTION_ILLEGAL_WORKSPACE_NAME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                throw new AniException(EXCEPTION_ILLEGAL_WORKSPACE_NAME);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 113
    }
  },
  {
    "path": "src/main/java/anichan/storage/BookmarkStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.bookmark.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author OngXinBin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the storage of bookmark data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class BookmarkStorage extends Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String BOOKMARK_FILE_NAME \u003d \"bookmark.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String BOOKMARK_LINE_DELIMITER \u003d \"~\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String storageDirectory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new instance of BookmarkStorage with the specified storage directory."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storageDirectory the specified path to bookmark directory in hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public BookmarkStorage(String storageDirectory) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storageDirectory \u003d storageDirectory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Save and Load \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the bookmark data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param workspaceName the active workspace name which house the bookmark to be saved"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param bookmark      the bookmark object to be saved"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AniException when an error occurred while saving user data"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save(String workspaceName, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String bookmarkDirectory \u003d storageDirectory + workspaceName + File.separator;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String bookmarkFilePath \u003d bookmarkDirectory + BOOKMARK_FILE_NAME;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String encodedWatchlistString \u003d encode(bookmark);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        new File(bookmarkDirectory).mkdirs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        writeFile(bookmarkFilePath, encodedWatchlistString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the user data."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param workspaceName the workspace name determine the folder which contains the bookmark file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param bookmark      the bookmark to load the bookmark object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the bookmark object that was loaded"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AniException when an error occurred while executing the command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String load(String workspaceName, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String bookmarkFilePath \u003d storageDirectory + workspaceName + File.separator + BOOKMARK_FILE_NAME;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String fileString \u003d readFile(bookmarkFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (fileString.isBlank()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Empty bookmark file.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] fileLines \u003d fileString.split(System.lineSeparator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return decode(fileLines, bookmark);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Encode and Decode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encodes the user object into a readable string representation for saving in file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param bookmark the bookmark object to be saved"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the readable string representation of the bookmark object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private String encode(Bookmark bookmark) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sbBookmark \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInteger\u003e animeBookmarkList \u003d bookmark.getAnimeBookmarkList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInteger\u003e animeEpisode \u003d bookmark.getAnimeEpisode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cNote\u003e animeNote \u003d bookmark.getAnimeNote();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c bookmark.getBookmarkSize(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            sbBookmark.append(animeBookmarkList.get(i));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            sbBookmark.append(BOOKMARK_LINE_DELIMITER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            sbBookmark.append(animeEpisode.get(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            sbBookmark.append(BOOKMARK_LINE_DELIMITER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Note note \u003d animeNote.get(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d 0; j \u003c note.getSize(); j++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                sbBookmark.append(note.getNote(j));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                sbBookmark.append(BOOKMARK_LINE_DELIMITER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            if (note.getSize() !\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                sbBookmark.setLength(sbBookmark.length() - 1); // Remove \"~\" for the last item in the string."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            sbBookmark.append(System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String encodedBookmarkString \u003d sbBookmark.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        //assert (encodedBookmarkString.isBlank()) : \"Encoded bookmark string should not be blank.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return encodedBookmarkString;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decodes the readable string representation of bookmark object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fileLines readable string representation of the user object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param bookmark  the bookmark to load bookmark object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of loading the bookmark object (Successful or not successful)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private String decode(String[] fileLines, Bookmark bookmark) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean hasCorruptedBookmark \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String line : fileLines) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] lineSplit \u003d line.split(BOOKMARK_LINE_DELIMITER, 3);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!isValidBookmarkString(lineSplit)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                hasCorruptedBookmark \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            int bookmarkIndex \u003d Integer.parseInt(lineSplit[0]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            int bookmarkEpisode \u003d Integer.parseInt(lineSplit[1]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            Note note \u003d new Note();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] lineSplitNotes \u003d lineSplit[2].split(BOOKMARK_LINE_DELIMITER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (lineSplitNotes[0].trim().length() \u003e 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                for (String noteString : lineSplitNotes) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                    note.addNote(noteString.trim());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            bookmark.addAnimeBookmark(bookmarkIndex, bookmarkEpisode, note);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (hasCorruptedBookmark) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Not all loaded successfully.\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"Loaded successfully.\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Validation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates the string representation of the bookmark object."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param lineSplit the string representation of the bookmark object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return {@code true} if the string representation is valid; false otherwise"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isValidBookmarkString(String[] lineSplit) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isValidSplitLength \u003d (lineSplit.length \u003d\u003d 3);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidSplitLength) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isFirstPartInteger \u003d isPositiveOrNegativeInteger(lineSplit[0]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isSecondPartInteger \u003d isPositiveOrNegativeInteger(lineSplit[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return isFirstPartInteger \u0026\u0026 isSecondPartInteger;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 1,
      "OngDeZhi": 5,
      "ChanJianHao": 3,
      "-": 144
    }
  },
  {
    "path": "src/main/java/anichan/storage/ScriptStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the class to manage script data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class ScriptStorage extends Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String storageDirectory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_SCRIPT_FILE \u003d \"Script file is empty.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(ScriptStorage.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new instance of ScriptStorage with the specified storage directory."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storageDirectory the specified path to storage directory in hard disk"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public ScriptStorage(String storageDirectory) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.storageDirectory \u003d storageDirectory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Reads the script file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param workspaceName the name of the workspace where the script can be found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param fileName the file name of the script file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the content of the script file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while loading the script data"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String readScript(String workspaceName, String fileName) throws AniException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String scriptFilePath \u003d storageDirectory + workspaceName + File.separator + fileName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileContent \u003d readFile(scriptFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (fileContent.isBlank()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Empty script file: \" + scriptFilePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(EMPTY_SCRIPT_FILE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return fileContent;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 45,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/main/java/anichan/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Abstract class to represent the various storage type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public abstract class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String REGEX_POSITIVE_INTEGER \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String REGEX_NEGATIVE_INTEGER \u003d \"^[-]\\\\d+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String FILE_DOES_NOT_EXIST \u003d \"File does not exist.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WRITE_TO_FILE_FAILED \u003d \"Failed to write to file.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected static final int MAX_ANIME_INDEX \u003d 510;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(Storage.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Reads input file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param filePath the path of the file to read from"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code String} containing the file content"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when unable to read from the file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String readFile(String filePath) throws AniException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileContent \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fileContent \u003d new String(Files.readAllBytes(Paths.get(filePath)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Read from file: \" + filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"File does not exist at: \" + filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return fileContent;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Writes to file based on the content supplied."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param filePath the path to the file to be written"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param fileContent the content to be written"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException When unable to write to the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void writeFile(String filePath, String fileContent) throws AniException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Wrote to file: \" + filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Failed to write to file at: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(WRITE_TO_FILE_FAILED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Checks if a {@code String} is a positive integer."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param integerString the {@code String} to be checked"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code true} if {@code integerString} is a positive integer; {@code false} otherwise"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean isPositiveInteger(String integerString) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return integerString.matches(REGEX_POSITIVE_INTEGER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Checks if a {@code String} is a (positive or negative) integer."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param integerString the {@code String} to be checked"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code true} if {@code integerString} is a (positive or negative) integer; {@code false} otherwise"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean isPositiveOrNegativeInteger(String integerString) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return integerString.matches(REGEX_POSITIVE_INTEGER) || integerString.matches(REGEX_NEGATIVE_INTEGER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Parses the string argument as a signed integer."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param stringInteger {@code String} argument to be parsed to {@code integer}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the {@code integer} that was parsed successfully"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    protected int parseStringToInteger(String stringInteger) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return Integer.parseInt(stringInteger);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            // To indicate parsing failed, it is not a good idea to throw exception here"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            // because that would break the entire data loading process, causing valid"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            // watchlist entry to not be loaded too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Received invalid anime index: \" + stringInteger);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return (MAX_ANIME_INDEX + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 103,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/main/java/anichan/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the class to manage all of AniChan\u0027s data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(StorageManager.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public static final String EXCEPTION_DELETE_FAILED \u003d \"Failed to delete workspace folder, try deleting manually.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String storageDirectory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final UserStorage userStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final WatchlistStorage watchlistStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final BookmarkStorage bookmarkStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final ScriptStorage scriptStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author OngDeZhi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new instance of StorageManager with the specified storage directory."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storageDirectory the specified path to storage directory in hard disk"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public StorageManager(String storageDirectory) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.storageDirectory \u003d storageDirectory;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userStorage \u003d new UserStorage(this.storageDirectory);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistStorage \u003d new WatchlistStorage(this.storageDirectory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        bookmarkStorage \u003d new BookmarkStorage(this.storageDirectory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        scriptStorage \u003d new ScriptStorage(this.storageDirectory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Retrieves the list of workspace found in the storage directory."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the list of workspace found in the storage directory"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String[] retrieveWorkspaceList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        File file \u003d new File(storageDirectory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] workspaceList \u003d file.list((current, name) -\u003e new File(current, name).isDirectory());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (workspaceList \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.INFO, \"Found 0 workspace.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new String[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Found \" + workspaceList.length + \" workspace(s).\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return workspaceList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Workspace Saving \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Saves the workspace."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param workspace the name of workspace"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while trying to save the workspace"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void saveWorkspace(Workspace workspace) throws AniException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        new File(storageDirectory + workspace.getName()).mkdirs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistStorage.save(workspace.getName(), workspace.getWatchlistList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Workspace Deletion \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * Deletes directory containing specified workspace."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @param name name of workspace"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     * @throws AniException when an error occurred while trying to delete directory"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void deleteWorkspace(String name) throws AniException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assert (name !\u003d null) : \"Workspace name is null.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String deletePathString \u003d storageDirectory + name;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            Path deletePath \u003d Paths.get(deletePathString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.INFO, \"Deleting workspace \" + name);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            Files.walk(deletePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                    .sorted(Comparator.reverseOrder())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                    .map(Path::toFile)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "                    .forEach(File::delete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Exception: \" + EXCEPTION_DELETE_FAILED);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            throw new AniException(EXCEPTION_DELETE_FAILED);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author OngDeZhi"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Invokes the save method in UserStorage to save the user data."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param user the user object to save"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while saving the user data"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void saveUser(User user) throws AniException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userStorage.save(user);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Invokes the load method in UserStorage to load the user data."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the user object loaded"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while loading the user data"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public User loadUser() throws AniException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return userStorage.load();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Watchlist Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Invokes the save method in WatchlistStorage to save the watchlist data."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param workspaceName the name of the workspace to save the list under"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param watchlistList the watchlist list to save"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while saving the watchlist list data"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void saveWatchlistList(String workspaceName, ArrayList\u003cWatchlist\u003e watchlistList) throws AniException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistStorage.save(workspaceName, watchlistList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Invokes the load method in WatchlistStorage to load the watchlist data."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param workspaceName the name of the workspace to load the list from"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param watchlistList the watchlist list to load the data into"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the load result message"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while loading the watchlist list data"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String loadWatchlistList(String workspaceName, ArrayList\u003cWatchlist\u003e watchlistList) throws AniException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return watchlistStorage.load(workspaceName, watchlistList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bookmark Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author OngXinBin"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invokes the save method in bookmarkStorage to save the bookmark data."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param workspaceName the name of the workspace to load the list from"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param bookmark the bookmark list to save"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AniException when an error occurred while saving the watchlist list data"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveBookmark(String workspaceName, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        bookmarkStorage.save(workspaceName, bookmark);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invokes the load method in bookmarkStorage to load the bookmark data."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param workspaceName the name of the workspace to load the list from"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param bookmark the bookmark list to save"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the load result message"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AniException when an error occurred while saving the watchlist list data"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public String loadBookmark(String workspaceName, Bookmark bookmark) throws AniException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return bookmarkStorage.load(workspaceName, bookmark);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Script Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author OngDeZhi"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Loads the script file."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param workspaceName the name of the workspace where the script can be found"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param fileName      the file name of the script file"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the content of the script file"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while loading the script data"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String loadScript(String workspaceName, String fileName) throws AniException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return scriptStorage.readScript(workspaceName, fileName);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 130,
      "ChanJianHao": 36,
      "-": 26
    }
  },
  {
    "path": "src/main/java/anichan/storage/UserStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the class to manage user data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class UserStorage extends Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String USER_FILE_NAME \u003d \"user.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String USER_LINE_DELIMITER_FOR_DECODE \u003d \"\\\\|\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String USER_LINE_DELIMITER_FOR_ENCODE \u003d \" | \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_USER_FILE \u003d \"Empty user file.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String NO_USER_LOADED \u003d \"Not loaded successfully.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String USER_DETAILS_CANNOT_BE_NULL \u003d \"User details should not have any null.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(UserStorage.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String storageDirectory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new instance of UserStorage with the specified storage directory."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storageDirectory the specified path to storage directory in hard disk"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public UserStorage(String storageDirectory) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.storageDirectory \u003d storageDirectory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Save and Load \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Saves the user data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param user the user object to be saved"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while saving the user data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void save(User user) throws AniException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userFilePath \u003d storageDirectory + USER_FILE_NAME;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String encodedUserString \u003d encode(user);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        new File(storageDirectory).mkdirs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        writeFile(userFilePath, encodedUserString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Loads the user data."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the user object that was loaded"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while loading the user data"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public User load() throws AniException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userFilePath \u003d storageDirectory + USER_FILE_NAME;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileContent \u003d readFile(userFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (fileContent.isBlank()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Empty user file: \" + userFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(EMPTY_USER_FILE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] fileContentSplit \u003d fileContent.split(USER_LINE_DELIMITER_FOR_DECODE, 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.FINE, \"Processing: \" + System.lineSeparator() + fileContent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (fileContentSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Invalid user file: \" + userFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NO_USER_LOADED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return decode(fileContentSplit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Encode and Decode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Encodes the user object into a readable string representation for saving in file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param user the user object to be saved"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the readable string representation of the user object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String encode(User user) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userName \u003d user.getName();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userGender \u003d user.getGender().toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String encodedUserString \u003d userName + USER_LINE_DELIMITER_FOR_ENCODE + userGender;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assert (userName !\u003d null \u0026\u0026 userGender !\u003d null) : USER_DETAILS_CANNOT_BE_NULL;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return encodedUserString;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Decodes the readable string representation of the user object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param fileContentSplit readable string representation of the user object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the decoded user object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurs while reconstructing the user object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private User decode(String[] fileContentSplit) throws AniException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userName \u003d fileContentSplit[0].trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String userGender \u003d fileContentSplit[1].trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new User(userName, userGender);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } catch (AniException exception) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Invalid user details: \" + userName + \", \" + userGender);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            throw new AniException(NO_USER_LOADED);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 109,
      "ChanJianHao": 3
    }
  },
  {
    "path": "src/main/java/anichan/storage/WatchlistStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.logger.AniLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the class to manage watchlist data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class WatchlistStorage extends Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_FILE_NAME \u003d \"watchlist.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_LINE_DELIMITER_FOR_DECODE \u003d \"\\\\|\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String WATCHLIST_LINE_DELIMITER_FOR_ENCODE \u003d \" | \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String DELIMITER_FOR_ENCODED_ANIME_LIST \u003d \",\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ENCODED_ANIME_LIST_FIRST_CHARACTER \u003d \"[\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ENCODED_ANIME_LIST_LAST_CHARACTER \u003d \"]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_WATCHLIST_FILE \u003d \"Empty watchlist file.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String NO_WATCHLIST_LOADED \u003d \"No watchlist loaded successfully (all invalid).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SOME_WATCHLIST_LOADED \u003d \"Not all loaded successfully (some invalid).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String LOAD_SUCCESS \u003d \"Loaded successfully.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String REGEX_ALPHANUMERIC_WITH_SPACE \u003d \"^[a-zA-Z0-9\\\\s]*$\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int MAX_WATCHLIST_NAME_LENGTH \u003d 30;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Logger LOGGER \u003d AniLogger.getAniLogger(WatchlistStorage.class.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String storageDirectory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new instance of WatchlistStorage with the specified storage directory."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param storageDirectory the specified path to storage directory in hard disk"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public WatchlistStorage(String storageDirectory) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.storageDirectory \u003d storageDirectory;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Save and Load \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Saves the watchlist list at the specified workspace folder."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param workspaceName the name of the workspace to save the list under"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param watchlistList the watchlist list to save"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while saving the watchlist list data"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void save(String workspaceName, ArrayList\u003cWatchlist\u003e watchlistList) throws AniException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistDirectory \u003d storageDirectory + workspaceName + File.separator;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistFilePath \u003d watchlistDirectory + WATCHLIST_FILE_NAME;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String encodedWatchlistString \u003d encode(watchlistList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        new File(watchlistDirectory).mkdirs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        writeFile(watchlistFilePath, encodedWatchlistString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Loads the watchlist list from the specified workspace."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param workspaceName the name of the workspace to load the list from"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param watchlistList the watchlist list to load the data into"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the load result message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @throws AniException when an error occurred while loading the watchlist list data"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String load(String workspaceName, ArrayList\u003cWatchlist\u003e watchlistList) throws AniException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistFilePath \u003d storageDirectory + workspaceName + File.separator + WATCHLIST_FILE_NAME;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileContent \u003d readFile(watchlistFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (fileContent.isBlank()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Empty watchlist file: \" + watchlistFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return EMPTY_WATCHLIST_FILE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean hasInvalidWatchlist \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] fileLines \u003d fileContent.split(System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.FINE, \"Processing: \" + System.lineSeparator() + fileContent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (String line : fileLines) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Watchlist decodedWatchlist \u003d decode(line);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            boolean isValidWatchlist \u003d (decodedWatchlist !\u003d null) \u0026\u0026 !(watchlistList.contains(decodedWatchlist));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (!isValidWatchlist) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                hasInvalidWatchlist \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistList.add(decodedWatchlist);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (hasInvalidWatchlist \u0026\u0026 watchlistList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"All invalid watchlist entries at: \" + watchlistFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return NO_WATCHLIST_LOADED;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (hasInvalidWatchlist) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Some invalid watchlist entries at: \" + watchlistFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return SOME_WATCHLIST_LOADED;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        LOGGER.log(Level.INFO, \"Loaded successfully: \" + watchlistFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return LOAD_SUCCESS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Encode and Decode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Encodes the watchlistList object into a readable string representation for saving in file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param watchlistList the arraylist of watchlist object to be encoded"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the readable string representation of the arraylist of watchlist object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private String encode(ArrayList\u003cWatchlist\u003e watchlistList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        StringBuilder sbWatchlist \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (Watchlist watchlist : watchlistList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlist.append(watchlist.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlist.append(WATCHLIST_LINE_DELIMITER_FOR_ENCODE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlist.append(watchlist.getAnimeList().toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbWatchlist.append(System.lineSeparator());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return sbWatchlist.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Decodes the readable string representation of the watchlist object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param line the readable string representation of the watchlist object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the decoded watchlist object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Watchlist decode(String line) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] lineSplit \u003d line.split(WATCHLIST_LINE_DELIMITER_FOR_DECODE, 2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isValidWatchlistString(lineSplit)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistName \u003d lineSplit[0].trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (watchlistName.isBlank()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String animeListString \u003d lineSplit[1].trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String animeListStringContent \u003d animeListString.substring(1, animeListString.length() - 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cInteger\u003e animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (animeListStringContent.isBlank()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return new Watchlist(watchlistName, animeList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] animes \u003d animeListStringContent.split(DELIMITER_FOR_ENCODED_ANIME_LIST);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (String animeIndex : animes) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            String trimmedIndex \u003d animeIndex.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (!isPositiveInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            int parsedAnimeIndex \u003d parseStringToInteger(trimmedIndex);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            boolean isValidAnimeIndex \u003d (parsedAnimeIndex \u003c\u003d MAX_ANIME_INDEX)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                        \u0026\u0026 !(animeList.contains(parsedAnimeIndex));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            if (!isValidAnimeIndex) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            animeList.add(parsedAnimeIndex);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return new Watchlist(watchlistName, animeList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Validation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Validates the string representation of the watchlist object."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param lineSplit the string representation of the watchlist object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code true} if the string representation is valid; {@code false} otherwise"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private boolean isValidWatchlistString(String[] lineSplit) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isValidSplitLength \u003d (lineSplit.length \u003d\u003d 2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isValidSplitLength) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistName \u003d lineSplit[0].trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        boolean isValidWatchlistName \u003d (watchlistName.length() \u003c\u003d MAX_WATCHLIST_NAME_LENGTH)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                        \u0026\u0026 (watchlistName.matches(REGEX_ALPHANUMERIC_WITH_SPACE));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!isValidWatchlistName) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String animeListString \u003d lineSplit[1].trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return (animeListString.startsWith(ENCODED_ANIME_LIST_FIRST_CHARACTER))"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                \u0026\u0026 (animeListString.endsWith(ENCODED_ANIME_LIST_LAST_CHARACTER));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 191,
      "ChanJianHao": 3
    }
  },
  {
    "path": "src/main/java/anichan/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static anichan.logger.AniLogger.getAniLogger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents the class to handle all input and output of AniChan."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final Scanner CONSOLE \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final Logger LOGGER \u003d getAniLogger(Main.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String LOGO \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    \"                  _  _____ _\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    + \"      /\\\\         (_)/ ____| |\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    + \"     /  \\\\   _ __  _| |    | |__   __ _ _ __\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    + \"    / /\\\\ \\\\ | \u0027_ \\\\| | |    | \u0027_ \\\\ / _` | \u0027_ \\\\\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                    + \"   / ____ \\\\| | | | | |____| | | | (_| | | | |\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                    + \"  /_/    \\\\_\\\\_| |_|_|\\\\_____|_| |_|\\\\__,_|_| |_|\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            \"-------------------------------------------------------------\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author OngDeZhi"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Prints a message to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param message the specified message to print"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (!message.isBlank()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            System.out.println(message);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Prints the error message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param errorMessage the specified error information"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printErrorMessage(String errorMessage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        System.out.println(\"OOPS!!! \" + errorMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Prints a single horizontal line."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printHorizontalLine() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        System.out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        printMessage(\"Welcome to AniChan!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        printMessage(LOGO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void printGoodbyeMessage(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        printMessage(\"Sayonara \" + name + \"!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"Printed goodbye message, exiting program!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author OngDeZhi"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Prints the input prompt and checks if there are any more user input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param user used to retrieve user information for printing input prompt"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code true} if there are more input; false otherwise"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean hasNextLine(User user) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String workspaceName \u003d user.getActiveWorkspace().getName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String watchlistName \u003d user.getActiveWorkspace().getActiveWatchlistName();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        System.out.print(System.lineSeparator() + workspaceName + \" (\" + watchlistName + \") #\u003e \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return CONSOLE.hasNextLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns the user input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return the user input"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return CONSOLE.nextLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public String[] createUserDialogue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        LOGGER.log(Level.INFO, \"No existing user file found, prompting user to create one!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String[] userDialogueInput \u003d new String[3];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        printMessage(\"What\u0027s your name?\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userDialogueInput[0] \u003d readUserInput();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        printMessage(\"Hello \" + userDialogueInput[0] + \"! What might your gender be? (Male/Female/Other)\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userDialogueInput[1] \u003d readUserInput();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        return userDialogueInput;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 74,
      "ChanJianHao": 20,
      "michaeldinata": 8
    }
  },
  {
    "path": "src/main/java/anichan/watchlist/Watchlist.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.watchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " * Represents a named list that contains the list of anime the user is tracking."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class Watchlist {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private final ArrayList\u003cInteger\u003e animeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_WATCHLIST_MESSAGE \u003d \"Uhh.. It\u0027s empty.. :(\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author OngDeZhi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new instance of Watchlist with the specified name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param name specified watchlist name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Watchlist(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Creates a new instance of Watchlist with the specified name and anime list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param name the specified watchlist name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param animeList the specified anime list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public Watchlist(String name, ArrayList\u003cInteger\u003e animeList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        this.animeList \u003d animeList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns the name of this Watchlist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return name of this Watchlist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns the anime list of this Watchlist."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return anime list of this Watchlist"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public ArrayList\u003cInteger\u003e getAnimeList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return animeList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    //@@author michaeldinata"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Adds an anime into this Watchlist."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeIndex the specified anime index to be added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void addAnimeToList(Integer animeIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.animeList.add(animeIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Removes an anime from this Watchlist."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeIndex the specified anime index in this Watchlist to be removed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void removeAnimeFromList(int animeIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        this.animeList.remove(animeIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Returns the total number of anime in this Watchlist."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return the total number of anime in this Watchlist"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public int getWatchlistSize() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return this.animeList.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * Returns the actual anime index."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @param animeIndexInWatchlist the specified index of anime in this Watchlist"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     * @return the actual anime index"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public int getWatchlistListAnimeIndex(int animeIndexInWatchlist) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        return this.animeList.get(animeIndexInWatchlist);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    //@@author OngDeZhi"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a string representation of the anime list in this Watchlist."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a string representation of the anime list in this Watchlist"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String animeListToString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        StringBuilder sbAnimeList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (animeList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbAnimeList.append(EMPTY_WATCHLIST_MESSAGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbAnimeList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        for (int i \u003d 0; i \u003c animeList.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbAnimeList.append(i + 1).append(\". \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbAnimeList.append(animeList.get(i));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            sbAnimeList.append(System.lineSeparator());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return sbAnimeList.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Returns a string representation of this Watchlist."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return a string representation of this Watchlist"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return name + System.lineSeparator() + animeListToString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * Used to indicate whether some other object is \"equal\" to this one."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @param otherObject the reference object with which to compare"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     * @return {@code true} if this object is the same type and has the same name as the otherObject argument;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     *                      false otherwise."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public boolean equals(Object otherObject) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        if (otherObject \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        } else if (getClass().equals(otherObject.getClass())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            Watchlist otherWatchlist \u003d (Watchlist) otherObject;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            return this.getName().equals(otherWatchlist.getName());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 101,
      "ChanJianHao": 1,
      "michaeldinata": 39
    }
  },
  {
    "path": "src/test/data/AddRemoveAnimeTest/watchlist.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "TestWatchlist | []"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 1
    }
  },
  {
    "path": "src/test/data/Default/bookmark.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "0~1~test~test3"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "2~0~"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "3~0~"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 3
    }
  },
  {
    "path": "src/test/data/Default/script.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test word"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 852
    }
  },
  {
    "path": "src/test/data/Default/watchlist.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "First | []"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Second | [1, 2]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Third | [3]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "Test | []"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 2,
      "michaeldinata": 2
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithInvalidFile/AllInvalidWorkspace/watchlist.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a |"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [[[]]]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| []"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| [, , , , ,]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [1, , 3]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [512, 513, 514, 515]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [-1, -2]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "superduperlongwatchlistnamethatwilldefinitelyfail | []"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "hello /|\\ []"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [testing, this, thing]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [1, 2, test?]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "c | [1, 2, -1, -100]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "hello!@#$%^%\u0026%^ | []"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "helloworld||||[]"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 17
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithInvalidFile/SomeInvalidWorkspace/watchlist.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a |"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [[[]]]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| []"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "| [, , , , ,]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "duplicate | []"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "duplicate | []"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "s | [ 1 , 2 , 3 ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "c | [0, 511]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "d | [0, 509, 510]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "s | [ 1 , 2 , 3,4,5 ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "hmm | [1,2,3,1,2,3,1,2,3]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "hello /|\\ []"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [testing, this, thing]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [1, 2, test?]"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 15
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithInvalidFile/user.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "abc /|\\ Male"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithValidFile/ValidWorkspace/script.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test word"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Hello!"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: Hello!"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Hello!"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Kuro: Just a demonstration of a script file that contains bunch of test words."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Shiro: I see, this is also another demonstration of a script file content that contains much more words to help build up the file content."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Aoi: Oh, this is some more demonstration."
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 852
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithValidFile/ValidWorkspace/watchlist.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "a | [1, 2, 3]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "b | [2, 3, 4]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Default | []"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "c|[]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "           d            |              [                 ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "           e            |       [  1 ,       2       , 3       ,4,5,6,7]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "f|[1,2,3,4,5]"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 7
    }
  },
  {
    "path": "src/test/data/StorageManagerTest/DirectoryWithValidFile/user.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "Testing | Male"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1
    }
  },
  {
    "path": "src/test/java/anichan/MainTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 3,
      "-": 2
    }
  },
  {
    "path": "src/test/java/anichan/anime/AnimeDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.anime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "class AnimeDataTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static AnimeData animeData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final Integer NEGATIVE_INTEGER \u003d -1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final Integer NULL_PARAM \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String FIRST_INDEX_ANIME_INFO \u003d \"Index: 1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Name: Cowboy Bebop\" + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Episodes: 26\" + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Release Date: 03/Apr/1998\" + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Rating: 86\" + System.lineSeparator()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Genre: [Action, Adventure, Drama, Sci-Fi]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    static void setUp() throws AniException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        animeData \u003d new AnimeData();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void returnAnimeInfo_firstInteger_expectAnimeInfo() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(animeData.returnAnimeInfo(0), FIRST_INDEX_ANIME_INFO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void getAnime_negativeInteger_expectException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeData.getAnime(NEGATIVE_INTEGER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void getAnime_nullInput_expectException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeData.getAnime(NULL_PARAM);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void getAnimeByID_negativeInteger_expectException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeData.getAnime(NEGATIVE_INTEGER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void getAnimeByID_nullInput_expectException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            animeData.getAnime(NULL_PARAM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 55,
      "OngDeZhi": 1,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/test/java/anichan/anime/AnimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.anime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "class AnimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void setReleaseDate_singleDigits_usableDateFormat() throws java.text.ParseException, AniException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime \u003d new Anime();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String[] inputDate \u003d {\"2020\", \"5\", \"1\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testAnime.setReleaseDate(inputDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        System.out.println(testAnime.getReleaseDate());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SimpleDateFormat stringToDate \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Date testDate \u003d stringToDate.parse(\"2020-05-01\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testAnime.getReleaseDate(), testDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void setRating_greaterThan100_ratingWillBeZero() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime \u003d new Anime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        int largeRating \u003d 9999;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testAnime.setRating(largeRating);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testAnime.getRating(), 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void setRating_negativeNumbers_ratingWillBeZero() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime \u003d new Anime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        int negativeRating \u003d -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testAnime.setRating(negativeRating);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testAnime.getRating(), 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void setReleaseDate_invalidDate_throwAniException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        Anime testAnime \u003d new Anime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String[] invalidDate \u003d { \"Not\", \"Valid\", \"Date\" };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testAnime.setReleaseDate(invalidDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 48,
      "ChanJianHao": 1
    }
  },
  {
    "path": "src/test/java/anichan/commands/AddToWatchlistCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.AddToWatchlistParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class AddToWatchlistCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static AnimeData animeData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static User user;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static Bookmark bookmark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static Workspace workspace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String STORAGE_DIRECTORY \u003d \"src\" + File.separator + \"test\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            + File.separator + \"data\" + File.separator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String ZERO_ANIME_INDEX \u003d \"0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String DUPLICATE_ANIME_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String LARGE_ANIME_INDEX \u003d \"3\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_ANIME_INDEX \u003d \"2\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime1ReleaseDate \u003d {\"2000\", \"12\", \"12\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime1Genre \u003d {\"Action\", \"Drama\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime2ReleaseDate \u003d {\"2020\", \"1\", \"1\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime2Genre \u003d {\"Thriller\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime1 \u003d new Anime(\"testAnime1\", testAnime1ReleaseDate, 80,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                testAnime1Genre, 20, 20);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime2 \u003d new Anime(\"testAnime2\", testAnime2ReleaseDate, 65,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                testAnime2Genre, 45, 60);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeList.add(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist watchlist \u003d new Watchlist(\"TestWatchlist\", animeList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        watchlistList.add(watchlist);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        workspace \u003d new Workspace(\"AddRemoveAnimeTest\", watchlistList, bookmark);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user \u003d new User(\"TestUser\", \"Male\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user.setActiveWorkspace(workspace);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        storageManager \u003d new StorageManager(STORAGE_DIRECTORY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_zeroInteger_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParser \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistCommand testAdd \u003d testParser.parse(ZERO_ANIME_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testAdd.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_duplicateIndex_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParser \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistCommand testAdd \u003d testParser.parse(DUPLICATE_ANIME_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testAdd.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_indexLargerThanDataSize_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParser \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistCommand testAdd \u003d testParser.parse(LARGE_ANIME_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testAdd.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_validAnimeIndex_addAnimeSuccessful() throws AniException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String expectedOutput \u003d \"testAnime2 added to watchlist!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParser \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistCommand testAdd \u003d testParser.parse(VALID_ANIME_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String actualOutput \u003d testAdd.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 9,
      "michaeldinata": 92
    }
  },
  {
    "path": "src/test/java/anichan/commands/BookmarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.parser.BookmarkParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.MethodOrderer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.TestMethodOrder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "@TestMethodOrder(MethodOrderer.OrderAnnotation.class)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "class BookmarkCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static AnimeData animeData;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String STORAGE_DIRECTORY \u003d \"src\" + File.separator + \"test\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + File.separator + \"data\" + File.separator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static StorageManager storageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static User user;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_ADD_TEST \u003d \"-a 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_ADD_TEST2 \u003d \"-a 2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_ADD_TEST3 \u003d \"-a 3\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_ADD_TEST4 \u003d \"-a 4\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_LIST_TEST \u003d \"-l\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_DELETE_TEST \u003d \"-d 2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_EDIT_TEST \u003d \"1 -e 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_NOTE_TEST \u003d \"1 -n test\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_NOTE_TEST2 \u003d \"1 -n test2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_NOTE_TEST3 \u003d \"1 -n test3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_SINGLE_INPUT_TEST \u003d \"1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_SINGLE_INPUT_TEST2 \u003d \"2\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_SINGLE_INPUT_TEST3 \u003d \"3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_REMOVE_NOTE_TEST \u003d \"1 -r 2\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_ADD_ANIME_INDEX_TEST \u003d \"-a 600\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_DELETE_BOOKMARK_INDEX_TEST \u003d \"-d 5\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_ADD_DUPLICATE_ANIME_INDEX_TEST \u003d \"-a 1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_EDIT_BOOKMARK_INDEX_TEST \u003d \"5 -e 5\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_INFO_BOOKMARK_INDEX_TEST \u003d \"5\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_NOTE_BOOKMARK_INDEX_TEST \u003d \"5 -n test\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_REMOVE_NOTE_BOOKMARK_INDEX_TEST \u003d \"5 -r 5\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_REMOVE_NOTE_INDEX_TEST \u003d \"1 -r 5\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String ZERO_ADD_ANIME_INDEX_TEST \u003d \"-a 0\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String ZERO_DELETE_BOOKMARK_INDEX_TEST \u003d \"-d 0\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String ZERO_EDIT_BOOKMARK_INDEX_TEST \u003d \"0 -e 1\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String ZERO_REMOVE_NOTE_INDEX_TEST \u003d \"1 -r 0\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String ZERO_REMOVE_BOOKMARK_INDEX_TEST \u003d \"0 -r 1\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_EDIT_EPISODE_TEST \u003d \"1 -e 100\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_NOTE_FORBIDDEN_CHAR_TEST \u003d \"1 -n testing~\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_ADD_TEST \u003d \"Saving 1. Cowboy Bebop to bookmark.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_ADD_TEST2 \u003d \"Saving 2. Cowboy Bebop: The Movie - Knockin\u0027 on Heaven\u0027s Door\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \" to bookmark.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_ADD_TEST3 \u003d \"Saving 3. Trigun to bookmark.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_ADD_TEST4 \u003d \"Saving 4. Witch Hunter Robin to bookmark.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_LIST_TEST \u003d \"Listing all anime in bookmark:\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"\\t1. Cowboy Bebop\" + System.lineSeparator()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"\\t2. Cowboy Bebop: The Movie - Knockin\u0027 on Heaven\u0027s Door\" + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"\\t3. Trigun\" + System.lineSeparator()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"\\t4. Witch Hunter Robin\" + System.lineSeparator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_DELETE_TEST \u003d \"Removing Cowboy Bebop: The Movie - Knockin\u0027 on Heaven\u0027s Door! :(\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_EDIT_TEST \u003d \"Editing the current episode for Cowboy Bebop to episode(s) 1.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_NOTE_TEST \u003d \"Adding note:\\\"test\\\" to Cowboy Bebop!\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_NOTE_TEST2 \u003d \"Adding note:\\\"test2\\\" to Cowboy Bebop!\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_NOTE_TEST3 \u003d \"Adding note:\\\"test3\\\" to Cowboy Bebop!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_SINGLE_INPUT_TEST \u003d \"Here is the information for that anime.\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Index: 1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Name: Cowboy Bebop\" + System.lineSeparator()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Episodes: 26\" + System.lineSeparator()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Release Date: 03/Apr/1998\" + System.lineSeparator()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Rating: 86\" + System.lineSeparator()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Genre: [Action, Adventure, Drama, Sci-Fi]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Current Episode: 1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Notes for anime:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"1. test\" + System.lineSeparator()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"2. test2\" + System.lineSeparator()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"3. test3\" + System.lineSeparator();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_SINGLE_INPUT_TEST2 \u003d \"Here is the information for that anime.\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Index: 3\" + System.lineSeparator()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Name: Trigun\" + System.lineSeparator()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Episodes: 26\" + System.lineSeparator()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Release Date: 01/Apr/1998\" + System.lineSeparator()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Rating: 79\" + System.lineSeparator()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Genre: [Action, Adventure, Comedy, Drama, Sci-Fi]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Notes for anime:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"\\tNotes is empty.. :(\" + System.lineSeparator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_SINGLE_INPUT_TEST3 \u003d \"Here is the information for that anime.\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Index: 4\" + System.lineSeparator()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Name: Witch Hunter Robin\" + System.lineSeparator()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Episodes: 26\" + System.lineSeparator()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Release Date: 02/Jul/2002\" + System.lineSeparator()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Rating: 68\" + System.lineSeparator()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Genre: [Action, Drama, Mystery, Supernatural]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Notes for anime:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"\\tNotes is empty.. :(\" + System.lineSeparator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_REMOVE_NOTE_TEST \u003d \"Deleting note: test2\" + System.lineSeparator()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"From: Cowboy Bebop.\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String OUTPUT_SINGLE_INPUT_TEST_AFTER_REMOVE \u003d \"Here is the information for that anime.\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Index: 1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Name: Cowboy Bebop\" + System.lineSeparator()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Episodes: 26\" + System.lineSeparator()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Release Date: 03/Apr/1998\" + System.lineSeparator()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Rating: 86\" + System.lineSeparator()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Genre: [Action, Adventure, Drama, Sci-Fi]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Current Episode: 1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"Notes for anime:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"1. test\" + System.lineSeparator()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            + \"2. test3\" + System.lineSeparator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    static void setUp() throws AniException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        animeData \u003d new AnimeData();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        storageManager \u003d new StorageManager(STORAGE_DIRECTORY);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        user \u003d new User(\"Mr Test\", \"Male\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Watchlist secondWatchlist \u003d new Watchlist(\"Second\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        secondWatchlist.addAnimeToList(1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        secondWatchlist.addAnimeToList(2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Watchlist thirdWatchlist \u003d new Watchlist(\"Third\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        thirdWatchlist.addAnimeToList(3);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        watchlistList.add(new Watchlist(\"First\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        watchlistList.add(secondWatchlist);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        watchlistList.add(thirdWatchlist);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        Workspace newWorkspace \u003d user.addWorkspace(\"Default\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        newWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        user.setActiveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_validAddAnimeIndex_Successful() throws AniException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(VALID_ADD_TEST);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_ADD_TEST, result);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_validAddAnimeIndex2_Successful() throws AniException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(VALID_ADD_TEST2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_ADD_TEST2, result);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand2 \u003d testParse2.parse(VALID_ADD_TEST3);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result2 \u003d testBookmarkCommand2.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_ADD_TEST3, result2);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse3 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand3 \u003d testParse3.parse(VALID_ADD_TEST4);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result3 \u003d testBookmarkCommand3.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_ADD_TEST4, result3);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(3)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_validList_Successful() throws AniException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(VALID_LIST_TEST);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_LIST_TEST, result);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(4)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_validDelete_Successful() throws AniException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(VALID_DELETE_TEST);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_DELETE_TEST, result);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(5)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_validEdit_Successful() throws AniException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(VALID_EDIT_TEST);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_EDIT_TEST, result);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(6)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_validNote_Successful() throws AniException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(VALID_NOTE_TEST);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_NOTE_TEST, result);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand2 \u003d testParse2.parse(VALID_NOTE_TEST2);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result2 \u003d testBookmarkCommand2.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_NOTE_TEST2, result2);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(result2);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse3 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand3 \u003d testParse3.parse(VALID_NOTE_TEST3);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result3 \u003d testBookmarkCommand3.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_NOTE_TEST3, result3);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(7)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_validInfo_Successful() throws AniException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(VALID_SINGLE_INPUT_TEST);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_SINGLE_INPUT_TEST, result);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand2 \u003d testParse2.parse(VALID_SINGLE_INPUT_TEST2);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result2 \u003d testBookmarkCommand2.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_SINGLE_INPUT_TEST2, result2);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse3 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand3 \u003d testParse3.parse(VALID_SINGLE_INPUT_TEST3);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result3 \u003d testBookmarkCommand3.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_SINGLE_INPUT_TEST3, result3);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(8)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_validRemoveNote_Successful() throws AniException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(VALID_REMOVE_NOTE_TEST);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result \u003d testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_REMOVE_NOTE_TEST, result);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand2 \u003d testParse2.parse(VALID_SINGLE_INPUT_TEST);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        String result2 \u003d testBookmarkCommand2.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(OUTPUT_SINGLE_INPUT_TEST_AFTER_REMOVE, result2);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(9)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidAnimeIndexAdd_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(INVALID_ADD_ANIME_INDEX_TEST);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(10)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidBookmarkIndexDelete_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(INVALID_DELETE_BOOKMARK_INDEX_TEST);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(11)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidDuplicateAnimeIndexAdd_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(INVALID_ADD_DUPLICATE_ANIME_INDEX_TEST);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(12)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidBookmarkIndexEdit_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(INVALID_EDIT_BOOKMARK_INDEX_TEST);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(13)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidBookmarkIndexInfo_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(INVALID_INFO_BOOKMARK_INDEX_TEST);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(14)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidBookmarkIndexNote_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(INVALID_NOTE_BOOKMARK_INDEX_TEST);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(15)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidBookmarkIndexNoteRemove_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(INVALID_REMOVE_NOTE_BOOKMARK_INDEX_TEST);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(16)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidNoteIndexRemoveNote_AniException() throws AniException {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(INVALID_REMOVE_NOTE_INDEX_TEST);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(17)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_zeroIndex_AniException() throws AniException {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(ZERO_ADD_ANIME_INDEX_TEST);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand2 \u003d testParse2.parse(ZERO_DELETE_BOOKMARK_INDEX_TEST);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand2.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse3 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand3 \u003d testParse3.parse(ZERO_EDIT_BOOKMARK_INDEX_TEST);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand3.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse4 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand4 \u003d testParse4.parse(ZERO_REMOVE_NOTE_INDEX_TEST);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand4.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse5 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand5 \u003d testParse5.parse(ZERO_REMOVE_BOOKMARK_INDEX_TEST);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand5.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(18)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidEpisodeEdit_AniException() throws AniException {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(INVALID_EDIT_EPISODE_TEST);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Order(19)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void execute_invalidForbiddenCharNote_AniException() throws AniException {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testParse \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testBookmarkCommand \u003d testParse.parse(INVALID_NOTE_FORBIDDEN_CHAR_TEST);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testBookmarkCommand.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 413,
      "OngDeZhi": 1,
      "ChanJianHao": 6
    }
  },
  {
    "path": "src/test/java/anichan/commands/BrowseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.BrowseParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "public class BrowseCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NORM_PAGE_NUM \u003d \"-p 1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int RESET_SORT \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int TWO_ANIME_PER_PAGE \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static AnimeData animeData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NAME_SORT_ASC_2 \u003d \"-s name -o asc -p 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NAME_SORT_DSC_3 \u003d \"-s name -o dsc -p 3\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String RATING_SORT_ASC_3 \u003d \"-s rating -o asc -p 3\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String RATING_SORT_DSC_3 \u003d \"-s rating -o dsc -p 3\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String LARGE_PAGE_NUM \u003d \"-p 9999\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NEGATIVE_PAGE_NUM \u003d \"-p -1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ZERO_PAGE_NUM \u003d \"-p 0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String LAST_PAGE \u003d \"-p 26\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ID_SORT_DSC \u003d \"-o dsc\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int LARGE_NUM \u003d 9999;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ONE_ANIME_PER_PAGE \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int NEGATIVE_NUM \u003d -ONE_ANIME_PER_PAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int ZERO_NUM \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String FIRST_ANIME \u003d \"1.   Cowboy Bebop                                        [Id: 1  ]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String FIRST_ANIME_2 \u003d \"501. Wind: A Breath of Heart OVA\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String OUTPUT_PAGE_1 \u003d \"Browsing Page: 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String OUTPUT_PAGE_2 \u003d \"Browsing Page: 2\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String OUTPUT_PAGE_3 \u003d \"Browsing Page: 3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String LAST_ANIME \u003d \"1.   Major S2                                            [Id: 511]\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ASC_ANIME \u003d  \"21.  Akane Maniax                                        [Id: 250]\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DSC_ANIME \u003d \"41.  Trinity Blood                                       [Id: 18 ]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String ASC_RATING \u003d \"41.  Psychic Academy                                     [Id: 304]\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DSC_RATING \u003d \"41.  Beck: Mongolian Chop Squad                          [Id: 39 ]\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String LONG_RESULT \u003d \"1.   Cowboy Bebop                                        [Id: 1  ]\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            + System.lineSeparator() + \"2.   Cowboy Bebop: The Movie - Knockin\u0027 on Heaven\u0027s D... [Id: 2  ]\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    static void setUp() throws AniException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeData \u003d new AnimeData();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        storageManager \u003d new StorageManager(EMPTY_STRING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_printLongSeries_correctlyFormattedOutput() throws AniException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(NORM_PAGE_NUM);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setAnimePerPage(TWO_ANIME_PER_PAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(LONG_RESULT + System.lineSeparator() + OUTPUT_PAGE_1, result);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_printLastSeries_correctOutput() throws AniException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(LAST_PAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        //Not able to prematurely halt the browse print, as the full browse output needs to be obtained here."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        result \u003d result.substring(0,32);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(FIRST_ANIME_2, result);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_assertTest_assertionThrow() throws AniException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(EMPTY_STRING);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setSortType(LARGE_NUM);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setSortType(ZERO_NUM);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setOrder(LARGE_NUM);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setSortType(NEGATIVE_NUM);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_browseWithNoParam_correctOutput() throws AniException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(EMPTY_STRING);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setAnimePerPage(ONE_ANIME_PER_PAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(FIRST_ANIME + System.lineSeparator() + OUTPUT_PAGE_1, result);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_browseByDscOnly_correctOutput() throws AniException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(ID_SORT_DSC);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setAnimePerPage(ONE_ANIME_PER_PAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(LAST_ANIME + System.lineSeparator() + OUTPUT_PAGE_1, result);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_browseByNameAsc_correctOutput() throws AniException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(NAME_SORT_ASC_2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setAnimePerPage(ONE_ANIME_PER_PAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(ASC_ANIME + System.lineSeparator() + OUTPUT_PAGE_2, result);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_browseByNameDsc_correctOutput() throws AniException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(NAME_SORT_DSC_3);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setAnimePerPage(ONE_ANIME_PER_PAGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(DSC_ANIME + System.lineSeparator() + OUTPUT_PAGE_3, result);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_browseByRatingAsc_correctOutput() throws AniException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(RATING_SORT_ASC_3);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setAnimePerPage(ONE_ANIME_PER_PAGE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(ASC_RATING + System.lineSeparator() + OUTPUT_PAGE_3, result);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_browseByRatingDsc_correctOutput() throws AniException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(RATING_SORT_DSC_3);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setAnimePerPage(ONE_ANIME_PER_PAGE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(DSC_RATING + System.lineSeparator() + OUTPUT_PAGE_3, result);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_resetSort_correctOutput() throws AniException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(EMPTY_STRING);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setAnimePerPage(ONE_ANIME_PER_PAGE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testBrowse.setSortType(RESET_SORT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(FIRST_ANIME + System.lineSeparator() + OUTPUT_PAGE_1, result);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_invalidPageNum_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(LARGE_PAGE_NUM);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testBrowse.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(NEGATIVE_PAGE_NUM);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse2 \u003d new BrowseParser();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse2 \u003d testParse2.parse(ZERO_PAGE_NUM);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testBrowse2.getPage(), ONE_ANIME_PER_PAGE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 169,
      "OngDeZhi": 1,
      "ChanJianHao": 4
    }
  },
  {
    "path": "src/test/java/anichan/commands/EstimateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "class EstimateCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SCRIPT_FILE_NAME \u003d \"script.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_WORKSPACE \u003d \"ValidWorkspace\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_TEST_DIRECTORY \u003d \"a\" + File.separator + \"b\" + File.separator + \"c\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                         + File.separator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_TEST_DIRECTORY \u003d \"src\" + File.separator + \"test\" + File.separator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                       + \"data\" + File.separator + \"StorageManagerTest\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                       + File.separator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_FILE_DIRECTORY \u003d VALID_TEST_DIRECTORY + \"DirectoryWithValidFile\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                       + File.separator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_FILE_DIRECTORY \u003d VALID_TEST_DIRECTORY + \"DirectoryWithEmptyFileAndDirectory\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                       + File.separator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int NO_WORDS_PER_HOUR_PROVIDED \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager validSM;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager emptySM;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager invalidDirectorySM;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private AnimeData animeData;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        animeData \u003d new AnimeData(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validSM \u003d new StorageManager(VALID_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        emptySM \u003d new StorageManager(EMPTY_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        invalidDirectorySM \u003d new StorageManager(INVALID_TEST_DIRECTORY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user \u003d new User(\"Testing\", \"Male\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(new Watchlist(\"First\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Workspace newWorkspace \u003d user.addWorkspace(VALID_WORKSPACE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        newWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user.setActiveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_validParameters_success() throws AniException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Words per hour (wph) not specified."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedNoWphResult \u003d \"Average translator (400 words per hour) takes: 8 hour(s) 1 minute(s).\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        expectedNoWphResult +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        expectedNoWphResult +\u003d \"Average translator (500 words per hour) takes: 6 hour(s) 25 minute(s).\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        expectedNoWphResult +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        expectedNoWphResult +\u003d \"Average translator (600 words per hour) takes: 5 hour(s) 20 minute(s).\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        EstimateCommand noWph \u003d new EstimateCommand(SCRIPT_FILE_NAME, NO_WORDS_PER_HOUR_PROVIDED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String noWphResult \u003d noWph.execute(animeData, validSM, user);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(expectedNoWphResult, noWphResult);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Words per hour specified (with hours and minutes)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        EstimateCommand wphWithHoursAndMinutes \u003d new EstimateCommand(SCRIPT_FILE_NAME, 777);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String wphWithHoursAndMinutesResult \u003d wphWithHoursAndMinutes.execute(animeData, validSM, user);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(\"You would need 4 hour(s) 7 minute(s).\", wphWithHoursAndMinutesResult);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Words per hour specified (with only hours)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        EstimateCommand wphWithOnlyHours \u003d new EstimateCommand(SCRIPT_FILE_NAME, 3205);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String wphWithOnlyHoursResult \u003d wphWithOnlyHours.execute(animeData, validSM, user);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(\"You would need 1 hour(s).\", wphWithOnlyHoursResult);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_invalidDirectory_throwsAniException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        EstimateCommand estimateCommand \u003d new EstimateCommand(SCRIPT_FILE_NAME, NO_WORDS_PER_HOUR_PROVIDED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateCommand.execute(animeData, invalidDirectorySM, user));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_emptyFile_throwsAniException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        EstimateCommand estimateCommand \u003d new EstimateCommand(SCRIPT_FILE_NAME, NO_WORDS_PER_HOUR_PROVIDED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateCommand.execute(animeData, emptySM, user));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 86,
      "ChanJianHao": 6
    }
  },
  {
    "path": "src/test/java/anichan/commands/InfoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.InfoParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class InfoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    User user;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String ZERO_ANIME_INDEX \u003d \"0\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String LARGE_ANIME_INDEX \u003d \"3\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    protected static final String VALID_ANIME_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime1ReleaseDate \u003d {\"2000\", \"12\", \"12\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime1Genre \u003d {\"Action\", \"Drama\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime2ReleaseDate \u003d {\"2020\", \"1\", \"1\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime2Genre \u003d {\"Thriller\"};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime1 \u003d new Anime(\"testAnime1\", testAnime1ReleaseDate, 80,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                testAnime1Genre, 20, 20);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime2 \u003d new Anime(\"testAnime2\", testAnime2ReleaseDate, 65,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                testAnime2Genre, 45, 60);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_zeroInteger_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParser \u003d new InfoParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoCommand testInfo \u003d testParser.parse(ZERO_ANIME_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testInfo.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_indexLargerThanDataSize_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParser \u003d new InfoParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoCommand testInfo \u003d testParser.parse(LARGE_ANIME_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testInfo.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_correctAnimeIndex_returnAnimeInfo() throws AniException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder expectedOutputBuild \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        expectedOutputBuild.append(\"Here is the information for the anime:\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        expectedOutputBuild.append(\"Index: 1\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        expectedOutputBuild.append(\"Name: testAnime1\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        expectedOutputBuild.append(\"Episodes: 20\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        expectedOutputBuild.append(\"Release Date: 12/Dec/2000\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        expectedOutputBuild.append(\"Rating: 80\").append(System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        expectedOutputBuild.append(\"Genre: [Action, Drama]\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String expectedOutput \u003d expectedOutputBuild.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParser \u003d new InfoParser();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoCommand testInfo \u003d testParser.parse(VALID_ANIME_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String actualOutput \u003d testInfo.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 6,
      "michaeldinata": 75
    }
  },
  {
    "path": "src/test/java/anichan/commands/RemoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.RemoveCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class RemoveCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static AnimeData animeData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static User user;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static Bookmark bookmark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static Workspace workspace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String STORAGE_DIRECTORY \u003d \"src\" + File.separator + \"test\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            + File.separator + \"data\" + File.separator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String ZERO_WATCHLIST_INDEX \u003d \"0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String LARGE_WATCHLIST_INDEX \u003d \"3\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_WATCHLIST_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_WATCHLIST_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime1ReleaseDate \u003d {\"2000\", \"12\", \"12\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime1Genre \u003d {\"Action\", \"Drama\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime2ReleaseDate \u003d {\"2020\", \"1\", \"1\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime2Genre \u003d {\"Thriller\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime1 \u003d new Anime(\"testAnime1\", testAnime1ReleaseDate, 80,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                testAnime1Genre, 20, 20);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime2 \u003d new Anime(\"testAnime2\", testAnime2ReleaseDate, 65,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                testAnime2Genre, 45, 60);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeList.add(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist watchlist \u003d new Watchlist(\"TestWatchlist\", animeList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        watchlistList.add(watchlist);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        workspace \u003d new Workspace(\"AddRemoveAnimeTest\", watchlistList, bookmark);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user \u003d new User(\"TestUser\", \"Male\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user.setActiveWorkspace(workspace);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        storageManager \u003d new StorageManager(STORAGE_DIRECTORY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_zeroInteger_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommand testRemove \u003d testParser.parse(ZERO_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testRemove.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_indexLargerThanWatchlistSize_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommand testRemove \u003d testParser.parse(LARGE_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testRemove.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_emptyWatchlist_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        activeWatchlist.removeAnimeFromList(0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommand testRemove \u003d testParser.parse(EMPTY_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testRemove.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_validWatchlistIndex_removeAnimeSuccessful() throws AniException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String expectedOutput \u003d \"testAnime1 successfully removed from watchlist!\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommand testRemove \u003d testParser.parse(VALID_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String actualOutput \u003d testRemove.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "ChanJianHao": 9,
      "michaeldinata": 96
    }
  },
  {
    "path": "src/test/java/anichan/commands/SearchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "class SearchCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static AnimeData animeData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static StorageManager storageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SEARCH_ANIME_1 \u003d \"fate\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String SEARCH_ANIME_NONEXISTENT \u003d \"CS2113T The Great Refactoring!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NO_RESULTS_FOUND \u003d \"No results found!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final int NAME_SEARCH \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final int ABOVE_RANGE \u003d 9999;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    protected static final int BELOW_RANGE \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    static void setUp() throws AniException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeData \u003d new AnimeData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        storageManager \u003d new StorageManager(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_emptySearch_throwsAssertionError() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchCommand testSearch \u003d new SearchCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testSearch.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_searchForNonExistingAnime_returnNoResultFound() throws AniException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchCommand testSearch \u003d new SearchCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testSearch.setSearchTerm(SEARCH_ANIME_NONEXISTENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testSearch.setSearchType(NAME_SEARCH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testSearch.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(NO_RESULTS_FOUND, result);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void execute_invalidSearchType_throwsAniException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchCommand testSearch \u003d new SearchCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testSearch.setSearchTerm(SEARCH_ANIME_1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testSearch.setSearchType(ABOVE_RANGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testSearch.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        testSearch.setSearchType(BELOW_RANGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testSearch.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 58,
      "OngDeZhi": 1,
      "ChanJianHao": 4
    }
  },
  {
    "path": "src/test/java/anichan/commands/ViewWatchlistCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.anime.Anime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.parser.ViewWatchlistParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class ViewWatchlistCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    AnimeData animeData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    User user;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Bookmark bookmark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    Workspace workspace;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String ZERO_WATCHLIST_INDEX \u003d \"-v 0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String LARGE_WATCHLIST_INDEX \u003d \"-v 3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_WATCHLIST_INDEX \u003d \"-v 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_EMPTY_INPUT1 \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_EMPTY_INPUT2 \u003d \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cAnime\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime1ReleaseDate \u003d {\"2000\", \"12\", \"12\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime1Genre \u003d {\"Action\", \"Drama\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime2ReleaseDate \u003d {\"2020\", \"1\", \"1\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] testAnime2Genre \u003d {\"Thriller\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime1 \u003d new Anime(\"testAnime1\", testAnime1ReleaseDate, 80,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                testAnime1Genre, 20, 20);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Anime testAnime2 \u003d new Anime(\"testAnime2\", testAnime2ReleaseDate, 65,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "                testAnime2Genre, 45, 60);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        testList.add(testAnime2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cInteger\u003e animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeList.add(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist watchlist \u003d new Watchlist(\"TestWatchlist\", animeList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        watchlistList.add(watchlist);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        workspace \u003d new Workspace(\"TestWorkspace\", watchlistList, bookmark);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user \u003d new User(\"TestUser\", \"Male\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        user.setActiveWorkspace(workspace);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        animeData \u003d new AnimeData(testList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        storageManager \u003d new StorageManager(\"test\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_zeroInteger_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParser \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistCommand testView \u003d testParser.parse(ZERO_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testView.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_indexLargerThanDataSize_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParser \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistCommand testView \u003d testParser.parse(LARGE_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testView.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_emptyWatchlistList_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d activeWorkspace.getWatchlistList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        watchlistList.remove(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParser \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistCommand testView \u003d testParser.parse(VALID_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testView.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_emptyWatchlist_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Workspace activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        activeWatchlist.removeAnimeFromList(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParser \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistCommand testView \u003d testParser.parse(VALID_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testView.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void execute_validIndex_returnAnimeInWatchlist() throws AniException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        StringBuilder expectedOutputBuild \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        expectedOutputBuild.append(\"Here are the anime in TestWatchlist watchlist:\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        expectedOutputBuild.append(System.lineSeparator());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        expectedOutputBuild.append(\"\\t\").append(\"1. testAnime1\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String expectedOutput \u003d expectedOutputBuild.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParser1 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistCommand testView1 \u003d testParser1.parse(VALID_WATCHLIST_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String actualOutput1 \u003d testView1.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertEquals(expectedOutput, actualOutput1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParser2 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistCommand testView2 \u003d testParser2.parse(VALID_EMPTY_INPUT1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String actualOutput2 \u003d testView2.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertEquals(expectedOutput, actualOutput2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParser3 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistCommand testView3 \u003d testParser3.parse(VALID_EMPTY_INPUT2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String actualOutput3 \u003d testView3.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertEquals(expectedOutput, actualOutput3);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 1,
      "michaeldinata": 132
    }
  },
  {
    "path": "src/test/java/anichan/commands/WatchlistCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "class WatchlistCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String STORAGE_DIRECTORY \u003d \"src\" + File.separator + \"test\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                    + File.separator + \"data\" + File.separator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private AnimeData animeData;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Workspace activeWorkspace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        animeData \u003d new AnimeData(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        storageManager \u003d new StorageManager(STORAGE_DIRECTORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user \u003d new User(\"Testing\", \"Male\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist secondWatchlist \u003d new Watchlist(\"Second\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        secondWatchlist.addAnimeToList(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        secondWatchlist.addAnimeToList(2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist thirdWatchlist \u003d new Watchlist(\"Third\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        thirdWatchlist.addAnimeToList(3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(new Watchlist(\"First\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(secondWatchlist);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(thirdWatchlist);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Workspace newWorkspace \u003d user.addWorkspace(\"Default\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        newWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        user.setActiveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace \u003d user.getActiveWorkspace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d General \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_invalidOption_throwsAniException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Invalid option"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand invalidOption \u003d new WatchlistCommand(\"invalid\", \"invalid\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e invalidOption.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_nullParameters_throwsAssertionError() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Null option, watchlist name, and watchlist index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand nullOption \u003d new WatchlistCommand(null, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e nullOption.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Null WatchlistList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand nullWatchlistList \u003d new WatchlistCommand(\"n\", \"First\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setWatchlistList(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e nullWatchlistList.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Create \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_validParametersForCreateWatchlist_success() throws AniException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand createWatchlist \u003d new WatchlistCommand(\"n\", \"Test\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        createWatchlist.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(4, activeWorkspace.getWatchlistList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_notUniqueWatchlistNameForCreateWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand createWatchlist \u003d new WatchlistCommand(\"n\", \"First\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e createWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_watchlistNameMoreThan30CharactersForCreateWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand createWatchlist \u003d new WatchlistCommand(\"n\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                                \"averylongwatchnamethatwouldfail\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e createWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_validParametersForListAllWatchlist_success() throws AniException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand listAllWatchlist \u003d new WatchlistCommand(\"l\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String emptyListMessage \u003d \"Uhh.. You have no watchlist to list..\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotEquals(emptyListMessage, listAllWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_emptyWatchlistListForListAllWatchlist_emptyListMessage() throws AniException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand listAllWatchlist \u003d new WatchlistCommand(\"l\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setWatchlistList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expected \u003d \"Uhh.. You have no watchlist..\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(expected, listAllWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Select \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_validParametersForSelectWatchlistList_success() throws AniException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand selectWatchlist \u003d new WatchlistCommand(\"s\", 3);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        selectWatchlist.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist activeWatchlist \u003d activeWorkspace.getActiveWatchlist();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist selectedWatchlist \u003d activeWorkspace.getWatchlistList().get(2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(activeWatchlist, selectedWatchlist);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_emptyWatchlistListForSelectWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setWatchlistList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand selectWatchlist \u003d new WatchlistCommand(\"s\", 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e selectWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_invalidWatchlistIndexForSelectWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand selectWithNegativeIndex \u003d new WatchlistCommand(\"s\", -2);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e selectWithNegativeIndex.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWithOutOfRangeIndex \u003d new WatchlistCommand(\"s\", 999);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e deleteWithOutOfRangeIndex.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_onlyOneWatchlistForSelectWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(new Watchlist(\"Only One\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setActiveWatchlist(watchlistList.get(0));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand selectWatchlist \u003d new WatchlistCommand(\"s\", 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e selectWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Delete \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_validParametersForDeleteWatchlistList_success() throws AniException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Delete active watchlist"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setActiveWatchlist(activeWorkspace.getWatchlistList().get(2));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteActiveWatchlist \u003d new WatchlistCommand(\"d\", 3);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        deleteActiveWatchlist.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(activeWorkspace.getWatchlistList().get(0), activeWorkspace.getActiveWatchlist());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Delete non-active watchlist"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWatchlist \u003d new WatchlistCommand(\"d\", 2);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        deleteWatchlist.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(1, activeWorkspace.getWatchlistList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_emptyWatchlistListForDeleteWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setWatchlistList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWatchlist \u003d new WatchlistCommand(\"d\", 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e deleteWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_invalidWatchlistIndexForDeleteWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWithNegativeIndex \u003d new WatchlistCommand(\"d\", -2);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e deleteWithNegativeIndex.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand selectWithOutOfRangeIndex \u003d new WatchlistCommand(\"d\", 999);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e selectWithOutOfRangeIndex.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void execute_onlyOneWatchlistForDeleteWatchlist_throwsAniException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistList.add(new Watchlist(\"Only One\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        activeWorkspace.setActiveWatchlist(watchlistList.get(0));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        WatchlistCommand deleteWatchlist \u003d new WatchlistCommand(\"d\", 1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e deleteWatchlist.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 187,
      "ChanJianHao": 6
    }
  },
  {
    "path": "src/test/java/anichan/commands/WorkspaceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "package anichan.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.Workspace;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.parser.WorkspaceParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class WorkspaceCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private static final String STORAGE_DIRECTORY \u003d \"src\" + File.separator + \"test\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            + File.separator + \"data\" + File.separator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private AnimeData animeData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void setUp() throws AniException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        animeData \u003d new AnimeData(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        storageManager \u003d new StorageManager(STORAGE_DIRECTORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user \u003d new User(\"Tom\", \"Male\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Watchlist secondWatchlist \u003d new Watchlist(\"Second2\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        secondWatchlist.addAnimeToList(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        secondWatchlist.addAnimeToList(2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Watchlist thirdWatchlist \u003d new Watchlist(\"Third3\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        thirdWatchlist.addAnimeToList(3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ArrayList\u003cWatchlist\u003e watchlistList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        watchlistList.add(new Watchlist(\"First1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        watchlistList.add(secondWatchlist);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        watchlistList.add(thirdWatchlist);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace newWorkspace \u003d user.addWorkspace(\"Default2\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        newWorkspace.setWatchlistList(watchlistList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.setActiveWorkspace(newWorkspace);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void createWorkspace_validName_created() throws AniException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser addParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceCommand testAddWorkspace \u003d addParse.parse(\"-n Crunchy rail 12345\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String expectedString \u003d \"Successfully added new workspace: Crunchy rail 12345\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(expectedString, testAddWorkspace.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void switchWorkspace_validName_switched() throws AniException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Creates workspace"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser addParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceCommand testAddWorkspace \u003d addParse.parse(\"-n Crunchy rail 12345\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        testAddWorkspace.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Tests switching workspace"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser switchParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceCommand testSwitchWorkspace \u003d switchParse.parse(\"-s Crunchy rail 12345\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String expectedString \u003d \"Workspace switched to Crunchy rail 12345\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(expectedString, testSwitchWorkspace.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void deleteWorkspace_validName_deleted() throws AniException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Creates two workspaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser addParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceCommand testAddWorkspace \u003d addParse.parse(\"-n Crunchy rail 12345\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        testAddWorkspace.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Tests deleting workspace"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser deleteParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceCommand testDeleteWorkspace \u003d deleteParse.parse(\"-d Crunchy rail 12345\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String expectedString \u003d \"Successfully deleted workspace: Crunchy rail 12345\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(expectedString, testDeleteWorkspace.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void listWorkspace_empty_zeroWorkspace() throws AniException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser listParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceCommand testListWorkspace \u003d listParse.parse(\"-l\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        String expectedString \u003d \"Currently, you have 1 workspace(s):\" + System.lineSeparator() + \"1. Default2\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(expectedString, testListWorkspace.execute(animeData, storageManager, user));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 3,
      "ChanJianHao": 97
    }
  },
  {
    "path": "src/test/java/anichan/human/CharacterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class CharacterTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void testCharacterCreation() throws AniException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Character kirito \u003d new Character(\"Kirito\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Kirito\", kirito.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalVoiceActors_emptyList_returnZero() throws AniException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Character kirito \u003d new Character(\"Kirito\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(0, kirito.getTotalVoiceActors());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalVoiceActors_addTwo_returnTwo() throws AniException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Character kirito \u003d new Character(\"Kirito\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Make voice actors"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        VoiceActor yoshitsuguMatsuoka \u003d new VoiceActor(\"Yoshitsugu Matsuoka\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        VoiceActor brycePapenbrook \u003d new VoiceActor(\"Bryce Papenbrook\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Assign characters voiced by voice actor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        kirito.addVoiceActor(yoshitsuguMatsuoka);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        kirito.addVoiceActor(brycePapenbrook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(2, kirito.getTotalVoiceActors());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 36
    }
  },
  {
    "path": "src/test/java/anichan/human/UserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class UserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void testUserCreation() throws AniException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"Jessica Williams\", \"feMale\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\" Name: Jessica Williams-chan | Gender: Female\", user.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void testCreateUser_emptyName_throwsAniException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e new User(\"\", \"Male\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void changeName_TommytoJohnny_Johnny() throws AniException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"Tommy\", \"Male\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.setName(\"Johnny\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Johnny\", user.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void setGender_Female_returnFemale() throws AniException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"A changeGender\", \"MaLE\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Notice how case is not sensitive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.setGender(\"FEMAle\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Female\", user.getGender().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void setGender_Monster_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"Monster\", \"MaLE\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e user.setGender(\"Monster\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getHonorificName_testGender_nameWithHonorific() throws AniException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User maleUser \u003d new User(\"Robinson\", \"MaLE\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Robinson-san\", maleUser.getHonorificName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User femaleUser \u003d new User(\"Bella\", \"Female\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Bella-chan\", femaleUser.getHonorificName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User otherUser \u003d new User(\"Thomas\", \"Other\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Thomas-san\", otherUser.getHonorificName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalWorkspace_noWorkspace_sizeZero() throws AniException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"User getTotalWorkspace\", \"Male\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(0, user.getTotalWorkspaces());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalWorkspace_twoWorkspaces() throws AniException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"A test workspace\", \"Male\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.addWorkspace(\"Test Workspace\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.addWorkspace(\"Test Workspace 2\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(2, user.getTotalWorkspaces());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void setWorkspace_emptyWorkspaceList_setEmpty() throws AniException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"new User\", \"femaLe\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ArrayList\u003cWorkspace\u003e workspaceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertDoesNotThrow(() -\u003e user.setWorkspaceList(workspaceList));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void setWorkspace_filledWorkspaceList_useFirst() throws AniException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"new User\", \"femaLe\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        ArrayList\u003cWorkspace\u003e workspaceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace newWorkspace \u003d user.addWorkspace(\"Default\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        workspaceList.add(newWorkspace);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertDoesNotThrow(() -\u003e user.setWorkspaceList(workspaceList));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void setActiveWorkspace_empty_useFirst() throws AniException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"new User\", \"femaLe\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace newWorkspace \u003d user.addWorkspace(\"Default\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e user.setActiveWorkspace(newWorkspace));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void switchActiveWorkspace_emptyWorkspaceList_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"new User\", \"femaLe\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e user.switchActiveWorkspace(\"I want to switch!\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void addWorkspace_nameExist_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"new User\", \"femaLe\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.addWorkspace(\"Default\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e user.addWorkspace(\"Default\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void addWorkspace_similarNameExist_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"new User\", \"femaLe\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.addWorkspace(\"Default\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e user.addWorkspace(\"default\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void deleteWorkspace_invalidNames_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        User user \u003d new User(\"new User\", \"femaLe\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        user.addWorkspace(\"Default\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            user.deleteWorkspace(\"\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "            user.deleteWorkspace(\"abc\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 142
    }
  },
  {
    "path": "src/test/java/anichan/human/VoiceActorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class VoiceActorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void testVoiceActorCreation() throws AniException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        VoiceActor yoshitsuguMatsuoka \u003d new VoiceActor(\"Yoshitsugu Matsuoka\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Yoshitsugu Matsuoka\", yoshitsuguMatsuoka.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalCharacters_emptyList_returnZero() throws AniException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        VoiceActor yoshitsuguMatsuoka \u003d new VoiceActor(\"Yoshitsugu Matsuoka\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(0, yoshitsuguMatsuoka.getTotalCharacters());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void getTotalCharacters_addTwo_returnTwo() throws AniException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        VoiceActor yoshitsuguMatsuoka \u003d new VoiceActor(\"Yoshitsugu Matsuoka\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Make characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Character kirito \u003d new Character(\"Kirito\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Character somaYukihira \u003d new Character(\"Soma Yukihira\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Assign characters voiced by voice actor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        yoshitsuguMatsuoka.addCharacter(kirito); // Japanese va"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        yoshitsuguMatsuoka.addCharacter(somaYukihira);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(2, yoshitsuguMatsuoka.getTotalCharacters());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 36
    }
  },
  {
    "path": "src/test/java/anichan/human/WorkspaceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.human;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class WorkspaceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void testWorkspaceCreation() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        Workspace testWorkspace \u003d new Workspace(\"Translation Company A\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertEquals(\"Translation Company A\", testWorkspace.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 16
    }
  },
  {
    "path": "src/test/java/anichan/parser/AddToWatchlistParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.commands.AddToWatchlistCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class AddToWatchlistParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_DESCRIPTION1 \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_DESCRIPTION2 \u003d \"     \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String NON_INTEGER_FIELD1 \u003d \"Gundam\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String NON_INTEGER_FIELD2 \u003d \"-a\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String TOO_MANY_FIELDS \u003d \"123 211\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String LARGE_INTEGER_ERROR \u003d \"1111111111111\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_FIELD_VALUE1 \u003d \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_FIELD_VALUE2 \u003d \"   1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_FIELD_VALUE3 \u003d \"1   \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyDescription_throwsAniException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse1 \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse1.parse(EMPTY_DESCRIPTION1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse2 \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse2.parse(EMPTY_DESCRIPTION2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_nonIntegerField_throwsAniException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse1 \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse1.parse(NON_INTEGER_FIELD1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse2 \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse2.parse(NON_INTEGER_FIELD2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_tooManyParameters_throwsAniException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(TOO_MANY_FIELDS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_largeIntegerError_throwsAniException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(LARGE_INTEGER_ERROR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_validParameterAndValue_returnsAddToWatchlistCommand() throws AniException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse1 \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command1 \u003d testParse1.parse(VALID_FIELD_VALUE1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command1 instanceof AddToWatchlistCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse2 \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command2 \u003d testParse2.parse(VALID_FIELD_VALUE2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command2 instanceof AddToWatchlistCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        AddToWatchlistParser testParse3 \u003d new AddToWatchlistParser();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command3 \u003d testParse3.parse(VALID_FIELD_VALUE3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command3 instanceof AddToWatchlistCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 2,
      "michaeldinata": 78
    }
  },
  {
    "path": "src/test/java/anichan/parser/BookmarkParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.BookmarkCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "class BookmarkParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIRST_PARAMETERS_ADD_TEST1 \u003d \"1 -a 123\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIRST_PARAMETERS_ADD_TEST2 \u003d \"a -a 123\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIRST_PARAMETERS_DELETE_TEST1 \u003d \"1 -d 123\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIRST_PARAMETERS_DELETE_TEST2 \u003d \"a -d 123\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_ADD_TEST1 \u003d \"-a   \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_ADD_TEST2 \u003d \"-a beepboopbeep\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_ADD_TEST3 \u003d \"-a 123 123\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_DELETE_TEST1 \u003d \"-d   \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_DELETE_TEST2 \u003d \"-d beepboopbeep\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_DELETE_TEST3 \u003d \"-d 123 123\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_EDIT_TEST1 \u003d \"1 -e   \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_EDIT_TEST2 \u003d \"1 -e beepboopbeep\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_EDIT_TEST3 \u003d \"1 -e 123 123\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_EDIT_TEST4 \u003d \"a -e 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String NEGATIVE_BOOKMARK_ID_DELETE_TEST \u003d \"-d -1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String NEGATIVE_ANIME_ID_ADD_TEST \u003d \"-a -3\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String NEGATIVE_BOOKMARK_ID_EDIT_TEST \u003d \"-1 -e 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_NOTE_TEST1 \u003d \"1 -n  \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_NOTE_TEST2 \u003d \"1 -n  -afds\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_FIELD_LIST \u003d \"-l test\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String INVALID_SINGLE_INPUT_TEST \u003d \"a\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String UNKNOWN_PARAMETER \u003d \"-h\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String EMPTY_PARAMETER \u003d \" - \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_SINGLE_INPUT_TEST \u003d \"1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_SINGLE_INPUT_TEST2 \u003d \"10\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_ADD_TEST \u003d \"-a 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_DELETE_TEST \u003d \"-d 1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_NOTE_TEST \u003d \"1 -n test\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_LIST_TEST \u003d \"-l\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    private static final String VALID_EDIT_TEST \u003d \"1 -e 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Valid Input Test \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_validSingleParameter_Successful() throws AniException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testInfo1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testCommand \u003d testInfo1.parse(VALID_SINGLE_INPUT_TEST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testInfo2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testCommand2 \u003d testInfo2.parse(VALID_SINGLE_INPUT_TEST2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(testCommand.getBookmarkAction(), \"i\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(testCommand2.getBookmarkAction(), \"i\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_validFieldForNote_Successful() throws AniException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testCommand \u003d test1.parse(VALID_NOTE_TEST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(testCommand.getBookmarkAction(), \"n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_validList_Successful() throws AniException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testCommand \u003d test1.parse(VALID_LIST_TEST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(testCommand.getBookmarkAction(), \"l\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_validEdit_Successful() throws AniException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testCommand \u003d test1.parse(VALID_EDIT_TEST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(testCommand.getBookmarkAction(), \"e\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_validAdd_Successful() throws AniException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testCommand \u003d test1.parse(VALID_ADD_TEST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(testCommand.getBookmarkAction(), \"a\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_validDelete_Successful() throws AniException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkCommand testCommand \u003d test1.parse(VALID_DELETE_TEST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertEquals(testCommand.getBookmarkAction(), \"d\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Invalid Input Test \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_invalidSingleParameter_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(INVALID_SINGLE_INPUT_TEST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_unknownParameter_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(UNKNOWN_PARAMETER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_invalidListParameter_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testAdd1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testAdd1.parse(INVALID_FIELD_LIST);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_invalidFirstParameter_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testAdd1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testAdd1.parse(INVALID_FIRST_PARAMETERS_ADD_TEST1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testAdd2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testAdd2.parse(INVALID_FIRST_PARAMETERS_ADD_TEST2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testDelete1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testDelete1.parse(INVALID_FIRST_PARAMETERS_DELETE_TEST1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser testDelete2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            testDelete2.parse(INVALID_FIRST_PARAMETERS_DELETE_TEST2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_invalidFieldForAdd_ThrowsAniException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(INVALID_FIELD_ADD_TEST1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test2.parse(INVALID_FIELD_ADD_TEST2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test3 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test3.parse(INVALID_FIELD_ADD_TEST3);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_invalidFieldForDelete_ThrowsAniException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(INVALID_FIELD_DELETE_TEST1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test2.parse(INVALID_FIELD_DELETE_TEST2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test3 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test3.parse(INVALID_FIELD_DELETE_TEST3);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_invalidFieldForEdit_ThrowsAniException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(INVALID_FIELD_EDIT_TEST1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test2.parse(INVALID_FIELD_EDIT_TEST2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test3 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test3.parse(INVALID_FIELD_EDIT_TEST3);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test4 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test4.parse(INVALID_FIELD_EDIT_TEST4);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_invalidFieldForNote_ThrowsAniException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(INVALID_FIELD_NOTE_TEST1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test2 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test2.parse(INVALID_FIELD_NOTE_TEST2);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_negativeBookmarkIdForDelete_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(NEGATIVE_BOOKMARK_ID_DELETE_TEST);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_negativeBookmarkIdForEdit_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(NEGATIVE_BOOKMARK_ID_EDIT_TEST);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_negativeAnimeIdForAdd_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(NEGATIVE_ANIME_ID_ADD_TEST);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    void parse_emptyParameter_ThrowsAniException() throws AniException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        BookmarkParser test1 \u003d new BookmarkParser();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "            test1.parse(EMPTY_PARAMETER);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "        });"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 244,
      "OngDeZhi": 1,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/test/java/anichan/parser/BrowseParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.BrowseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "class BrowseParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NON_INT_PAGE_NUM \u003d \"-p twenty\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_ORDER_TEST \u003d \"-o whateverOrder\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_PARAMETERS_TEST1 \u003d \"-n name\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_PARAMETERS_TEST2 \u003d \"-sort name\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_FIELD_TEST1 \u003d \"-s   \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_FIELD_TEST2 \u003d \"-s beep\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_FIELD_TEST3 \u003d \"-s -o -p\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_FIELD_TEST4 \u003d \"- \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DIFF_ORDER_TEST \u003d \"-p 1 -s rating -o asc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DIFF_ORDER_TEST2 \u003d \"-s rating -o asc -p 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INT_OVERFLOW_FIELD_TEST \u003d \"-p 999999999999999\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DASH_ABUSE_INPUT1 \u003d \"- \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DASH_ABUSE_INPUT2 \u003d \"---\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String PARAM_STACKING_INPUT \u003d \"-s rating-o dsc-p 23\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DUPLICATE_SORT_INPUT \u003d \"-s rating -s name\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DUPLICATE_ORDER_INPUT \u003d \"-o asc -o dsc\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String DUPLICATE_PAGE_INPUT \u003d \"-p 3 -p 5\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_invalidDashParameters_throwAniException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(DASH_ABUSE_INPUT1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_invalidDashParameters2_throwAniException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(DASH_ABUSE_INPUT2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_multipleDuplicateSort_throwAniException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(DUPLICATE_SORT_INPUT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_paramStacked_throwAniException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(PARAM_STACKING_INPUT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_multipleDuplicateOrder_throwAniException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(DUPLICATE_ORDER_INPUT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_multipleDuplicatePage_throwAniException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(DUPLICATE_PAGE_INPUT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_invalidParameter_throwsAniException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_edgeCaseDashBlank_defaultExecution() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_FIELD_TEST4);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_invalidPageNum_throwsAniException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(NON_INT_PAGE_NUM);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_invalidOrderType_throwsAniException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_ORDER_TEST);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_invalidField_throwsAniException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_FIELD_TEST1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse2 \u003d new BrowseParser();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse2.parse(INVALID_FIELD_TEST2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse3 \u003d new BrowseParser();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse3.parse(INVALID_FIELD_TEST3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_differentParameterOrder_identicalBrowseSettings() throws AniException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse2 \u003d new BrowseParser();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse \u003d testParse.parse(DIFF_ORDER_TEST);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseCommand testBrowse2 \u003d testParse2.parse(DIFF_ORDER_TEST2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testBrowse.getPage(), testBrowse2.getPage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testBrowse.getSortType(), testBrowse2.getSortType());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(testBrowse.getOrder(), testBrowse2.getOrder());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_setPageToIntOverflow_throwsAniException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        BrowseParser testParse \u003d new BrowseParser();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INT_OVERFLOW_FIELD_TEST);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 149,
      "OngDeZhi": 1,
      "ChanJianHao": 1
    }
  },
  {
    "path": "src/test/java/anichan/parser/EstimateParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "public class EstimateParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private EstimateParser estimateParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        estimateParser \u003d new EstimateParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_validParametersWithoutWordsPerHour_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script.txt  \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script-wph.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script.txt.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script a b c d.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script a b c d .txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_validParametersWithWordsPerHour_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script.txt -wph 777\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script-wph.txt -wph 777\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script.txt.txt -wph 777\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script a b c d.txt -wph 777\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            estimateParser.parse(\"script a b c d .txt -wph 777\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_invalidScriptFile_throwsAniException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.tx\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt-wph 777\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"/path/to/script.txt\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt helloworld\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_scriptFileTooMuchFields_throwsAniException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt .txt\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt .txt -wph 777\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt script_two.txt\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_invalidParameter_throwsAniException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -o\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -   wph 700\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -one -two\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_invalidWordsPerHour_throwsAniException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph one\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph 0\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph -8\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph 777 0\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph 123 -two\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e estimateParser.parse(\"script.txt -wph 999999999999\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 102,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/test/java/anichan/parser/InfoParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.commands.InfoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class InfoParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_DESCRIPTION1 \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_DESCRIPTION2 \u003d \"     \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String NON_INTEGER_FIELD1 \u003d \"Sword Art Online\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String NON_INTEGER_FIELD2 \u003d \"-a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String TOO_MANY_FIELDS \u003d \"123 211\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String LARGE_INTEGER_ERROR \u003d \"1111111111111\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_FIELD_VALUE1 \u003d \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_FIELD_VALUE2 \u003d \"   1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_FIELD_VALUE3 \u003d \"1   \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyDescription_throwsAniException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse1 \u003d new InfoParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse1.parse(EMPTY_DESCRIPTION1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse2 \u003d new InfoParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e { "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse2.parse(EMPTY_DESCRIPTION2); "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_nonIntegerField_throwsAniException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse1 \u003d new InfoParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse1.parse(NON_INTEGER_FIELD1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse2 \u003d new InfoParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse2.parse(NON_INTEGER_FIELD2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_tooManyParameters_throwsAniException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse \u003d new InfoParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(TOO_MANY_FIELDS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_largeIntegerError_throwsAniException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse \u003d new InfoParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(LARGE_INTEGER_ERROR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_validValue_returnsInfoCommand() throws AniException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse1 \u003d new InfoParser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command1 \u003d testParse1.parse(VALID_FIELD_VALUE1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command1 instanceof InfoCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse2 \u003d new InfoParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command2 \u003d testParse2.parse(VALID_FIELD_VALUE2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command2 instanceof InfoCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        InfoParser testParse3 \u003d new InfoParser();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command3 \u003d testParse3.parse(VALID_FIELD_VALUE3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command3 instanceof InfoCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 2,
      "michaeldinata": 77
    }
  },
  {
    "path": "src/test/java/anichan/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    public void parseUserInput_emptyInput_showInvalidCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            parser.parseUserInput(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void parseUserInput_oneWord_returnsOneString() throws AniException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String input \u003d \"test\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] stringParts \u003d parser.parseUserInput(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertEquals(stringParts.length, 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    public void parseUserInput_moreThanTwoWords_returnsTwoStrings() throws AniException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String input \u003d \"test more than two\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        String[] stringParts \u003d parser.parseUserInput(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertEquals(stringParts.length, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 5,
      "michaeldinata": 36
    }
  },
  {
    "path": "src/test/java/anichan/parser/RemoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.commands.RemoveCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class RemoveCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_DESCRIPTION1 \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_DESCRIPTION2 \u003d \"     \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String NON_INTEGER_FIELD1 \u003d \"Trigun\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String NON_INTEGER_FIELD2 \u003d \"-a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String TOO_MANY_FIELDS \u003d \"123 211\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String LARGE_INTEGER_ERROR \u003d \"1111111111111\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_FIELD_VALUE1 \u003d \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_FIELD_VALUE2 \u003d \"   1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_FIELD_VALUE3 \u003d \"1   \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyDescription_throwsAniException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse1 \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse1.parse(EMPTY_DESCRIPTION1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse2 \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse2.parse(EMPTY_DESCRIPTION2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_nonIntegerField_throwsAniException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse1 \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse1.parse(NON_INTEGER_FIELD1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse2 \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse2.parse(NON_INTEGER_FIELD2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_tooManyParameters_throwsAniException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(TOO_MANY_FIELDS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_largeIntegerError_throwsAniException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(LARGE_INTEGER_ERROR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_validValue_returnsInfoCommand() throws AniException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse1 \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command1 \u003d testParse1.parse(VALID_FIELD_VALUE1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command1 instanceof RemoveCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse2 \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command2 \u003d testParse2.parse(VALID_FIELD_VALUE2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command2 instanceof RemoveCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        RemoveCommandParser testParse3 \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command3 \u003d testParse3.parse(VALID_FIELD_VALUE3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command3 instanceof RemoveCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 2,
      "michaeldinata": 77
    }
  },
  {
    "path": "src/test/java/anichan/parser/SearchParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import anichan.anime.AnimeData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import anichan.commands.SearchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import anichan.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "class SearchParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String VALID_ANIME \u003d \"-n fate\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String VALID_GENRE \u003d \"-g Music\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String NO_PARAM_PROVIDED_TEST \u003d \"search - \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static AnimeData animeData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static StorageManager storageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_PARAMETERS_TEST1 \u003d \"-n \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String INVALID_PARAMETERS_TEST2 \u003d \"-a Cowboy Bebop\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String OUTPUT_ANIME_1 \u003d \"[ID:323] Fate/stay night\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    private static final String OUTPUT_ANIME_2 \u003d \"[ID:39] Beck: Mongolian Chop Squad\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    static void setUp() throws AniException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        animeData \u003d new AnimeData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        storageManager \u003d new StorageManager(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_invalidParameter_throwsAniException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchParser testParse \u003d new SearchParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(INVALID_PARAMETERS_TEST2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_validNameSearch_usableSearchCommand() throws AniException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchParser testParse \u003d new SearchParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchCommand testSearch \u003d testParse.parse(VALID_ANIME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testSearch.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(OUTPUT_ANIME_1 + System.lineSeparator(), result);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_validGenreSearch_usableSearchCommand() throws AniException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchParser testParse \u003d new SearchParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchCommand testSearch \u003d testParse.parse(VALID_GENRE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        String result \u003d testSearch.execute(animeData, storageManager, user);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        result \u003d result.substring(0,34);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertEquals(OUTPUT_ANIME_2, result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    void parse_noParamType_throwsAniException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        SearchParser testParse \u003d new SearchParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "            testParse.parse(NO_PARAM_PROVIDED_TEST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 66,
      "OngDeZhi": 1,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/test/java/anichan/parser/ViewWatchlistParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.commands.ViewWatchlistCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "//@@author michaeldinata"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "class ViewWatchlistParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_DESCRIPTION1 \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_DESCRIPTION2 \u003d \"     \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_FIELD1 \u003d \"-v\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String EMPTY_FIELD2 \u003d \"-v   \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String INVALID_PARAMETER1 \u003d \"-\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String INVALID_PARAMETER2 \u003d \"-n 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String INVALID_PARAMETER3 \u003d \"- -\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String NON_INTEGER_FIELD1 \u003d \"-v Default\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String NON_INTEGER_FIELD2 \u003d \"-v -\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String TOO_MANY_PARAMETERS \u003d \"-v 1 -v 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String LARGE_INTEGER_ERROR \u003d \"-v 1111111111111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    private static final String VALID_PARAMETER_VALUE \u003d \"-v 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyDescription_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse1 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command1 \u003d testParse1.parse(EMPTY_DESCRIPTION1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command1 instanceof ViewWatchlistCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse2 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command2 \u003d testParse2.parse(EMPTY_DESCRIPTION2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command2 instanceof ViewWatchlistCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_emptyField_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse1 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse1.parse(EMPTY_FIELD1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse2 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse2.parse(EMPTY_FIELD2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_invalidParameter_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse1 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse1.parse(INVALID_PARAMETER1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse2 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse2.parse(INVALID_PARAMETER2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse3 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse3.parse(INVALID_PARAMETER3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_nonIntegerField_throwsAniException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse1 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse1.parse(NON_INTEGER_FIELD1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse2 \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse2.parse(NON_INTEGER_FIELD2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_tooManyParameters_throwsAniException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(TOO_MANY_PARAMETERS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_largeIntegerError_throwsAniException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "            testParse.parse(LARGE_INTEGER_ERROR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    void parse_validParameterAndValue_returnsInfoCommand() throws AniException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        ViewWatchlistParser testParse \u003d new ViewWatchlistParser();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        Command command \u003d testParse.parse(VALID_PARAMETER_VALUE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "        assertTrue(command instanceof ViewWatchlistCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michaeldinata": 103
    }
  },
  {
    "path": "src/test/java/anichan/parser/WatchlistParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "class WatchlistParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private WatchlistParser watchlistParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistParser \u003d new WatchlistParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_validParameters_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistParser.parse(\"-n correct\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistParser.parse(\"-l\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistParser.parse(\"-s 1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistParser.parse(\"-d 1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            watchlistParser.parse(\"        -l        \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_invalidParameter_throwsAniException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-invalid\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-n one -one two\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"hello -n testing\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-nnewWatchlistName\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"- n newWatchlistName\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_emptyParameterValue_throwsAniException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-n\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-s\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-d\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void parse_invalidParameterValue_throwsAniException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-n *-*\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-l a\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-s 0\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-d -1\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-s one\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e watchlistParser.parse(\"-d 1 2 3\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 66,
      "ChanJianHao": 2
    }
  },
  {
    "path": "src/test/java/anichan/parser/WorkspaceParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "class WorkspaceParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void parse_invalidParameter_throwsAniException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser testParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" \"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" -\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" -x\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" -n\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" - \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" -   [\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" ` 1\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" /\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" ./data\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" \\\\data\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"\\\\data\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" .\\\\hello\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-100\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" - 100\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"  -100\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"%\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"%data\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"888 -n\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"888 -n \"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"888 -n .\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" -abcdefg12345!@#$%^*\u0026(#)$%| \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\" -h hello -m world -t confusion \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void parser_legitimateName_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser testParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertDoesNotThrow(() -\u003e testParse.parse(\"-n Crunchy\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertDoesNotThrow(() -\u003e testParse.parse(\"-n Crunchy 1234\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void parser_legitimateNameComplex_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser testParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertDoesNotThrow(() -\u003e testParse.parse(\"-n Crunchy OREO c00ki3s\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertDoesNotThrow(() -\u003e testParse.parse(\"-n CruNc6y  OREO   c00k155s\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void parser_illegalNameComplex_throwsAniException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser testParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n .\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n /\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n .hello\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n /hello_world\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n /test\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n //test\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n [test\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n [[;test\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n     _     test\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n /more/tests\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n !\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n how about this?\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n and this%\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n [\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n ;\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    void parser_illegalLongName_throwsAniException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        WorkspaceParser testParse \u003d new WorkspaceParser();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Test if name can be longer than 30 characters"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n 45fx1JDGmVQfxLF0nnLAF5AUon1HOjS\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertThrows(AniException.class, () -\u003e testParse.parse(\"-n Wj1dHkUETeRU11EgJkb423bLNXsFDtR0X6sTnESc\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        // Test if 30 or less than"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertDoesNotThrow(() -\u003e testParse.parse(\"-n 45fx1JDGmVQfxLF0nnLAF5AUon1HOj\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "        assertDoesNotThrow(() -\u003e testParse.parse(\"-n WezZJBpRg0\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChanJianHao": 92
    }
  },
  {
    "path": "src/test/java/anichan/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "import anichan.bookmark.Bookmark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.human.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.exception.AniException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "import anichan.watchlist.Watchlist;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static junit.framework.Assert.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static junit.framework.Assert.assertNotNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String TEST_WORKSPACE_NAME \u003d \"Test\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_WORKSPACE \u003d \"ValidWorkspace\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_FILE_WORKSPACE \u003d \"EmptyFileWorkspace\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_WORKSPACE \u003d \"EmptyWorkspace\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SOME_INVALID_WORKSPACE \u003d \"SomeInvalidWorkspace\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String ALL_INVALID_WORKSPACE \u003d \"AllInvalidWorkspace\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String SCRIPT_FILE_NAME \u003d \"script.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_TEST_DIRECTORY \u003d \"a\" + File.separator + \"b\" + File.separator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_TEST_DIRECTORY \u003d \"src\" + File.separator + \"test\" + File.separator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                        + \"data\" + File.separator + \"StorageManagerTest\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                        + File.separator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String VALID_FILE_DIRECTORY \u003d VALID_TEST_DIRECTORY + \"DirectoryWithValidFile\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                        + File.separator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String EMPTY_FILE_DIRECTORY \u003d VALID_TEST_DIRECTORY + \"DirectoryWithEmptyFileAndDirectory\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                         + File.separator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final String INVALID_FILE_DIRECTORY \u003d VALID_TEST_DIRECTORY + \"DirectoryWithInvalidFile\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "                                                         + File.separator;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager validFileSM;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager invalidFileSM;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager emptySM;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private StorageManager invalidDirectorySM;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private User userToLoad;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Bookmark bookmarkToLoad;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private ArrayList\u003cWatchlist\u003e watchlistListForLoad;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    public void setUp() throws AniException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        validFileSM \u003d new StorageManager(VALID_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        invalidFileSM \u003d new StorageManager(INVALID_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        emptySM \u003d new StorageManager(EMPTY_FILE_DIRECTORY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        invalidDirectorySM \u003d new StorageManager(INVALID_TEST_DIRECTORY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userToLoad \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        bookmarkToLoad \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        watchlistListForLoad \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist firstWatchlist \u003d new Watchlist(\"a\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        firstWatchlist.addAnimeToList(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        firstWatchlist.addAnimeToList(2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        firstWatchlist.addAnimeToList(3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist secondWatchlist \u003d new Watchlist(\"b\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        secondWatchlist.addAnimeToList(2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        secondWatchlist.addAnimeToList(3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        secondWatchlist.addAnimeToList(4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void retrieveWorkspaceList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Valid Workspace Directory"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] validWorkspaceList \u003d invalidFileSM.retrieveWorkspaceList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(2, validWorkspaceList.length);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Invalid Workspace Directory"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String[] invalidWorkspaceList \u003d invalidDirectorySM.retrieveWorkspaceList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotNull(invalidWorkspaceList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadUser() throws AniException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Invalid Directory"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e userToLoad \u003d invalidDirectorySM.loadUser());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Valid Directory (Use result from testSaveUser())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        userToLoad \u003d validFileSM.loadUser();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        User expectedUser \u003d new User(\"Testing\", \"Male\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(userToLoad.getName(), expectedUser.getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(userToLoad.getGender(), expectedUser.getGender());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadUser_emptyUserFile_throwsAniException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e userToLoad \u003d emptySM.loadUser());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadUser_invalidUserFile_throwsAniException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e userToLoad \u003d invalidFileSM.loadUser());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Watchlist Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadWatchlistList() throws AniException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Valid Watchlist File"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String validResult \u003d validFileSM.loadWatchlistList(VALID_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedValidResult \u003d \"Loaded successfully.\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(expectedValidResult, validResult);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Invalid Directory"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            invalidDirectorySM.loadWatchlistList(VALID_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Empty Watchlist File"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String emptyResult \u003d emptySM.loadWatchlistList(EMPTY_FILE_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedEmptyFileResult \u003d \"Empty watchlist file.\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(expectedEmptyFileResult, emptyResult);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // No Watchlist File"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            emptySM.loadWatchlistList(EMPTY_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadWatchlistList_someInvalidWatchlist_failToLoadSome() throws AniException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String someInvalidResult \u003d invalidFileSM.loadWatchlistList(SOME_INVALID_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedSomeInvalidResult \u003d \"Not all loaded successfully (some invalid).\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(3, watchlistListForLoad.size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(someInvalidResult, expectedSomeInvalidResult);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadWatchlistList_allInvalidWatchlist_failToLoadAll() throws AniException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String allInvalidResult \u003d invalidFileSM.loadWatchlistList(ALL_INVALID_WORKSPACE, watchlistListForLoad);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String expectedAllInvalidResult \u003d \"No watchlist loaded successfully (all invalid).\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(0, watchlistListForLoad.size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(allInvalidResult, expectedAllInvalidResult);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Script Reading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void readScriptFile() throws AniException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Valid Script File"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        String fileString \u003d validFileSM.loadScript(VALID_WORKSPACE, SCRIPT_FILE_NAME);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotNull(fileString);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Invalid Directory"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            invalidDirectorySM.loadScript(VALID_WORKSPACE, SCRIPT_FILE_NAME);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Empty Script File"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "            emptySM.loadScript(EMPTY_FILE_WORKSPACE, SCRIPT_FILE_NAME);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bookmark Saving and Loading \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadBookmark_invalidDirectorySM_throwsAniException() throws AniException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Invalid Directory"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e  invalidDirectorySM.loadBookmark(TEST_WORKSPACE_NAME, bookmarkToLoad));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadBookmark_emptyBookmarkFile_throwsAniException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e  emptySM.loadBookmark(TEST_WORKSPACE_NAME,bookmarkToLoad));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void loadBookmark_invalidBookmarkFile_throwsAniException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertThrows(AniException.class, () -\u003e  invalidFileSM.loadBookmark(TEST_WORKSPACE_NAME,bookmarkToLoad));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 1,
      "OngDeZhi": 176,
      "ChanJianHao": 4
    }
  },
  {
    "path": "src/test/java/anichan/watchlist/WatchlistTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "package anichan.watchlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static junit.framework.Assert.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "//@@author OngDeZhi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "class WatchlistTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int SAMPLE_ANIME_INDEX_ONE \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private static final int SAMPLE_ANIME_INDEX_TWO \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Watchlist firstWatchlist;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    private Watchlist secondWatchlist;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        ArrayList\u003cInteger\u003e animeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        animeList.add(SAMPLE_ANIME_INDEX_ONE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        animeList.add(SAMPLE_ANIME_INDEX_TWO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        firstWatchlist \u003d new Watchlist(\"First Watchlist\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        secondWatchlist \u003d new Watchlist(\"Second Watchlist\", animeList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Same object -\u003e returns true."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        Watchlist duplicateNameWatchlist \u003d new Watchlist(\"First Watchlist\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertEquals(firstWatchlist, duplicateNameWatchlist);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Null -\u003e returns false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotEquals(firstWatchlist, null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Different type -\u003e returns false."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotEquals(firstWatchlist, \"testing\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        // Different watchlist name object -\u003e returns false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "        assertNotEquals(firstWatchlist, secondWatchlist);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OngDeZhi": 43,
      "ChanJianHao": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Tiled say decay spoil now walls meant house. My mr interest thoughts screened of outweigh removing. Evening society musical besides inhabit ye my. Lose hill well up will he over on. Increasing sufficient everything men him admiration unpleasing coke. Around really his use uneasy longer him man. His our pulled nature elinor talked now for excuse result. Admitted add peculiar get joy doubtful"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Male"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Uneasy barton seeing remark happen his has Am possible offering at contempt mr distance stronger amis"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "feMale5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Friendly cat"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Cat"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Dog 12345"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "duuuug"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "123"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "  -"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": " "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "      -"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Male"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "イングランド王"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "UwU"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "女性"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Duuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuududududu12381828182"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "495398475345939 4398594859 ---\u003d\u003d\u003d\u003d\u003d\u003d \u0027\u0027\u0027\u0027\u0027\u0027\u0027;;;;;;;;;//////.....445"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "?????????????????????``````````````````"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "BINARY "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "random name 123"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "monster"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Other"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "King                                  1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Elf"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Queen"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "maleS"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Abec Steiner 77th"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "F3maLe"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Abec Steiner 77th"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "MaLes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Abec Steiner 77th"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "female"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "addws -n"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "addws  - "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "addws"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "worksace -n abced"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n 可愛い"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n \u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003e/[];\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n -n -n"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n Crunchy Cinnamon"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n CrispyDonut"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n RED VELVET Crumblesss "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n RED VELVET Crumblesss "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n RED VELVET Crumblesss"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n WHITE CHoC MACADAMIA"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -s WHITE CHoC MACADAMIA"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d WHITE CHoC MACADAMIA"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d non existing workspace"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n COOKIES N CREME CH33SECAKE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n APPLE ORANGE OREO PANCAKE APPLE ORANGE OREO PANCAKE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n APPLES ORANGES OREOS PANCAKESS"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n APPLES ORANGES OREOS PANCAKESSS"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n -999999"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n 999999"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d 999999 "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n APPLES ORANGES OREOS PANCAKESSS "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n APPLES ORANGES OREOS PANCAKESSS  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l  APPLES ORANGES OREOS PANCAKESSS  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n   APPLES ORANGES OREOS PANCAKESSS  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -s COOKIES N CREME CH33SECAKE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d WHITE CHoC MACADAMIA"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a -999"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a 0"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a -999999999999999"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d 0"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d -99999999999999"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d -999999999999999"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n a"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n b"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n ops"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -s 4"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -s -1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -s one"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -d 4"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -d -1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -d one"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -l"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "add -a 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "add -a 3"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bookmark -a 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bookmark -a 410"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark -a 2"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark -a 500"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark -a 3"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark -a 430"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bookmark 1 -e 5"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark 2 -e 1"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark 3 -e 1"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark 4 -e 8"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark 1 -n test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark 1 -n test 2 withspace"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark 1 -n testing 123"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark 2 -n testing on 2"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark 1"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark 1 -r 2"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "bookmark 1"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "bookmark -l"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michaeldinata"
        },
        "content": "add -a 1"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "search -n cowboy"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -p 1"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace   "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace  -"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace   - - "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace --"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace ?"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace /"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace /n"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  \u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  a"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  -a"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d -a"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d -a name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a Fried Oreo Cookies"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a Fried Oreo Cookies"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a Fried Oreo Cookies "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a Fried Oreo Cookies  "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a Fried Oreo Cookies/"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a Fried Oreo Cookies["
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a Fried Oreo Cookies."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a /"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a .fried"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a ?fried"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a !fried"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a @fried"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a -fried"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a /hey/there"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a ./hey/there"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a ../hey/there"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a ..//hey//there"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a ..///hey///there"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a \\"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a \\a"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a \\\\a"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -s //"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a /hello"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -a OOOOOWUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  OOOOOWUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  OOOOOWUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  OOOOOWUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l aaa"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "blah blah"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "blah -e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "blah -e 4234"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "blah la"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -ll"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l9"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -9393123"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d Default"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d Crunchy Cinnamon"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d CrispyDonut"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d CrispyDonut"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d ED VELVET Crumblesss"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d COOKIES N CREME CH33SECAKE "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d COOKIES N CREME CH33SECAKE  "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d COOKIES N CREME CH33SECAKE   "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  COOKIES N CREME CH33SECAKE   "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  COOKIES N CREME CH33SECAKE "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  COOKIES N CREME CH33SECAKE"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d Default"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -o"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -o"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -o a"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -o    asc"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse      -o asc"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse      -o     asc"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -      o asc -p           2             -aas"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -o asc -p 2 --"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse ---"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "browse -s rating-o asc"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  COOKIES N CREME CH33SECAKE"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d Default"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d ./*"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d .//*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d  ./data"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n Triple Fromage Cheesecake"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "Triple Fromage Cheesecake"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n Triple Fromage Cheesecake "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n   Triple Fromage Cheesecake "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -s   Triple Fromage Cheesecake "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -s  Triple Fromage Cheesecake"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -s Triple Fromage Cheesecake"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n Triple Fromage Cheesecake"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -n   Triple Fromage Cheesecake "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d   Triple Fromage Cheesecake "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -d Triple Fromage Cheesecake"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChanJianHao"
        },
        "content": "workspace -l"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "search - n fate"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "search   -n fate"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "search -n   fate"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "search  -n fate"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EyoWeiChin"
        },
        "content": "search -g music"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -unknown helloworld"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n abc"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n abc -hello"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n -hello"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n testing1233333333333333333333333333333333333333"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -n abc"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -l"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -l a"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -l -hello"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -l -----"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -l -1"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -s 2"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -s 1 2"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -s -1"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -s one"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -s -hello"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -s -------"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -d 2"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -d 1 2"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -d -1"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -d one"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -d -hello"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist -d -------"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist             -n           Hello               World"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist             -l"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist             -l                         abc"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist                -s                 2"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist                -s                 5                   5"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist                     -d                 2"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "watchlist                     -d                 5              5"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "EyoWeiChin": 19,
      "n3wsoldier": 14,
      "OngDeZhi": 46,
      "ChanJianHao": 177,
      "michaeldinata": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "set dataDir\u003d\"data\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "cd ..\\.."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OngDeZhi"
        },
        "content": "rmdir /s /q %dataDir% 2\u003enul"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "java -jar build\\libs\\%jarloc% \u003c text-ui-test\\input.txt \u003e text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 3,
      "OngDeZhi": 2,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "java  -jar $(find build/libs/ -mindepth 1 -print -quit) \u003c text-ui-test/input.txt \u003e text-ui-test/ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "n3wsoldier"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "n3wsoldier": 2,
      "-": 22
    }
  }
]
