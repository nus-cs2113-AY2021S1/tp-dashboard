[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    // https://mvnrepository.com/artifact/com.diogonunes/JColor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    // compile group: \u0027com.diogonunes\u0027, name: \u0027JColor\u0027, version: \u00275.0.1\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    archiveBaseName \u003d \"Notus\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 4,
      "brandonywl": 3,
      "-": 45
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | R Ramana | [Github](https://github.com/R-Ramana) | [Portfolio](docs/team/ramana.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jun Xiang | [Github](https://github.com/Chongjx) | [Portfolio](docs/team/junxiang.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Brandon Yeow | [Github](https://github.com/brandonywl) | [Portfolio](docs/team/brandon.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Prachi Goenka | [Github](https://github.com/prachi2023) | [Portfolio](docs/team/prachigoenka.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nazryl Lim | [Github](https://github.com/Nazryl/) | [Portfolio](docs/team/nazrylLim.md)"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 1,
      "Chongjx": 1,
      "brandonywl": 1,
      "prachi2023": 1,
      "Nazryl": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### [1. Introduction](#intro)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### [2. Design \u0026 Implementation](#design)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### [3. Product Scope](#scope)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2 Target User Persona](#userpersona)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2 Target User Profile](#userprofile)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3 Value Proposition](#value)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### [4. User Stories](#userstories)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### [5. Non-Functional Requirements](#nfr)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### [6. Glossary](#gloss)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### [7. Instructions for Manual Testing](#testinstr)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"intro\"\u003e1. Introduction\u003c/a\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "NotUS is a quick and simple, Command Line Interface (CLI) based, note-taking application for keyboard-inclined users. NotUS allows for users to categorize notes by tagging as well as pinning the more important notes. NotUS is also designed to assist in planning timetables to highlight possible clashes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "This document describes the design, implementation and architecture of NotUS."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"design\"\u003e2. Design \u0026 Implementation\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"scope\"\u003e3. Product Scope\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"userpersona\"\u003e3.1 Target User Persona\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Jane Doe is a NUS undergraduate student who is in SOC/FOE and is having a hard time managing her responsibilities and extra curricular activities. She wants to have a convenient platform to take notes and categorize them according to her modules. She also wants to plan her time so she is more aware of her module schedule."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "She also wants to be able to export the information so she is able to share them with whomever easily."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"userprofile\"\u003e3.2 Target User Profile\u003c/a\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. NUS students, specifically SOC and CEG students (herein referred to as students) who are comfortable and adept at using CLI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "2. Students who want to take notes and categorize them so they are not all over the place."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "3. Students who are comfortable with CLI."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"value\"\u003e3.3 Value Proposition\u003c/a\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "A all-in-one solution for note-taking and managing your schedule."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"userstories\"\u003e4. User Stories\u003c/a\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "| Version | Target User | Function/Feature | User\u0027s Benefit |"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0| As a ... | I want to ... | So that I can ... |"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|SOC/FOE student|Keep track of my notes|Be organized and find notes easily|"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Meticulous student|Categorize my notes by level of importance|Focus on the important topics|"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Student who is overloading|Categorize my notes by module|Be more aware of which notes are necessary for the upcoming lessons|"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Student who is more visual|Categorize my notes by colour (visible on CLI)|Be able to easily identify which module is which|"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Meticulous student|Create daily and weekly task lists|Keep track of my work progress|"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Forgetful student|To obtain reminders about my schedule for the day|So I do not forget what I have on for the day|"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Busy student|Pin important notes, events and todo list|Focus on the important information|"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|SOC/FOE student|Be able to edit my notes|Update missing information|"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|SOC/FOE student|Be able to read my notes|To revise before exams|"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|SOC/FOE student|Be able to delete my notes|To clear up space and keep it more organized|"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|Outgoing student|Able to add my social events to the timetable|View all my upcoming events and classes|"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|Busy student|Be alerted if there are clashes in between my events and classes|Reschedule my plan|"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|Student leader|Be able to share certain events with others|Can get people to join events more conveniently|"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|SOC/FOE student|Archive old notes|Keep dashboard neat while allowing me to refer to old notes when necessary|"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|SOC/FOE student|Be able to import my notes|To make edits|"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|SOC/FOE student|Be able to export my notes|To share my notes with my peers|"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|SOC/FOE student|Be able to import my timetable/events|To make adjustments to my schedule|"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|SOC/FOE student|Be able to export my timetable/events|To share my schedule with my peers|"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"nfr\"\u003e5. Non-Functional Requirements\u003c/a\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Must have Java 11 installed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "2."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "3."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"gloss\"\u003e6. Glossary\u003c/a\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"testinstr\"\u003e7. Instructions for Manual Testing\u003c/a\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 61,
      "-": 22
    }
  },
  {
    "path": "docs/team/brandon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "# Brandon - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/junxiang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "# Jun Xiang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 6
    }
  },
  {
    "path": "docs/team/nazrylLim.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "# Nazryl Lim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "## Education"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* National University of Singapore"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "## Work Experience"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* Work from home"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "## Accomplishments"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* CS2113 Student"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* Work from home"
      }
    ],
    "authorContributionMap": {
      "Nazryl": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.TagManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Entry point of the NotUS application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private InterfaceManager interfaceManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Timetable timetable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String WELCOME_MSG_STRING \u003d \"Welcome to NotUS! \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"Type \\\"help\\\" if you need to see a list of commands and their usages.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String ENTER_COMMAND_MSG \u003d \"Enter command:\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Initializes the required managers."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.interfaceManager \u003d new InterfaceManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        interfaceManager.prints(WELCOME_MSG_STRING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Reads the user command and executes it until the user exits the program. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void runCommandLoop() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            interfaceManager.prints(ENTER_COMMAND_MSG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String userCommandText \u003d interfaceManager.getUserCommandInput();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            interfaceManager.prints(result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Exits the application."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Runs the program until termination. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        runCommandLoop();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String executeCommand(Command command) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return command.execute();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Main entry-point for the application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 66,
      "R-Ramana": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.RecurringEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.util.DateTimeManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_STOP_RECURRING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * This class allows us to store relevant information regarding the events to add to the timetable and manipulate it"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * before executing it via the execute method."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Adds an event to the timetable. Parameters:\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TIMING + \" TIMING (Format: \" + DateTimeManager.DATE_FORMAT + \") \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_RECURRING"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + String.format(\" Frequency (%s, %s, %s, %s)] \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            RecurringEvent.DAILY_RECURRENCE_TYPE, RecurringEvent.WEEKLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            RecurringEvent.MONTHLY_RECURRENCE_TYPE, RecurringEvent.YEARLY_RECURRENCE_TYPE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_REMIND + \" [Days before (Default: 1)]\" + \"] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_STOP_RECURRING + \" TIMING (Format: \" + DateTimeManager.DATE_FORMAT + \")]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Added the following!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    // No COMMAND_UNSUCCESSFUL_MESSAGE as we do not expect failure to occur at this stage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructor that takes in the event to be written to the timetable."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param event Event to be written to the timetable."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(event);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return COMMAND_SUCCESSFUL_MESSAGE + Formatter.LS + Formatter.LS + event.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 13,
      "R-Ramana": 1,
      "brandonywl": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_PIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Adds a Note into the Notebook."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Adds a note to notebook. Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG TAG_COLOR \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1 TAG_COLOR...] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_PIN + \" PIN]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"New note added: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"This note already exists in the notebook! \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs an AddNoteCommand to add a Note into the Notebook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param note refers to the note to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public AddNoteCommand(Note note) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Search for duplicates"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cNote\u003e filteredTaskList \u003d (ArrayList\u003cNote\u003e) notebook.getNotes().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                .filter((s) -\u003e s.getTitle().equals(note.getTitle()))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (!filteredTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Rebind the tags if there are duplicated tags"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(note);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        notebook.addNote(note);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (note.getTagsName().isBlank()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return COMMAND_SUCCESSFUL_MESSAGE + note.getTitle();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return COMMAND_SUCCESSFUL_MESSAGE + note.getTitle() + \" \" + note.getTagsName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 25,
      "R-Ramana": 4,
      "Nazryl": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.TagManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected Notebook notebook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected Timetable timetable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected TagManager tagManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected StorageManager storageManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Executes the command and returns the result. Method to be implemented by child class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public abstract String execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Sets the data that the command will operate on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notebook referenced Notebook data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param timetable referenced Timetable data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagManager referenced TagManager."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setData(Notebook notebook, Timetable timetable, TagManager tagManager, StorageManager storageManager) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.notebook \u003d notebook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagManager \u003d tagManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.storageManager \u003d storageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 38,
      "Nazryl": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CreateTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Tag.TagColor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Creates Tag for the notes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class CreateTagCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create-t\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_RED_STRING \u003d TagColor.COLOR_RED.getColor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_GREEN_STRING \u003d TagColor.COLOR_GREEN.getColor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_BLUE_STRING \u003d TagColor.COLOR_BLUE.getColor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_YELLOW_STRING \u003d TagColor.COLOR_YELLOW.getColor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_PURPLE_STRING \u003d TagColor.COLOR_PURPLE.getColor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_CYAN_STRING \u003d TagColor.COLOR_CYAN.getColor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_WHITE_STRING \u003d TagColor.COLOR_WHITE.getColor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_RESET_STRING \u003d TagColor.COLOR_RESET.getColor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Creates a tag. Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG NAME [TAG COLOR]\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + COLOR_RESET_STRING + Formatter.LS + \"(Available colors: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_WHITE_STRING + Tag.COLOR_WHITE_STRING + \", \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_RED_STRING + Tag.COLOR_RED_STRING + \", \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_GREEN_STRING + Tag.COLOR_GREEN_STRING + \", \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_BLUE_STRING + Tag.COLOR_BLUE_STRING + \", \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_YELLOW_STRING + Tag.COLOR_YELLOW_STRING + \", \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_CYAN_STRING + Tag.COLOR_CYAN_STRING + \", \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_PURPLE_STRING + Tag.COLOR_PURPLE_STRING"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_RESET_STRING + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Created a tag! \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"Tag already exists! \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a CreateTagCommand to create tag(s)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public CreateTagCommand(ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagManager.createTag(tags, COMMAND_SUCCESSFUL_MESSAGE, COMMAND_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 46,
      "R-Ramana": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * This class allows us to store relevant information regarding the events to be deleted from the timetable and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * manipulate it before executing it via the execute method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Deletes an event. Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Event deleted:\" + Formatter.LS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"Event failed to delete: \" + Formatter.LS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String INDEX_OUT_OF_RANGE_MESSAGE \u003d \"The index you specified is out of range. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + \"Please specify the index that is indicated when you print the event list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructs a DeleteEventCommand that specifies which index to delete."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param index Index written on list-e -1."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public DeleteEventCommand(int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d timetable.getEvents().size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE + INDEX_OUT_OF_RANGE_MESSAGE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event \u003d timetable.getEvent(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.deleteEvent(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return COMMAND_SUCCESSFUL_MESSAGE + event.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 8,
      "R-Ramana": 1,
      "brandonywl": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Deletes a Note from the Notebook or an Event from the Timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Deletes a note. Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE or \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Note deleted: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"This note does not exist in the notebook! \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String title \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs a DeleteNoteCommand to delete a Note or an Event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the item to be deleted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public DeleteNoteCommand(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs a DeleteNoteCommand to delete a Note or an Event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param title of the item to be deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public DeleteNoteCommand(String title) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cNote\u003e deletedListTitle;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // If there is no title, delete note by index. Else delete by title."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (title.isBlank()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String deletedTitle \u003d notebook.getNotes().get(index).getTitle();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                notebook.deleteNote(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return COMMAND_SUCCESSFUL_MESSAGE + deletedTitle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                deletedListTitle \u003d (ArrayList\u003cNote\u003e) notebook.getNotes().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        .filter((s) -\u003e s.getTitle().toLowerCase().contains(title.toLowerCase()))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        .collect(toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                notebook.deleteNote(deletedListTitle.get(0).getTitle());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return COMMAND_SUCCESSFUL_MESSAGE + deletedListTitle.get(0).getTitle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException | ClassCastException exception) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 23,
      "R-Ramana": 1,
      "Nazryl": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Deletes an existing Tag."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class DeleteTagCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-t\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Deletes a tag. Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1...]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Deleted the tag! \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"The tag does not exist! \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs a DeleteNoteCommand to delete tag(s)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public DeleteTagCommand(ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagManager.deleteTag(tags, COMMAND_SUCCESSFUL_MESSAGE, COMMAND_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 35,
      "R-Ramana": 1,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Edits a Note in the Notebook or an Event from the Timetable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Edits an event in the timetable. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"Parameters: \" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE] \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_DATETIME + \" DATE_TIME]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_RECURRING + \" RECURRING] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_REMIND + \" REMIND]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs an EditEventCommand to edit an Event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the Event to be edited."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public EditEventCommand(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 38,
      "R-Ramana": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_LINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class EditNoteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Edits a note in the notebook. Parameters: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE] \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_LINE + \" LINE]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_CONTENT + \" CONTENT]\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG TAG_COLOR\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1 TAG_COLOR...]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs an EditNoteCommand to edit a Note."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the Note to be edited."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public EditNoteCommand(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 36,
      "R-Ramana": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Exits the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Exits the program.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Bye!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return COMMAND_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 17,
      "R-Ramana": 1,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.SUFFIX_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Finds Notes in the Notebook.(Possible to add find in event too)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"FindCommand\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Finds a note. Parameters: KEYWORDS\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"There are no matching notes. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"Please try another search query.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Here are the matching notes in your list:\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String keywords;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a FindCommand to find Notes in the Notebook given the keyword."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param keywords to look for in the Notebook."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public FindCommand(String keywords) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Filters and finds notes that has the title containing the user inputted keyword."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Stores the filtered notes in an ArrayList of Note"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return String containing the filtered list of notes"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.log(Level.INFO, \"Logger Setup, will proceed to execute FindCommand.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        StringBuilder notes \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e filteredNotes \u003d (ArrayList\u003cNote\u003e) notebook.getNotes().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                .filter((s) -\u003e s.getTitle().toLowerCase().contains(keywords.toLowerCase()))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.log(Level.INFO, \"Filtered Notes into an ArrayList of notes. \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + \"Filtered Notes only has notes with title containing the keyword.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredNotes.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            notes.append(i + 1)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    .append(SUFFIX_INDEX)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    .append(filteredNotes.get(i).getTitle())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    .append(filteredNotes.get(i).getTagsName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    .append(Formatter.LS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.log(Level.INFO, \"Filtered notes stored as a string to be returned.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (filteredNotes.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            LOGGER.log(Level.INFO, \"Filtered notes is empty.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.log(Level.INFO, \"Filtered notes will be returned.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return COMMAND_SUCCESSFUL_MESSAGE + Formatter.LS + notes;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public void setupLogger() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        consoleHandler.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(\"FindCommand.log\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            LOGGER.log(Level.SEVERE, \"File logger not working.\", error);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 59,
      "Chongjx": 37,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Tag.TagColor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Lists all the commands and usage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"HelpCommand\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_CYAN_STRING \u003d TagColor.COLOR_CYAN.getColor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_WHITE_STRING \u003d TagColor.COLOR_WHITE.getColor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_RESET_STRING \u003d TagColor.COLOR_RESET.getColor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String HELP_STRING \u003d Formatter.LS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"The recognized commands and their usages are listed below. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"Parameters listed in brackets, [ ] represent optional inputs.\" + Formatter.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + AddNoteCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + AddEventCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + CreateTagCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + DeleteNoteCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + DeleteEventCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + DeleteTagCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + EditNoteCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + EditEventCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + ExitCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + FindCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + ListEventCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + ListNoteCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + ListTagCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PinCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + RemindCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + TagCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + ViewNoteCommand.COMMAND_USAGE + Formatter.LS + COLOR_RESET_STRING;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.log(Level.INFO, \"Logger Setup, will return HELP_STRING.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return HELP_STRING;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public void setupLogger() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        consoleHandler.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(\"HelpCommand.log\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            LOGGER.log(Level.SEVERE, \"File logger not working.\", error);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 34,
      "Chongjx": 34,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/IncorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Represents an incorrect command. Upon execution, produces a message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nazryl": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Lists all the Events in the Timetable. Can limit search to specific time periods."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class ListEventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final int SMALLEST_YEAR \u003d 1000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final int LARGEST_YEAR \u003d 3000;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final int SMALLEST_MONTH \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final int LARGEST_MONTH \u003d 12;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": List all the events in the Timetable. Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TIMING + \" YYYY or YYYY-MM]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"These are the events in the specified time period: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + Formatter.LS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"Failed to find any events in the specified time period.\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + Formatter.LS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets how the command is expected to be used."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return String representation of how the command is to be used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListEventCommand to list all the Events in the Timetable."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ListEventCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.year \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.month \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructs a ListEventCommand with a year and month to look in."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param year Year to look for events."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param month Month to look for events."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ListEventCommand(int year, int month) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructs a ListEventCommand with a year to look in."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param year Year to look for events."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ListEventCommand(int year) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.month \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Just list all events, recurring or not, without repeat."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (year \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cEvent\u003e events \u003d timetable.getEvents();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            boolean first \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (!first) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    result.append(Formatter.LS.repeat(2));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                first \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                result.append(String.format(\"%d.\", i++)).append(event.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Display the whole year if no month, else display only that month."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        HashMap\u003cString, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e calendar;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (month !\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            calendar \u003d timetable.getMonthTimetable(year, month);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            calendar \u003d timetable.getYearTimetable(year);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        boolean first \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (String month : calendar.keySet()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            StringBuilder monthEventsString \u003d new StringBuilder(month + Formatter.LS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e monthCalendar \u003d calendar.get(month);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cInteger\u003e days \u003d new ArrayList\u003c\u003e(monthCalendar.keySet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Collections.sort(days);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (Integer day : days) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                ArrayList\u003cEvent\u003e dailyEvents \u003d monthCalendar.get(day);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                // Sort does not seem to be working"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                Comparator\u003cEvent\u003e eventComparator \u003d (e1, e2) -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    int comp \u003d e1.getDate().compareTo(e2.getDate());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (comp !\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        return comp;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        return e1.getTime().compareTo(e2.getTime());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                };"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                dailyEvents.sort(eventComparator);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                for (Event event : dailyEvents) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    monthEventsString.append(Formatter.LS)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            .append(String.format(\"%d.\", i)).append(event.toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (!first) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result.append(Formatter.LS.repeat(2));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            first \u003d false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            result.append(monthEventsString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (result.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return COMMAND_SUCCESSFUL_MESSAGE + result;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 39,
      "R-Ramana": 4,
      "brandonywl": 99
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.SUFFIX_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Lists all the Notes in the Notebook."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class ListNoteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Lists all the notes in the Notebook. Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1...] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[/sort up OR down]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Here are the list of notes: \" + Formatter.LS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE_INVALID_TAG \u003d \"Your tags return no result.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \" Please try an alternative tag or check your spellings\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE_EMPTY_NOTEBOOK \u003d \"The notebook is empty!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private boolean isSorted;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private Boolean isAscendingOrder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListCommand to list all the Notes in the Notebook in a sorted order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isAscendingOrder determines the order of the sorting of the Notes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand(Boolean isAscendingOrder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isSorted \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isAscendingOrder \u003d isAscendingOrder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListNoteCommand to list all the Notes in the Notebook in the default order."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ListNoteCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isAscendingOrder \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListNoteCommand to list all the Notes in the Notebook that has the tag(s)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags tags of the Notes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListNoteCommand to list all the Notes in the Notebook, that has the tag(s), in a sorted order."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isAscendingOrder order of the sort."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags tags of the Notes."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand(Boolean isAscendingOrder, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(isAscendingOrder);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Sorts the notes in alphabetical order and returns them if there is a up (A-Z) / down (Z-A) command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * If tags exist, maps the tags to the HashMap and gets the corresponding notes"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * For each tag, there will be an ArrayList of the respective notes."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * The method will then merge the notes in the ArrayLists into 1 large ArrayList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * ArrayList is then sorted and returned for the respective up/down commands"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return noteString String containing the (filtered) notes (un)sorted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        StringBuilder noteString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        StringBuilder pinnedNotesSorted;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        StringBuilder unpinnedNotesSorted;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e pinnedNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e unpinnedNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (int i \u003d 0; i \u003c notebook.getNotes().size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            String pinnedNoteStatus \u003d notebook.getNotes().get(i).getPinned();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (pinnedNoteStatus.equals(\"Y\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                pinnedNotes.add(notebook.getNotes().get(i));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                unpinnedNotes.add(notebook.getNotes().get(i));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Takes the notes in the notebook and sorts them according to title, alphabetically (a-z)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e sortedNotes \u003d (ArrayList\u003cNote\u003e) notebook.getNotes().stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .sorted(Comparator.comparing(a -\u003e a.getTitle().toLowerCase()))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (tags \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (isAscendingOrder \u003d\u003d null \u0026\u0026 pinnedNotes.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteString \u003d getNoteString(notebook.getNotes());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else if (isAscendingOrder \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteString.append(\"Pinned Notes\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        .append(Formatter.LS)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        .append(getNoteString(pinnedNotes))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        .append(Formatter.LS)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        .append(\"Unpinned Notes\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        .append(Formatter.LS)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        .append(getNoteString(unpinnedNotes));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else if (pinnedNotes.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteString \u003d getSortedString(sortedNotes);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                pinnedNotesSorted \u003d getSortedString(pinnedNotes);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                unpinnedNotesSorted \u003d getSortedString(unpinnedNotes);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteString.append(\"Pinned Notes\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        .append(Formatter.LS)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        .append(pinnedNotesSorted)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        .append(Formatter.LS)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        .append(\"Unpinned Notes\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        .append(Formatter.LS)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        .append(unpinnedNotesSorted);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (noteString.toString().isBlank()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return COMMAND_UNSUCCESSFUL_MESSAGE_EMPTY_NOTEBOOK;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return COMMAND_SUCCESSFUL_MESSAGE + noteString.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Obtaining ArrayList\u003cString\u003e of tags and parsing it to get an ArrayList\u003cTag\u003e of tags"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Map\u003cTag, ArrayList\u003cNote\u003e\u003e tagMap \u003d tagManager.getTagMap();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (String tag : tags) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            Tag currentTag \u003d tagManager.getTag(tag);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (currentTag !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                tagList.add(currentTag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // If the user inputted tags does not match any of the existing tags."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tagList.isEmpty()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Based on user inputted tags, will store the respective values in an ArrayList"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // E.g. if user input 2 tags, CS2113 and important, will have 2 ArrayList"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        //      1 for the values corresponding to CS2113 and the other for important tag"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        List\u003cArrayList\u003cNote\u003e\u003e values \u003d tagList.stream()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .map(tagMap::get)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (ArrayList\u003cNote\u003e value : values) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            for (Note note : value) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // Account for duplicates."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // In case an item has both CS2113 and Important tag"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                if (!notes.contains(note)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    notes.add(note);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Checking for empty notes List"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (notes.isEmpty()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Sort the tagged notes"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e sortedTaggedNotes \u003d (ArrayList\u003cNote\u003e) notes.stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .sorted(Comparator.comparing(a -\u003e a.getTitle().toLowerCase()))"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (isAscendingOrder \u003d\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            noteString \u003d getNoteString(notes);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            noteString \u003d getSortedString(sortedTaggedNotes);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return COMMAND_SUCCESSFUL_MESSAGE + noteString.toString();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Method compiles the ArrayList items and appends the items to a String."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * The ArrayList has already been sorted"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Method returns either top to bottom or bottom to top to account for ascending/descending sorting"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param sortedNotes ArrayList of notes that were already sorted"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return noteString String containing the notes sorted either ascending ot descending"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private StringBuilder getSortedString(ArrayList\u003cNote\u003e sortedNotes) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        StringBuilder noteStrBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (!isAscendingOrder) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            Collections.reverse(sortedNotes);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            noteStrBuilder \u003d getNoteString(sortedNotes);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else if (isAscendingOrder) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            noteStrBuilder \u003d getNoteString(sortedNotes);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return noteStrBuilder;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Method compiles the ArrayList items and appends the items to a String."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param notesList ArrayList of notes to obtain note title/tags from"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return noteString StringBuilder containing the notes ready to be printed"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private StringBuilder getNoteString(ArrayList\u003cNote\u003e notesList) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        StringBuilder noteString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (int i \u003d 0; i \u003c notesList.size(); i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            noteString.append(i + 1).append(SUFFIX_INDEX)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .append(notesList.get(i).getTitle())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .append(\" Tags: \")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .append(notesList.get(i).getTagsName())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    .append(Formatter.LS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return noteString;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 80,
      "R-Ramana": 157
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Lists all the Tags."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class ListTagCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-t\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Lists all the tags.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagManager.listTags();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14,
      "R-Ramana": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PinCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Pins or unpins a Note in the Notebook."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class PinCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pin-n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Pins or unpins a note. Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX] \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"This note does not exists in the notebook\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private boolean isPinByIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a PinCommand to pin or unpin a Note in the Notebook by the index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the Note."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public PinCommand(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isPinByIndex \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a PinCommand to pin or unpin a Note in the Notebook by the title."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param title of the Note."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public PinCommand(String title) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isPinByIndex \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Note note \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isPinByIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                note \u003d notebook.getNotes().get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            for (Note notes : notebook.getNotes()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (notes.getTitle().equalsIgnoreCase(title)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    note \u003d notes;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        note.togglePinned();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return note.getTitle() + \" pinned: \" + note.getPinned();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 7,
      "Chongjx": 37,
      "prachi2023": 23,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/RemindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Returns all the reminders that should occur today."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind-e\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Shows the reminders for today.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Default constructor of RemindEvent. No arguments are expected as we are only looking at reminders today."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RemindCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cReminder\u003e reminders \u003d timetable.getReminders();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Reminders:\" + Formatter.LS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (reminders.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            result.append(\"No reminders today!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String lineSep \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Reminder reminder : reminders) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            result.append(lineSep).append(reminder.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            lineSep \u003d Formatter.LS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 17,
      "brandonywl": 17,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/TagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Tags or untags a Note."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Tags or untags a note. Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG TAG_COLOR \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1 TAG_COLOR...]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String TAG_NOTE_MESSAGE \u003d \"Added the tag to the note! \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String UNTAG_NOTE_MESSAGE \u003d \"Removed the tag from the note! \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"Invalid index input!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a TagCommand to tag or untag a Note."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TagCommand(int index, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Note note \u003d notebook.getNotes().get(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return tagManager.tagAndUntagNote(note, tags, TAG_NOTE_MESSAGE, UNTAG_NOTE_MESSAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 47,
      "R-Ramana": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ViewNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Views a specific Note in the Notebook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class ViewNoteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view-n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Views a note. Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX] \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"This note does not exists in the notebook\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private boolean isViewByIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ViewNoteCommand to view a Note by the index."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the Note."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ViewNoteCommand(int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isViewByIndex \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ViewNoteCommand to view a Note by the title."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param title of the Note."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ViewNoteCommand(String title) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isViewByIndex \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Note note \u003d new Note(\"\", \"\", false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        boolean noteExists \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isViewByIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                note \u003d notebook.getNotes().get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            noteExists \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            for (Note notes : notebook.getNotes()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (notes.getTitle().equalsIgnoreCase(title)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    note \u003d notes;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    noteExists \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!noteExists) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        // format output string"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String stringToPrint \u003d note.getTitle() + \" \" + note.getTagsName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        stringToPrint +\u003d Formatter.LS + note.getContent();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return stringToPrint;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 39,
      "R-Ramana": 7,
      "prachi2023": 27,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/exception/SystemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Signals the different type of possible exceptions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class SystemException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Types of exception. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public enum ExceptionType {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Command related exception type"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_COMMAND(Formatter.LS + \"Invalid Command. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + \"Please try again or enter help to get a list of valid commands.\" + Formatter.LS),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        EXCEPTION_INVALID_PREFIX(\"Type of prefix not recognized!\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_MESSAGE_AFTER_COMMAND(\"Missing information! Please provide the necessary information!\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_DESCRIPTION(\"Missing description!\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TITLE_PREFIX(\"Missing title prefix!\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TITLE(\"Missing title!\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TIMING_PREFIX(\"Please include the timing prefix.\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_TIMING(\"This event does not have a timing specified!\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TAG_PREFIX(\"Missing tag prefix!\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TAG(\"Missing tag name!\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_SORT(\"Missing sort order! Please specify how you would like to sort. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + \"up or down.\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_SORT_TYPE(\"Invalid sort order command!\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + \"Only \\\"up\\\" and \\\"down\\\" are recognized as valid commands. \" + Formatter.LS"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + \"Up for ascending and down for descending\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_INDEX_PREFIX(\"Missing index prefix!\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_INDEX(\"Missing index!\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_PIN(\"Missing pin!\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_KEYWORD(\"No search query input. Please enter a keyword for search results.\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Note specific exception type"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_END_INPUT(\"Input /end on a new line!\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_INPUT_FORMAT(\"Format of input is not valid!\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Event related exception type"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_RECURRING_END_TIME(\"Please specify until when do you want \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"this event to repeat.\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_EARLY_REMINDER(\"Please limit your reminders to at most 1 week earlier.\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_TIMING_FORMAT(\"Your input has a wrong format for the date time input. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"Please follow the yyyy-MM-dd HH:mm format with the \\\"-\\\" and \\\":\\\" in 24-Hour Clock format\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_LIST_TIMING_FORMAT(\"Your input list timing query has a wrong format. \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"Try YYYY-MM or YYYY\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_REMINDER_FORMAT(\"Your input has a wrong format for the time before reminder. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"Please follow [NumberOfUnits-Units] format where NumberOfUnits \u003e 0 and units \u003d \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + Event.REMINDER_DAY + \" or \" + Event.REMINDER_WEEK + \".\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_SEARCH_DATE_OUT_OF_RANGE(\"Your query is out of range for our system.\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_RECURRING_TYPE(\"Please indicate whether you would like to have the event \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"repeat daily, weekly, monthly or yearly\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        EXCEPTION_INVALID_RECURRING_TYPE(\"There are only the following recurring types: \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"daily, weekly, monthly or yearly\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_TIME_UNIT(\"That time unit is not accepted!\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // General exception type"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_INDEX_FORMAT(\"Invalid index format!\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_INDEX_VALUE(\"Invalid index value!\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_FILE_CREATION_ERROR(\"Unable to create a file!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /** The exception message. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        private final String exceptionMessage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * Constructor of an ExceptionType."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * @param exceptionMessage The exception message."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ExceptionType(String exceptionMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.exceptionMessage \u003d exceptionMessage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * Overrides the parent toString method."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * @return The exception message."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return exceptionMessage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public SystemException(ExceptionType exceptionType) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        super(exceptionType.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 71,
      "R-Ramana": 2,
      "brandonywl": 18,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/notebook/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a Note. Contains all the information of a note."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Boolean isPinned;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a Note object with its title, content and pinned status provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param title of the note."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param content of the note."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isPinned status of the note."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Note(String title, String content, Boolean isPinned) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isPinned \u003d isPinned;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a Note object with its title, content, pinned status and tags provided."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param title of the note."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param content of the note."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isPinned status of the note."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags of the note."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Note(String title, String content, Boolean isPinned, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(title, content, isPinned);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Gets the title of note from existing data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return title of the note."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setContent(String content) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String getPinned() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return (isPinned ? \"Y\" : \"N\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void togglePinned() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        isPinned \u003d !isPinned;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setPinned(Boolean pinned) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        isPinned \u003d pinned;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return this.tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getTagsName() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagsName \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagsName \u003d tagsName.concat(t.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagsName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTags(ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 66,
      "prachi2023": 4,
      "Nazryl": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/notebook/Notebook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a Notebook object. Contains all the notes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Notebook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a new list of notes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Notebook() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a list of notes from existing data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notes of existing data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Notebook(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Gets a list of notes from existing data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return notes of existing data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return this.notes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public Note getNote(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return notes.get(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Adds a note into the notebook."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Removes a note from the timetable."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void deleteNote(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        notes.remove(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Removes a note from the timetable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void deleteNote(String title) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        notes.removeIf(note -\u003e note.getTitle().equals(title));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void setNotes(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return notes.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 38,
      "prachi2023": 8,
      "Nazryl": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/notebook/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//import com.diogonunes.jcolor.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//import static com.diogonunes.jcolor.Ansi.colorize;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a tag with respective color bind to it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_RED_STRING \u003d \"RED\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_GREEN_STRING \u003d \"GREEN\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_BLUE_STRING \u003d \"BLUE\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_YELLOW_STRING \u003d \"YELLOW\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_PURPLE_STRING \u003d \"PURPLE\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_CYAN_STRING \u003d \"CYAN\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_WHITE_STRING \u003d \"WHITE\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static char escape \u003d 27;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Types of color."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public enum TagColor {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_WHITE(\"\\u001B[97m\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_RED(\"\\u001B[31m\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_GREEN(\"\\u001B[32m\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_YELLOW(\"\\u001B[33m\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_BLUE(\"\\u001B[34m\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_PURPLE(\"\\u001B[35m\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_CYAN(\"\\u001B[36m\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        COLOR_RESET(\"\\u001B[0m\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        private String color;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        TagColor(String color) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.color \u003d color;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        public String getColor() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return color;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagColor tagColor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    //private Attribute tagAttribute;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Overloaded constructor to take in the color of the tag."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName name of the tag."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagColor color of the tag."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Tag(String tagName, String tagColor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTagName(tagName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTagColor(tagColor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Getter function for the name of the tag. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Setter function for the name of the tag. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTagName(String tagName) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Getter function for the color of the tag. */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TagColor getTagColor() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagColor;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Setter function for the color of the tag. */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTagColor(TagColor tagColor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagColor \u003d tagColor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Setter function for the color of the tag. */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTagColor(String tagColor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        switch (tagColor.toUpperCase()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_RED_STRING:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_RED;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            //this.tagAttribute \u003d Attribute.RED_TEXT();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_GREEN_STRING:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_GREEN;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            //this.tagAttribute \u003d Attribute.GREEN_TEXT();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_BLUE_STRING:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_BLUE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            //this.tagAttribute \u003d Attribute.BLUE_TEXT();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_YELLOW_STRING:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_YELLOW;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            //this.tagAttribute \u003d Attribute.YELLOW_TEXT() ;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_PURPLE_STRING:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_PURPLE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            //this.tagAttribute \u003d Attribute.RED_TEXT();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_CYAN_STRING:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_CYAN;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            //this.tagAttribute \u003d Attribute.CYAN_TEXT();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_WHITE_STRING:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_WHITE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            //this.tagAttribute \u003d Attribute.WHITE_TEXT();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_RESET;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            //this.tagAttribute \u003d Attribute.CLEAR();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Overrides the parent class toString function to return the tag with its tag color."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return tagName with its respective tag color."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        //return colorize(\"[\" + tagName + \"]\", tagAttribute);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return tagColor.color + \"[\" + tagName + \"]\" + TagColor.COLOR_RESET.color;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 120,
      "R-Ramana": 4,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/notebook/TagManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a TagManager. Manages the tags for the notes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class TagManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String STRING_TAG_EMPTY \u003d \"There are no tags!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String STRING_TAG_LIST \u003d \"Here are the available tags:\" + Formatter.LS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Map\u003cTag, ArrayList\u003cNote\u003e\u003e tagMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TagManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Map\u003cTag, ArrayList\u003cNote\u003e\u003e getTagMap() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns the Tag that matches the tag name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName name of the Tag to check."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return the Tag if it exists, null otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Tag getTag(String tagName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tagMap.keySet()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (t.getTagName().equalsIgnoreCase(tagName)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a Tag with the provided Tag."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag provided Tag."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param overridesColor determine if the tag color needs to be override."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return true if new Tag is created, false otherwise."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public boolean createTag(Tag tag, boolean overridesColor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Check if there exist a tag with the same tag name."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Tag existingTag \u003d getTag(tag.getTagName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // If the tag does not exist, creates it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (existingTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagMap.put(tag, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (overridesColor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                existingTag.setTagColor(tag.getTagColor());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Handles creation of multiple tags and returns the result of each creation."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags List of tags to be created."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param createSuccessfulString String for successful creation of tag."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param createUnsuccessfulString String for unsuccessful creation of tag"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Result of all tag creation."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String createTag(ArrayList\u003cTag\u003e tags, String createSuccessfulString, String createUnsuccessfulString) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (createTag(t, true)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result \u003d result.concat(createSuccessfulString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result \u003d result.concat(createUnsuccessfulString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            result \u003d result.concat(getTag(t.getTagName()) + Formatter.LS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return result.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Tags a Note with the provided Tag."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param note Note to be tagged."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag Provided Tag."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void tagNote(Note note, Tag tag) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap.get(tag).add(note);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        note.getTags().add(tag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Removes a Tag from the Note."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param note Note to be untagged."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag Tag to be removed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void removeTag(Note note, Tag tag) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap.get(tag).remove(note);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        note.getTags().remove(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Deletes a Tag from the Map. Notes that have the Tag will be untagged."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag Tag to be deleted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return true if there exist the tag and is deleted, false otherwise."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public boolean deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Tag existingTag \u003d getTag(tag.getTagName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (existingTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Note n : tagMap.get(existingTag)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            n.getTags().remove(existingTag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap.remove(existingTag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Handles deletion of multiple tags and returns the result of each deletion."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags List of tags to be created."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param deleteSuccessfulString String for successful deletion of tag."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param deleteUnsuccessfulString String for unsuccessful deletion of tag."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Result of all tag creation."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String deleteTag(ArrayList\u003cTag\u003e tags, String deleteSuccessfulString, String deleteUnsuccessfulString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag existingTag \u003d getTag(t.getTagName());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (deleteTag(t)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result \u003d result.concat(deleteSuccessfulString + existingTag);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result \u003d result.concat(deleteUnsuccessfulString + t);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            result \u003d result.concat(Formatter.LS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return result.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Lists all the Tags in the map."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return all the Tags as string."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String listTags() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagList;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tagMap.isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return STRING_TAG_EMPTY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else  {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagList \u003d STRING_TAG_LIST;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tagMap.keySet()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagList \u003d tagList.concat(t.toString() + Formatter.LS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagList.trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Rebinds all the tags in the note to the existing tags in the database."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param note Note to have the tags rebind."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void rebindTags(Note note) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int numTagsToCheck \u003d note.getTags().size();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // loop through all the tags in notes"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (int i \u003d 0; i \u003c numTagsToCheck; ++i) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // always check against the tag of the first note"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag tag \u003d note.getTags().get(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // check if the tag exists in the database"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag existingTag \u003d getTag(tag.getTagName());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            note.getTags().remove(tag);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (existingTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // if the tag does not exist in the database, create the tag and tag to note"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                createTag(tag, false);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tagNote(note, tag);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else if (!note.getTags().contains(existingTag)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tagNote(note, existingTag);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Handles tagging and untagging of note with the given list of tags. If the note already has the tag, untags it,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * else tags the note. Returns the result of each tagging and untagging operation."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param note Note to be tagged or untagged."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags List of tags."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagNoteString String for tagging of note."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param untagNoteString String for untagging of note."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Result of all tagging and untagging operation."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String tagAndUntagNote(Note note, ArrayList\u003cTag\u003e tags, String tagNoteString, String untagNoteString) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Tries to get the tag from the map"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag existingTag \u003d getTag(t.getTagName());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // check if the note contains such tag"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (note.getTags().contains(existingTag)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                removeTag(note, existingTag);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result \u003d result.concat(untagNoteString + existingTag + Formatter.LS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // runs the create tag in case existing tag is null, if it is not null, updates the tag"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                createTag(t, false);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                existingTag \u003d getTag(t.getTagName());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tagNote(note, existingTag);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result \u003d result.concat(tagNoteString + existingTag + Formatter.LS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return result.trim();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 230
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/DailyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every day."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class DailyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of DailyEvent with a specified recurrence type and specified endRecurrence date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endRecurrence When the Event should stop re-occurring."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timePeriods Number of units of time before an event for a reminder."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timeUnits Units of time before an event for a reminder. (Day, Week)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public DailyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                      ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.DAILY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                timePeriods, timeUnits);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of DailyEvent with a specified recurrence type and default end time of recurrence (Year 3000)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timePeriods Number of units of time before an event for a reminder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timeUnits Units of time before an event for a reminder. (Day, Week)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public DailyEvent(String title, LocalDateTime dateTime, boolean isToRemind,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                      ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, RecurringEvent.DAILY_RECURRENCE_TYPE, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusDays(TIME_STEP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents an Event. Contains all the information of an Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class Event implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String REMINDER_DAY \u003d \"day\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String REMINDER_WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    // Can be combined into LocalDateTime"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Boolean isToRemind;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Boolean isRecurring;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates an Event object with its title, date and time provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of the event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date of the event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param time Time of the event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Event(String title, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isToRemind \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isRecurring \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates an Event object with its title, date, time, isToRemind and isRecurring provided."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of the event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date of the event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param time Time of the event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the event requires a reminder."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isRecurring Whether the event will re-occur."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDate date, LocalTime time, boolean isToRemind, boolean isRecurring) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(title, date, time);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isToRemind \u003d isToRemind;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isRecurring \u003d isRecurring;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Creates an Event object with its title, date, time, isToRemind, isRecurring as well as time before reminder and"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * time unit provided."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of the event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date of the event."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param time Time of the event."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether event is set to remind."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isRecurring Whether event is set to re-occur."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timePeriods Time periods to remind about this event before it occurs."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timeUnits Time units to remind about this event before it occurs."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDate date, LocalTime time, boolean isToRemind, boolean isRecurring,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                 ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, date, time);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.isToRemind \u003d isToRemind;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.isRecurring \u003d isRecurring;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assert timePeriods.size() \u003d\u003d timeUnits.size() : \"Something is wrong with the parser! Check it out.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (int i \u003d 0; i \u003c timePeriods.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            String timeUnit \u003d timeUnits.get(i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cInteger\u003e storedReminders \u003d reminderPeriods.get(timeUnit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (storedReminders \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                storedReminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            storedReminders.add(timePeriods.get(i));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Collections.sort(storedReminders);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            reminderPeriods.put(timeUnit, storedReminders);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDate date, LocalTime time, boolean isToRemind, boolean isRecurring,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                 HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, date, time, isToRemind, isRecurring);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.reminderPeriods \u003d reminderPeriods;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDateTime dateTime, boolean isToRemind, boolean isRecurring,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                  HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, dateTime.toLocalDate(), dateTime.toLocalTime(), isToRemind, isRecurring, reminderPeriods);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Creates an Event object with its title, dateTime, isToRemind and isRecurring provided. Used for event"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * constructing with user input. Has default reminder time of 1 day before event."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of event."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime LocalDateTime provided by user input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether event is set to remind."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isRecurring Whether event is set to re-occur."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDateTime dateTime, boolean isToRemind, boolean isRecurring) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, dateTime.toLocalDate(), dateTime.toLocalTime(), isToRemind, isRecurring);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Creates an Event object with its title, dateTime, isToRemind, isRecurring as well as time before reminder and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * the time unit provided. Used for event construction with user input."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of event."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime LocalDateTime provided by user input."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether event is set to remind."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isRecurring Whether event is set to re-occur."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timePeriods Time periods to remind about this event before it occurs."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timeUnits Time units to remind about this event before it occurs."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDateTime dateTime, boolean isToRemind, boolean isRecurring,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                 ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, dateTime.toLocalDate(), dateTime.toLocalTime(), isToRemind, isRecurring, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean getToRemind() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return isToRemind;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e getReminderPeriod() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return this.reminderPeriods;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean getRecurring() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return isRecurring;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Get all the reminder dates from that this Event would have."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return An ArrayList of Dates that reminders of this event should show."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cLocalDate\u003e getReminderDates() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cLocalDate\u003e dates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!isToRemind) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return dates;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (String unit : reminderPeriods.keySet()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cInteger\u003e timePeriodsInUnit \u003d reminderPeriods.get(unit);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate date \u003d this.date;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (Integer timePeriod : timePeriodsInUnit) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                switch (unit) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case REMINDER_DAY:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    date \u003d this.date.plusDays(-timePeriod);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case REMINDER_WEEK:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    date \u003d this.date.plusWeeks(-timePeriod);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                dates.add(date);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        dates.sort(LocalDate::compareTo);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dates;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Converts an Event to a format for a reminder."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Reduced String representation of an Event."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String toReminderString() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String titleString \u003d \"Event: \" + title;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String dateString \u003d \"Date: \" + date.toString() + \"\\tTime: \" + time.toString();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return titleString + Formatter.LS + dateString;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String titleString \u003d \"Event: \" + title;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String dateString \u003d \"Date: \" + date.toString() + \"\\tTime: \" + time.toString();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String remindString \u003d \"Reminder: \" + isToRemind;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String repeatingString \u003d \"Repeating: \" + isRecurring;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String lineSeparator \u003d Formatter.LS;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return titleString + lineSeparator + dateString + lineSeparator + remindString"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + lineSeparator + repeatingString;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public int compareTo(Event o) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        int comp \u003d date.compareTo(o.date);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (comp !\u003d 0) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return comp;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        comp \u003d time.compareTo(o.time);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (comp !\u003d 0) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return comp;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return title.compareTo(o.title);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 64,
      "brandonywl": 165,
      "Nazryl": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/MonthlyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every month."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class MonthlyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of MonthlyEvent with a specified recurrence type and specified endRecurrence date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endRecurrence When the Event should stop re-occurring."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timePeriods Number of units of time before an event for a reminder."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timeUnits Units of time before an event for a reminder. (Day, Week)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public MonthlyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.MONTHLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                timePeriods, timeUnits);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of MonthlyEvent with a specified recurrence type and default end time of recurrence (Year 3000)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timePeriods Number of units of time before an event for a reminder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timeUnits Units of time before an event for a reminder. (Day, Week)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public MonthlyEvent(String title, LocalDateTime dateTime, boolean isToRemind,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, RecurringEvent.MONTHLY_RECURRENCE_TYPE, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusMonths(TIME_STEP);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/RecurringEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public abstract class RecurringEvent extends Event {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private LocalDate endRecurrenceDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String recurrenceType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final LocalDate DEFAULT_END_RECURRENCE \u003d LocalDate.of(3000, 12, 31);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String DAILY_RECURRENCE_TYPE \u003d \"daily\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String WEEKLY_RECURRENCE_TYPE \u003d \"weekly\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String MONTHLY_RECURRENCE_TYPE \u003d \"monthly\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String YEARLY_RECURRENCE_TYPE \u003d \"yearly\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrenceDate,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                          String recurrenceType, ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, true, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (endRecurrenceDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceDate \u003d DEFAULT_END_RECURRENCE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.endRecurrenceDate \u003d endRecurrenceDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.recurrenceType \u003d recurrenceType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent(String title, LocalDateTime dateTime, boolean isToRemind, String recurrenceType,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                          ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, dateTime, isToRemind, DEFAULT_END_RECURRENCE, recurrenceType, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrenceDate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                          String recurrenceType, HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, true, reminderPeriods);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (endRecurrenceDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceDate \u003d DEFAULT_END_RECURRENCE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.endRecurrenceDate \u003d endRecurrenceDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.recurrenceType \u003d recurrenceType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent(String title, LocalDateTime dateTime, boolean isToRemind, String recurrenceType,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                          HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, dateTime, isToRemind, DEFAULT_END_RECURRENCE, recurrenceType, reminderPeriods);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Checks if the event should still re-occur at a specified date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to check."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Whether to re-occur or not."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean checkAfterEndRecurrence(LocalDate date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return (endRecurrenceDate.compareTo(date) \u003c 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Checks whether the current RecurringEvent object will re-occur between the start and end date (inclusive)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * and return an ArrayList that contains an event for all the times that it re-occurs."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start date of the time period to check (inclusive)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End date of the time period to check (inclusive)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of this event at different dates at a specified interval within the time period."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getRecurrences(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        while (startDate.compareTo(endDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (checkAfterEndRecurrence(startDate)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return eventSet;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (toReoccur(startDate)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                LocalDateTime dateTime \u003d LocalDateTime.of(startDate, getTime());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                Event event \u003d new Event(getTitle(), dateTime, getToRemind(), false, getReminderPeriod());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                eventSet.add(event);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            startDate \u003d startDate.plusDays(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventSet;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Check if the event is to reoccur on a specific date."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to check."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Whether it will reoccur"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean toReoccur(LocalDate date) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate eventDate \u003d getDate();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        while (eventDate.compareTo(date) \u003c 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            eventDate \u003d timeStep(eventDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventDate.equals(date);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String endRecurrenceString \u003d \"Until: \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!endRecurrenceDate.equals(DEFAULT_END_RECURRENCE)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceString +\u003d endRecurrenceDate.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceString +\u003d \"Forever\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return super.toString() + String.format(\" (%s)\", recurrenceType) + Formatter.LS + endRecurrenceString;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provides a time step of a specified date by one time unit and return it as a LocalDate object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to step forward"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Future date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public abstract LocalDate timeStep(LocalDate date);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 116
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/Reminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * A reminder class that holds the event to remind as well as the date to remind."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class Reminder implements Comparable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private LocalDate dateToRemind;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor for a Reminder. Includes what event to remind about as well as what date to remind on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param event Event to remind"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateToRemind Date to remind."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Reminder(Event event, LocalDate dateToRemind) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.dateToRemind \u003d dateToRemind;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate getDateToRemind() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dateToRemind;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Returns whether this reminder should be raised to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * If the date provided is equal the dateToRemind stored in the reminder, it returns true."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Whether the reminder should be raised."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean toRemind(LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dateToRemind.equals(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provides a way to check if the reminder should have already been reminded after that date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to check."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Whether the reminder should have already been raised."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean reminderDue(LocalDate date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dateToRemind.compareTo(date) \u003c\u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return event.toReminderString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public int compareTo(Reminder reminder) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dateToRemind.compareTo(reminder.dateToRemind);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (this \u003d\u003d object) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (object instanceof Reminder) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Reminder reminder \u003d ((Reminder) object);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return reminder.dateToRemind.equals(dateToRemind) \u0026\u0026 reminder.event.getTitle().equals(event.getTitle());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 69
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.util.DateTimeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a TimeTable object. Contains all the events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cEvent\u003e nonRecurringEvents;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cDailyEvent\u003e dailyEvents;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cWeeklyEvent\u003e weeklyEvents;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cMonthlyEvent\u003e monthlyEvents;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cYearlyEvent\u003e yearlyEvents;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a new list of events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Timetable() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        nonRecurringEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        dailyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        weeklyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        monthlyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        yearlyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a list of events from existing data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param events from existing data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Timetable(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event getEvent(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return events.get(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Getter for JUnit test."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Stored daily events."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cDailyEvent\u003e getDailyEvents() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dailyEvents;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setEvents(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Adds an event into the timetable."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param event to be added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!event.getRecurring()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            nonRecurringEvents.add(event);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (event instanceof DailyEvent) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                dailyEvents.add((DailyEvent) event);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else if (event instanceof WeeklyEvent) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                weeklyEvents.add((WeeklyEvent) event);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else if (event instanceof MonthlyEvent) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                monthlyEvents.add((MonthlyEvent) event);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else if (event instanceof YearlyEvent) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                yearlyEvents.add((YearlyEvent) event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Removes an event from the timetable."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param index Index to be removed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void deleteEvent(int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event \u003d events.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events.remove(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (event instanceof DailyEvent) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            dailyEvents.remove(event);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (event instanceof WeeklyEvent) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            weeklyEvents.remove(event);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (event instanceof MonthlyEvent) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            monthlyEvents.remove(event);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (event instanceof YearlyEvent) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            yearlyEvents.remove(event);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            nonRecurringEvents.remove(event);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets the timetable for a specified year. Includes multiple recurrent events."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param year Year to check for timetable"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return A HashMap that maps the name of the month to a HashMap that maps date to list of events that occurs on"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *      that day, sorted by starting time."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e getYearTimetable(int year) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        HashMap\u003cString, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e calendar \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 12; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate startDate \u003d LocalDate.of(year, i, 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate endDate \u003d startDate.withDayOfMonth(startDate.lengthOfMonth());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            calendar.putAll(getTimetable(startDate, endDate));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets the timetable for a specified month and year. Includes multiple recurrent events."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param year Year to check for timetable"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param month Month to check for timetable"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return A HashMap that maps the name of the month to a HashMap that maps date to list of events that occurs on"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *      that day, sorted by starting time."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e getMonthTimetable(int year, int month) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(year, month, 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.withDayOfMonth(startDate.lengthOfMonth());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return getTimetable(startDate, endDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets the timetable for a specified time period. Includes multiple recurrent events. Sorting does not work yet."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Date to start checking for events."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate Date to stop checking for events."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return A HashMap that maps the name of the month to a HashMap that maps date to list of events that occurs on"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *      that day, sorted by starting time."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e getTimetable(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Get an eventSet of all events occurring during the specified time period."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d getAllEvents(startDate, endDate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        HashMap\u003cString, HashMap\u003cInteger,ArrayList\u003cEvent\u003e\u003e\u003e calendar \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Map all events to their relevant date and month. Sort by startTime."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Event event : eventSet) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            String month \u003d DateTimeManager.getMonthName(event.getDate());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            int date \u003d event.getDate().getDayOfMonth();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            // Get a HashMap for the specified month. If it has not been initialized, initialize one."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e monthEvents \u003d calendar.get(month);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (monthEvents \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                monthEvents \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            // Get the ArrayList representing Events occurring on that date of the month."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            // If it has not been initialized, initialize one. Sorts the list after insertion."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cEvent\u003e dailyEvents \u003d monthEvents.get(date);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (dailyEvents \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                dailyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            dailyEvents.add(event);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            // Sorting doesn\u0027t work."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Collections.sort(dailyEvents);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            monthEvents.put(date, dailyEvents);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            calendar.put(month, monthEvents);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provides a method to get all events, including re-occuring events in an arraylist in a specified period."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start of time period."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End of time period."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of all events. Re-occurring events are initialized as a new event."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getAllEvents(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        eventSet.addAll(getNonRecurringEvents(startDate, endDate, nonRecurringEvents));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        eventSet.addAll(getAllRecurringEvents(startDate, endDate,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                dailyEvents, weeklyEvents, monthlyEvents, yearlyEvents));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventSet;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Given a set of events, check if they will occur during a time period specified by the start and end period."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start date of period to check whether the event will occur. Inclusive of the date."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End date to check whether the event will occur. Inclusive of the date."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param nonRecurringSet Set of non-recurring events."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of Events that occur between the specified time period."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cEvent\u003e getNonRecurringEvents(LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                                                   ArrayList\u003cEvent\u003e nonRecurringSet) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Event event : nonRecurringSet) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate eventDate \u003d event.getDate();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (eventDate.compareTo(startDate) \u003e\u003d 0 \u0026\u0026 eventDate.compareTo(endDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                eventSet.add(event);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventSet;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Given an ArrayList of events, get all events that will occur during the specified time period."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start date of the period to check for recurrence. Inclusive of the date."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End date of the period to check for recurrence. Inclusive of the date."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param events List of events that are recurrent."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return An ArrayList of Events of all events that will occur between the two specified time periods."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cEvent\u003e getRecurringEvents(LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                                                  ArrayList\u003c? extends RecurringEvent\u003e events) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (RecurringEvent event : events) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            eventList.addAll(event.getRecurrences(startDate, endDate));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets all instances of events that will reoccur between the specified time period. Provides a Varargs signature"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * of getRecurringEvents, thus simplifying getting all events in the timetable in a time period."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start of the time period. Inclusive."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End of the time period. Inclusive."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param eventsSet ArrayList of Events that should extend from RecurringEvent."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of Events that will occur during the time period. If recurring events are set, they will be"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *      in the arraylist as a Event, not as an extension of RecurringEvent."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    protected final ArrayList\u003cEvent\u003e getAllRecurringEvents(LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                                                  ArrayList\u003c? extends RecurringEvent\u003e... eventsSet) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (ArrayList\u003c? extends RecurringEvent\u003e events : eventsSet) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            eventList.addAll(getRecurringEvents(startDate, endDate, events));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Returns a PriorityQueue of Reminders from a set of events. PriorityQueue is sorted by their dates."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param setOfEvents Set of Events to search from."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return PriorityQueue of Reminder from all provided events."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public PriorityQueue\u003cReminder\u003e getEventSetReminder(ArrayList\u003cEvent\u003e setOfEvents) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        PriorityQueue\u003cReminder\u003e reminders \u003d new PriorityQueue\u003c\u003e(Reminder::compareTo);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Event event : setOfEvents) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (LocalDate reminderDate : event.getReminderDates()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                reminders.add(new Reminder(event, reminderDate));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * A method that gets all reminders that should go off today. It takes in events for the next 1 month and gets all"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * their reminders."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return An ArrayList that contains all the reminders to go off today."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cReminder\u003e getReminders() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // As reminders are set to maximum 1 week earlier,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // we play it safe by looking for all 1 events in a one month time period."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d today.plusMonths(1);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d getAllEvents(today, endDate);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cReminder\u003e todayReminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        PriorityQueue\u003cReminder\u003e reminders \u003d getEventSetReminder(eventSet);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        while (reminders.size() \u003e 0 \u0026\u0026 reminders.peek().reminderDue(today)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Reminder reminder \u003d reminders.poll();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            assert reminder !\u003d null;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (reminder.toRemind(today)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                todayReminders.add(reminder);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return todayReminders;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 47,
      "brandonywl": 239,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/WeeklyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every week."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class WeeklyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of WeeklyEvent with a specified recurrence type and specified endRecurrence date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endRecurrence When the Event should stop re-occurring."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timePeriods Number of units of time before an event for a reminder."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timeUnits Units of time before an event for a reminder. (Day, Week)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public WeeklyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                       ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.WEEKLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                timePeriods, timeUnits);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of WeeklyEvent with a specified recurrence type and default end time of recurrence (Year 3000)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timePeriods Number of units of time before an event for a reminder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timeUnits Units of time before an event for a reminder. (Day, Week)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public WeeklyEvent(String title, LocalDateTime dateTime, boolean isToRemind,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                       ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, RecurringEvent.WEEKLY_RECURRENCE_TYPE, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusWeeks(TIME_STEP);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/YearlyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every year."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class YearlyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of YearlyEvent with a specified recurrence type and specified endRecurrence date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endRecurrence When the Event should stop re-occurring."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timePeriods Number of units of time before an event for a reminder."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timeUnits Units of time before an event for a reminder. (Day, Week)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public YearlyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                       ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.YEARLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                timePeriods, timeUnits);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of YearlyEvent with a specified recurrence type and default end time of recurrence (Year 3000)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timePeriods Number of units of time before an event for a reminder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param timeUnits Units of time before an event for a reminder. (Day, Week)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public YearlyEvent(String title, LocalDateTime dateTime, boolean isToRemind,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                       ArrayList\u003cInteger\u003e timePeriods, ArrayList\u003cString\u003e timeUnits) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, DEFAULT_END_RECURRENCE, RecurringEvent.YEARLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                timePeriods, timeUnits);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusYears(TIME_STEP);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 48
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a StorageManager. Manages the saving and loading of task list data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Default folders directory. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String FOLDER_DIR \u003d \"data\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String NOTES_DIR \u003d \"/notes\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Default file path. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String NOTEBOOK_FILE_PATH \u003d \"notebook.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String TIMETABLE_FILE_PATH \u003d \"timetable.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String DELIMITER \u003d \"|\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Saves all the Notes in the Notebook to the storage file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notebook The Notebook containing all the notes to be saved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static void saveNotebook(Notebook notebook) throws SystemException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        createDirectory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (int i \u003d 0; i \u003c notebook.getSize();i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                saveNoteContent(notebook.getNote(i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                saveNoteDetails(notebook.getNote(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                throw new SystemException(SystemException.ExceptionType.EXCEPTION_FILE_CREATION_ERROR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Saves all the Events in the Timetable to the storage file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param timetable The Timetable containing all the events to be saved."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void saveTimetable(Timetable timetable){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Saves all the Notes in the Notebook and the Events in the Timetable to the storage file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notebook The Notebook containing all the notes to be saved."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param timetable The Timetable containing all the events to be saved."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void saveAll(Notebook notebook, Timetable timetable)throws SystemException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        saveNotebook(notebook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        saveTimetable(timetable);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Loads the Notebook and Timetable from the storage file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notebook The Notebook to be loaded into."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param timeTable The Timetable to be loaded into."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void loadAll(Notebook notebook, Timetable timeTable){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Saves an individual note to the storage file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param note The note to be saved"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static void saveNoteContent(Note note) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path \u003d FOLDER_DIR + NOTES_DIR + \"/\" + note.getTitle() + \".txt\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        createFile(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        FileWriter fwAppend \u003d new FileWriter(path, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.write(note.getContent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Saves the details of notes such as title, tags and pinned status to the notebook text file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param note Note of which details are to be saved to the file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static void saveNoteDetails(Note note) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path \u003d FOLDER_DIR + \"/\" + NOTEBOOK_FILE_PATH;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        createFile(path);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        FileWriter fwAppend \u003d new FileWriter(path, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String noteDetails \u003d note.getTitle()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                            + DELIMITER"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                            + note.getPinned()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                            + DELIMITER"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                            + note.getTags()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                            + System.lineSeparator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.write(noteDetails);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Creates a directory path data/notes. In case both data and /notes do not exist."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static void createDirectory() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String dataPath \u003d FOLDER_DIR;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String notePath \u003d FOLDER_DIR + NOTES_DIR;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File dataDirectory \u003d new File(dataPath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File noteDirectory \u003d new File(notePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!dataDirectory.exists()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            dataDirectory.mkdir();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!noteDirectory.exists()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            noteDirectory.mkdir();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Checks if a file exists. If it does not, creates file with the input path"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param path path of file to be created"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @throws IOException thrown when directory does not exist. Unable to create file"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static void createFile(String path) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 52,
      "prachi2023": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/InterfaceManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a InterfaceManager. Manages the input and output of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class InterfaceManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public InterfaceManager() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public InterfaceManager(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns the command based on user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return user input command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getUserCommandInput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Prints a message with a default format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param message Message to be printed out."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void prints(String message) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/DateTimeManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a DateTimeManager. Manages the date and time info."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class DateTimeManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Parses a user input into the relevant datetime format specified in the manager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param input User input to be parsed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return DateTime representation of the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException Occurs when the format of the input is wrong and in the specified format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static LocalDateTime dateTimeParser(String input) throws SystemException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            dateTime \u003d LocalDateTime.parse(input, FORMATTER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(SystemException.ExceptionType.EXCEPTION_INVALID_TIMING_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static String getMonthName(LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.getMonth().name();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 9,
      "brandonywl": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/Formatter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String ROW_SPLIT \u003d \"-\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLUMN_SPLIT \u003d \"|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final int MAX_CONTENT_LENGTH \u003d 50;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String formatNotebook(Notebook notebook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String formattedString \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String formatNote(Note note) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String formattedString \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String formatTags(ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String formattedString \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String formatTimetable(Timetable timetable) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String formattedString \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String formatEvent(Event event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String formattedString \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String formatString(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String formattedString \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static String createsHeaderSplit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String formattedString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        formattedString \u003d ROW_SPLIT.repeat(MAX_CONTENT_LENGTH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 54
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.command.AddNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.CreateTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.command.DeleteNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.DeleteEventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.DeleteTagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.command.EditNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.command.EditEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.ListNoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.command.ListEventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.ListTagCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.PinCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.RemindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.TagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.ViewNoteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.RecurringEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.DailyEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.WeeklyEvent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.MonthlyEvent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.YearlyEvent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELETE_LINE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_STOP_RECURRING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.STRING_NEW_LINE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_PIN;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.STRING_SPLIT_DELIMITER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.STRING_SORT_ASCENDING;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.STRING_SORT_DESCENDING;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.TIMING_SPLIT_DELIMITER;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final int CONTAINS_TAG_COLOR_INFO \u003d 2;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final int NULL_INDEX \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Parses userInput string into a Command to be executed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userInput Original string of the userInput."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] userCommandAndArguments \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String commandString \u003d userCommandAndArguments[0];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String userMessage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userMessage \u003d userCommandAndArguments[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userMessage \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            switch (commandString.toLowerCase()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            case AddNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return prepareAddNote(userMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return prepareAddEvent(userMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ListNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return prepareListNote(userMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ListEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return prepareListEvent(userMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ViewNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return prepareViewNote(userMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // return prepareViewNote(userMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case EditNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // return prepareEditNote(userMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // return prepareEditEvent(userMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            case DeleteNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return prepareDeleteNote(userMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return prepareDeleteEvent(userMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return prepareFind(userMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case PinCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return preparePin(userMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case CreateTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return prepareCreateOrDeleteTag(userMessage, true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case DeleteTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return prepareCreateOrDeleteTag(userMessage, false);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ListTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ListTagCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return prepareTag(userMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case RemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return new RemindCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new IncorrectCommand(exception.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Splits the userMessage into the respective info by the delimiter."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userMessage Original string of the user message."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Split strings."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws NullPointerException when the userMessage is empty."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cString[]\u003e splitInfoDetails(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String[] splitMessage \u003d userMessage.split(PREFIX_DELIMITER);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitMessageContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Splits the prefix and the remaining content"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String s : splitMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                splitMessageContent.add(s.split(STRING_SPLIT_DELIMITER, 2));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Remove the first element as it is always empty"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            splitMessageContent.remove(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return splitMessageContent;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_MESSAGE_AFTER_COMMAND);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Checks if an input string if blank. If it is, throw the provided system exception. If it is not, return that"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * string trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param input Input to be checked."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param exceptionType ExceptionType to be thrown."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Trimmed non-blank string."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException Occurs when input is blank."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String checkBlank(String input, SystemException.ExceptionType exceptionType) throws SystemException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(exceptionType);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return input.trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates and returns a Tag object based on the info provided."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagMessage info of the Tag. Contains tag name and may contain tag color."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return new Tag object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException for missing tag name."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag handleTagPrefix(String[] tagMessage) throws SystemException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagName;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagColor \u003d \"\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagsInfo;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Ensures that the message is not blank."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagsInfo \u003d checkBlank(tagMessage[1], ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Split into the tag name and tag color."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] tagInfo \u003d tagsInfo.split(STRING_SPLIT_DELIMITER, 2);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagName \u003d checkBlank(tagInfo[0], ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tagInfo.length \u003d\u003d CONTAINS_TAG_COLOR_INFO) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagColor \u003d tagInfo[1].trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return new Tag(tagName, tagColor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Prepare userInput into Note before adding into Notebook."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param userMessage Original string user inputs."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Result of the add note command."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @throws SystemException if an error occurs."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareAddNote(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note note;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        boolean isPinned \u003d false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        boolean isInputSuccess \u003d false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Get prefix"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_TAG:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_PIN:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isPinned \u003d Boolean.parseBoolean(checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_PIN));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            title \u003d checkBlank(title, ExceptionType.EXCEPTION_MISSING_TITLE_PREFIX);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Get Content"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                System.out.println(\"Enter Note:\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    content \u003d inputContent();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isInputSuccess \u003d true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    System.out.println(ExceptionType.EXCEPTION_INVALID_END_INPUT);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } while (!isInputSuccess);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Add to note"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            note \u003d tags.isEmpty() ? new Note(title, content, isPinned) : new Note(title, content, isPinned, tags);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return new AddNoteCommand(note);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Takes a user string designated to add an event and prepares it by extracting relevant information from the"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * provided required and optional tags. It requires a title tag and a timing tag (/t and /timing). Other tags allow"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * for it to be recurring and to set reminders of the event."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Takes the format \"add-e /t {Title} /timing {YYYY-MM-DD HH:MM} [/rem [How much earlier to remind]]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * [/rec {How often to re-occur}] [/stop {YYYY-MM-DD HH:MM}]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userMessage User input message."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Returns an AddEventCommand to be executed by Duke."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException Information provided by the tags are blank, wrong or do not have a default value."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Command prepareAddEvent(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // add-e eventTitle /t timing /rec occurrence /rem time before (default same day)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime dateTime \u003d null;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime recurringEndTime \u003d null;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        boolean toRemind \u003d false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        boolean isRecurring \u003d false;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String recurringType \u003d \"\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cInteger\u003e timePeriods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cString\u003e timeUnits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                ExceptionType exception;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TITLE;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_TIMING:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TIMING;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    String timingString \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    dateTime \u003d DateTimeManager.dateTimeParser(timingString);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_REMIND:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    toRemind \u003d true;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (infoDetails.length \u003d\u003d 1 || infoDetails[1].isBlank()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        timeUnits.add(Event.REMINDER_DAY);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        timePeriods.add(1);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    String[] reminderDetails \u003d infoDetails[1].split(STRING_SPLIT_DELIMITER);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    for (String reminderDetail : reminderDetails) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        String[] timeStrings \u003d reminderDetail.split(TIMING_SPLIT_DELIMITER);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        if (timeStrings.length !\u003d 2) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            throw new SystemException(ExceptionType.EXCEPTION_INVALID_REMINDER_FORMAT);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        int timePeriod;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        String timeUnit;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            timePeriod \u003d Integer.parseInt(timeStrings[0]);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            timeUnit \u003d timeStrings[1];"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                            if ((!timeUnit.equalsIgnoreCase(Event.REMINDER_DAY)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                                    \u0026\u0026 !timeUnit.equalsIgnoreCase(Event.REMINDER_WEEK)) || timePeriod \u003c 1) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                                throw new SystemException(ExceptionType.EXCEPTION_INVALID_REMINDER_FORMAT);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            exception \u003d ExceptionType.EXCEPTION_EARLY_REMINDER;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                            if (timeUnit.equalsIgnoreCase(Event.REMINDER_WEEK) \u0026\u0026 timePeriod \u003e 1) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                                throw new SystemException(exception);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                            } else if (timeUnit.equalsIgnoreCase(Event.REMINDER_DAY) \u0026\u0026 timePeriod \u003e 7) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                                throw new SystemException(exception);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        } catch (NumberFormatException exceptionNumFormat) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            throw new SystemException(ExceptionType.EXCEPTION_INVALID_REMINDER_FORMAT);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        timeUnits.add(timeUnit);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        timePeriods.add(timePeriod);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_RECURRING:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    isRecurring \u003d true;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_RECURRING_TYPE;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        recurringType \u003d checkBlank(infoDetails[1], exception).toLowerCase();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        recurringType \u003d RecurringEvent.DAILY_RECURRENCE_TYPE;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_STOP_RECURRING:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_RECURRING_END_TIME;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    String endTimingString \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    recurringEndTime \u003d DateTimeManager.dateTimeParser(endTimingString);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    throw new SystemException(SystemException.ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            title \u003d checkBlank(title, ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(SystemException.ExceptionType.EXCEPTION_MISSING_TIMING);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (isRecurring) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate date \u003d (recurringEndTime !\u003d null) ? recurringEndTime.toLocalDate() : null;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            switch (recurringType) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.DAILY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new DailyEvent(title, dateTime, toRemind, date, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.WEEKLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new WeeklyEvent(title, dateTime, toRemind, date, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.MONTHLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new MonthlyEvent(title, dateTime, toRemind, date, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.YEARLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new YearlyEvent(title, dateTime, toRemind, date, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_INVALID_RECURRING_TYPE);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            event \u003d new Event(title, dateTime, toRemind, false, timePeriods, timeUnits);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Used for input of note content and processing the input into a readable data."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return A string of converted content input."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @throws StringIndexOutOfBoundsException if an error occurs."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String inputContent() throws StringIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        StringBuilder commandInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Type note"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            commandInput.append(input.nextLine());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Add next line when user press enter"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (!commandInput.toString().equalsIgnoreCase(PREFIX_DELIMITER + PREFIX_END)) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                commandInput.append(STRING_NEW_LINE);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // \"/del\" Delete previous line if there user makes mistakes"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (commandInput.toString().contains(PREFIX_DELIMITER + PREFIX_DELETE_LINE)) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                deleteLine(commandInput, STRING_NEW_LINE + PREFIX_DELIMITER + PREFIX_DELETE_LINE + STRING_NEW_LINE, 0);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                deleteLine(commandInput, STRING_NEW_LINE, 1);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } while (!commandInput.toString().contains(PREFIX_DELIMITER + PREFIX_END)); // \"/end\" to end input note"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Delete \"/end\" command when user ends the edit"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        deleteLine(commandInput, STRING_NEW_LINE + PREFIX_DELIMITER + PREFIX_END + STRING_NEW_LINE, 0);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return commandInput.toString();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Delete the last line for mistakes made in inputContent()."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param commandInput Original string of the note content."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param characters String of character to be removed."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param noOfChar Number of character. 0 to remove new line, 1 to resume typing on the same line."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void deleteLine(StringBuilder commandInput, String characters, int noOfChar) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        int lastChar \u003d commandInput.lastIndexOf(characters) + noOfChar;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        commandInput.delete(lastChar, commandInput.length());"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Prepare userInput into a int before deletion."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param userMessage Original string user inputs."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Result of the delete note command."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @throws SystemException if an error occurs."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareDeleteNote(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String prefix;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        boolean isIndex \u003d false;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Get prefix"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isIndex \u003d true;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    index \u003d Integer.parseInt(checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_INDEX));"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    return new DeleteNoteCommand(index - 1);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    return new DeleteNoteCommand(title);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (isIndex) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INPUT_FORMAT);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Ensures that the user does not leave input blank after entering the find command word."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param userMessage user\u0027s input of the keyword."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return new FindCommand Command."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @throws SystemException for missing keyword."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareFind(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Logger loggerFind \u003d Logger.getLogger(\"ParserPrepareFind\");"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        setupLogger(loggerFind, \"FindCommandParser.log\");"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userMessage \u003d checkBlank(userMessage, ExceptionType.EXCEPTION_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            loggerFind.log(Level.INFO, \"If no null pointer, keyword is trimmed.\");"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            loggerFind.log(Level.INFO, \"Null pointer exception caught.\");"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        loggerFind.log(Level.INFO, \"Will execute FindCommand\");"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return new FindCommand(userMessage);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Returns a ListNote Command."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * ListNoteCommand is overloaded, so depending on the user input i.e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * list-n /tag TAG up/down"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * tags and up/down are optional parameters for users to input"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * up/down is to sort the list alphabetically either A-Z or Z-A"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param userMessage user\u0027s input of the keyword."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return new ListNoteCommand Command."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareListNote(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // If no optional parameters, return default display of list note"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (userMessage \u003d\u003d null) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagName;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String sort;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Boolean isAscending \u003d null;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e tagsName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        boolean isTag \u003d false;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                ExceptionType exception;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                case PREFIX_TAG:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    isTag \u003d true;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TAG;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tagName \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tagsName.add(tagName);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                case PREFIX_SORT:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    isTag \u003d false;"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_SORT;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    sort \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    if (sort.equalsIgnoreCase(STRING_SORT_ASCENDING)) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        isAscending \u003d true;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    } else if (sort.equalsIgnoreCase(STRING_SORT_DESCENDING)) {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        isAscending \u003d false;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_SORT_TYPE);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (isTag) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_SORT);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // No optional parameters case as it is already accounted"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Minimally if no tag, will have up/down and vice versa"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tagsName.isEmpty()) {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return new ListNoteCommand(isAscending);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (isAscending \u003d\u003d null) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ListNoteCommand(tagsName);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ListNoteCommand(isAscending, tagsName);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Command prepareListEvent(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (userMessage \u003d\u003d null) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new ListEventCommand();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfoDetails \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            String details \u003d \"\";"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            int year;"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            int month;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (splitInfoDetails.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TIMING_PREFIX);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (String[] infoDetails : splitInfoDetails) {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (PREFIX_TIMING.equalsIgnoreCase(prefix)) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    ExceptionType exception \u003d ExceptionType.EXCEPTION_INVALID_LIST_TIMING_FORMAT;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    details \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                String[] timings \u003d details.split(TIMING_SPLIT_DELIMITER);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (timings.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    year \u003d Integer.parseInt(timings[0]);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (year \u003c\u003d 1000 || year \u003e 3000) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_SEARCH_DATE_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        return new ListEventCommand(year);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    year \u003d Integer.parseInt(timings[0]);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    month \u003d Integer.parseInt(timings[1]);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (year \u003c\u003d ListEventCommand.SMALLEST_YEAR || year \u003e\u003d ListEventCommand.LARGEST_YEAR"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        || month \u003c\u003d ListEventCommand.SMALLEST_MONTH || month \u003e\u003d ListEventCommand.LARGEST_MONTH) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_SEARCH_DATE_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_INVALID_LIST_TIMING_FORMAT);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return new ListEventCommand(year, month);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Command prepareViewNote(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        boolean isTitle \u003d false;"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                ExceptionType exception;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    isTitle \u003d true;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TITLE;"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1],exception);"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return new ViewNoteCommand(title);"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    isTitle \u003d false;"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_INDEX;"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    index \u003d Integer.parseInt(checkBlank(infoDetails[1], exception));"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    return new ViewNoteCommand(index - 1);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (isTitle) {"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        throw new SystemException(ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Parses the variables in userMessage to a form that is used in DeleteEventCommand."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userMessage User Input without the action word."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Returns a DeleteEventCommand to be executed by Duke."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException When the index is not numeric (e.g. index \u003d 1%s)."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Command prepareDeleteEvent(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            index \u003d Integer.parseInt(checkBlank(userMessage, ExceptionType.EXCEPTION_MISSING_INDEX));"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Convert from human-readable index to index in array."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new DeleteEventCommand(index - 1);"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareEditNote(String userMessage) {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "       return new EditCommand(index, note);"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareEditEvent(String userMessage) {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "       return new EditCommand(index, event);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    */"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Command preparePin(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        boolean isTitle \u003d false;"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                ExceptionType exception;"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    isTitle \u003d true;"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TITLE;"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return new PinCommand(title);"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    isTitle \u003d false;"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_INDEX;"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    index \u003d Integer.parseInt(checkBlank(infoDetails[1], exception));"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return new PinCommand(index - 1);"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (isTitle) {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        throw new SystemException(ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns a CreateTagCommand or a DeleteTagCommand based on the user message."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userMessage Original string of the user message."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isCreate determines the type of command (CreateTagCommand or DeleteTagCommand) to return."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return either a new CreateTagCommand or DeleteTagCommand."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException for missing tag prefix or tag name."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareCreateOrDeleteTag(String userMessage, boolean isCreate) throws SystemException {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String prefix \u003d infoDetails[0];"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (prefix.equalsIgnoreCase(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Ensures that there is at least 1 tag to be created or deleted."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG_PREFIX);"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (isCreate) {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new CreateTagCommand(tags);"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new DeleteTagCommand(tags);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns a TagCommand to tag a note."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userMessage Original string of the user message."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return a new TagCommand."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException for invalid index input, missing tag prefix or tag name."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareTag(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int index \u003d NULL_INDEX;"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                case PREFIX_TAG:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    ExceptionType exception \u003d ExceptionType.EXCEPTION_MISSING_INDEX;"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    index \u003d Integer.parseInt(checkBlank(infoDetails[1].trim(), exception));"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG_PREFIX);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return new TagCommand(index - 1, tags);"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Set Up method for logging"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Takes in a Logger variable to ensure that separates loggers can be used"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * for the respective methods."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Sets up what to be printed to the console (only logs that are severe)"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Sets up what to be printed to the file (logs that are of Level.INFO and above)"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param logger A Logger variable to be used"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param logFileName Name to be given for .log file."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public void setupLogger(Logger logger, String logFileName) {"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        logger.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        consoleHandler.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(logFileName);"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger not working.\", error);"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareRemind(String userMessage) {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "       return new RemindCommand(index, isToRemind);"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    */"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 358,
      "R-Ramana": 117,
      "brandonywl": 199,
      "prachi2023": 49,
      "Nazryl": 129
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/PrefixSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class PrefixSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Prefix definitions. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_DELIMITER \u003d \"/\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Shared prefix. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_TITLE \u003d \"t\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_INDEX \u003d \"i\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Note related prefix. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_TAG \u003d \"tag\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_PIN \u003d \"pin\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_CONTENT \u003d \"c\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_LINE \u003d \"ln\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_SORT \u003d \"sort\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Event related prefix. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_TIMING \u003d \"timing\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_RECURRING \u003d \"repeat\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_REMIND \u003d \"remind\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_STOP_RECURRING \u003d \"stop\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_DATETIME \u003d \"d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String STRING_SPLIT_DELIMITER \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String STRING_SORT_ASCENDING \u003d \"up\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String STRING_SORT_DESCENDING \u003d \"down\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String SUFFIX_INDEX \u003d \". \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String TIMING_SPLIT_DELIMITER \u003d \"-\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Note content related prefix. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String STRING_NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_END \u003d \"end\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_DELETE_LINE \u003d \"del\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 20,
      "brandonywl": 5,
      "Nazryl": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.DailyEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Driver class of AddEventCommandTest to ensure that adding an event to a timetable is correct. Variables point to the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * same object in memory."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class AddEventCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cString\u003e TEST_TIME_UNITS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            \u003d new ArrayList\u003c\u003e(List.of(Event.REMINDER_DAY, Event.REMINDER_DAY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final Event event \u003d new DailyEvent(TEST_TITLE, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final Timetable TIMETABLE \u003d new Timetable();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private AddEventCommand command \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Test adding an event to an empty timetable and check if it is referencing the same Event in the heap."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void execute_singleEvent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        command.setData(null, TIMETABLE, null, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(command.timetable.getEvent(0) \u003d\u003d (event));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 44
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.notebook.TagManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "class AddNoteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Asserts that the note can be added successfully."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void addCommand_emptyNotebook_notebookContainsPerson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Notebook notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        TagManager tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note note \u003d new Note(\"Java OOP\", \"Encapsulation\\nAbstraction\", true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        AddNoteCommand command \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            command \u003d new AddNoteCommand(note);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cNote\u003e checkBook \u003d notebook.getNotes();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertTrue(checkBook.contains(note));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(1, checkBook.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertFalse(result.equals(AddNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(AddNoteCommand.COMMAND_SUCCESSFUL_MESSAGE + note.getTitle(), result);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Asserts that the note cannot be added when the note"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * contains the same title."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void addCommand_notebookAlreadyContainsTitle_notebookUnmodified() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Notebook notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        TagManager tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note note \u003d new Note(\"Java OOP\", \"Encapsulation\\nAbstraction\", true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        notebook.addNote(note);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        AddNoteCommand command \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            command \u003d new AddNoteCommand(note);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertFalse(result.contains(note.getTitle()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(AddNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE, result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cNote\u003e checkBook \u003d notebook.getNotes();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertTrue(checkBook.contains(note));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(1, checkBook.size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 8,
      "Nazryl": 67
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/CreateTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.TagManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.command.CreateTagCommand.COMMAND_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.command.CreateTagCommand.COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class CreateTagCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRed;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagGreen;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagBlue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRedToYellow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagGreenToPurple;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRed \u003d new Tag(\"Red\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagGreen \u003d new Tag(\"Green\", Tag.COLOR_GREEN_STRING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagBlue  \u003d new Tag(\"Blue\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRedToYellow \u003d new Tag(\"Red\", Tag.COLOR_YELLOW_STRING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagGreenToPurple \u003d new Tag(\"Green\", Tag.COLOR_PURPLE_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void createTagCommand_createNonExistingTag_createsTag() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(COMMAND_SUCCESSFUL_MESSAGE + tagRed + Formatter.LS"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + COMMAND_SUCCESSFUL_MESSAGE + tagGreen + Formatter.LS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + COMMAND_SUCCESSFUL_MESSAGE + tagBlue, result);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagRed));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagGreen));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagBlue));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void createTagCommand_CreateExistingTag_updatesTag() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedToYellow);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreenToPurple);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(COMMAND_UNSUCCESSFUL_MESSAGE + tagRedToYellow + Formatter.LS"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + COMMAND_UNSUCCESSFUL_MESSAGE + tagGreenToPurple, result);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagRed));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagGreen));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagBlue));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTag(tagRedToYellow.getTagName()), tagRed);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTag(tagGreenToPurple.getTagName()), tagGreen);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void createTagCommand_createNonExistingAndExistingTag_createsTagAndUpdatesTag() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagRed));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagGreen));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(tagManager.getTagMap().containsKey(tagBlue));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedToYellow);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreenToPurple);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(COMMAND_UNSUCCESSFUL_MESSAGE + tagRedToYellow + Formatter.LS"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + COMMAND_UNSUCCESSFUL_MESSAGE + tagGreenToPurple + Formatter.LS"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + COMMAND_SUCCESSFUL_MESSAGE + tagBlue, result);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagRed));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagGreen));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagBlue));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTag(tagRedToYellow.getTagName()), tagRed);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTag(tagGreenToPurple.getTagName()), tagGreen);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 3);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String getCommandExecutionString(TagManager tagManager, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        CreateTagCommand createTagCommand \u003d new CreateTagCommand(tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        createTagCommand.setData(null, null, tagManager, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return createTagCommand.execute();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 117
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeleteNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.notebook.TagManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "class DeleteNoteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Notebook deletedNotebook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Notebook expectedNotebook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Notebook notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private TagManager tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note javaNote \u003d new Note(\"Java OOP\", \"Encapsulation\\nAbstraction\", true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note cppNote \u003d new Note(\"C++ Standard Libraries\", \"Core library\\nStandard library\", false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        AddNoteCommand command \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            command \u003d new AddNoteCommand(javaNote);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        deletedNotebook \u003d notebook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            command \u003d new AddNoteCommand(cppNote);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        expectedNotebook \u003d notebook;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Delete notes by index and String title of the note."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void execute_validIndex_personIsDeleted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertDeletionSuccessfulInteger(1, notebook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertDeletionSuccessfulString(\"java\", notebook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Asserts that the note at the specified index can be deleted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * The Notebook passed in will not be modified."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param targetVisibleIndex of the item to be deleted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook contains list of notes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private void assertDeletionSuccessfulInteger(int targetVisibleIndex, Notebook notebook) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String deleteTarget \u003d notebook.getNotes().get(targetVisibleIndex).getTitle();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String expectedMessage \u003d DeleteNoteCommand.COMMAND_SUCCESSFUL_MESSAGE + deleteTarget;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        DeleteNoteCommand command \u003d createDeleteCommand(targetVisibleIndex, notebook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(expectedMessage, result);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(deletedNotebook.getNotes(), notebook.getNotes());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Asserts that the note at can be deleted with the note title."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * The Notebook passed in will not be modified."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param targetString of the item to be deleted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook contains list of notes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private void assertDeletionSuccessfulString(String targetString, Notebook notebook) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cNote\u003e deletedListTitle \u003d (ArrayList\u003cNote\u003e) notebook.getNotes().stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                .filter((s) -\u003e s.getTitle().toLowerCase().contains(targetString.toLowerCase()))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String deleteTarget \u003d deletedListTitle.get(0).getTitle();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String expectedMessage \u003d DeleteNoteCommand.COMMAND_SUCCESSFUL_MESSAGE + deleteTarget;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        DeleteNoteCommand command \u003d createDeleteCommand(targetString, notebook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(expectedMessage, result);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(deletedNotebook.getNotes(), notebook.getNotes());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void execute_emptyAddressBook_returnsPersonNotFoundMessage() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertDeletionFailsDueToNoSuchPersonInteger(2, notebook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertDeletionFailsDueToNoSuchPersonString(\"ZZZ\", notebook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Creates a new delete command using index to delete."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param targetVisibleIndex of the item to be deleted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook contains list of notes."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private DeleteNoteCommand createDeleteCommand(int targetVisibleIndex, Notebook notebook) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        DeleteNoteCommand command \u003d new DeleteNoteCommand(targetVisibleIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Creates a new delete command using String to delete."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param targetVisibleString of the item to be deleted."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook contains list of notes."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private DeleteNoteCommand createDeleteCommand(String targetVisibleString, Notebook notebook) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        DeleteNoteCommand command \u003d new DeleteNoteCommand(targetVisibleString);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Asserts that the note at the specified index cannot be deleted"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * due to note not existing in the notebook."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * The Notebook passed in will not be modified."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param visibleIndex of the item to be deleted."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook contains list of notes."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private void assertDeletionFailsDueToNoSuchPersonInteger(int visibleIndex, Notebook notebook) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        DeleteNoteCommand command \u003d createDeleteCommand(visibleIndex, notebook);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(DeleteNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE, result);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(expectedNotebook.getNotes(), notebook.getNotes());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Asserts that the note at the specified index cannot be deleted"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * due to note not existing in the notebook."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * The Notebook passed in will not be modified."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param targetVisibleString of the item to be deleted."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook contains list of notes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private void assertDeletionFailsDueToNoSuchPersonString(String targetVisibleString, Notebook notebook) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        DeleteNoteCommand command \u003d createDeleteCommand(targetVisibleString, notebook);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(DeleteNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE, result);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(expectedNotebook.getNotes(), notebook.getNotes());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 8,
      "Nazryl": 157
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeleteTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.TagManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.command.DeleteTagCommand.COMMAND_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.command.DeleteTagCommand.COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class DeleteTagCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRed;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagGreen;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagBlue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRedRef;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagGreenRef;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note defaultNote;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRed \u003d new Tag(\"Red\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagGreen \u003d new Tag(\"Green\", Tag.COLOR_GREEN_STRING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagBlue  \u003d new Tag(\"Blue\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRedRef \u003d new Tag(\"Red\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagGreenRef \u003d new Tag(\"Green\", Tag.COLOR_GREEN_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultNote \u003d new Note(\"Default\", \"Default\", false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void deleteTagCommand_deleteNonExistingTag_returnDefaultMessage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(COMMAND_UNSUCCESSFUL_MESSAGE + tagRed + Formatter.LS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + COMMAND_UNSUCCESSFUL_MESSAGE + tagGreen + Formatter.LS"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + COMMAND_UNSUCCESSFUL_MESSAGE + tagBlue, result);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void deleteTagCommand_deleteExistingTag_deletesTag() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.createTag(tagRed, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.createTag(tagGreen, true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultNote.setTags(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(defaultNote);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedRef);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreenRef);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Ensures the note is tagged properly"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultNote.getTags().size(), 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultNote.getTags().contains(tagRed));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultNote.getTags().contains(tagGreen));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().get(tagRed).contains(defaultNote));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().get(tagGreen).contains(defaultNote));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(COMMAND_SUCCESSFUL_MESSAGE + tagRed + Formatter.LS"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + COMMAND_SUCCESSFUL_MESSAGE + tagGreen, result);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultNote.getTags().size(), 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void deleteTagCommand_deleteNonExistingAndExistingTag_deletesTagAndReturnDefaultMessage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.createTag(tagRed, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.createTag(tagGreen, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultNote.setTags(tags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(defaultNote);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedRef);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreenRef);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Ensures the note is tagged properly"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultNote.getTags().size(), 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultNote.getTags().contains(tagRed));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultNote.getTags().contains(tagGreen));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().get(tagRed).contains(defaultNote));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().get(tagGreen).contains(defaultNote));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(COMMAND_SUCCESSFUL_MESSAGE + tagRed + Formatter.LS"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + COMMAND_SUCCESSFUL_MESSAGE + tagGreen + Formatter.LS"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + COMMAND_UNSUCCESSFUL_MESSAGE + tagBlue, result);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultNote.getTags().size(), 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String getCommandExecutionString(TagManager tagManger, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(tags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        deleteTagCommand.setData(null, null, tagManger, null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return deleteTagCommand.execute();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 130
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/EditEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class EditEventCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/EditNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class EditNoteCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Notebook notebook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note defaultNote \u003d new Note(\"Default\", \"default\", false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note testNote1 \u003d new Note(\"TestNote1\", \"default\", false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note testNote2 \u003d new Note(\"TestNote2\", \"default\", false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_keywordTest_returnsTestNote1AndTestNote2() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String keyword \u003d \"Test\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d \"Here are the matching notes in your list:\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + Formatter.LS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + \"1. TestNote1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + Formatter.LS"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + \"2. TestNote2 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + Formatter.LS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, keyword);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_keywordDef_returnsDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String keyword \u003d \"def\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d \"Here are the matching notes in your list:\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + Formatter.LS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + \"1. Default \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + Formatter.LS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, keyword);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_keywordNil_returnsNoSearchQuery() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String keyword \u003d \"NIL\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d \"There are no matching notes. \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + \"Please try another search query.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, keyword);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String getCommandExecutionString(Notebook notebook, String keyword) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(keyword);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        findCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return findCommand.execute();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 15,
      "R-Ramana": 60
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag.TagColor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_WHITE \u003d TagColor.COLOR_WHITE.getColor();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_CYAN \u003d TagColor.COLOR_CYAN.getColor();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLOR_RESET \u003d TagColor.COLOR_RESET.getColor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String HELP_STRING \u003d Formatter.LS"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"The recognized commands and their usages are listed below. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"Parameters listed in brackets, [ ] represent optional inputs.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String EXPECTED \u003d HELP_STRING + Formatter.LS + COLOR_WHITE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + AddNoteCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + AddEventCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + CreateTagCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + DeleteNoteCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + DeleteEventCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + DeleteTagCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + EditNoteCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + EditEventCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + ExitCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + FindCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + ListEventCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + ListNoteCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + ListTagCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PinCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + RemindCommand.COMMAND_USAGE + Formatter.LS + COLOR_CYAN"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + TagCommand.COMMAND_USAGE + Formatter.LS + COLOR_WHITE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + ViewNoteCommand.COMMAND_USAGE + Formatter.LS + COLOR_RESET;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_noInput_noErrorThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String helpCommand \u003d new HelpCommand().execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(EXPECTED, helpCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 35,
      "R-Ramana": 11
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ListEventCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ListNoteCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ListTagCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/PinCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class PinCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Note notePinned;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Note noteNotPinned;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE_CONTENT \u003d \"This is a test note.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE1_TITLE \u003d \"TestNote1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE2_TITLE \u003d \"TestNote2\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notePinned \u003d new Note(NOTE1_TITLE, NOTE_CONTENT, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        noteNotPinned \u003d new Note(NOTE2_TITLE, NOTE_CONTENT, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook.addNote(notePinned);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook.addNote(noteNotPinned);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputIndex_NoteExists_PinsAndUnpinsNotes() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(NOTE1_TITLE + \" pinned: \" + \u0027N\u0027, getExecutionStringInputIndex(notebook, 0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(NOTE2_TITLE + \" pinned: \" + \u0027Y\u0027, getExecutionStringInputIndex(notebook, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertTrue(notePinned.getPinned().equals(\"N\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertTrue(noteNotPinned.getPinned().equals(\"Y\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputTitle_NoteExists_PinsAndUnpinsNotes() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(NOTE1_TITLE + \" pinned: \" + \u0027N\u0027, getExecutionStringInputTitle(notebook, NOTE1_TITLE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(NOTE2_TITLE + \" pinned: \" + \u0027Y\u0027, getExecutionStringInputTitle(notebook, NOTE2_TITLE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertTrue(notePinned.getPinned().equals(\"N\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertTrue(noteNotPinned.getPinned().equals(\"Y\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputIndex_NoteDoesNotExists_returnsUnsuccessful() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(PinCommand.COMMAND_UNSUCCESSFUL_MESSAGE, getExecutionStringInputIndex(notebook, 5));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(PinCommand.COMMAND_UNSUCCESSFUL_MESSAGE, getExecutionStringInputIndex(notebook, 3));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputTitle_NoteDoesNotExists_returnsUnsuccessful() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(PinCommand.COMMAND_UNSUCCESSFUL_MESSAGE, getExecutionStringInputTitle(notebook, \"Title\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(PinCommand.COMMAND_UNSUCCESSFUL_MESSAGE, getExecutionStringInputTitle(notebook, \"Random\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String getExecutionStringInputIndex(Notebook notebook, int index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        PinCommand pinCommand \u003d new PinCommand(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        pinCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return pinCommand.execute();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String getExecutionStringInputTitle(Notebook notebook, String title) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        PinCommand pinCommand \u003d new PinCommand(title);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        pinCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return pinCommand.execute();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10,
      "prachi2023": 70
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/RemindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.notebook.TagManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.DailyEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class RemindCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_1 \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_2 \u003d \"CS2113 Lecture\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_3 \u003d \"CS2113 Meeting\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_4 \u003d \"CS2113 Coding\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cString\u003e TEST_TIME_UNITS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            \u003d new ArrayList\u003c\u003e(List.of(Event.REMINDER_DAY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final DailyEvent dailyEvent \u003d new DailyEvent(TEST_TITLE_4, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final StorageManager STORAGE_MANAGER \u003d new StorageManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final Notebook NOTEBOOK \u003d new Notebook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final TagManager TAG_MANAGER \u003d new TagManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private RemindCommand command \u003d new RemindCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void execute_singleEvent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(dailyEvent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        command.setData(NOTEBOOK, timetable, TAG_MANAGER, STORAGE_MANAGER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        DailyEvent reminderEvent \u003d new DailyEvent(dailyEvent.getTitle(), TEST_DATE_TIME.plusDays(1),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(\"Reminders:\" + Formatter.LS + reminderEvent.toReminderString(), command.execute());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 11,
      "brandonywl": 38
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/TagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.TagManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.command.TagCommand.TAG_NOTE_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.command.TagCommand.UNTAG_NOTE_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.command.TagCommand.COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class TagCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagBlue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRedRef;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagBlueRef;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note noTagNote;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note taggedNote;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRed \u003d new Tag(\"Red\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagBlue \u003d new Tag(\"Blue\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRedRef \u003d new Tag(\"Red\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagBlueRef \u003d new Tag(\"Blue\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noTagNote \u003d new Note(\"Default\", \"default\", false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taggedNote \u003d new Note(\"TaggedNote\", \"default\", false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void tagCommand_invalidIndex_returnsUnsuccessfulMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(noTagNote);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(taggedNote);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, tagManager, 3, tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(COMMAND_UNSUCCESSFUL_MESSAGE, result);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void tagCommand_tagNote_tagsNote() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taggedNote.setTags(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(taggedNote);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(noTagNote);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(taggedNote);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, tagManager, 0, tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(TAG_NOTE_MESSAGE + tagRed + Formatter.LS + TAG_NOTE_MESSAGE + tagBlue, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noTagNote.getTags().size(), 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noTagNote.getTags().contains(tagRed));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().get(tagRed).size(), 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void tagCommand_untagNote_untagsNote() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taggedNote.setTags(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(taggedNote);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(noTagNote);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(taggedNote);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedRef);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlueRef);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, tagManager, 1, tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(UNTAG_NOTE_MESSAGE + tagRed + Formatter.LS + UNTAG_NOTE_MESSAGE + tagBlue, result);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(taggedNote.getTags().size(), 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().get(tagRed).size(), 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().get(tagBlue).size(), 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void tagCommand_tagAndUntagNote_tagsNoteAndUntagsNote() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taggedNote.setTags(tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(taggedNote);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noTagNote.setTags(tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(noTagNote);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(taggedNote);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedRef);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlueRef);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, tagManager, 0, tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(TAG_NOTE_MESSAGE + tagRed + Formatter.LS + UNTAG_NOTE_MESSAGE + tagBlue, result);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noTagNote.getTags().size(), 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().get(tagRed).size(), 2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().get(tagBlue).size(), 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String getCommandExecutionString(Notebook notebook, TagManager tagManager, int index, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(index, tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagCommand.setData(notebook, null, tagManager, null);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagCommand.execute();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 136
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ViewNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Formatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ViewNoteCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Note noteWithoutTags;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Note noteWithTags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE1_CONTENT \u003d \"This is a test note\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE2_CONTENT \u003d \"This is a test note\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                                                + \"With some lines\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                                                + \"  \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                                                + \"This is the end\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE1_TITLE \u003d \"TestNote1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE2_TITLE \u003d \"TestNote2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Tag tag1 \u003d new Tag(\"tag1\", \"PURPLE\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Tag tag2 \u003d new Tag(\"tag2\", \"RED\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        tags.add(tag1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        tags.add(tag2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        noteWithoutTags \u003d new Note(NOTE1_TITLE, NOTE1_CONTENT, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        noteWithTags \u003d new Note(NOTE2_TITLE, NOTE2_CONTENT, false, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook.addNote(noteWithoutTags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook.addNote(noteWithTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputIndex_NoteExists_returnsContent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String tagsName \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            tagsName \u003d tagsName.concat(t.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String note1ExpectedOutput \u003d NOTE1_TITLE + \" \" + Formatter.LS + NOTE1_CONTENT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String note2ExpectedOutput \u003d NOTE2_TITLE + \" \" + tagsName + Formatter.LS + NOTE2_CONTENT;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note1ExpectedOutput, getExecutionStringInputIndex(notebook, 0));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note2ExpectedOutput, getExecutionStringInputIndex(notebook, 1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputTitle_NoteExists_returnsContent() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String tagsName \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            tagsName \u003d tagsName.concat(t.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String note1ExpectedOutput \u003d NOTE1_TITLE + \" \" + Formatter.LS + NOTE1_CONTENT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String note2ExpectedOutput \u003d NOTE2_TITLE + \" \" + tagsName + Formatter.LS + NOTE2_CONTENT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note1ExpectedOutput, getExecutionStringInputTitle(notebook, NOTE1_TITLE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note2ExpectedOutput, getExecutionStringInputTitle(notebook, NOTE2_TITLE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputIndex_NoteDoesNotExists_returnsUnsuccessful() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(ViewNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE, getExecutionStringInputIndex(notebook, 5));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(ViewNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE, getExecutionStringInputIndex(notebook, 3));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputTitle_NoteDoesNotExists_returnsUnsuccessful() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(ViewNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE, getExecutionStringInputTitle(notebook, \"Title\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(ViewNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE, getExecutionStringInputTitle(notebook, \"Random\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String getExecutionStringInputIndex(Notebook notebook, int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ViewNoteCommand viewNoteCommand \u003d new ViewNoteCommand(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        viewNoteCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return viewNoteCommand.execute();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String getExecutionStringInputTitle(Notebook notebook, String title) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ViewNoteCommand viewNoteCommand \u003d new ViewNoteCommand(title);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        viewNoteCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return viewNoteCommand.execute();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14,
      "prachi2023": 90
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/exception/SystemExceptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class SystemExceptionTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/notebook/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class NoteTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/notebook/NotebookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class NotebookTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void addNote() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void deleteNote() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/notebook/TagManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class TagManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagCS2113;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagImportant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagSchool;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagPersonal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagDefault;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note noteCS2113;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note noteJavaOop;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note noteMath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note notePersonal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note noteDefault;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager emptyTagManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager defaultTagManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagCS2113 \u003d new Tag(\"CS2113\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagImportant \u003d new Tag(\"Important\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagSchool \u003d new Tag(\"School\", Tag.COLOR_YELLOW_STRING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagPersonal \u003d new Tag(\"Personal\", Tag.COLOR_WHITE_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagDefault \u003d new Tag(\"Default\", Tag.COLOR_WHITE_STRING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagCS2113);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagImportant);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagSchool);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noteCS2113 \u003d new Note(\"CS2113\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                \"This is a fun mod!\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noteJavaOop \u003d new Note(\"Java OOP\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                \"Abstraction\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagSchool);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagImportant);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noteMath \u003d new Note(\"Math Note\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                \"1+1\u003d0\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagPersonal);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notePersonal \u003d new Note(\"Personal Note\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                \"My name is ABC\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noteDefault \u003d new Note(\"Default\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                \"Default\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        emptyTagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.createTag(tagCS2113, true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.createTag(tagImportant, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.createTag(tagSchool, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.createTag(tagPersonal, true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.createTag(tagDefault, true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.rebindTags(noteCS2113);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.rebindTags(noteJavaOop);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.rebindTags(noteMath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.rebindTags(notePersonal);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void createTag_tagDoesNotExist_createsTagReturnTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.createTag(tagCS2113, true));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.createTag(tagImportant, true));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.createTag(tagSchool, true));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.createTag(tagPersonal, true));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().containsKey(tagCS2113));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().containsKey(tagImportant));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().containsKey(tagSchool));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().containsKey(tagPersonal));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void createTag_tagExist_returnFalse() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.createTag(tagCS2113, false));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.createTag(tagImportant, false));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.createTag(tagSchool, false));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.createTag(tagPersonal, false));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void getTag_tagDoesNotExist_returnNull() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNull(emptyTagManager.getTag(tagCS2113.getTagName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNull(emptyTagManager.getTag(tagImportant.getTagName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNull(emptyTagManager.getTag(tagSchool.getTagName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNull(emptyTagManager.getTag(tagPersonal.getTagName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void getTag_tagExist_returnTag() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTag(tagCS2113.getTagName()), tagCS2113);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTag(tagImportant.getTagName()), tagImportant);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTag(tagSchool.getTagName()), tagSchool);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTag(tagPersonal.getTagName()), tagPersonal);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void tagNote_tagExist_tagNote() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // noteDefault does not have tagDefault at this point"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteDefault.getTags().size(), 0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTagMap().get(tagDefault).size(), 0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Tags tagDefault to noteDefault"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.tagNote(noteDefault, tagDefault);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteDefault.getTags().size(), 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTagMap().get(tagDefault).size(), 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagDefault));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(noteDefault.getTags().contains(tagCS2113));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(noteDefault.getTags().contains(tagImportant));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Tags tagCS2113 to noteDefault"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.tagNote(noteDefault, tagCS2113);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteDefault.getTags().size(), 2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTagMap().get(tagCS2113).size(), 3);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagDefault));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagCS2113));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(noteDefault.getTags().contains(tagImportant));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Tags tagImportant to noteDefault"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.tagNote(noteDefault, tagImportant);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteDefault.getTags().size(), 3);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTagMap().get(tagImportant).size(), 4);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagDefault));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagCS2113));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagImportant));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void tagNote_tagDoesNotExist_createsTagAndTagNote() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        emptyTagManager.createTag(tagDefault, true);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        emptyTagManager.tagNote(noteDefault, tagDefault);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().containsKey(tagDefault));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteDefault.getTags().size(), 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagDefault));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(emptyTagManager.getTagMap().get(tagDefault).size(), 1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().get(tagDefault).contains(noteDefault));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void removeTag_noteContainsTag_removeTag() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteCS2113.getTags().contains(tagCS2113));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultTagManager.getTagMap().get(tagCS2113).contains(noteCS2113));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.removeTag(noteCS2113, tagCS2113);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(noteCS2113.getTags().contains(tagCS2113));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.getTagMap().get(tagCS2113).contains(noteCS2113));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void deleteTag_tagDoesNotExist_returnFalse() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(emptyTagManager.deleteTag(tagCS2113));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(emptyTagManager.deleteTag(tagImportant));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(emptyTagManager.deleteTag(tagSchool));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(emptyTagManager.deleteTag(tagPersonal));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(emptyTagManager.deleteTag(tagDefault));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void deleteTag_ragExist_deletesTagReturnTrue() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNotEquals(noteCS2113.getTags().size(), 0);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNotEquals(noteJavaOop.getTags().size(), 0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNotEquals(noteMath.getTags().size(), 0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNotEquals(notePersonal.getTags().size(), 0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultTagManager.deleteTag(tagCS2113));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultTagManager.deleteTag(tagImportant));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultTagManager.deleteTag(tagSchool));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultTagManager.deleteTag(tagPersonal));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.getTagMap().containsKey(tagCS2113));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.getTagMap().containsKey(tagImportant));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.getTagMap().containsKey(tagSchool));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.getTagMap().containsKey(tagPersonal));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteCS2113.getTags().size(), 0);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteJavaOop.getTags().size(), 0);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteMath.getTags().size(), 0);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(notePersonal.getTags().size(), 0);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void listTags_emptyTags_returnDefaultMessage() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(emptyTagManager.listTags(), TagManager.STRING_TAG_EMPTY);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 218
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/notebook/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class TagTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/timetable/DailyEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Test Driver to test all functionality of DailyEvent Class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class DailyEventTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cString\u003e TEST_TIME_UNITS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            \u003d new ArrayList\u003c\u003e(List.of(Event.REMINDER_DAY, Event.REMINDER_DAY));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final DailyEvent event \u003d new DailyEvent(TEST_TITLE, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the time-step for DailyEvent is still correct (1 day)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void timeStep_singleDay_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate dateTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(dateTime.plusDays(1), event.timeStep(dateTime));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs when it should."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void toReoccur_twoTimeSteps_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testDate \u003d event.timeStep(startDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureDate \u003d event.timeStep(testDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testDate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testFutureDate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs 8 times in 1 week and 1 day."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getRecurrences_oneWeek_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.plusWeeks(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(8, (event.getRecurrences(startDate, endDate).size()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 56
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/timetable/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Test Driver for all functionality of EventClass."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cString\u003e TEST_TIME_UNITS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            \u003d new ArrayList\u003c\u003e(List.of(Event.REMINDER_DAY, Event.REMINDER_DAY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_RECURRING \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    Event event \u003d new Event(TEST_TITLE, TEST_DATE_TIME, TEST_REMINDER, TEST_RECURRING,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Test if you can get all the reminder dates that\u0027s needed from an event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getReminderDates() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cLocalDate\u003e reminderDates \u003d event.getReminderDates();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderDates.sort(LocalDate::compareTo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Collections.reverse(reminderDates);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cInteger\u003e timePeriods \u003d new ArrayList\u003c\u003e(TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timePeriods.sort(Integer::compareTo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Integer daysBefore : timePeriods) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate dateTime \u003d TEST_DATE_TIME.minusDays(daysBefore).toLocalDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            assertReminderDate(dateTime, reminderDates.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Wrapper around assertEquals for code readbility."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param correctDate Expected date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param generatedDate Actual date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void assertReminderDate(LocalDate correctDate, LocalDate generatedDate) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(correctDate, generatedDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 4,
      "brandonywl": 53
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/timetable/MonthlyEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Test Driver to test all functionality of MonthlyEvent Class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class MonthlyEventTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cString\u003e TEST_TIME_UNITS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            \u003d new ArrayList\u003c\u003e(List.of(Event.REMINDER_DAY, Event.REMINDER_DAY));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final MonthlyEvent event \u003d new MonthlyEvent(TEST_TITLE, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the time-step for MonthlyEvent is still correct (1 month)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void timeStep_singleMonth_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate dateTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(dateTime.plusMonths(1), event.timeStep(dateTime));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs when it should."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void toReoccur_twoTimeStepsOneDay_successSuccessFail() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testDate \u003d event.timeStep(startDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureDate \u003d event.timeStep(testDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureWrongDate \u003d testFutureDate.plusDays(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testDate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testFutureDate));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertFalse(event.toReoccur(testFutureWrongDate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs 5 times in 4 months."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getRecurrences_fourMonths_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.plusMonths(4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(5, (event.getRecurrences(startDate, endDate).size()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 59
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/timetable/TimetableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class TimetableTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_1 \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_2 \u003d \"CS2113 Lecture\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_3 \u003d \"CS2113 Meeting\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_4 \u003d \"CS2113 Coding\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cString\u003e TEST_TIME_UNITS"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            \u003d new ArrayList\u003c\u003e(List.of(Event.REMINDER_DAY, Event.REMINDER_DAY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final DailyEvent dailyEvent \u003d new DailyEvent(TEST_TITLE_4, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final WeeklyEvent weeklyEvent \u003d new WeeklyEvent(TEST_TITLE_3, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final MonthlyEvent monthlyEvent \u003d new MonthlyEvent(TEST_TITLE_2, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final YearlyEvent yearlyEvent \u003d new YearlyEvent(TEST_TITLE_1, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Asserts storing of events in timetable in respective recurrence length is correct."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void addEvent_oneDailyThreeOthers_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d initializeTimetable();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(4, timetable.getEvents().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(1, timetable.getDailyEvents().size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Assert that deleting an event would result in deleting the event from the total pool"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * as well as the sub-arraylist it should be in."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void deleteEvent_oneDailyThreeOthers_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d initializeTimetable();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.deleteEvent(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(3, timetable.getEvents().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(0, timetable.getDailyEvents().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Asserts that recurring events are displayed properly across the specified year."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getAllEvents_dailyEvent_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d initializeTimetable(dailyEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.withDayOfYear(1).toLocalDate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.withDayOfYear(startDate.lengthOfYear());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(startDate.lengthOfYear() - TEST_DATE_TIME.getDayOfYear() + 1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                timetable.getAllEvents(startDate, endDate).size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Assert that getReminders should work correctly."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Correct result should be 2, tomorrow\u0027s daily event and three day\u0027s from now daily event."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getReminders_dailyEvent_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d initializeTimetable(dailyEvent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(2, timetable.getReminders().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Method to initialize a timetable for testing purposes with 4 default events."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Instantiated Timetable with 4 default events."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Timetable initializeTimetable() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(dailyEvent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(weeklyEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(monthlyEvent);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(yearlyEvent);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Method to initialize a timetable for testing purposes with 1 event."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Instantiated Timetable with 1 event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Timetable initializeTimetable(Event event) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(event);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 12,
      "brandonywl": 91
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/timetable/WeeklyEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Test Driver to test all functionality of WeeklyEvent Class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class WeeklyEventTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cString\u003e TEST_TIME_UNITS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            \u003d new ArrayList\u003c\u003e(List.of(Event.REMINDER_DAY, Event.REMINDER_DAY));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final WeeklyEvent event \u003d new WeeklyEvent(TEST_TITLE, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the time-step for WeeklyEvent is still correct (1 week)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void timeStep_oneWeek_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate dateTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(dateTime.plusWeeks(1), event.timeStep(dateTime));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs when it should."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void toReoccur_twoTimeStepsOneDay_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testDate \u003d event.timeStep(startDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureDate \u003d event.timeStep(testDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureWrongDate \u003d testFutureDate.plusDays(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testDate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testFutureDate));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertFalse(event.toReoccur(testFutureWrongDate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs 5 times in 4 weeks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getRecurrences_fourWeeks_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.plusWeeks(4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(5, (event.getRecurrences(startDate, endDate).size()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 59
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/timetable/YearlyEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Test Driver to test all functionality of YearlyEvent Class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class YearlyEventTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cString\u003e TEST_TIME_UNITS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            \u003d new ArrayList\u003c\u003e(List.of(Event.REMINDER_DAY, Event.REMINDER_DAY));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final YearlyEvent event \u003d new YearlyEvent(TEST_TITLE, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, TEST_TIME_PERIODS, TEST_TIME_UNITS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the time-step for YearlyEvent is still correct (1 year)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void timeStep_oneYear_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate dateTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(dateTime.plusYears(1), event.timeStep(dateTime));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs when it should."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void toReoccur_twoTimeStepsOneDay_successSuccessFail() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testDate \u003d event.timeStep(startDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureDate \u003d event.timeStep(testDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureWrongDate \u003d testFutureDate.plusDays(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testDate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testFutureDate));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertFalse(event.toReoccur(testFutureWrongDate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs 5 times in 4 years."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getRecurrences_fourYears_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.plusYears(4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(5, (event.getRecurrences(startDate, endDate).size()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 60
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class StorageManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void saveNotebook() throws SystemException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Notebook notes \u003d new Notebook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String content \u003d \"Hello this is a test note\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                + \"With a few lines\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                + \"This is the end of the note\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            String title \u003d \"testNote_\" + i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            Boolean isPinned \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                isPinned \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            Note note \u003d new Note(title, content, isPinned);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            notes.addNote(note);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        StorageManager.saveNotebook(notes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void saveAll() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void loadAll() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void saveNoteContent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String content \u003d \"Hello this is a test note\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + \"With a few lines\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + \"This is the end of the note\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Note note \u003d new Note(\"TestNote\", content, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            StorageManager.saveNoteContent(note);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            System.out.println(\"Unable to create file\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14,
      "prachi2023": 42
    }
  },
  {
    "path": "src/test/java/seedu/duke/ui/InterfaceManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class InterfaceManagerTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void getUserCommandInput() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void prints() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/util/DateTimeManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class DateTimeManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/util/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Remove commands in Note content."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    void deleteLine_stringBuilder_condenseStringBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        StringBuilder commandInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        commandInput.append(\"Encapsulation\\nAbstraction\\n/del\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        int lastChar \u003d commandInput.lastIndexOf(\"\\n/del\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        commandInput.delete(lastChar, commandInput.length());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(commandInput.toString(), \"Encapsulation\\nAbstraction\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10,
      "Nazryl": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "brandonywl": 1
    }
  }
]
