[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "# NotUS project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu.notus/Notus.java` file, right-click it, and choose `Run Notus.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "   \u003e Task :compileJava UP-TO-DATE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "   \u003e Task :classes UP-TO-DATE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "   \u003e Task :Notus.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "   Welcome to NotUS! "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "             .-\u0027) _               .-\u0027) _                 .-\u0027)    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            ( OO ) )             (  OO) )               ( OO ).  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ,--./ ,--,\u0027  .-\u0027),-----. /     \u0027._ ,--. ,--.   (_)---\\_) "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        |   \\ |  |\\ ( OO\u0027  .-.  \u0027|\u0027--...__)|  | |  |   /    _ |  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        |    \\|  | )/   |  | |  |\u0027--.  .--\u0027|  | | .-\u0027) \\  :` `.  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        |  .     |/ \\_) |  | |  |   |  |   |  | |( OO ) \u0027..`\u0027\u0027.) "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        |  |\\    |    \\ |  | |  |   |  |   |  | | `-\u0027 /.-._)   \\ "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        |  | \\   |     `\u0027  \u0027-\u0027  \u0027   |  |  (\u0027  \u0027-\u0027(_.-\u0027 \\       / "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        `--\u0027  `--\u0027       `-----\u0027    `--\u0027    `-----\u0027     `-----\u0027  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Type \"help\" if you need to see a list of commands and their usages."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Enter command:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/notus/NotusTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 19,
      "-": 47
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    // https://mvnrepository.com/artifact/com.diogonunes/JColor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    compile group: \u0027com.diogonunes\u0027, name: \u0027JColor\u0027, version: \u00275.0.1\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    compile group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.18\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    mainClassName \u003d \"seedu.notus.Notus\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    archiveBaseName \u003d \"Notus\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 6,
      "brandonywl": 2,
      "-": 44
    }
  },
  {
    "path": "data/notes/test1.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Display | Name | Github Profile | Portfolio | Roles \u0026 Responsibilities |"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "--------|:----:|:--------------:|:---------:|:------------------------:|"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "![](https://avatars1.githubusercontent.com/u/54029207?s\u003d400\u0026u\u003d3c39d37a321f3d6f44c9c3e6bf8bbfabfe63d429\u0026v\u003d4) | R Ramana | [Github](https://github.com/R-Ramana) | [Portfolio](docs/team/r-ramana.md) | ?? |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "![](https://avatars1.githubusercontent.com/u/8433829?s\u003d400\u0026v\u003d4) | Jun Xiang | [Github](https://github.com/Chongjx) | [Portfolio](docs/team/junxiang.md) | Software Architect |"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/28587601?s\u003d400\u0026v\u003d4) | Brandon Yeow | [Github](https://github.com/brandonywl) | [Portfolio](docs/team/brandon.md) | ?? |"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/60388723?s\u003d400\u0026u\u003d66be1de61b928701f9438d2af161d4b9113e688f\u0026v\u003d4) | Prachi Goenka | [Github](https://github.com/prachi2023) | [Portfolio](docs/team/prachi2023.md) | ?? |"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/60337196?s\u003d400\u0026u\u003d564f1f71f7c19b1091444cdb2c3185148d1d0e64\u0026v\u003d4) | Nazryl Lim | [Github](https://github.com/Nazryl/) | [Portfolio](docs/team/nazrylLim.md) | ?? |"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 7,
      "-": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [1. Introduction](#intro)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[1.1 Setting Up](#setup)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [2. Design \u0026 Implementation](#design)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.1 Architecture Overview](#overview)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.2 NotUS](#notus)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.3 ParserManager](#parserManager)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.4 Commands](#commands)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.5 Notebook](#note)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.6 Timetable](#event)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.7 Tags](#tag)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.8 Storage](#storage)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.9 User Interface](#ui)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.10 System Exception](#exception)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.11 Usage of External Libraries](#color)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [3. Product Scope](#scope)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.1 Target User Persona](#userpersona)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2 Target User Profile](#userprofile)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3 Value Proposition](#value)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [4. User Stories](#userstories)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [5. Non-Functional Requirements](#nfr)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [6. Glossary](#gloss)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [7. Instructions for Manual Testing](#testinstr)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"intro\"\u003e1. Introduction\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "NotUS is a quick and simple, Command Line Interface (CLI) based, note-taking application for keyboard-inclined users. NotUS allows for users to categorize notes by tagging as well as pinning the more important notes. NotUS is also designed to assist in planning timetables to highlight possible clashes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "This document describes the design, implementation and architecture of NotUS. The aim of this developer guide is to get developers and potential contributors familiarised with the design and implementation of NotUS. It is assumed that the reader has some basic understanding of UML Notations. If you do not possess such knowledge, this document is probably not meant for you. Please access the [User Guide](https://github.com/AY2021S1-CS2113-T13-1/tp/blob/master/docs/UserGuide.md) instead."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"setup\"\u003e\u003cins\u003e1.1 Setting Up\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "**Prerequisites:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "* IntelliJ IDE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Fork this repo and clone it onto your local machine."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Import the project as a **Gradle project**."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Ensures that you are using the correct JDK version (For this project we are using JDK 11)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "For a more detailed set of instructions, please refer to the [following guide](https://github.com/AY2021S1-CS2113-T13-1/tp/blob/master/README.md)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"design\"\u003e2. Design \u0026 Implementation\u003c/a\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "This section seeks to explain the high-level design of the application. Given below is a quick overview of each component and the explanation of the design architecture in greater detail. NotUS is the main class of the application, and handles the initializing and execution of the appropriate classes. \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Diagrams found in our documentation were generated using \u003ca href\u003d\"https://plantuml.com/\"\u003ePlantUML\u003c/a\u003e and references were made to \u003ca href\u003d\"https://github.com/se-edu/addressbook-level2/tree/master/src/seedu/addressbook\"\u003eaddressbook-level2\u003c/a\u003e for the structure of the classes and packages. The structures have been modified to meet the needs of our application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"overview\"\u003e\u003cins\u003e2.1 Architecture Overview\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "  \u003cimg alt\u003d\"NotUS Architecture Overview\" src\u003d\"diagrams/out/Architecture_Overview.png\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "  \u003cbr\u003e\u003cem\u003eFigure 1\u003c/em\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "The architecture design is given in the diagram above. The main components of NotUS are:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. `InterfaceManager`: Manages the user input as well as the message output from application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. `ParserManager`: Creates a suitable parser, based on the command, to make sense of user message. The respective parsers then make sense of the information and calls the respective commands."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. `Command`: Executes the necessary tasks, depending on the respective command calls."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. `TagManager`: Stores and manages the creation and deletion of tags and other tag-related functionality."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. `Timetable`: Stores and manages the creation and deletion of events and other event-related functionality."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. `Notebook`: Stores and manages the creation and deletion of notes and other note-related functionality."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. `StorageManager`: Manages the loading of existing saved files and exporting of data to human-editable files."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "A Program Evaluation Review Technique (PERT) Chart was created prior to the start of developing NotUS and was constantly updated based on progress and updates from the development team\u0027s weekly meetings. A PERT chart is a project management tool that provides a visual representation of a project\u0027s timeline. The chart breaks down the individual tasks and aids in identifying task dependencies. A diagram of the PERT chart used for this application is shown below."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "  \u003cimg alt\u003d\"PERT Chart\" src\u003d\"diagrams/out/PERT_Chart.png\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "  \u003cbr\u003e\u003cem\u003eFigure 2\u003c/em\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"notus\"\u003e\u003cins\u003e2.2 NotUS\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "NotUS manages the flow of the application. On launch, it will create the necessary components, as listed above and then attempts to load any existing saved files into the application. Subsequently, it will accept and interpret the user input and execute the commands accordingly. The diagram below depicts the main flow of the application."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "  \u003cimg alt\u003d\"NotUS\" src\u003d\"diagrams/out/Notus.png\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "  \u003cbr\u003e\u003cem\u003eFigure 3\u003c/em\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "#### \u003ca id\u003d\"parserManager\"\u003e\u003cins\u003e2.3 ParserManager\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "The ParserManager manages the creation of specific parser objects based on the type of command. The parser then makes sense of the user input and calls the respective commands into action. The class diagram is as follows."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "  \u003cimg alt\u003d\"ParserManagerClass\" src\u003d\"diagrams/out/ParserManagerClass.png\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "  \u003cbr\u003e\u003cem\u003eFigure 4\u003c/em\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 Note that variables and methods in the Command class is empty as it will be covered under [Commands](#commands)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. The ParserManager receives the user input message as a whole."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. Interprets the type of command and creates the respective parser for each command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. The parser then splits the message to identify all the parameters provided."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. Creates and returns the Command class respectively."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "The sequence diagram is as follows."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "  \u003cimg alt\u003d\"Parser\" src\u003d\"diagrams/out/Parser.png\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "  \u003cbr\u003e\u003cem\u003eFigure 5\u003c/em\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 Note that the alternate paths in the sequence diagram above are not exhaustive. There is an alternate path for each unique command. As there are various paths, they are omitted from the diagram. The Command objects in the diagram are used to represent a generic Command object that is created through the Parser. Refer to the next figure for more details."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " \u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"AddNoteParser\" src\u003d\"diagrams/out/AddNoteParser.png\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cbr\u003e\u003cem\u003eFigure 6\u003c/em\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " \u003c/p\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Based on the user input, the Parser handles and creates the corresponding Command object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"commands\"\u003e\u003cins\u003e2.4 Commands\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "The following are some examples of the different type of Command Objects."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "**AddNoteCommand**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. Created by the parserManager."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "1. Gets the note with all its variables prepared in ParseAddNoteCommand. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "1. Obtain content input into note."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. Process and stores tags into TagManager."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "1. Handle saving of notes."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "1. Returns the title, tags as well as the contents of the note. "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"AddNote_Sequence\" src\u003d\"diagrams/out/AddNote_Sequence.png\"/\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cbr\u003e\u003cem\u003eFigure 7\u003c/em\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "**PinCommand**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. Created by the parserManager."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. Gets the note that is referenced either by title or index."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "1. Toggles the pinned status of the specified note. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "1. Returns the title as well as the pinned status of the note. "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "   \u003cimg alt\u003d\"PinCommand\" src\u003d\"diagrams/out/PinCommand.png\"/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cbr\u003e\u003cem\u003eFigure 8\u003c/em\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"note\"\u003e\u003cins\u003e2.5 Notebook\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "The notebook component stores a catalogue of notes. On launch, an empty notebook will be created. The note will be created by the user. The diagram below is a class diagram of the relationship between the Notebook, Note and Tags."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"NotebookObject\" src\u003d\"diagrams/out/NotebookObject.png\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cbr\u003e\u003cem\u003eFigure 9\u003c/em\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "Notebook handles adding, deleting, editing, finding, sorting, pinning and archiving of notes."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"event\"\u003e\u003cins\u003e2.6 Timetable\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "The timetable component stores an array of events. On launch, an empty timetable will be created. All stored events will be loaded via the StorageManger. "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "Timetable handles adding, deleting and getting all instances of stored events in a given time period."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"tag\"\u003e\u003cins\u003e2.7 Tags\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "The class diagram below denotes the relationship between the TagManager and the Taggable Objects (Notes and Events)."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"TaggableObject\" src\u003d\"diagrams/out/TaggableObject.png\"/\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cbr\u003e\u003cem\u003eFigure 10\u003c/em\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 As the focus of this diagram is on Tag, TaggableObject and TagManager, the variables and methods of Notes and Events are omitted."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Notes and Events inherit from the abstract class, TaggableObject, and TagManager contains a map of individual unique tags to an ArrayList of TaggableObjects. The TagManager handles the creation, deletion as well as the tagging and untagging of tags from notes or events."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"storage\"\u003e\u003cins\u003e2.8 Storage\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "The StorageManager saves and loads data to text files. On launch, the storage manager checks for existing directories that may contain previously saved data, otherwise it creates the necessary directories. Following that, it will load the previously saved notes and events from the text files into NotUS.Below is the class diagram representing the relationship between the StorageManager, Timetable, Notebook, TagManager and ParserManager."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "   \u003cimg alt\u003d\"StorageManagerClassDiagram\" src\u003d\"diagrams/out/StorageManager.png\"/\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cbr\u003e\u003cem\u003eFigure 11\u003c/em\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "While loading information is passed to the parser manager to prepare the information to be added. Following that, the respective Add Command will be called to add the event/note to the program Below is the sequence for loading the notes and events when the program first starts up. "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "   \u003cimg alt\u003d\"StorageManagerObjectDiagram\" src\u003d\"diagrams/out/StorageManagerObject.png\"/\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cbr\u003e\u003cem\u003eFigure 12\u003c/em\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"ui\"\u003e\u003cins\u003e2.9 User Interface\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "The Formatter class handles the formatting of the Note(s), Event(s) and message(s) which is then displayed to the user. Any changes to the layout or information to display will be done in this class. This class only contains static methods to eliminate the need of a Formatter object."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"Formatter\" src\u003d\"diagrams/out/Formatter.png\"/\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cbr\u003e\u003cem\u003eFigure 13\u003c/em\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "#### \u003ca id\u003d\"exception\"\u003e\u003cins\u003e2.10 System Exception\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "The System Exception Enumeration contains all the possible types of exception with specific messages."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"SystemExceptionEnum1\" src\u003d\"diagrams/out/SystemExceptionEnum1.png\"/\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"SystemExceptionEnum2\" src\u003d\"diagrams/out/SystemExceptionEnum2.png\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cbr\u003e\u003cem\u003eFigure 14\u003c/em\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 As there are various types of exception, the class diagram is split into two."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "#### \u003ca id\u003d\"color\"\u003e\u003cins\u003e2.11 Usage of External Libraries\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "This application uses 2 color libraries, \u003ca href\u003d\"https://github.com/dialex/JColor\"\u003eJColor\u003c/a\u003e and \u003ca href\u003d\"https://fusesource.github.io/jansi/\"\u003eJansi\u003c/a\u003e, to print colored messages on the terminals using ANSI escape codes. While JColor itself is sufficient to colorize the strings, Windows 10 terminal, by default, **does NOT support** ANSI escape code. Hence, there was a need for the Jansi library to support ANSI escape codes on Windows."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "  "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cins\u003eNote on usage of JColor library:\u003c/ins\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "IntelliJ\u0027s *\u0027Dracula\u0027* and *\u0027High Contrast\u0027* themes print white fonts as black and vice versa. Developers using either of the themes will have to change the white and black console color to reflect the correct color that is being printed. Instructions to do so are given below."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Go under Settings -\u003e Editor -\u003e Color Scheme -\u003e Console Colors -\u003e ANSI colors -\u003e Change the Foreground color for Black and White to the correct RGB value."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "The figure below illustrates what you should see on your screen."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "  \u003cimg alt\u003d\"Changing console color\" src\u003d\"diagrams/out/ConsoleColor.png\" /\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " \u003cbr\u003e\u003cem\u003eFigure 15\u003c/em\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cins\u003eNote on usage of Jansi library:\u003c/ins\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "While Jansi provides support for Windows terminal to print colored texts, it does not work within IntelliJ IDEA console. Therefore, when running on IntelliJ console, comment out the following lines in NotUS.java main function:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " `AnsiConsole.systemInstall();`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " `AnsiConsole.systemUninstall();`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Remember to uncomment them when building jar files for release."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"scope\"\u003e3. Product Scope\u003c/a\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"userpersona\"\u003e\u003cins\u003e3.1 Target User Persona\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Jane Doe is a NUS undergraduate student who is in SOC/FOE and is having a hard time managing her responsibilities and extra curricular activities. She wants to have a convenient platform to take notes and categorize them according to her modules. She also wants to plan her time so she is more aware of her module schedule."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "She also wants to be able to export the information so she is able to share them with whomever easily."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"userprofile\"\u003e\u003cins\u003e3.2 Target User Profile\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. NUS students, specifically SOC and CEG students (herein referred to as students) who are comfortable and adept at using CLI."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "2. Students who want to take notes and categorize them so they are not all over the place."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "3. Students who are comfortable with CLI."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"value\"\u003e\u003cins\u003e3.3 Value Proposition\u003c/ins\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "A all-in-one solution for note-taking and managing your schedule. NotUS solves the following problems."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Lack of access to organizing schedule"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Lack of access to organizing notes"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"userstories\"\u003e4. User Stories\u003c/a\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "| Version | Target User | Function/Feature | User\u0027s Benefit |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0| As a ... | I want to ... | So that I can ... |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|SOC/FOE student|Keep track of my notes|Be organized and find notes easily|"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Meticulous student|Categorize my notes by level of importance|Focus on the important topics|"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Student who is overloading|Categorize my notes by module|Be more aware of which notes are necessary for the upcoming lessons|"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Student who is more visual|Categorize my notes by colour (visible on CLI)|Be able to easily identify which module is which|"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Meticulous student|Create daily and weekly task lists|Keep track of my work progress|"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Forgetful student|To obtain reminders about my schedule for the day|So I do not forget what I have on for the day|"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|Busy student|Pin important notes, events and todo list|Focus on the important information|"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|SOC/FOE student|Be able to edit my notes|Update missing information|"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|SOC/FOE student|Be able to read my notes|To revise before exams|"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v1.0|SOC/FOE student|Be able to delete my notes|To clear up space and keep it more organized|"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|Outgoing student|Able to add my social events to the timetable|View all my upcoming events and classes|"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|Busy student|Be alerted if there are clashes in between my events and classes|Reschedule my plan|"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|Student leader|Be able to share certain events with others|Can get people to join events more conveniently|"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|SOC/FOE student|Archive old notes|Keep dashboard neat while allowing me to refer to old notes when necessary|"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|SOC/FOE student|Be able to import my notes|To make edits|"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|SOC/FOE student|Be able to export my notes|To share my notes with my peers|"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|SOC/FOE student|Be able to import my timetable/events|To make adjustments to my schedule|"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|v2.0|SOC/FOE student|Be able to export my timetable/events|To share my schedule with my peers|"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"nfr\"\u003e5. Non-Functional Requirements\u003c/a\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "| Requirement Type | Description |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|------------------|-------------|"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|Constraint|Single user product|"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|Performance|Software should not be dependent on a remote server|"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|Performance|Software should not exceed 100Mb for JAR file and 15MB per PDF file|"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|Quality|Users should prefer CLI/Typing|"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|Technical|Must have Java 11 installed|"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|Technical|No DBMS, all data to be stored locally|"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|Technical|Data stored must be in human-editable files|"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|Technical|Programme should be platform independent|"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "|Technical|Programme should work without an installer|"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"gloss\"\u003e6. Glossary\u003c/a\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "* *CLI* - Command Line Interface"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "* *DBMS* - Database Management System"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "* *UML* - Unified Modelling Language"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "* *PERT* -  Program Evaluation Review Technique"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "* *IntelliJ* - An Integrated Development Environment (IDE) developed by [JetBrains](https://www.jetbrains.com/idea/) for developing computer software."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "* *SOC* - School of Computing"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "* *FOE* - Faculty of Engineering"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "* *CEG* - Computer Engineering"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"testinstr\"\u003e7. Instructions for Manual Testing\u003c/a\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Download the jar file and copy it into an empty folder."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Open a new terminal window and navigate to the same directory where the notus.jar is located. As a shortcut if you are on windows, you can open the folder where the notus.jar is located \u003e click on the address bar \u003e type `cmd` \u003e press enter on your keyboard."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Enter the command `java -jar notus.jar` into the terminal window to launch the application. The application should now be running."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Enter the command `help` to get a list of all available commands and its usages."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. For a detailed list on the command features, refer to the [user guide](https://github.com/AY2021S1-CS2113-T13-1/tp/blob/master/docs/UserGuide.md#features)."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Simply enter `exit` to terminate and exit the application."
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 155,
      "Chongjx": 106,
      "brandonywl": 4,
      "prachi2023": 11,
      "Nazryl": 28,
      "-": 26
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "# NotUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "NotUS is a quick and simple, CLI-based, note-taking application for keyboard-inclined users. NotUS can also assist in planning timetables to highlight possible clashes."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 2,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [1. Introduction](#intro)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [2. Quick Start](#quickstart)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [3. Features](#features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.1 View Command List](#help)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.2 Add Note](#add-n)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3 List Notes](#list-n)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.4 View Note](#view-n)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.5 Edit Note](#edit-n)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.6 Find Notes](#find-n)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.7 Pin Note](#pin-n)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.8 Archive Note](#archive-n)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.9 Unarchive Note](#unarchive-n)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.10 Delete Note](#delete-n)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.11 Create Tags](#create-t)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.12 List Tags](#list-t)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.13 Tag/Untag Notes](#tag-n)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.14 Tag/Untag Events](#tag-e)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.15 Delete Tags](#delete-t)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.16 Add Event](#add-e)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.17 Edit Event](#edit-e)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.18 Event Manager](#list-e)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.19 Remind](#remind-e)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.20 Delete Event](#delete-e)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "##### \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.21 Exit](#exit)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [4. FAQ](#faq)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### [5. Command Summary](#command)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## 1. \u003ca id\u003d\"intro\"\u003eIntroduction\u003c/a\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "NotUS is a quick and simple, Command Line Interface (CLI) based, note-taking application for keyboard-inclined users. NotUS allows for users to categorize notes by tagging as well as pinning the more important notes. NotUS is also designed to assist in planning timetables to highlight possible clashes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "This document describes the features found in NotUS, along with example usages. It aims to help you get familiarised with the commands used in the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Any points with the 💡 emoji represents an additional information. You can access a summary of commands used in the application at the end of this document."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## 2. \u003ca id\u003d\"quickstart\"\u003eQuick Start\u003c/a\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Down the latest version of `NotUS` from [here](https://github.com/AY2021S1-CS2113-T13-1/tp/releases) or under [releases from the homepage](https://github.com/AY2021S1-CS2113-T13-1/tp)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. Go to the folder of the download and open your command terminal. Enter the following `java -jar Notus.jar`. Wait for the program to run."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. If the program is running correctly, you should see the following:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "   \u003cimg alt\u003d\"startUp\" src\u003d\"screenshots/startUp.png\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "5. Use the command `help` to get a list of commands and their usages before using the application (if needed)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## 3. \u003ca id\u003d\"features\"\u003eFeatures\u003c/a\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Parameters listed in [ ] denote optional entries. In some cases, at least one of the [ ] parameters must be listed. When listing the optional entries, the brackets, \u0027[ ]\u0027, should be omitted. More information can be found under the respective commands. Texts listed in the following style refer to responses by the console running NotUS."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "The following example shows how responses from the console will be displayed in this User Guide."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "```css"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example message as seen on the console"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "The parameters for the following commands are **NOT** case-sensitive."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. `delete-n`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. `find-n`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. `pin-n`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "1. `create-t`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. `tag-n`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "1. \u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"help\"\u003e\u003cins\u003e3.1 View Command List:\u003c/ins\u003e `help`\u003c/a\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Shows a list of all the commands that the user can enter."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output: "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "   \u003cimg alt\u003d\"help\" src\u003d\"screenshots/help_1.png\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "   \u003cimg alt\u003d\"help\" src\u003d\"screenshots/help_2.png\"/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"add-n\"\u003e\u003cins\u003e3.2 Add Note:\u003c/ins\u003e `add-n`\u003c/a\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Adds a new note to the list of note items (think of it as a notebook)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Format: `add-n /t TITLE [/tag TAG_1] [/tag TAG_2]... [/pin ISPIN] [/archive ISARCHIVE]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 Each note has to have a **UNIQUE** title and it is **CASE-INSENSITIVE**. \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 One can choose to add a `TAG` or/and `ISPIN`, `ISARCHIVE`. These parameters are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "💡 Set `ISPIN` to true if you want the note to be pinned.  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 Set `ISARHCIVE` to true if you want the note to be archived."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Subsequently, the application prompts the user to enter the content of the note. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "`add-n /t JavaDocs /tag CS2113 /pin true` OR"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "`add-n /t JavaDocs /pin true` OR"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`add-n /t JavaDocs /tag CS2113`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "```css"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Enter Note: "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "*/del to delete previous line*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "*/end on a new line to end note input*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`Test Note line 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`Line 2`\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`/end`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "💡 Use `/del` to delete the previous line.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "💡 Use `/end` on a new line to denote the end of the note."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"addNote\" src\u003d\"screenshots/addNote.png\"/\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"list-n\"\u003e\u003cins\u003e3.3 List Notes:\u003c/ins\u003e `list-n`\u003c/a\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Shows a list of all the notes in the notebook."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Format: `list-n [/tag TAG_1] [/tag TAG_2]... [/sort DIRECTION] [/archive]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Specifying [/archive] will **ONLY** show archived notes. Even if the other optional parameters are listed, archived notes nor will any other notes be filtered or sorted."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Specifying [/tag TAG] will only show the notes with the relevant tag."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Specifying [/sort DIRECTION] will show the sorted list in ascending or descending alphabetical order according to the title of the notes."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`list-n /tag CS2113`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`list-n /sort up`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`list-n /archive`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "💡 Use `/sort up` to display the list of notes in ascending order (A-Z).\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 Use `/sort down` to display the list of notes in descending order (Z-A). \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 The archived notes will **ONLY** be listed in chronological order. \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 The content of the note is truncated, thus partial content may be displayed when listing the notes. To view the full content of a particular note, use the view note command."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "💡 Even if you input anything beyond `list-n` or `/archive` without the command delimiter (`/`), the program will terminate. For example, `list-n the notes` or `list-n /archive test example` will still result in the program listing the notes/archived notes."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"listNote\" src\u003d\"screenshots/listNote.png\"/\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"view-n\"\u003e\u003cins\u003e3.4 View Note:\u003c/ins\u003e `view-n`\u003c/a\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "View the selected note."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Format: `view-n [/i INDEX] [/t TITLE]`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Views the note at that index or with the specific title entered. The index refers to the index number shown in the displayed note list. The index must be a **positive integer** (1, 2, 3, …). "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`view-n /i 1`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "`view-n /t JavaDocs`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"viewNote\" src\u003d\"screenshots/viewNote.png\"/\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "#### \u003ca id\u003d\"edit-n\"\u003e3.5 Edit Note: `edit-n`\u003c/a\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Edits an existing note."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "Format: `edit-n /i INDEX [/t TITLE] ([/add INDEX STRING] OR [/ln LINE_INDEX CONTENTS] OR [/del INDEX]) [/c CONTENT] [/tag TAG TAG_COLOR /tag TAG1 TAG_COLOR...]`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Edits a note at the specified INDEX. The index refers to the index number shown in the displayed note list. The index must be a **positive integer** (1, 2, 3, …)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- Only multiple use of the same type prefix [/add LINE_INDEX CONTENT], [/ln LINE_INDEX CONTENT], [/del LINE_INDEX] can be used per edit."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- [/add LINE_INDEX CONTENT] inserts the CONTENT at the specified LINE_INDEX to the note."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- [/ln LINE_INDEX CONTENT] edits the CONTENT of the specified LINE_INDEX in the note."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- [/del LINE_INDEX] deletes the CONTENT of the specified LINE_INDEX in the note."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Existing values will be updated to the input values."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- When editing tags, the existing tags will be removed, while the non-existing tags will be added."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`edit-n /i 2 /t JavaDocs Notes`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "`edit-n /i 2 /ln 1 Line 1 /c @param refers to parameters`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "`edit-n /i 2 /add 2 Line 2.1 /add 3 Line 2.2`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "`edit-n /i 2 /del 1 /del 2`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "   \u003cimg alt\u003d\"editNote\" src\u003d\"screenshots/editNote.png\"/\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"find-n\"\u003e\u003cins\u003e3.6 Find Notes:\u003c/ins\u003e `find-n`\u003c/a\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Finds the notes and return a list of notes that contain the keyword(s) in the title."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Format: `find-n KEYWORDS`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`find-n C++ to Java`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`find-n Java`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"findNote\" src\u003d\"screenshots/findNote.png\"/\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"pin-n\"\u003e\u003cins\u003e3.7 Pin Note:\u003c/ins\u003e `pin-n`\u003c/a\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Pins an unpinned note to the top of the note list or unpin a pinned note."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Format: `pin-n [/i INDEX] [/t TITLE]`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Pins a note to the top of the list. A pinned note will be unpinned. The index refers to the index number shown in the displayed note list. The index must be a **positive integer** (1, 2, 3, …)."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`pin-n /i 1`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`pin-n /t JavaDoc`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"pinNote\" src\u003d\"screenshots/pinNote.png\"/\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"archive-n\"\u003e\u003cins\u003e3.8 Archive Note:\u003c/ins\u003e `archive-n`\u003c/a\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Archives a note."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Format: `archive-n [/i INDEX] [/t TITLE]`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- The content of archived notes are unable to be viewed. To view the content, you would need to unarchive the notes first. "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- The archived note will no longer be visible in the main notebook. To view the list of archived notes refer to [`list-n`](#list-n). "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- The index refers to the index number shown in the displayed note list. The index must be a **positive integer** (1, 2, 3, …)."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`archive-n /i 1`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`archive-n /t JavaDoc`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"archiveNote\" src\u003d\"screenshots/archiveNote.png\"/\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"unarchive-n\"\u003e\u003cins\u003e3.9 Unarchive Note:\u003c/ins\u003e `unarchive-n`\u003c/a\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Unarchives a note."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Format: `unarchive-n [/i INDEX] [/t TITLE]`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- The index refers to the index number shown in the displayed note list. The index must be a **positive integer** (1, 2, 3, …)."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`unarchive-n /i 1`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`unarchive-n /t JavaDoc`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"unarchiveNote\" src\u003d\"screenshots/unarchiveNote.png\"/\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"delete-n\"\u003e\u003cins\u003e3.10 Delete note:\u003c/ins\u003e `delete-n`\u003c/a\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Deletes an existing note."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Format: `delete-n [/i INDEX] [t/TITLE]`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Deletes the note at that index or with the specific title entered. The index refers to the index number shown in the displayed note list. The index must be a **positive integer** (1, 2, 3, …)."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "💡 Partial title input is **NOT** possible."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "`delete-n /i 1`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "`delete-n /t JavaDocs`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"deleteNote\" src\u003d\"screenshots/deleteNote.png\"/\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"create-t\"\u003e\u003cins\u003e3.11 Create Tags:\u003c/ins\u003e `create-t`\u003c/a\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Create tags."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Format: `create-t /tag TAG [TAG_COLOR] [/tag TAG]...`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Creates a tag with the name TAG. TAG can only be a single word."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- [TAG_COLOR] is an optional input to specify the tag color to display. The possible colors are red, green, blue, yellow, purple, cyan, white. The tag color is set as white by default."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- The user can create multiple tags within a single line."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "💡 Creating a tag that already exists will override the tag color."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`create-t /tag CS2113`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`create-t /tag important red /tag CS2113 blue`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "💡 If no tag color is specified, the color of the tag will be that of the default white color."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"createTag\" src\u003d\"screenshots/createTag.png\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### \u003ca id\u003d\"list-t\"\u003e\u003cins\u003e3.12 List Tags:\u003c/ins\u003e `list-t`\u003c/a\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Shows a list of tags that have been created."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`list-t`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"listTag\" src\u003d\"screenshots/listTag.png\"/\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### \u003ca id\u003d\"tag-n\"\u003e\u003cins\u003e3.13 Tag/Untag Notes:\u003c/ins\u003e `tag-n`\u003c/a\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Tags or untags a note with the given tag name."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Format: `tag-n /i INDEX /tag TAG [TAG COLOR] [/tag TAG]...`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- Tags a note with a given TAG. If the note already contains the TAG, the tag will be removed from the note.The index refers to the index number shown in the displayed note list. The index must be a **positive integer** (1, 2, 3, …)."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- The user can create tag or untag multiple tags to a note within a single line."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 If the user tries to tag a non-existing tag to a note, the application will automatically create a new tag, and add the tag to the note."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "`tag-n /i 1 /tag CS2113`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "`tag-n /i 1 /tag CS2113 /tag important`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"tagNote\" src\u003d\"screenshots/tagNote.png\"/\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### \u003ca id\u003d\"tag-e\"\u003e\u003cins\u003e3.14 Tag/Untag Events:\u003c/ins\u003e `tag-e`\u003c/a\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Tags or untags an event with the given tag name."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Format: `tag-e /i INDEX /tag TAG [TAG COLOR] [/tag TAG]...`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- Tags a note with a given TAG. If the event already contains the TAG, the tag will be removed from the event.The index"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " refers to the index number shown in the displayed event list. The index must be a **positive integer** (1, 2, 3, …)."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- The user can create tag or untag multiple tags to an event within a single line."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 If the user tries to tag a non-existing tag to an event, the application will automatically create a new tag, and add the tag to the event."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "`tag-e /i 1 /tag CS2113`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "`tag-e /i 1 /tag CS2113 /tag important`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"tagEvent\" src\u003d\"screenshots/tagEvent.png\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### \u003ca id\u003d\"delete-t\"\u003e\u003cins\u003e3.15 Delete Tags:\u003c/ins\u003e `delete-t`\u003c/a\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Deletes a tag from the list of tags and remove the tag from the related notes and events."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Format: `delete-t /tag TAG [/tag TAG]...`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- Deletes the tag with the name TAG."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- The user can delete multiple tags within a single line."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- Notes and events with the tag, will have the tag removed."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "`delete-t /tag CS2113`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "   \u003cimg alt\u003d\"deleteTag\" src\u003d\"screenshots/deleteTag.png\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### \u003ca id\u003d\"add-e\"\u003e\u003cins\u003e3.16 Add Event:\u003c/ins\u003e `add-e`\u003c/a\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Adds an event to the list."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Format: `add-e /t TITLE /timing DATETIME [/repeat REPEAT] [/stop REPEAT_END] [/remind REMIND] [/tag TAG_1] [/tag TAG_2]...`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "- Specifying [/repeat RECURRING] will set the event as a recurring event."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "- Specifying [/remind REMIND] will set the program to remind the event."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "💡 DATETIME format pattern \"dd-MM-yyyy HH:mm:ss”\u003cbr\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "💡 Repeat inputs can be `daily`, `weekly`, `monthly`, `yearly`\u003cbr\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "💡 Remind inputs can be `[1-7]-day` or `1-week` \u003cbr\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "💡 Remind inputs can be chained to indicate multiple reminders"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "`add-e /t CS2113 Tutorial /timing 2020-10-30 13:00 /repeat weekly /remind 1-day 3-day`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "   \u003cimg alt\u003d\"addEvent\" src\u003d\"screenshots/addEvent.png\"/\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### \u003ca id\u003d\"edit-e\"\u003e\u003cins\u003e3.17 Edit Event:\u003c/ins\u003e `edit-e`\u003c/a\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Edits an existing event in the event list/timetable."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "Format: `edit-e /i INDEX [/t TITLE] [/timing DATETIME] [/repeat REPEAT] [/stop REPEAT_END] [/remind-add REMIND] [/remind-drop REMIND] [/remind-clear]`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Edits the event at the specified INDEX. The index refers to the index number shown in the displayed events list. The index must be a **positive integer** (1, 2, 3, …).​"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "- At least one of the optional fields must be provided [/t TITLE], [/timing DATETIME], [/repeat REPEAT], [/stop REPEAT_END], [/remind-add REMIND], [/remind-drop REMIND], [/remind-clear] [."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "- Existing values will be updated to the input values."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "- Specifying [/repeat RECURRING] will set the event that type of event."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "- Specifying [/remind-add REMIND] will add that reminder to the event if it does not exist."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "- Specifying [/remind-drop REMIND] will delete that reminder from the event if it exists."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "- Specifying [/remind-add REMIND] will remove all reminders in the event if any exists."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "💡 DATETIME format pattern \"dd-MM-yyyy HH:mm:ss”\u003cbr\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "💡 Repeat inputs can be `none`, `daily`, `weekly`, `monthly`, `yearly`\u003cbr\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "💡 Remind inputs can be `[1-7]-day` or `1-week` \u003cbr\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "💡 Remind inputs can be chained to indicate multiple reminders"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "`edit-e /i 1 /t CS2113 Lecture /timing 2020-10-30 16:00 /stop 2020-12-01 12:00 /remind-clear`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "   \u003cimg alt\u003d\"editEvent\" src\u003d\"screenshots/editEvent.png\"/\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### \u003ca id\u003d\"list-e\"\u003e\u003cins\u003e3.18 Event Manager:\u003c/ins\u003e `list-e`\u003c/a\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Display the module timetable on the current day."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "Format: `list-e [/timing Year] [/timing Year-Month]`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "- Having no optional prefixes will display all events stored. Recurring events will only display once. Index shown is the index used when deleting or editing events."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- Specifying [/timing Year] will display all events for the year. Will include repeated events. \u003cbr\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "💡 Year format pattern \"YYYY”. \u003cbr\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "- Specifying [/timing Year-Month] will display all events for that month. Will include repeated events. \u003cbr\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "💡 Year format pattern \"YYYY-MM”."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "`list-e /timing 2020-10`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "   \u003cimg alt\u003d\"listEvent\" src\u003d\"screenshots/listEvent.png\"/\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### \u003ca id\u003d\"remind-e\"\u003e\u003cins\u003e3.19 Remind:\u003c/ins\u003e `remind-e`\u003c/a\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Reminds the specified event from the timetable."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "Format: `remind-e`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "- Shows all reminders for today."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "`remind-e`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "   \u003cimg alt\u003d\"remindEvent\" src\u003d\"screenshots/remindEvent.png\"/\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### \u003ca id\u003d\"delete-e\"\u003e\u003cins\u003e3.20 Delete Event:\u003c/ins\u003e `delete-e`\u003c/a\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a new item to the list of todo items."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Format: `delete-e INDEX`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "* Deletes the event at the specified INDEX. The index refers to the index number shown in the displayed event list (list-e). The index must be a **positive integer** (1, 2, 3, …)."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "`delete-e 1`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "   \u003cimg alt\u003d\"deleteEvent\" src\u003d\"screenshots/deleteEvent.png\"/\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### \u003ca id\u003d\"exit\"\u003e\u003cins\u003e3.21 Exit:\u003c/ins\u003e `exit`\u003c/a\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "💡 Even if you input anything beyond exit, the program will terminate. For example, `exit the program` will still result in the program being terminated."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "`exit`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"faq\"\u003e4. FAQ\u003c/a\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "**A**: The notes along with the list of all the notes and event are automatically saved in a human editable text file, whenever there is a change made. Once exported, you can transfer the file over to the new computer and load the data."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "**Q**: What if the app crashes half way through what happens to my data?"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "**A**: All the data is saved in a text file whenever there are changes made throughout the program. Hence, you can start NotUS again and the updated data will be loaded in."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "**Q**: What if I don\u0027t remember some of the commands? "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "**A**: Type the command `help` for a list of useful commands."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## \u003ca id\u003d\"command\"\u003e5. Command Summary\u003c/a\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Target Action | Example Code(s)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "------------  | -------------"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "View command list | `help`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Add note | `add-n /t JavaDocs /tag CS2113 /pin true`\u003cbr\u003e`add-n /t JavaDocs /pin true`\u003cbr\u003e`add-n /t JavaDocs /tag CS2113`\u003cbr\u003e`add-n /t JavaDocs`\u003cbr\u003e\u003cbr\u003e`@param refers to param`\u003cbr\u003e`@return refers to item to be returned`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Archive note | `archive-n /t JavaDocs`\u003cbr\u003e`archive-n /i 1`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Unarchive note | `unarchive-n /t JavaDocs`\u003cbr\u003e`unarchive-n /i 1`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "List notes | `list-n`\u003cbr\u003e`list-n /archive`\u003cbr\u003e`list-n /tag CS2113`\u003cbr\u003e`list-n /sort up`\u003cbr\u003eOr any combination with `/tag` and `/sort`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "View note | `view-n /i 1`\u003cbr\u003e`view-n /t JavaDocs`\u003cbr\u003e`view-n /i 1 /t JavaDocs`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Edit note | `edit-n /i 2 /t JavaDocs Notes`\u003cbr\u003e`edit-n /i 2 /ln 1 /c @param refers to parameters`\u003cbr\u003e`edit-n /i 2 /tag Notes`\u003cbr\u003e Or any combination with `/t`, [`/ln` + `/c`] and `/tag` "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Find notes | `find-n Java`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Pin note | `pin-n /t JavaDocs Notes`\u003cbr\u003e`pin-n /i 1`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Delete note | `delete-n /t JavaDocs Notes`\u003cbr\u003e`delete-n /i 1`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Create tag | `create-t /tag Important red`\u003cbr\u003e`create-t /tag NUS /tag CEG yellow`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "List tags | `list-t`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Tag/Untag | `tag /i 1 /tag Important`\u003cbr\u003e`tag /i 1 /tag Important red`\u003cbr\u003e`tag /i 1 /tag Important red /tag NUS /tag CEG yellow`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Delete tag | `delete-t /tag Important`\u003cbr\u003e`delete-t /tag Important red`\u003cbr\u003e`delete-t /tag NUS /tag CEG yellow`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Add event | `add-e /t CS2113 /d 16-10-2020 16:00:00`\u003cbr\u003e`add-e /t CS2113 Lecture /d 16-10-2020 16:00:00 /repeat ...`\u003cbr\u003e`add-e /t CS2113 Lecture /d 16-10-2020 16:00:00 /remind ...`\u003cbr\u003eOr any combination with `/repeat` and `/remind`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "Edit event | `edit-e /i 1 /t CS2113 Lecture`\u003cbr\u003e`edit-e /i 1 /d 16-10-2020 15:55:00`\u003cbr\u003e`edit-e /i 1 /repeat ...`\u003cbr\u003e`edit-e /i 1 /remind ...`\u003cbr\u003eOr any combination with `/t`, `/d`, `/repeat` and `/remind`)"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Event Manager | `list-e`\u003cbr\u003e`list-e /d 14-09-2020`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Remind | `remind-e 1`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Delete event | `delete-e 1`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "Exit | `exit`"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 350,
      "Chongjx": 128,
      "brandonywl": 44,
      "prachi2023": 6,
      "Nazryl": 10,
      "-": 35
    }
  },
  {
    "path": "docs/team/brandon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "# Brandon - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/junxiang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "# Jun Xiang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 6
    }
  },
  {
    "path": "docs/team/nazrylLim.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "# Nazryl Lim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "## Education"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* National University of Singapore"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "## Work Experience"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* Work from home"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "## Accomplishments"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* CS2113 Student"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* Work from home"
      }
    ],
    "authorContributionMap": {
      "Nazryl": 11
    }
  },
  {
    "path": "docs/team/prachi2023.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "# Prachi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 6
    }
  },
  {
    "path": "docs/team/r-ramana.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "# R Ramana - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 6
    }
  },
  {
    "path": "src/main/java/seedu/notus/Notus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TagManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Timetable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.AsciiArt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.InterfaceManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.util.parser.ParserManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Entry point of the NotUS application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class Notus {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private InterfaceManager interfaceManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Timetable timetable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ParserManager parserManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String WELCOME_MSG_STRING \u003d \"Welcome to NotUS! \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + AsciiArt.getNotusLogo() + Formatter.LS"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"Type \\\"help\\\" if you need to see a list of commands and their usages.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String ENTER_COMMAND_MSG \u003d \"Enter command:\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Initializes the required managers."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.interfaceManager \u003d new InterfaceManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.storageManager \u003d new StorageManager(timetable, parserManager, notebook, tagManager);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            storageManager.createFiles();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            storageManager.loadAllNotes(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            storageManager.loadAllNotes(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            storageManager.loadTimetable();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            interfaceManager.prints(exception.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        interfaceManager.prints(WELCOME_MSG_STRING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Reads the user command and executes it until the user exits the program. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void runCommandLoop() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            interfaceManager.prints(ENTER_COMMAND_MSG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String userCommandText \u003d interfaceManager.getUserCommandInput();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d parserManager.parseCommand(userCommandText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            interfaceManager.prints(result);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Exits the application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Runs the program until termination. */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        runCommandLoop();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Calls the execute function of the command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param command The command to be executed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return String of the executed command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String executeCommand(Command command) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return command.execute();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Main entry-point for the application."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        new Notus().run();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 82,
      "R-Ramana": 2,
      "prachi2023": 12,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.ADD_EVENT_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FILE_WRITE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * This class allows us to store relevant information regarding the events to add to the timetable and manipulate it"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * before executing it via the execute method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor that takes in the event to be written to the timetable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param event Event to be written to the timetable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            storageManager.saveTimetable(timetable);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return Formatter.formatString(FILE_WRITE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return Formatter.formatEventString(ADD_EVENT_SUCCESSFUL_MESSAGE, event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 2,
      "brandonywl": 37,
      "prachi2023": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/AddNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.ADD_NOTE_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FILE_WRITE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.parser.Parser.inputContent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Adds a Note into the Notebook."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs an AddNoteCommand to add a Note into the Notebook."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param note refers to the note to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public AddNoteCommand(Note note) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cString\u003e content \u003d note.getContent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Search for duplicates"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (notebook.getNote(note.getTitle()) || notebook.getArchiveNote(note.getTitle()))  {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return Formatter.formatString(NOTE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Get Content"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (storageManager.noteExists(note, note.getIsArchived())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                content \u003d storageManager.getNoteContent(note, note.getIsArchived());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return Formatter.formatString(exception.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            content \u003d inputContent();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Edit the note"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        note.setContent(content);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Rebind the tags if there are duplicated tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        tagManager.rebindTags(note);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        notebook.addNote(note);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        //Save the notes in storage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            storageManager.saveNote(note, note.getIsArchived());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return Formatter.formatString(FILE_WRITE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return Formatter.formatNote(ADD_NOTE_SUCCESSFUL_MESSAGE, note);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 4,
      "R-Ramana": 6,
      "prachi2023": 1,
      "Nazryl": 60
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/ArchiveNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.ARCHIVE_NOTE_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FILE_WRITE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.INDEX_OUT_OF_RANGE_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_DOES_NOT_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Archives a Note from the Notebook."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class ArchiveNoteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive-n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String title \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a ArchiveNoteCommand to archive a Note."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param index of the item to be archived."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArchiveNoteCommand(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a ArchiveNoteCommand to archive a Note."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param title of the item to be archived."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArchiveNoteCommand(String title) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // If there is no title, archive note by index. Else archive by title."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (title.isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                if (index \u003e notebook.getSize()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    return Formatter.formatString(INDEX_OUT_OF_RANGE_MESSAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                title \u003d notebook.archiveNotes(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // archiveNotes(title) returns a boolean, false if no such title exists"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    notebook.archiveNotes(title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                storageManager.saveAllNoteDetails(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                storageManager.saveAllNoteDetails(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // delete the content file from unarchived notes and add it to archived"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                storageManager.deleteNoteContentFile(title, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                storageManager.saveNoteContent(notebook.getNote(title, true), true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return Formatter.formatString(FILE_WRITE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } catch (SystemException exception) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return Formatter.formatString(exception.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(ARCHIVE_NOTE_SUCCESSFUL_MESSAGE + title);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 76,
      "prachi2023": 2
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import com.diogonunes.jcolor.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TagManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Timetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected Notebook notebook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected Timetable timetable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected TagManager tagManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected StorageManager storageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Executes the command and returns the result. Method to be implemented by child class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public abstract String execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Sets the data that the command will operate on."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notebook referenced Notebook data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param timetable referenced Timetable data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagManager referenced TagManager."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setData(Notebook notebook, Timetable timetable, TagManager tagManager, StorageManager storageManager) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.notebook \u003d notebook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagManager \u003d tagManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.storageManager \u003d storageManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 39,
      "R-Ramana": 1,
      "Nazryl": 2
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/CreateTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.CREATE_TAG_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.CREATE_TAG_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.HEADER_CREATE_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Creates Tag for the notes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class CreateTagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create-t\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a CreateTagCommand to create tag(s)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public CreateTagCommand(ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e executedMessage \u003d tagManager.createTag(tags, CREATE_TAG_SUCCESSFUL_MESSAGE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                CREATE_TAG_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        executedMessage.add(0, HEADER_CREATE_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return Formatter.formatString(executedMessage, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 33,
      "R-Ramana": 3
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/DeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.DELETE_EVENT_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.DELETE_EVENT_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FILE_WRITE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.INDEX_OUT_OF_RANGE_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * This class allows us to store relevant information regarding the events to be deleted from the timetable and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * manipulate it before executing it via the execute method."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructs a DeleteEventCommand that specifies which index to delete."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param index Index written on list-e -1."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public DeleteEventCommand(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cString\u003e returnMessages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d timetable.getEvents().size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            returnMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            returnMessages.add(DELETE_EVENT_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            returnMessages.add(INDEX_OUT_OF_RANGE_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return Formatter.formatString(returnMessages, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event \u003d timetable.getEvent(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.deleteEvent(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            storageManager.saveTimetable(timetable);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return Formatter.formatString(FILE_WRITE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return Formatter.formatEventString(DELETE_EVENT_SUCCESSFUL_MESSAGE, event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 5,
      "brandonywl": 45,
      "prachi2023": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/DeleteNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.CommandMessage.DELETE_NOTE_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.CommandMessage.FILE_WRITE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_DOES_NOT_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Deletes a Note from the Notebook."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String title \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs a DeleteNoteCommand to delete a Note."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param index of the item to be deleted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public DeleteNoteCommand(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs a DeleteNoteCommand to delete a Note."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param title of the item to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public DeleteNoteCommand(String title) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        boolean isDeleted;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String deletedTitle \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // If there is no title, delete note by index. Else delete by title."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (title.isBlank()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                deletedTitle \u003d notebook.getNote(index).getTitle();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                isDeleted \u003d notebook.deleteNote(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                isDeleted \u003d notebook.deleteNote(title);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (isDeleted \u0026\u0026  title.isBlank()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                storageManager.deleteNoteContentFile(deletedTitle, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                storageManager.saveAllNoteDetails(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return Formatter.formatString(DELETE_NOTE_SUCCESSFUL_MESSAGE + deletedTitle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } else if (isDeleted) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                storageManager.deleteNoteContentFile(title, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                storageManager.saveAllNoteDetails(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return Formatter.formatString(DELETE_NOTE_SUCCESSFUL_MESSAGE + title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return Formatter.formatString(FILE_WRITE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return Formatter.formatString(exception.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "Nazryl": 76
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/DeleteTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.DELETE_TAG_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.DELETE_TAG_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FILE_WRITE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.HEADER_DELETE_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Deletes an existing Tag."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class DeleteTagCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-t\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a DeleteNoteCommand to delete tag(s)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public DeleteTagCommand(ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e executedMessage \u003d tagManager.deleteTag(tags, DELETE_TAG_SUCCESSFUL_MESSAGE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                DELETE_TAG_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        executedMessage.add(0, HEADER_DELETE_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            storageManager.saveAllNoteDetails(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Formatter.formatString(FILE_WRITE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return Formatter.formatString(executedMessage, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 40,
      "R-Ramana": 4,
      "prachi2023": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.DailyEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.MonthlyEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.RecurringEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.WeeklyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.YearlyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_EVENT_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_RECURRENCE_DATE_MESSAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_RECURRENCE_MESSAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_REMINDER_MESSAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_START_DATE_MESSAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_TITLE_MESSAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_WARNING_RECURRENCE_MESSAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_WARNING_RECURRENCE_ON_NON_RECURRENCE_MESSAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_WARNING_REMINDER_MESSAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FILE_WRITE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.PROCESSING_EDIT_MESSAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Edits a Note in the Notebook or an Event from the Timetable."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-e\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String REMINDER_TYPE_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String REMINDER_TYPE_DROP \u003d \"drop\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String REMINDER_TYPE_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final String newTitle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final LocalDateTime newStartDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final String reminderTodo;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private boolean warningSignalReminders \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private boolean warningSignalRecurrence \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final String recurringType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final LocalDate endRecurrenceDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructs an EditEventCommand to edit an Event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param index Index of the event to be edited."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param newTitle New title of the event. Null if it is not edited."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param newStartDate New start date of the event. Null if it is not edited."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderTodo Reminder edit type of the event. \"\" If it is not edited."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderSchedule Reminder schedule of the things to do to event. Null if it is not edited."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public EditEventCommand(int index, String newTitle, LocalDateTime newStartDate,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            String reminderTodo, HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            String recurringType, LocalDate endRecurrenceDate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.newTitle \u003d newTitle;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.newStartDate \u003d newStartDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.reminderTodo \u003d reminderTodo;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.reminderSchedule \u003d reminderSchedule;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.recurringType \u003d recurringType;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.endRecurrenceDate \u003d endRecurrenceDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cString\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        results.add(PROCESSING_EDIT_MESSAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event \u003d timetable.getEvent(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Edit title is indicated"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!newTitle.isBlank()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            event.setTitle(newTitle);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            results.add(EDIT_TITLE_MESSAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Edit startDate is indicated"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (newStartDate !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            event.setStartDateTime(newStartDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            results.add(EDIT_START_DATE_MESSAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Edit a reminder is indicated"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!reminderTodo.isBlank()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e originalReminderSchedule \u003d event.getReminderPeriods();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            switch (reminderTodo) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case REMINDER_TYPE_ADD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (!event.getIsToRemind()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    event.setIsToRemind(true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    event.setReminderPeriods(reminderSchedule);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                warningSignalReminders \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                for (String unit : reminderSchedule.keySet()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    ArrayList\u003cInteger\u003e remindersToAdd \u003d reminderSchedule.get(unit);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    ArrayList\u003cInteger\u003e remindersPresent \u003d originalReminderSchedule.get(unit);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (remindersPresent \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        originalReminderSchedule.put(unit, remindersToAdd);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        warningSignalReminders \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    for (Integer reminder : remindersToAdd) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        if (!remindersPresent.contains(reminder)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            remindersPresent.add(reminder);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            warningSignalReminders \u003d false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case REMINDER_TYPE_DROP:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (!event.getIsToRemind()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    warningSignalReminders \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                warningSignalReminders \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                for (String unit : reminderSchedule.keySet()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    ArrayList\u003cInteger\u003e remindersToDrop \u003d reminderSchedule.get(unit);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    ArrayList\u003cInteger\u003e remindersPresent \u003d originalReminderSchedule.get(unit);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (remindersPresent \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    for (Integer reminder : remindersToDrop) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        if (remindersPresent.contains(reminder)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            remindersPresent.remove(reminder);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                            warningSignalReminders \u003d false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (remindersPresent.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        originalReminderSchedule.remove(unit);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (originalReminderSchedule.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    event.setIsToRemind(false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case REMINDER_TYPE_CLEAR:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (!event.getIsToRemind()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    warningSignalReminders \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event.setIsToRemind(false);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event.setReminderPeriods(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                // Should not hit here at all."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (warningSignalReminders) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                results.add(EDIT_WARNING_REMINDER_MESSAGE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                results.add(EDIT_REMINDER_MESSAGE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // If change recurring, edit all the other data first, instantiate a new object with the relevant type of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // recurring event and replace the original event."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Set endRecurrenceDate to the original or DEFAULT whichever is set originally first."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!recurringType.isBlank()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Event newEvent \u003d event;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            String eventTitle \u003d event.getTitle();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDateTime eventStartDateTime \u003d event.getStartDateTime();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate endRecurrenceDate \u003d null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cTag\u003e tags \u003d event.getTags();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (!recurringType.equals(RecurringEvent.NO_RECURRENCE_TYPE)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (event instanceof RecurringEvent) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    endRecurrenceDate \u003d ((RecurringEvent) event).getEndRecurrenceDate();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    endRecurrenceDate \u003d RecurringEvent.DEFAULT_END_RECURRENCE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            boolean eventIsToRemind \u003d event.getIsToRemind();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            switch (recurringType) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.NO_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (!(event instanceof RecurringEvent)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    warningSignalRecurrence \u003d true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                newEvent \u003d new Event(eventTitle, eventStartDateTime, eventIsToRemind,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        false, event.getReminderPeriods(), tags);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.DAILY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (event instanceof DailyEvent) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    warningSignalRecurrence \u003d true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                assert (endRecurrenceDate !\u003d null);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                newEvent \u003d new DailyEvent(eventTitle, eventStartDateTime, eventIsToRemind, endRecurrenceDate,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        event.getReminderPeriods(), tags);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.WEEKLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (event instanceof WeeklyEvent) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    warningSignalRecurrence \u003d true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                assert (endRecurrenceDate !\u003d null);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                newEvent \u003d new WeeklyEvent(eventTitle, eventStartDateTime, eventIsToRemind, endRecurrenceDate,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        event.getReminderPeriods(), tags);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.MONTHLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (event instanceof MonthlyEvent) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    warningSignalRecurrence \u003d true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                assert (endRecurrenceDate !\u003d null);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                newEvent \u003d new MonthlyEvent(eventTitle, eventStartDateTime, eventIsToRemind, endRecurrenceDate,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        event.getReminderPeriods(), tags);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.YEARLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (event instanceof YearlyEvent) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    warningSignalRecurrence \u003d true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                assert (endRecurrenceDate !\u003d null);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                newEvent \u003d new YearlyEvent(eventTitle, eventStartDateTime, eventIsToRemind, endRecurrenceDate,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        event.getReminderPeriods(), tags);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                // Should not hit here."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                warningSignalRecurrence \u003d true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (warningSignalRecurrence) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                results.add(EDIT_WARNING_RECURRENCE_MESSAGE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                results.add(EDIT_RECURRENCE_MESSAGE);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                timetable.setEvent(index, newEvent);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Edit endRecurrenceDate here."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (endRecurrenceDate !\u003d null) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Event currEvent \u003d timetable.getEvent(index);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (currEvent instanceof RecurringEvent) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                results.add(EDIT_RECURRENCE_DATE_MESSAGE);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                ((RecurringEvent) currEvent).setEndRecurrenceDate(endRecurrenceDate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                // Throw warnings"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                results.add(EDIT_WARNING_RECURRENCE_ON_NON_RECURRENCE_MESSAGE);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (results.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            results.add(EDIT_EVENT_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                storageManager.saveTimetable(timetable);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                results.add(FILE_WRITE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return Formatter.formatString(FILE_WRITE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return Formatter.formatString(results, true);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 11,
      "brandonywl": 251
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/EditNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_NOTE_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.INVALID_LINE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_DOES_NOT_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.SAME_NOTE_TITLE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.parser.Parser.inputContent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class EditNoteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private boolean isInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Note newNote;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Map\u003cInteger, String\u003e addLists;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Map\u003cInteger, String\u003e editLists;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Map\u003cInteger, String\u003e deleteLists;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs an EditNoteCommand to edit a Note."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param index of the Note to be edited."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public EditNoteCommand(int index, Note newNote, Map\u003cInteger, String\u003e addLists,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                           Map\u003cInteger, String\u003e editLists, Map\u003cInteger, String\u003e deleteLists, boolean isInput) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.newNote \u003d newNote;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.addLists \u003d addLists;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.editLists \u003d editLists;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.deleteLists \u003d deleteLists;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.isInput \u003d isInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note oldNote;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cString\u003e content;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Retrieve note"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            oldNote \u003d notebook.getNote(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            content \u003d oldNote.getContent();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Set title"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (!newNote.getTitle().isBlank()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (newNote.getTitle().equals(oldNote.getTitle())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return Formatter.formatString(SAME_NOTE_TITLE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            oldNote.setTitle(newNote.getTitle());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Set new lines"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (!addLists.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            for (Map.Entry\u003cInteger, String\u003e entry : addLists.entrySet()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                if (entry.getKey() \u003c content.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    content.add(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    return Formatter.formatString(INVALID_LINE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            oldNote.setContent(content);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Edit lines"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (!editLists.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            for (Map.Entry\u003cInteger, String\u003e entry : editLists.entrySet()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                if (entry.getKey() \u003c content.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    content.set(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    return Formatter.formatString(INVALID_LINE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            oldNote.setContent(content);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Delete lines"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (!deleteLists.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            for (int key : deleteLists.keySet()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                if (key \u003c content.size() \u0026\u0026 content.size() !\u003d 1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    content.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    return Formatter.formatString(INVALID_LINE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            oldNote.setContent(content);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Edit tags"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (!newNote.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            tagManager.tagAndUntag(oldNote, newNote.getTags(), \"\", \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Add extra content"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (isInput) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            content.addAll(inputContent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            oldNote.setContent(content);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        notebook.setNotes(index, oldNote);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return Formatter.formatNote(EDIT_NOTE_SUCCESSFUL_MESSAGE, oldNote);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 6,
      "R-Ramana": 4,
      "Nazryl": 103
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.AsciiArt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EXIT_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Exits the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return EXIT_MESSAGE + Formatter.LS"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + AsciiArt.getGoodbyeArt();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 22,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FIND_NOTE_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FIND_NOTE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Finds Notes in the Notebook.(Possible to add find in event too)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"FindCommand\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a FindCommand to find Notes in the Notebook given the keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param keywords to look for in the Notebook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public FindCommand(String keywords) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Filters and finds notes that has the title containing the user inputted keyword."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Stores the filtered notes in an ArrayList of Note"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return String containing the filtered list of notes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.log(Level.INFO, \"Logger Setup, will proceed to execute FindCommand.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e filteredNotes \u003d notebook.findNotes(keywords);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.log(Level.INFO, \"Filtered Notes into an ArrayList of notes. \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + \"Filtered Notes only has notes with title containing the keyword.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (filteredNotes.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            LOGGER.log(Level.INFO, \"Filtered notes is empty.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(FIND_NOTE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.log(Level.INFO, \"Filtered notes will be returned.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return Formatter.formatNotes(FIND_NOTE_SUCCESSFUL_MESSAGE, filteredNotes, notebook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public void setupLogger() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        consoleHandler.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(\"FindCommand.log\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            LOGGER.log(Level.SEVERE, \"File logger not working.\", error);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 4,
      "R-Ramana": 74,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.HELP_COMMAND_USAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Lists all the commands and usage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"HelpCommand\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.log(Level.INFO, \"Logger Setup, will return HELP_STRING.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return Formatter.formatString(HELP_COMMAND_USAGE, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public void setupLogger() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        consoleHandler.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LOGGER.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(\"HelpCommand.log\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            LOGGER.log(Level.SEVERE, \"File logger not working.\", error);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 45,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/IncorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import com.diogonunes.jcolor.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static com.diogonunes.jcolor.Ansi.colorize;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents an incorrect command. Upon execution, produces a message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return Formatter.formatString(colorize(message, Attribute.RED_TEXT()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 22,
      "Nazryl": 2
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/ListEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.LIST_EVENT_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.LIST_EVENT_SUCCESSFUL_TIME_PERIOD_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.LIST_EVENT_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.LIST_EVENT_UNSUCCESSFUL_TIME_PERIOD_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.LIST_E_COMMAND_USAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Lists all the Events in the Timetable. Can limit search to specific time periods."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class ListEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final int SMALLEST_YEAR \u003d 1000;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final int LARGEST_YEAR \u003d 3000;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final int SMALLEST_MONTH \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final int LARGEST_MONTH \u003d 12;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets how the command is expected to be used."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return String representation of how the command is to be used."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return LIST_E_COMMAND_USAGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructs a ListEventCommand to list all the Events in the Timetable."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ListEventCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.year \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.month \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructs a ListEventCommand with a year and month to look in."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param year Year to look for events."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param month Month to look for events."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ListEventCommand(int year, int month) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructs a ListEventCommand with a year to look in."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param year Year to look for events."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ListEventCommand(int year) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.month \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Just list all events, recurring or not, without repeat."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (year \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cEvent\u003e events \u003d timetable.getEvents();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return Formatter.formatString(LIST_EVENT_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return Formatter.formatTimetable(LIST_EVENT_SUCCESSFUL_MESSAGE, events);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Display the whole year if no month, else display only that month."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        HashMap\u003cMonth, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e calendar;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (month !\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            calendar \u003d timetable.getMonthTimetable(year, month);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            calendar \u003d timetable.getYearTimetable(year);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (calendar.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return Formatter.formatString(LIST_EVENT_UNSUCCESSFUL_TIME_PERIOD_MESSAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return Formatter.formatTimetable(LIST_EVENT_SUCCESSFUL_TIME_PERIOD_MESSAGE, year, month, calendar);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 6,
      "R-Ramana": 5,
      "brandonywl": 85
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/ListNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TaggableObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.ui.Formatter.formatNotes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.ARCHIVE_NOTES_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EMPTY_NOTEBOOK_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.INVALID_TAG_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.LIST_NOTES_MESSAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.PINNED_NOTES_MESSAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.UNPINNED_NOTES_MESSAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Lists all the Notes in the Notebook."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class ListNoteCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private boolean isSorted;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private boolean isArchived;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private Boolean isAscendingOrder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a ListCommand to list all the Notes in the Notebook in a sorted order."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param isAscendingOrder determines the order of the sorting of the Notes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand(Boolean isAscendingOrder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.tags \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isSorted \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isArchived \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isAscendingOrder \u003d isAscendingOrder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a ListNoteCommand to list all the Notes in the Notebook in the default order."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.tags \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isArchived \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isAscendingOrder \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a ListNoteCommand to list all the Notes in the Archived Notebook."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand(boolean isArchived) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.tags \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isArchived \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isAscendingOrder \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a ListNoteCommand to list all the Notes in the Notebook that has the tag(s)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param tags tags of the Notes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isArchived \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isAscendingOrder \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a ListNoteCommand to list all the Notes in the Notebook, that has the tag(s), in a sorted order."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param isAscendingOrder order of the sort."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param tags tags of the Notes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand(Boolean isAscendingOrder, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isAscendingOrder \u003d isAscendingOrder;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isSorted \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isArchived \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Depending on the constructor that is used, there are multiple ways to list out the notes in a notebook."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Method calls other methods for sorting alphabetically, splitting pinned/unpinned notes, listing archived notes."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Also gets the tags and the mapped notes if needed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return String value to be formatted and printed out to the CLI."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e pinned;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e unpinned;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // if user inputs /archive, regardless of other commands will only display notes that have been archived"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // no sorting, no viewing, no filtering of notes in the archived notebook."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (isArchived) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            notes \u003d notebook.getArchivedNotes();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return formatNotes(ARCHIVE_NOTES_MESSAGE, notes, notebook);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // if no /archive or /tags and there is no pinned notes at all this if-else block will be executed"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (!notebook.checkPinned() \u0026\u0026 tags \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (!isSorted) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // get notes in default order"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                notes \u003d notebook.getNotes();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else if (isSorted) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // get notes sorted alphabetically all from the main notebook"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                notes \u003d notebook.getSortedList(isAscendingOrder, (Boolean) null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (notes.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return Formatter.formatString(EMPTY_NOTEBOOK_MESSAGE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return formatNotes(LIST_NOTES_MESSAGE, notes, notebook);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // if no /archive or /tags and there are pinned notes this if-else block will be executed"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (notebook.checkPinned() \u0026\u0026 tags \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (!isSorted) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // get notes in default order"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                pinned \u003d notebook.getPinnedNotes();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                unpinned \u003d notebook.getUnpinnedNotes();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // get notes sorted alphabetically from the main notebook (isPinned is a flag to get filtered notes)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                pinned \u003d notebook.getSortedList(isAscendingOrder, true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                unpinned \u003d notebook.getSortedList(isAscendingOrder, false);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return formatNotes(PINNED_NOTES_MESSAGE, UNPINNED_NOTES_MESSAGE, pinned, unpinned, notebook);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Obtaining ArrayList\u003cString\u003e of tags and parsing it to get an ArrayList\u003cTag\u003e of tags"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Map\u003cTag, ArrayList\u003cTaggableObject\u003e\u003e tagMap \u003d tagManager.getTagMap();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (String tag : tags) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            Tag currentTag \u003d tagManager.getTag(tag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (currentTag !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                tagList.add(currentTag);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Check if the user inputted tags match any of the existing tags."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (tagList.isEmpty()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(INVALID_TAG_MESSAGE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Based on user inputted tags, will store the respective values (notes) in an ArrayList"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // E.g. if user input 2 tags, CS2113 and important, will have 2 ArrayList of notes"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        //      1 for the values corresponding to CS2113 and the other for important tag"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cArrayList\u003cNote\u003e\u003e values \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (int i \u003d 0; i \u003c tagList.size(); i++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            ArrayList\u003cTaggableObject\u003e taggableObject \u003d tagMap.get(tagList.get(i));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            ArrayList\u003cNote\u003e tagObjectsAsNote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            for (TaggableObject tagObject : taggableObject) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                if (tagObject instanceof Note) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    tagObjectsAsNote.add((Note) tagObject);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            values.add(tagObjectsAsNote);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Account for note duplicates (multiple tags) and if archived."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // For e.g. In case an item has both CS2113 and Important tag"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Or if a note is archived"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (ArrayList\u003cNote\u003e value : values) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            for (Note note : value) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                if (!notes.contains(note) \u0026\u0026 !note.getIsArchived()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    notes.add(note);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Checking for empty notes List"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (notes.isEmpty()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(EMPTY_NOTEBOOK_MESSAGE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // if no /archive or pinned notes and there are /tags"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (!notebook.checkPinned() \u0026\u0026 tags !\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            ArrayList\u003cNote\u003e sortedTaggedNotes;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (isSorted) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // Sort the tagged notes"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                sortedTaggedNotes \u003d notebook.getSortedList(isAscendingOrder, null, notes);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                sortedTaggedNotes \u003d notes;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return formatNotes(LIST_NOTES_MESSAGE, sortedTaggedNotes, notebook);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // if no /archive and there are both pinned notes and /tags"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (notebook.checkPinned() \u0026\u0026 tags !\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (!isSorted) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // get notes in default order"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                pinned \u003d notebook.getPinnedNotes(notes);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                unpinned \u003d notebook.getUnpinnedNotes(notes);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // get notes sorted alphabetically from the main notebook (isPinned is a flag to get filtered notes)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                pinned \u003d notebook.getSortedList(isAscendingOrder, true, notes);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                unpinned \u003d notebook.getSortedList(isAscendingOrder, false, notes);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return formatNotes(PINNED_NOTES_MESSAGE, UNPINNED_NOTES_MESSAGE, pinned, unpinned, notebook);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return formatNotes(LIST_NOTES_MESSAGE, notes, notebook);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10,
      "R-Ramana": 211
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/ListTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.LIST_TAG_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NO_TAG_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Lists all the Tags."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class ListTagCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-t\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e executedResult \u003d tagManager.getAllTagsName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (executedResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return Formatter.formatString(NO_TAG_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            executedResult.add(0, LIST_TAG_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return Formatter.formatString(executedResult, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 26,
      "R-Ramana": 3
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/PinCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_DOES_NOT_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Pins or unpins a Note in the Notebook."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class PinCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"PinCommand\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pin-n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private boolean isPinByIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Constructs a PinCommand to pin or unpin a Note in the Notebook by the index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param index of the Note."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public PinCommand(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.title \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.isPinByIndex \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LOGGER.log(Level.INFO, \"New pinCommand object created.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Constructs a PinCommand to pin or unpin a Note in the Notebook by the title."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param title of the Note."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public PinCommand(String title) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.isPinByIndex \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LOGGER.log(Level.INFO, \"New pinCommand object created.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Note note \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isPinByIndex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                note \u003d notebook.getNotes().get(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                LOGGER.log(Level.INFO, \"Note does note exist. unable to find note with index\" + index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            LOGGER.log(Level.INFO, \"Note found using index\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            for (Note notes : notebook.getNotes()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                if (notes.getTitle().equalsIgnoreCase(title)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    note \u003d notes;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    LOGGER.log(Level.INFO, \"Note found using title of note\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            LOGGER.log(Level.INFO, \"Note does not exist.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        note.togglePinned();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LOGGER.log(Level.INFO, \"Pin status of note toggled\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            storageManager.saveAllNoteDetails(false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            return Formatter.formatString(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return Formatter.formatString(note.getTitle() + \" pinned: \" + note.getPinnedString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private void setupLogger() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(\"PinCommand.log\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            LOGGER.log(Level.SEVERE, \"File logger not working.\", exception);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 2,
      "prachi2023": 100,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/RemindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NO_REMINDERS_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.REMINDERS_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Returns all the reminders that should occur today."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind-e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Default constructor of RemindEvent. No arguments are expected as we are only looking at reminders today."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public RemindCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ArrayList\u003cReminder\u003e reminders \u003d timetable.getReminders();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (reminders.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            return Formatter.formatString(REMINDERS_MESSAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            return Formatter.formatReminders(NO_REMINDERS_MESSAGE, reminders);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 3,
      "brandonywl": 3,
      "prachi2023": 25,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/TagEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.INDEX_OUT_OF_RANGE_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.TAG_HEADER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.TAG_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.UNTAG_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Tags or untags a Note."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class TagEventCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag-e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a TagCommand to tag or untag a Note."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TagEventCommand(int index, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Event event \u003d timetable.getEvent(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString\u003e executedMessage \u003d tagManager.tagAndUntag(event, tags, TAG_MESSAGE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    UNTAG_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            executedMessage.add(0, TAG_HEADER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return Formatter.formatString(executedMessage, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return Formatter.formatString(INDEX_OUT_OF_RANGE_MESSAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 43,
      "R-Ramana": 4
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/TagNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.INDEX_OUT_OF_RANGE_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.TAG_HEADER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.TAG_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.UNTAG_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Tags or untags a Note."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class TagNoteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag-n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a TagCommand to tag or untag a Note."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TagNoteCommand(int index, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Note note \u003d notebook.getNotes().get(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString\u003e executedMessage \u003d tagManager.tagAndUntag(note, tags, TAG_MESSAGE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    UNTAG_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            executedMessage.add(0, TAG_HEADER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // save the changed details"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                storageManager.saveAllNoteDetails(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return Formatter.formatString(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return Formatter.formatString(executedMessage, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return Formatter.formatString(INDEX_OUT_OF_RANGE_MESSAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 49,
      "R-Ramana": 5,
      "prachi2023": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/UnarchiveNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FILE_WRITE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.INDEX_OUT_OF_RANGE_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_DOES_NOT_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.UNARCHIVE_NOTE_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Un-archives a Note from the Notebook."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class UnarchiveNoteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchive-n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String title \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a UnarchiveNoteCommand to un-archive a Note."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param index of the item to be un-archived."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public UnarchiveNoteCommand(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a UnarchiveNoteCommand to un-archive a Note."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param title of the item to be un-archived."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public UnarchiveNoteCommand(String title) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // If there is no title, un-archive note by index. Else un-archive by title."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (title.isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                if (index \u003e notebook.getArchivedNoteSize()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    return Formatter.formatString(INDEX_OUT_OF_RANGE_MESSAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                title \u003d notebook.unarchiveNotes(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // unarchiveNotes(title) returns a boolean, false if no such title exists"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    notebook.unarchiveNotes(title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                storageManager.saveAllNoteDetails(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                storageManager.saveAllNoteDetails(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                // delete the content file from unarchived notes and add it to archived"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                storageManager.deleteNoteContentFile(title, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                storageManager.saveNoteContent(notebook.getNote(title, false), false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return Formatter.formatString(FILE_WRITE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } catch (SystemException exception) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return Formatter.formatString(exception.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(UNARCHIVE_NOTE_SUCCESSFUL_MESSAGE + title);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 77,
      "prachi2023": 2
    }
  },
  {
    "path": "src/main/java/seedu/notus/command/ViewNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_DOES_NOT_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.VIEW_NOTE_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Views a specific Note in the Notebook."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class ViewNoteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"ViewNoteCommand\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view-n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private boolean isViewByIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Constructs a ViewNoteCommand to view a Note by the index."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param index of the Note."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public ViewNoteCommand(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.title \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.isViewByIndex \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LOGGER.log(Level.INFO, \"New ViewNoteCommand object created using index.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Constructs a ViewNoteCommand to view a Note by the title."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param title of the Note."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public ViewNoteCommand(String title) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.isViewByIndex \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LOGGER.log(Level.INFO, \"New ViewNoteCommand object created using title.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Note note \u003d new Note(\"\", null, false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        boolean noteExists \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isViewByIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                note \u003d notebook.getNotes().get(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                LOGGER.log(Level.INFO, \"Note does note exist. unable to find note with index\" + index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            LOGGER.log(Level.INFO, \"Note found using index\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            noteExists \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            for (Note notes : notebook.getNotes()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                if (notes.getTitle().equalsIgnoreCase(title)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    note \u003d notes;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    noteExists \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    LOGGER.log(Level.INFO, \"Note found using title of note\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!noteExists) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            LOGGER.log(Level.INFO, \"Note does not exist.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            return Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return Formatter.formatNote(VIEW_NOTE_SUCCESSFUL_MESSAGE, note);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private void setupLogger() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(\"ViewNoteCommand.log\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            LOGGER.log(Level.SEVERE, \"File logger not working.\", exception);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 3,
      "prachi2023": 93,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/exception/SystemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Signals the different type of possible exceptions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class SystemException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Types of exception. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public enum ExceptionType {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Command related exception type"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        EXCEPTION_INVALID_COMMAND(\"Invalid Command. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                + \"Please try again or enter help to get a list of valid commands.\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        EXCEPTION_INVALID_PREFIX(\"Type of prefix not recognized!\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_MESSAGE_AFTER_COMMAND(\"Missing information! Please provide the necessary information!\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_DESCRIPTION(\"Missing description!\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TITLE_PREFIX(\"Missing title prefix!\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TITLE(\"Missing title!\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TIMING_PREFIX(\"Please include the timing prefix.\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_TIMING(\"This event does not have a timing specified!\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TAG_PREFIX(\"Missing tag prefix!\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TAG(\"Missing tag name!\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_SORT(\"Missing sort order! Please specify how you would like to sort. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + \"up or down.\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_SORT_TYPE(\"Invalid sort order command! \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                + \"Only \\\"up\\\" and \\\"down\\\" are recognized as valid commands.\" + Formatter.LS"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + \"Up for ascending and down for descending.\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_INDEX_PREFIX(\"Missing index prefix!\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_INDEX(\"Missing index!\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        EXCEPTION_MISSING_LINE_CONTENT(\"Missing line contents!\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_PIN(\"Missing pin!\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_ARCHIVE(\"Missing archive!\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_KEYWORD(\"No search query input. Please enter a keyword for search results.\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        EXCEPTION_CONTENT_MISSING(\"Content cannot be blank!\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        EXCEPTION_MISSING_PREFIX(\"Missing /add, /ln, /del, /tag or /c prefix!\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Note specific exception type"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_END_INPUT(\"Input /end on a new line!\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        EXCEPTION_INVALID_DEL_INPUT(\"There is no previous line to delete!\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_INPUT_FORMAT(\"Format of input is not valid!\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        EXCEPTION_CLASH_FORMAT(\"Only /add, /ln or /del must be used at a time!\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Event related exception type"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_RECURRING_END_TIME(\"Please specify until when do you want \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"this event to repeat.\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_EARLY_REMINDER(\"Please limit your reminders to at most 1 week earlier.\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_TIMING_FORMAT(\"Your input has a wrong format for the date time input. \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"Please follow the yyyy-MM-dd HH:mm format with the \\\"-\\\" and \\\":\\\" in 24-Hour Clock format\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_LIST_TIMING_FORMAT(\"Your input list timing query has a wrong format. \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"Try YYYY-MM or YYYY\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_END_RECURRENCE_TIMING_FORMAT(\"Your end recurrence date has a wrong format. \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"Try yyyy-MM-dd HH:mm format while following the 24-Hour Clock format\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_REMINDER_FORMAT(\"Your input has a wrong format for the time before reminder. \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"Please follow [NumberOfUnits-Units] format where NumberOfUnits \u003e 0 and units \u003d \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + Event.REMINDER_DAY + \" or \" + Event.REMINDER_WEEK + \".\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_EDIT_REMINDERS(\"Please specify what reminder you would like to edit!\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"Please follow [NumberOfUnits-Units] format where NumberOfUnits \u003e 0 and units \u003d \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + Event.REMINDER_DAY + \" or \" + Event.REMINDER_WEEK + \".\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_EDIT_REMINDER_SET(\"Please indicate only one edit type for reminder!\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \" Either add, drop or clear.\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_SEARCH_DATE_OUT_OF_RANGE(\"Your query is out of range for our system.\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_RECURRING_TYPE(\"Please indicate whether you would like to have the event \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"repeat daily, weekly, monthly or yearly\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_EDIT_RECURRING_TYPE(\"Please indicate whether you would like to have the event \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"repeat none, daily, weekly, monthly or yearly\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        EXCEPTION_INVALID_RECURRING_TYPE(\"There are only the following recurring types: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"daily, weekly, monthly or yearly\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_EDIT_RECURRING_TYPE(\"There are only the following recurring types: \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"none, daily, weekly, monthly or yearly\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_TIME_UNIT(\"That time unit is not accepted!\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        // Storage related exceptions"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        EXCEPTION_FILE_CREATION_ERROR(\"Unable to create a file!\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        EXCEPTION_FILE_NOT_FOUND_ERROR(\"Unable to find a file!\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        EXCEPTION_FILE_DELETION_ERROR(\"Unable to delete a file\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // General exception type"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_INDEX_FORMAT(\"Invalid index format!\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        EXCEPTION_INVALID_INDEX_VALUE(\"Invalid index value!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /** The exception message. */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        private final String exceptionMessage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * Constructor of an ExceptionType."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * @param exceptionMessage The exception message."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ExceptionType(String exceptionMessage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.exceptionMessage \u003d exceptionMessage;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * Overrides the parent toString method."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * @return The exception message."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return exceptionMessage;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public SystemException(ExceptionType exceptionType) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        super(exceptionType.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 69,
      "R-Ramana": 3,
      "brandonywl": 28,
      "prachi2023": 6,
      "Nazryl": 13
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/notebook/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TaggableObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_PIN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.ui.Formatter.LS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Represents a Note. Contains all the information of a note."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Note extends TaggableObject {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private ArrayList\u003cString\u003e content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Boolean isPinned;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private boolean isArchived;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs a Note object with its title, content and pinned status provided."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param title of the note."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param content of the note."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param isPinned status of the note."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public Note(String title, ArrayList\u003cString\u003e content, Boolean isPinned, boolean isArchived) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.isPinned \u003d isPinned;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs a Note object with its title, content, pinned status and tags provided."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param title of the note."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param content of the note."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param isPinned status of the note."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param tags of the note."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public Note(String title, ArrayList\u003cString\u003e content, Boolean isPinned, boolean isArchived, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this(title, content, isPinned, isArchived);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        super.setTags(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Gets the title of note from existing data."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return title of the note."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Sets the title of note from the changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Gets the content of note from existing data."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return content of the note."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public ArrayList\u003cString\u003e getContent() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String getContentString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String contentString \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        for (String information: content) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            contentString +\u003d information + LS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return contentString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Sets the content of note from the changes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void setContent(ArrayList\u003cString\u003e content) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Gets the pinned status of a note."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return true if note is pinned, false otherwise."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public boolean getPinned() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return (isPinned);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String getPinnedString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return (isPinned ? \"Y\" : \"N\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void togglePinned() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        isPinned \u003d !isPinned;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void setPinned(Boolean pinned) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        isPinned \u003d pinned;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void toggleArchived() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        isArchived \u003d !isArchived;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public boolean getIsArchived() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return this.isArchived;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void setArchived(boolean archived) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        isArchived \u003d archived;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String noteDetails \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String tagDetails \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        for (Tag tag: this.tags) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            tagDetails +\u003d PREFIX_DELIMITER + PREFIX_TAG + \" \" + tag.toSaveString() + \" \";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        noteDetails +\u003d PREFIX_DELIMITER + PREFIX_TITLE + \" \" + this.title + \" \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    + PREFIX_DELIMITER + PREFIX_PIN + \" \" + this.isPinned + \" \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    + PREFIX_DELIMITER + PREFIX_ARCHIVE + \" \" + this.isArchived + \" \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    + tagDetails + LS;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return noteDetails;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 12,
      "Nazryl": 130
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/notebook/Notebook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Represents a Notebook object. Contains all the notes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class Notebook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private ArrayList\u003cNote\u003e archivedNotes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Creates a new list of notes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public Notebook() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        archivedNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Creates a list of notes from existing data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param notes ArrayList of Note consisting of existing data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public Notebook(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Gets a list of notes from existing data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return notes of existing data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArrayList\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return this.notes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Checks if any note in the notebook is pinned."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Method exits the moment there is a pinned note."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return boolean value - true if any note is pinned and false otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public boolean checkPinned() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (Note note : notes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (note.getPinned()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Gets all the pinned notes from the notebook."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Adds all the notes that are pinned to another ArrayList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return noteList ArrayList containing all the pinned notes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArrayList\u003cNote\u003e getPinnedNotes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (Note note : notes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (note.getPinned()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteList.add(note);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return noteList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Gets all the pinned notes from the specified notebook."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Adds all the notes that are pinned to another ArrayList."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param noteArrayList ArrayList to be filtered."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return noteList ArrayList containing all the pinned notes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArrayList\u003cNote\u003e getPinnedNotes(ArrayList\u003cNote\u003e noteArrayList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (Note note : noteArrayList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (note.getPinned()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteList.add(note);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return noteList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Gets all the unpinned notes from the notebook."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Adds all the notes that are unpinned to another ArrayList."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return noteList ArrayList containing all the unpinned notes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArrayList\u003cNote\u003e getUnpinnedNotes() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (Note note : notes) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (!note.getPinned()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteList.add(note);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return noteList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Gets all the unpinned notes from the specified notebook."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Adds all the notes that are unpinned to another ArrayList."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param noteArrayList ArrayList to be filtered."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return noteList ArrayList containing all the unpinned notes."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArrayList\u003cNote\u003e getUnpinnedNotes(ArrayList\u003cNote\u003e noteArrayList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (Note note : noteArrayList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (!note.getPinned()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteList.add(note);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return noteList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Sorts the notebook alphabetically (a-z)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Depending on the isAscending order boolean value, sort order can be reversed (z-a)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Pinned notes and unpinned notes (if they exist) will be sorted separately."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Returns an arrayList of the sorted notes."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param isAscendingOrder boolean specifies if the notes will be sorted a-z or z-a (in reverse order)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param isPinned Boolean specifies what kind of notes to be filtered (acts as a toggle)."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *                 Null means no pinned notes exist and so all the notes will be sorted."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *                 true means only the pinned notes will be sorted."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *                 false means only the unpinned notes will be sorted."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return sortedNotes ArrayList containing the sorted notes."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArrayList\u003cNote\u003e getSortedList(Boolean isAscendingOrder, Boolean isPinned) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e sortedNotes;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (isPinned \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // Takes the notes in the notebook and sorts them according to title, alphabetically (a-z)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            sortedNotes \u003d (ArrayList\u003cNote\u003e) notes.stream()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .sorted(Comparator.comparing(a -\u003e a.getTitle().toLowerCase()))"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else if (!isPinned) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // Takes only the unpinned notes in the notebook and sorts them according to title, alphabetically (a-z)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            sortedNotes \u003d (ArrayList\u003cNote\u003e) notes.stream()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter((s) -\u003e !s.getPinned())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .sorted(Comparator.comparing(a -\u003e a.getTitle().toLowerCase()))"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // Takes only the pinned notes in the notebook and sorts them according to title, alphabetically (a-z)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            sortedNotes \u003d (ArrayList\u003cNote\u003e) notes.stream()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter(Note::getPinned)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .sorted(Comparator.comparing(a -\u003e a.getTitle().toLowerCase()))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (!isAscendingOrder) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            Collections.reverse(sortedNotes);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return sortedNotes;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Sorts the specified notebook alphabetically (a-z)."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Depending on the isAscending order boolean value, sort order can be reversed (z-a)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Pinned notes and unpinned notes (if they exist) will be sorted separately."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Returns an arrayList of the sorted notes."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param noteArrayList ArrayList of notes that is required to be sorted."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param isAscendingOrder boolean specifies if the notes will be sorted a-z or z-a (in reverse order)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param isPinned Boolean specifies what kind of notes to be filtered (acts as a toggle)."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *                 Null means no pinned notes exist and so all the notes will be sorted."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *                 true means only the pinned notes will be sorted."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *                 false means only the unpinned notes will be sorted."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return sortedNotes ArrayList containing the sorted notes."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArrayList\u003cNote\u003e getSortedList(Boolean isAscendingOrder, Boolean isPinned, ArrayList\u003cNote\u003e noteArrayList) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e sortedNotes;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (isPinned \u003d\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // Takes the notes in the notebook and sorts them according to title, alphabetically (a-z)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            sortedNotes \u003d (ArrayList\u003cNote\u003e) noteArrayList.stream()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .sorted(Comparator.comparing(a -\u003e a.getTitle().toLowerCase()))"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else if (isPinned) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // Takes only the pinned notes in the notebook and sorts them according to title, alphabetically (a-z)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            sortedNotes \u003d (ArrayList\u003cNote\u003e) noteArrayList.stream()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter(Note::getPinned)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .sorted(Comparator.comparing(a -\u003e a.getTitle().toLowerCase()))"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // Takes only the unpinned notes in the notebook and sorts them according to title, alphabetically (a-z)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            sortedNotes \u003d (ArrayList\u003cNote\u003e) noteArrayList.stream()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter((s) -\u003e !s.getPinned())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .sorted(Comparator.comparing(a -\u003e a.getTitle().toLowerCase()))"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (!isAscendingOrder) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            Collections.reverse(sortedNotes);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return sortedNotes;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public Note getNote(int index) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return notes.get(index);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Filters the specified notebook to get a note that has a title matching to the noteTitle parameter."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param noteTitle String containing the title of the note."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param isArchive boolean specifies what kind of notebook to be used for filtering (acts as a toggle)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *                  If true, uses the archive notebook. Else it uses the notes notebook."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return note that was filtered."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public Note getNote(String noteTitle, boolean isArchive) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (!isArchive) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return notes.stream()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter((s) -\u003e s.getTitle().equalsIgnoreCase(noteTitle))"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .findFirst().get();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return archivedNotes.stream()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .filter((s) -\u003e s.getTitle().equalsIgnoreCase(noteTitle))"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .findFirst().get();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Returns true if there is a matching note based on the note title parameter."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param noteTitle String containing the title of the note."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return if the note exist."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public boolean getNote(String noteTitle) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return notes.stream().anyMatch(note -\u003e note.getTitle().equalsIgnoreCase(noteTitle));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Returns true if there is a matching note in the archived notes based on the note title parameter."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param noteTitle String containing the title of the note."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return if the note exist."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public boolean getArchiveNote(String noteTitle) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return archivedNotes.stream().anyMatch(note -\u003e note.getTitle().equalsIgnoreCase(noteTitle));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Adds a note into the notebook."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param note refers to the note to be added."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (note.getIsArchived()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            archivedNotes.add(note);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            notes.add(note);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Removes a note from the notebook."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param index of the item to be deleted."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return if the note is deleted."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public boolean deleteNote(int index) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notes.remove(index);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Removes a note from the notebook."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param title String containing the title of the note."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return if the note is deleted."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public boolean deleteNote(String title) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return notes.removeIf(note -\u003e note.getTitle().equalsIgnoreCase(title));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Replace a note from the notebook."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param index of the item to be edited."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param note refers to the note to be added."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public void setNotes(int index, Note note) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notes.set(index, note);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Archives the specified note based on the index value."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Archiving is done by removing the note from notes and adding it to a separate archivedNotes notebook."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param index integer value of the note to be archived"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return String value of the note title."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public String archiveNotes(int index) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note archivedNote \u003d notes.get(index);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        archivedNotes.add(archivedNote);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        archivedNote.toggleArchived();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notes.remove(index);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return archivedNote.getTitle();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Archives the specified note based on the index value."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Archiving is done by removing the note from notes and adding it to a separate archivedNotes notebook."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param noteTitle String containing the title of the note"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return isDeleted boolean value (true if a note containing the user inputted title exists, false otherwise)."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public boolean archiveNotes(String noteTitle) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        boolean isDeleted;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note archivedNote \u003d getNote(noteTitle, false);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // true if title exist and is removed from notebook"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        isDeleted \u003d deleteNote(noteTitle);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (isDeleted) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            archivedNotes.add(archivedNote);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            archivedNote.toggleArchived();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return isDeleted;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Un-archives the specified note based on the index value."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Un-archiving is done by removing the note from archivedNotes and adding it to notes."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param index integer value of the note to be un-archived"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return String value of the note title."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public String unarchiveNotes(int index) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note unarchivedNote \u003d archivedNotes.get(index);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notes.add(unarchivedNote);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        unarchivedNote.toggleArchived();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        archivedNotes.remove(unarchivedNote);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return unarchivedNote.getTitle();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Un-archives the specified note based on the index value."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Un-archiving is done by removing the note from archivedNotes and adding it to notes."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param noteTitle String containing the title of the note"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return isDeleted boolean value (true if a note containing the user inputted title exists, false otherwise)."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public boolean unarchiveNotes(String noteTitle) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        boolean isDeleted;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note unarchivedNote \u003d getNote(noteTitle, true);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // true if title exist and is removed from notebook"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        isDeleted \u003d archivedNotes.remove(unarchivedNote);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (isDeleted) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            notes.add(unarchivedNote);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            unarchivedNote.toggleArchived();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return isDeleted;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArrayList\u003cNote\u003e getArchivedNotes() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return archivedNotes;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ArrayList\u003cNote\u003e findNotes(String keywords) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return (ArrayList\u003cNote\u003e) notes.stream()"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .filter((s) -\u003e s.getTitle().toLowerCase().contains(keywords.toLowerCase()))"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return notes.size();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public int getNoteIndex(Note note) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return notes.indexOf(note) + 1;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public int getArchiveNoteIndex(Note note) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return archivedNotes.indexOf(note) + 1;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public int getArchivedNoteSize() {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return archivedNotes.size();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 403,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import com.diogonunes.jcolor.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static com.diogonunes.jcolor.Ansi.colorize;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a tag with respective color bind to it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_RED_STRING \u003d \"RED\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_GREEN_STRING \u003d \"GREEN\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_BLUE_STRING \u003d \"BLUE\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_YELLOW_STRING \u003d \"YELLOW\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_MAGENTA_STRING \u003d \"PURPLE\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_CYAN_STRING \u003d \"CYAN\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_WHITE_STRING \u003d \"WHITE\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Attribute tagAttribute;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Overloaded constructor to take in the color of the tag."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName Name of the tag to be set."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagColor Color of the tag to be set."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Tag(String tagName, String tagColor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTagName(tagName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTagColor(tagColor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Overloaded constructor to take in the ansi value of the color of the tag."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName Name of the tag to be set."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param attribute Attribute of the color to be set."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Tag(String tagName, int attribute) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTagName(tagName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTagAttribute(Attribute.BACK_COLOR(attribute));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Getter function for the name of the tag. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Setter function for the name of the tag. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTagName(String tagName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Setter function for the color of the tag. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTagColor(String tagColor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        switch (tagColor.toUpperCase()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_RED_STRING:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagAttribute \u003d Attribute.BRIGHT_RED_TEXT();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_GREEN_STRING:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagAttribute \u003d Attribute.BRIGHT_GREEN_TEXT();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_BLUE_STRING:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagAttribute \u003d Attribute.BRIGHT_BLUE_TEXT();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_YELLOW_STRING:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagAttribute \u003d Attribute.BRIGHT_YELLOW_TEXT();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_MAGENTA_STRING:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagAttribute \u003d Attribute.BRIGHT_MAGENTA_TEXT();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_CYAN_STRING:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagAttribute \u003d Attribute.BRIGHT_CYAN_TEXT();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_WHITE_STRING:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagAttribute \u003d Attribute.BRIGHT_WHITE_TEXT();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Attribute getTagAttribute() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagAttribute;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTagAttribute(Attribute tagColor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagAttribute \u003d tagColor;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Overrides the parent class toString function to return the tag with its tag color."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return tagName with its respective tag attribute."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return colorize(\"[\" + tagName + \"]\", tagAttribute);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String colorString \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tagAttribute.toString().equals(Attribute.BRIGHT_RED_TEXT().toString())) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            colorString \u003d COLOR_RED_STRING;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else if (tagAttribute.toString().equals(Attribute.BRIGHT_GREEN_TEXT().toString())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            colorString \u003d COLOR_GREEN_STRING;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else if (tagAttribute.toString().equals(Attribute.BRIGHT_BLUE_TEXT().toString())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            colorString \u003d COLOR_BLUE_STRING;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else if (tagAttribute.toString().equals(Attribute.BRIGHT_YELLOW_TEXT().toString())) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            colorString \u003d COLOR_YELLOW_STRING;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else if (tagAttribute.toString().equals(Attribute.BRIGHT_CYAN_TEXT().toString())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            colorString \u003d COLOR_CYAN_STRING;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else if (tagAttribute.toString().equals(Attribute.BRIGHT_MAGENTA_TEXT().toString())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            colorString \u003d COLOR_MAGENTA_STRING;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else if (tagAttribute.toString().equals(Attribute.BRIGHT_WHITE_TEXT().toString())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            colorString \u003d COLOR_WHITE_STRING;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagName + \" \" + colorString;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 120,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/tag/TagManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a TagManager. Manages the tags for the notes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class TagManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"TagManager\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Map\u003cTag, ArrayList\u003cTaggableObject\u003e\u003e tagMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TagManager() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Map\u003cTag, ArrayList\u003cTaggableObject\u003e\u003e getTagMap() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns the Tag that matches the tag name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName Name of the Tag to check."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return The tag if it exists, null otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Tag getTag(String tagName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tagMap.keySet()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (t.getTagName().equalsIgnoreCase(tagName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a Tag with the provided Tag."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag Provided Tag."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param overridesColor Determine if the tag color needs to be override."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return True if new Tag is created, false otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public boolean createTag(Tag tag, boolean overridesColor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Check if there exist a tag with the same tag name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Tag existingTag \u003d getTag(tag.getTagName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // If the tag does not exist, creates it."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (existingTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            LOGGER.log(Level.INFO, \"Creating a new tag: \" + tag.getTagName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagMap.put(tag, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (overridesColor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                LOGGER.log(Level.INFO, \"Overriding an existing tag: \" + existingTag.getTagName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                existingTag.setTagAttribute(tag.getTagAttribute());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Handles creation of multiple tags and returns the result of each creation."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags List of tags to be created."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param createSuccessfulString String for successful creation of tag."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param createUnsuccessfulString String for unsuccessful creation of tag"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Result of all tag creation."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cString\u003e createTag(ArrayList\u003cTag\u003e tags, String createSuccessfulString,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                                   String createUnsuccessfulString) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (createTag(t, true)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result.add(createSuccessfulString + getTag(t.getTagName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result.add(createUnsuccessfulString + getTag(t.getTagName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Tags a taggableObject with the provided Tag."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taggableObject Object to be tagged."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag Provided Tag."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void tagNote(TaggableObject taggableObject, Tag tag) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        LOGGER.log(Level.INFO, \"Adding tag to note: \" + tag.getTagName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap.get(tag).add(taggableObject);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taggableObject.getTags().add(tag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Removes a Tag from a taggableObject."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taggableObject Object to be untagged."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag Tag to be removed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void removeTag(TaggableObject taggableObject, Tag tag) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        LOGGER.log(Level.INFO, \"Removing tag: \" + tag.getTagName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap.get(tag).remove(taggableObject);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taggableObject.getTags().remove(tag);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Deletes a Tag from the Map. Object that have the Tag will be untagged."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag Tag to be deleted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return True if there exist the tag and is deleted, false otherwise."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public boolean deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Tag existingTag \u003d getTag(tag.getTagName());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (existingTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            LOGGER.log(Level.INFO, \"Tag does not exists, unable to delete: \" + tag.getTagName());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (TaggableObject taggableObject : tagMap.get(existingTag)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taggableObject.getTags().remove(existingTag);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        LOGGER.log(Level.INFO, \"Delete tag: \" + tag.getTagName());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap.remove(existingTag);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Handles deletion of multiple tags and returns the result of each deletion."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags List of tags to be created."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param deleteSuccessfulString String for successful deletion of tag."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param deleteUnsuccessfulString String for unsuccessful deletion of tag."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Result of all tag creation."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cString\u003e deleteTag(ArrayList\u003cTag\u003e tags, String deleteSuccessfulString,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                                   String deleteUnsuccessfulString) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag existingTag \u003d getTag(t.getTagName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (deleteTag(t)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result.add(deleteSuccessfulString + existingTag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result.add(deleteUnsuccessfulString + t);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns an arrayList of existing tags\u0027 name in the map."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return ArrayList of existing tags\u0027 name."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cString\u003e getAllTagsName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tagMap.isEmpty()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (Tag t : tagMap.keySet()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result.add(t.toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Rebinds all the tags in the object to the existing tags in the database."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taggableObject Object to have the tags rebind."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void rebindTags(TaggableObject taggableObject) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int numTagsToCheck \u003d taggableObject.getTags().size();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // loop through all the tags in object"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (int i \u003d 0; i \u003c numTagsToCheck; ++i) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // always check against the tag of the first object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag tag \u003d taggableObject.getTags().get(0);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            LOGGER.log(Level.INFO, \"Attempt to match with existing tag: \" + tag.getTagName());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // check if the tag exists in the database"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag existingTag \u003d getTag(tag.getTagName());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            taggableObject.getTags().remove(tag);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (existingTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                LOGGER.log(Level.INFO, \"Tag does not exist\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // if the tag does not exist in the database, create the tag and tag to note"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                createTag(tag, false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tagNote(taggableObject, tag);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else if (!taggableObject.getTags().contains(existingTag)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tagNote(taggableObject, existingTag);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Handles tagging and untagging of note with the given list of tags. If the note already has the tag, untags it,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * else tags the note. Returns the result of each tagging and untagging operation."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param taggableObject Object to be tagged or untagged."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags List of tags."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagString String for tagging of note."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param untagString String for untagging of note."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Result of all tagging and untagging operation."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cString\u003e tagAndUntag(TaggableObject taggableObject, ArrayList\u003cTag\u003e tags, String tagString,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                                         String untagString) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Tries to get the tag from the map"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag existingTag \u003d getTag(t.getTagName());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // check if the note contains such tag"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (taggableObject.getTags().contains(existingTag)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                removeTag(taggableObject, existingTag);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result.add(untagString + existingTag);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // runs the create tag in case existing tag is null, if it is not null, updates the tag"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                createTag(t, false);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                existingTag \u003d getTag(t.getTagName());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tagNote(taggableObject, existingTag);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                result.add(tagString + existingTag);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void setupLogger() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(\"TagManager.log\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            LOGGER.log(Level.SEVERE, \"File logger not working.\", exception);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        LOGGER.log(Level.INFO, \"New tagManager object created.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 254
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/tag/TaggableObject.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a TaggableObject. Contains an arraylist of tags. To be inherited by Note and Event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public abstract class TaggableObject {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TaggableObject() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTags(ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getTagsName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagsName \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagsName \u003d tagsName.concat(t.toString()).concat(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagsName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 32
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/timetable/DailyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every day."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class DailyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of DailyEvent with a specified recurrence type and specified endRecurrence date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endRecurrence When the Event should stop re-occurring."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderSchedule Reminder Schedule of when reminder should be provided for this event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public DailyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                      HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.DAILY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                reminderSchedule, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of DailyEvent with a specified recurrence type and default end time of recurrence (Year 3000)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderSchedule Reminder Schedule of when reminder should be provided for this event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public DailyEvent(String title, LocalDateTime dateTime, boolean isToRemind,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                      HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, RecurringEvent.DAILY_RECURRENCE_TYPE, reminderSchedule, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusDays(TIME_STEP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "brandonywl": 48
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/timetable/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TaggableObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Represents an Event. Contains all the information of an Event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class Event extends TaggableObject implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String REMINDER_DAY \u003d \"day\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String REMINDER_WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Boolean isToRemind;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Boolean isRecurring;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Creates an Event object with its title, date and time provided."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDateTime Start DateTime of the event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.isToRemind \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.isRecurring \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Creates an Event object with its title, date, time, isToRemind and isRecurring provided."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of the event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDateTime Start DateTime of the event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the event requires a reminder."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isRecurring Whether the event will re-occur."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDateTime startDateTime, boolean isToRemind, boolean isRecurring) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, startDateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.isToRemind \u003d isToRemind;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.isRecurring \u003d isRecurring;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Creates an Event object with its title, date, time, isToRemind, isRecurring, reminder periods and tags provided."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDateTime Start DateTime of event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the event requires a reminder."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isRecurring Whether the event will reoccur."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderPeriods When the reminders will be given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param tags Tags of the event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDateTime startDateTime, boolean isToRemind, boolean isRecurring,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                  HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, startDateTime, isToRemind, isRecurring);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.reminderPeriods \u003d reminderPeriods;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Creates an Event object with its title, date, time, isToRemind, isRecurring as well as reminder periods provided."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of event."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDateTime Start DateTime of event."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the event requires a reminder."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isRecurring Whether the event will reoccur."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderPeriods When the reminders will be given."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDateTime startDateTime, boolean isToRemind, boolean isRecurring,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                 HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, startDateTime, isToRemind, isRecurring);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.reminderPeriods \u003d reminderPeriods;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void setStartDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        startDateTime \u003d dateTime;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return startDateTime.toLocalDate();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return startDateTime.toLocalTime();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void setEndDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        endDateTime \u003d dateTime;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return endDateTime.toLocalDate();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return endDateTime.toLocalTime();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return startDateTime.toLocalDate().toString() + \" \" + startDateTime.toLocalTime().toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean getIsToRemind() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return isToRemind;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void setIsToRemind(boolean isToRemind) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.isToRemind \u003d isToRemind;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e getReminderPeriods() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return this.reminderPeriods;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void setReminderPeriods(HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.reminderPeriods \u003d reminderPeriods;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean getRecurring() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return isRecurring;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cString\u003e getReminderPeriodsString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cString\u003e periods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cInteger\u003e dayRepeatPeriod \u003d reminderPeriods.get(REMINDER_DAY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cInteger\u003e weekRepeatPeriod \u003d reminderPeriods.get(REMINDER_WEEK);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (dayRepeatPeriod !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (Integer unit: dayRepeatPeriod) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                periods.add(unit + \"-day\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (weekRepeatPeriod !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (Integer unit : weekRepeatPeriod) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                periods.add(unit + \"-week\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return periods;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Get all the reminder dates from that this Event would have."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return An ArrayList of Dates that reminders of this event should show."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cLocalDate\u003e getReminderDates() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cLocalDate\u003e dates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!isToRemind) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return dates;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (String unit : reminderPeriods.keySet()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cInteger\u003e timePeriodsInUnit \u003d reminderPeriods.get(unit);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate date \u003d this.startDateTime.toLocalDate();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (Integer timePeriod : timePeriodsInUnit) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                switch (unit) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case REMINDER_DAY:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    date \u003d this.startDateTime.toLocalDate().plusDays(-timePeriod);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case REMINDER_WEEK:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    date \u003d this.startDateTime.toLocalDate().plusWeeks(-timePeriod);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                dates.add(date);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        dates.sort(LocalDate::compareTo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dates;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Converts an Event to a format for a reminder."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Reduced String representation of an Event."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String toReminderString() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String titleString \u003d \"Event: \" + title;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String dateString \u003d \"Date: \" + startDateTime.toLocalDate().toString()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"\\tTime: \" + startDateTime.toLocalTime().toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return titleString + Formatter.LS + dateString;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String titleString \u003d \"Event: \" + title;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String dateString \u003d \"Date: \" + startDateTime.toLocalDate().toString()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"\\tTime: \" + startDateTime.toLocalTime().toString();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String remindString \u003d \"Reminder: \" + isToRemind;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String repeatingString \u003d \"Repeating: \" + isRecurring;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String lineSeparator \u003d Formatter.LS;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return titleString + lineSeparator + dateString + lineSeparator + remindString"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + lineSeparator + repeatingString;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public int compareTo(Event o) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return startDateTime.compareTo(o.startDateTime);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 6,
      "brandonywl": 227,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/timetable/MonthlyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every month."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class MonthlyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of MonthlyEvent with a specified recurrence type and specified endRecurrence date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endRecurrence When the Event should stop re-occurring."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderSchedule Reminder Schedule of when reminder should be provided for this event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public MonthlyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.MONTHLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                reminderSchedule, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of MonthlyEvent with a specified recurrence type and default end time of recurrence (Year 3000)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderSchedule Reminder Schedule of when reminder should be provided for this event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public MonthlyEvent(String title, LocalDateTime dateTime, boolean isToRemind,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, RecurringEvent.MONTHLY_RECURRENCE_TYPE, reminderSchedule, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusMonths(TIME_STEP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "brandonywl": 48
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/timetable/RecurringEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public abstract class RecurringEvent extends Event {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private LocalDate endRecurrenceDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private LocalTime endRecurrenceTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String recurrenceType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final LocalDate DEFAULT_END_RECURRENCE \u003d LocalDate.of(3000, 12, 31);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final LocalTime DEFAULT_END_RECURRENCE_TIME \u003d LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String NO_RECURRENCE_TYPE \u003d \"none\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String DAILY_RECURRENCE_TYPE \u003d \"daily\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String WEEKLY_RECURRENCE_TYPE \u003d \"weekly\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String MONTHLY_RECURRENCE_TYPE \u003d \"monthly\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String YEARLY_RECURRENCE_TYPE \u003d \"yearly\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrenceDate,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                          String recurrenceType, HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                          ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, true, reminderPeriods, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (endRecurrenceDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceDate \u003d DEFAULT_END_RECURRENCE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.endRecurrenceDate \u003d endRecurrenceDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.endRecurrenceTime \u003d DEFAULT_END_RECURRENCE_TIME;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.recurrenceType \u003d recurrenceType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent(String title, LocalDateTime dateTime, boolean isToRemind, String recurrenceType,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                          HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderPeriods, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, dateTime, isToRemind, DEFAULT_END_RECURRENCE, recurrenceType, reminderPeriods, tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String getRecurrenceType() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return recurrenceType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate getEndRecurrenceDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return endRecurrenceDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String getEndRecurrenceDateTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return endRecurrenceDate.toString() + \" \" + endRecurrenceTime.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void setEndRecurrenceDate(LocalDate endRecurrenceDate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.endRecurrenceDate \u003d endRecurrenceDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Checks if the event should still re-occur at a specified date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to check."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Whether to re-occur or not."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean checkAfterEndRecurrence(LocalDate date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return (endRecurrenceDate.compareTo(date) \u003c 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Checks whether the current RecurringEvent object will re-occur between the start and end date (inclusive)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * and return an ArrayList that contains an event for all the times that it re-occurs."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start date of the time period to check (inclusive)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End date of the time period to check (inclusive)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of this event at different dates at a specified interval within the time period."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getRecurrences(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        while (startDate.compareTo(endDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (checkAfterEndRecurrence(startDate)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return eventSet;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (toReoccur(startDate)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                LocalDateTime dateTime \u003d LocalDateTime.of(startDate, getStartTime());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                Event event \u003d new Event(getTitle(), dateTime, getIsToRemind(), false, getReminderPeriods());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                eventSet.add(event);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            startDate \u003d startDate.plusDays(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventSet;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Check if the event is to reoccur on a specific date."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to check."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Whether it will reoccur"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean toReoccur(LocalDate date) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate eventDate \u003d getStartDate();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        while (eventDate.compareTo(date) \u003c 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            eventDate \u003d timeStep(eventDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventDate.equals(date);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String endRecurrenceString \u003d \"Until: \";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!endRecurrenceDate.equals(DEFAULT_END_RECURRENCE)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceString \u003d endRecurrenceString.concat(endRecurrenceDate.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceString \u003d endRecurrenceString.concat(\"Forever\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return super.toString() + String.format(\" (%s)\", recurrenceType) + Formatter.LS + endRecurrenceString;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String getEndRecurrenceString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String endRecurrenceString \u003d \"Until: \";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String timing \u003d (!endRecurrenceDate.equals(DEFAULT_END_RECURRENCE)) ? endRecurrenceDate.toString() : \"Forever\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        endRecurrenceString \u003d endRecurrenceString.concat(timing);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return String.format(\" (%s)\", endRecurrenceString);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provides a time step of a specified date by one time unit and return it as a LocalDate object."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to step forward"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Future date"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public abstract LocalDate timeStep(LocalDate date);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 130,
      "prachi2023": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/timetable/Reminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * A reminder class that holds the event to remind as well as the date to remind."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class Reminder implements Comparable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private LocalDate dateToRemind;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor for a Reminder. Includes what event to remind about as well as what date to remind on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param event Event to remind"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateToRemind Date to remind."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Reminder(Event event, LocalDate dateToRemind) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.dateToRemind \u003d dateToRemind;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event getEvent() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Returns whether this reminder should be raised to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * If the date provided is equal the dateToRemind stored in the reminder, it returns true."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Whether the reminder should be raised."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean toRemind(LocalDate date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dateToRemind.equals(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provides a way to check if the reminder should have already been reminded after that date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to check."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Whether the reminder should have already been raised."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean reminderDue(LocalDate date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dateToRemind.compareTo(date) \u003c\u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return event.toReminderString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public int compareTo(Reminder reminder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dateToRemind.compareTo(reminder.dateToRemind);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (this \u003d\u003d object) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (object instanceof Reminder) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Reminder reminder \u003d ((Reminder) object);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return reminder.dateToRemind.equals(dateToRemind) \u0026\u0026 reminder.event.getTitle().equals(event.getTitle());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "brandonywl": 70
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/timetable/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Represents a TimeTable object. Contains all the events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cEvent\u003e nonRecurringEvents;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cDailyEvent\u003e dailyEvents;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cWeeklyEvent\u003e weeklyEvents;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cMonthlyEvent\u003e monthlyEvents;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cYearlyEvent\u003e yearlyEvents;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Creates a new list of events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Timetable() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        nonRecurringEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        dailyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        weeklyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        monthlyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        yearlyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Creates a list of events from existing data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param events from existing data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Timetable(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event getEvent(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return events.get(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Getter for JUnit test."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Stored daily events."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cDailyEvent\u003e getDailyEvents() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dailyEvents;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void setEvents(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getAllNonRecurringEvents() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return nonRecurringEvents;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cRecurringEvent\u003e getAllRecurringEventsArray() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cRecurringEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events.addAll(dailyEvents);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events.addAll(weeklyEvents);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events.addAll(monthlyEvents);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events.addAll(yearlyEvents);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Method to allow a new event to be set at a specific index."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param index Index to set at."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param event Event to set."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void setEvent(int index, Event event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        deleteEvent(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        addEvent(index, event);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Adds an event into the timetable at the last index."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param event to be added."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        addEvent(events.size(), event);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Adds an event into the timetable at a specified index."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param index Index to add the event."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param event to be added."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void addEvent(int index, Event event) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events.add(index, event);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!event.getRecurring()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            nonRecurringEvents.add(event);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (event instanceof DailyEvent) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                dailyEvents.add((DailyEvent) event);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else if (event instanceof WeeklyEvent) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                weeklyEvents.add((WeeklyEvent) event);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else if (event instanceof MonthlyEvent) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                monthlyEvents.add((MonthlyEvent) event);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else if (event instanceof YearlyEvent) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                yearlyEvents.add((YearlyEvent) event);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Removes an event from the timetable."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param index Index to be removed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void deleteEvent(int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event \u003d events.get(index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events.remove(index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (event instanceof DailyEvent) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            dailyEvents.remove(event);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (event instanceof WeeklyEvent) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            weeklyEvents.remove(event);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (event instanceof MonthlyEvent) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            monthlyEvents.remove(event);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (event instanceof YearlyEvent) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            yearlyEvents.remove(event);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            nonRecurringEvents.remove(event);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets the timetable for a specified year. Includes multiple recurrent events."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param year Year to check for timetable"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return A HashMap that maps the name of the month to a HashMap that maps date to list of events that occurs on"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *      that day, sorted by starting time."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public HashMap\u003cMonth, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e getYearTimetable(int year) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        HashMap\u003cMonth, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e calendar \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 12; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate startDate \u003d LocalDate.of(year, i, 1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate endDate \u003d startDate.withDayOfMonth(startDate.lengthOfMonth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            calendar.putAll(getTimetable(startDate, endDate));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets the timetable for a specified month and year. Includes multiple recurrent events."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param year Year to check for timetable"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param month Month to check for timetable"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return A HashMap that maps the name of the month to a HashMap that maps date to list of events that occurs on"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *      that day, sorted by starting time."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public HashMap\u003cMonth, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e getMonthTimetable(int year, int month) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(year, month, 1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.withDayOfMonth(startDate.lengthOfMonth());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return getTimetable(startDate, endDate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets the timetable for a specified time period. Includes multiple recurrent events. Sorting does not work yet."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Date to start checking for events."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate Date to stop checking for events."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return A HashMap that maps the name of the month to a HashMap that maps date to list of events that occurs on"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *      that day, sorted by starting time."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public HashMap\u003cMonth, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e getTimetable(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Get an eventSet of all events occurring during the specified time period."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d getAllEvents(startDate, endDate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        HashMap\u003cMonth, HashMap\u003cInteger,ArrayList\u003cEvent\u003e\u003e\u003e calendar \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Map all events to their relevant date and month. Sort by startTime."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Event event : eventSet) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Month month \u003d event.getStartDate().getMonth();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            int date \u003d event.getStartDate().getDayOfMonth();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            // Get a HashMap for the specified month. If it has not been initialized, initialize one."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e monthEvents \u003d calendar.get(month);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (monthEvents \u003d\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                monthEvents \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            // Get the ArrayList representing Events occurring on that date of the month."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            // If it has not been initialized, initialize one. Sorts the list after insertion."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cEvent\u003e dailyEvents \u003d monthEvents.get(date);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (dailyEvents \u003d\u003d null) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                dailyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            dailyEvents.add(event);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            // Sorting doesn\u0027t work."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Collections.sort(dailyEvents);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            monthEvents.put(date, dailyEvents);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            calendar.put(month, monthEvents);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provides a method to get all events, including re-occurring events in an arraylist in a specified period."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start of time period."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End of time period."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of all events. Re-occurring events are initialized as a new event."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getAllEvents(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        eventSet.addAll(getNonRecurringEvents(startDate, endDate, nonRecurringEvents));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        eventSet.addAll(getAllRecurringEvents(startDate, endDate,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                dailyEvents, weeklyEvents, monthlyEvents, yearlyEvents));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventSet;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Given a set of events, check if they will occur during a time period specified by the start and end period."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start date of period to check whether the event will occur. Inclusive of the date."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End date to check whether the event will occur. Inclusive of the date."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param nonRecurringSet Set of non-recurring events."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of Events that occur between the specified time period."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cEvent\u003e getNonRecurringEvents(LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                                                   ArrayList\u003cEvent\u003e nonRecurringSet) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Event event : nonRecurringSet) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate eventDate \u003d event.getStartDate();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (eventDate.compareTo(startDate) \u003e\u003d 0 \u0026\u0026 eventDate.compareTo(endDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                eventSet.add(event);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventSet;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Given an ArrayList of events, get all events that will occur during the specified time period."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start date of the period to check for recurrence. Inclusive of the date."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End date of the period to check for recurrence. Inclusive of the date."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param events List of events that are recurrent."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return An ArrayList of Events of all events that will occur between the two specified time periods."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cEvent\u003e getRecurringEvents(LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                                                  ArrayList\u003c? extends RecurringEvent\u003e events) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (RecurringEvent event : events) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            eventList.addAll(event.getRecurrences(startDate, endDate));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets all instances of events that will reoccur between the specified time period. Provides a Varargs signature"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * of getRecurringEvents, thus simplifying getting all events in the timetable in a time period."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start of the time period. Inclusive."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End of the time period. Inclusive."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param eventsSet ArrayList of Events that should extend from RecurringEvent."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of Events that will occur during the time period. If recurring events are set, they will be"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *      in the arraylist as a Event, not as an extension of RecurringEvent."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    protected final ArrayList\u003cEvent\u003e getAllRecurringEvents(LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                                                  ArrayList\u003c? extends RecurringEvent\u003e... eventsSet) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (ArrayList\u003c? extends RecurringEvent\u003e events : eventsSet) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            eventList.addAll(getRecurringEvents(startDate, endDate, events));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Returns a PriorityQueue of Reminders from a set of events. PriorityQueue is sorted by their dates."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param setOfEvents Set of Events to search from."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return PriorityQueue of Reminder from all provided events."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public PriorityQueue\u003cReminder\u003e getEventSetReminder(ArrayList\u003cEvent\u003e setOfEvents) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        PriorityQueue\u003cReminder\u003e reminders \u003d new PriorityQueue\u003c\u003e(Reminder::compareTo);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Event event : setOfEvents) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (LocalDate reminderDate : event.getReminderDates()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                reminders.add(new Reminder(event, reminderDate));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * A method that gets all reminders that should go off today. It takes in events for the next 1 month and gets all"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * their reminders."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return An ArrayList that contains all the reminders to go off today."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cReminder\u003e getReminders() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // As reminders are set to maximum 1 week earlier,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // we play it safe by looking for all 1 events in a one month time period."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d today.plusMonths(1);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d getAllEvents(today, endDate);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cReminder\u003e todayReminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        PriorityQueue\u003cReminder\u003e reminders \u003d getEventSetReminder(eventSet);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        while (reminders.size() \u003e 0 \u0026\u0026 reminders.peek().reminderDue(today)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Reminder reminder \u003d reminders.poll();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            assert reminder !\u003d null;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (reminder.toRemind(today)) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                todayReminders.add(reminder);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return todayReminders;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "brandonywl": 321,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/timetable/WeeklyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every week."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class WeeklyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of WeeklyEvent with a specified recurrence type and specified endRecurrence date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endRecurrence When the Event should stop re-occurring."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderSchedule Reminder Schedule of when reminder should be provided for this event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param tags Tags related to this event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public WeeklyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                       HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.WEEKLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                reminderSchedule, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of WeeklyEvent with a specified recurrence type and default end time of recurrence (Year 3000)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderSchedule Reminder Schedule of when reminder should be provided for this event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param tags Tags related to this event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public WeeklyEvent(String title, LocalDateTime dateTime, boolean isToRemind,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                       HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, RecurringEvent.WEEKLY_RECURRENCE_TYPE, reminderSchedule, tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusWeeks(TIME_STEP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "brandonywl": 50
    }
  },
  {
    "path": "src/main/java/seedu/notus/data/timetable/YearlyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every year."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class YearlyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of YearlyEvent with a specified recurrence type and specified endRecurrence date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endRecurrence When the Event should stop re-occurring."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderSchedule Reminder Schedule of when reminder should be provided for this event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param tags Tags related to the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public YearlyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                       HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.YEARLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                reminderSchedule, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of YearlyEvent with a specified recurrence type and default end time of recurrence (Year 3000)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminderSchedule Reminder Schedule of when reminder should be provided for this event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param tags Tags related to the event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public YearlyEvent(String title, LocalDateTime dateTime, boolean isToRemind,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                       HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, DEFAULT_END_RECURRENCE, RecurringEvent.YEARLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                reminderSchedule, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusYears(TIME_STEP);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "brandonywl": 51
    }
  },
  {
    "path": "src/main/java/seedu/notus/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.command.AddEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.AddNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TagManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.timetable.RecurringEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.timetable.Timetable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.util.PrefixSyntax;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.util.parser.ParserManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static seedu.notus.ui.Formatter.LS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Represents a StorageManager. Manages the saving and loading of task list data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /** Default folders directory. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static final String FOLDER_DIR \u003d \"data\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static final String NOTES_DIR \u003d \"/notes\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String ARCHIVED_NOTES_DIR \u003d \"/archived\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /** Default file path. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static final String NOTEBOOK_FILE_PATH \u003d \"/notebook.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String ARCHIVED_NOTEBOOK_FILE_PATH \u003d \"/archived_notebook.txt\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String TAG_FILE_PATH \u003d \"/tags.txt\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String TIMETABLE_FILE_PATH \u003d \"/timetable.txt\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /** Related classes. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Timetable timetable;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private ParserManager parserManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public StorageManager(Timetable timetable, ParserManager parserManager,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    Notebook notebook, TagManager tagManager) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.parserManager \u003d parserManager;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.notebook \u003d notebook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        this.tagManager \u003d tagManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /* Set up of Storage manager */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Checks if the file directories exist otherwise creates them."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * It also creates the files for the Notebook and timetable information if it does not already exist"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @throws SystemException when it is unable to create a file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void createFiles() throws SystemException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        //Create directories"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String dataPath \u003d FOLDER_DIR;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String notesPath \u003d FOLDER_DIR + NOTES_DIR;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String archivedNotesPath \u003d FOLDER_DIR + ARCHIVED_NOTES_DIR;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String notebookFilePath \u003d FOLDER_DIR + NOTEBOOK_FILE_PATH;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String archivedNotebookFilePath \u003d FOLDER_DIR + ARCHIVED_NOTEBOOK_FILE_PATH;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String tagsFilePath \u003d FOLDER_DIR + TAG_FILE_PATH;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String timetableFilePath \u003d FOLDER_DIR + TIMETABLE_FILE_PATH;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String[] paths \u003d {dataPath, notesPath, archivedNotesPath};"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String[] files \u003d {notebookFilePath, archivedNotebookFilePath, tagsFilePath, timetableFilePath};"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (String path: paths) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            createDirectory(path);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (String file: files) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                createFile(file);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                throw new SystemException(SystemException.ExceptionType.EXCEPTION_FILE_CREATION_ERROR);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Creates a directory path data/notes. In case both data and /notes do not exist."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private void createDirectory(String path) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File directory \u003d new File(path);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Checks if a file exists. If it does not, creates file with the input path"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param path path of file to be created"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @throws IOException thrown when directory does not exist. Unable to create file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void createFile(String path) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /* Loading of information from files */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Loads the Notebook details and content for unArchived Notebooks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param isArchive  Boolean to determine whether to load archived or non-archived files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void loadAllNotes(boolean isArchive) throws SystemException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isArchive) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + ARCHIVED_NOTEBOOK_FILE_PATH;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + NOTEBOOK_FILE_PATH;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (FileNotFoundException exception) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new SystemException(SystemException.ExceptionType.EXCEPTION_FILE_NOT_FOUND_ERROR);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            String taskDetails \u003d AddNoteCommand.COMMAND_WORD + \" \" +  s.nextLine();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            Command command \u003d parserManager.parseCommand(taskDetails);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            command.setData(notebook, timetable, tagManager, this);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Loads all the details from the the timetable stored in the text file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @throws SystemException Thrown when there is no file to read from."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void loadTimetable() throws SystemException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path \u003d FOLDER_DIR + TIMETABLE_FILE_PATH;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (FileNotFoundException exception) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new SystemException(SystemException.ExceptionType.EXCEPTION_FILE_NOT_FOUND_ERROR);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            String eventDetails \u003d AddEventCommand.COMMAND_WORD + \" \" +  s.nextLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            Command command \u003d parserManager.parseCommand(eventDetails);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            command.setData(notebook, timetable, tagManager, this);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public ArrayList\u003cString\u003e getNoteContent(Note note, boolean isArchive) throws SystemException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ArrayList\u003cString\u003e content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isArchive) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + ARCHIVED_NOTES_DIR + \"/\" + note.getTitle() + \".txt\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + NOTES_DIR + \"/\" + note.getTitle() + \".txt\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (FileNotFoundException exception) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new SystemException(SystemException.ExceptionType.EXCEPTION_FILE_NOT_FOUND_ERROR);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            content.add(s.nextLine());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /* Saving and deleting notes */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Clears the content in the original file storing all the note details."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Replaces it with the new note content details."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param isArchive determines whether to save archived notes or normal notes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @throws IOException thrown when unable to write to the file"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void saveAllNoteDetails(Boolean isArchive) throws IOException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isArchive) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            notes \u003d notebook.getArchivedNotes();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + ARCHIVED_NOTEBOOK_FILE_PATH;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            notes \u003d notebook.getNotes();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + NOTEBOOK_FILE_PATH;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        FileWriter fw \u003d new FileWriter(path, false);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fw.write(\"\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (Note note: notes) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            saveNoteDetails(note, isArchive);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void saveNote(Note note, boolean isArchive) throws IOException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!noteExists(note, isArchive)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            saveNoteContent(note, isArchive);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            saveNoteDetails(note, isArchive);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Saves an individual note to the storage file."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param note The note to be saved"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void saveNoteContent(Note note, boolean isArchive) throws IOException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isArchive) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + ARCHIVED_NOTES_DIR + \"/\" + note.getTitle() + \".txt\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + NOTES_DIR + \"/\" + note.getTitle() + \".txt\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        createFile(path);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        FileWriter fw \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fw.write(note.getContentString());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Saves the details of notes such as title, tags and pinned status to the notebook text file."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param note Note of which details are to be saved to the file"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void saveNoteDetails(Note note, boolean isArchive) throws IOException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isArchive) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + ARCHIVED_NOTEBOOK_FILE_PATH;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + NOTEBOOK_FILE_PATH;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        FileWriter fwAppend \u003d new FileWriter(path, true);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.write(note.toSaveString());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.close();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void deleteNoteContentFile(String noteTitle, boolean isArchive) throws SystemException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isArchive) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + ARCHIVED_NOTES_DIR + \"/\" + noteTitle + \".txt\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + NOTES_DIR + \"/\" + noteTitle + \".txt\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            if (!file.delete()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                throw new SystemException(SystemException.ExceptionType.EXCEPTION_FILE_DELETION_ERROR);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new SystemException(SystemException.ExceptionType.EXCEPTION_FILE_NOT_FOUND_ERROR);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Returns a boolean of whether the file storing the content of the note already exists."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param note note whose file status needs to be checked"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public boolean noteExists(Note note, boolean isArchive) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (isArchive) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + ARCHIVED_NOTES_DIR + \"/\" + note.getTitle() + \".txt\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            path \u003d FOLDER_DIR + NOTES_DIR + \"/\" + note.getTitle() + \".txt\";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /* Timetable Saving and Loading */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Saves all the Events in the Timetable to the storage file."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param timetable The Timetable containing all the events to be saved."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void saveTimetable(Timetable timetable) throws IOException {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path \u003d FOLDER_DIR + TIMETABLE_FILE_PATH;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        //clear file"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        FileWriter fwClear \u003d new FileWriter(path, false);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwClear.write(\"\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwClear.close();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        //rewrite information to the file"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        FileWriter fwAppend \u003d new FileWriter(path, true);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ArrayList\u003cEvent\u003e nonRecurringEvents \u003d timetable.getAllNonRecurringEvents();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String eventDetails;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (Event event: nonRecurringEvents) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            eventDetails \u003d getEventDetailsSaveFormat(event);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            fwAppend.write(eventDetails);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ArrayList\u003cRecurringEvent\u003e recurringEvents \u003d timetable.getAllRecurringEventsArray();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (RecurringEvent event: recurringEvents) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            eventDetails \u003d getEventDetailsSaveFormat(event);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            eventDetails +\u003d PrefixSyntax.PREFIX_DELIMITER + PrefixSyntax.PREFIX_RECURRING"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + \" \" + event.getRecurrenceType() + \" \""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + PrefixSyntax.PREFIX_DELIMITER + PrefixSyntax.PREFIX_STOP_RECURRING"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + \" \" + event.getEndRecurrenceDateTime() + \" \""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + LS;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            fwAppend.write(eventDetails);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.close();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static String getEventDetailsSaveFormat(Event event) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String eventDetails;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        eventDetails \u003d PrefixSyntax.PREFIX_DELIMITER + PrefixSyntax.PREFIX_TITLE + \" \" + event.getTitle() + \" \""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                + PrefixSyntax.PREFIX_DELIMITER + PrefixSyntax.PREFIX_TIMING + \" \" + event.getDateTime() + \" \";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ArrayList\u003cString\u003e reminderPeriods \u003d event.getReminderPeriodsString();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!reminderPeriods.isEmpty()) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            eventDetails +\u003d PrefixSyntax.PREFIX_DELIMITER + PrefixSyntax.PREFIX_REMIND + \" \";"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            for (String reminderPeriod : reminderPeriods) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                eventDetails +\u003d reminderPeriod + \" \";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!event.getRecurring()) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            eventDetails +\u003d LS;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return eventDetails;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10,
      "prachi2023": 365
    }
  },
  {
    "path": "src/main/java/seedu/notus/ui/AsciiArt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.ui.Formatter.LS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class AsciiArt {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    // ASCII art code adapted from http://patorjk.com/software/taag/#p\u003ddisplay\u0026f\u003dGhost\u0026t\u003dNotUS"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    // Slight modifications made to make it easier on the eyes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String NOTUS_LOGO \u003d LS"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"     .-\u0027) _               .-\u0027) _                 .-\u0027)    \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"    ( OO ) )             (  OO) )               ( OO ).  \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \",--./ ,--,\u0027  .-\u0027),-----. /     \u0027._ ,--. ,--.   (_)---\\\\_) \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"|   \\\\ |  |\\\\ ( OO\u0027  .-.  \u0027|\u0027--...__)|  | |  |   /    _ |  \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"|    \\\\|  | )/   |  | |  |\u0027--.  .--\u0027|  | | .-\u0027) \\\\  :` `.  \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"|  .     |/ \\\\_) |  | |  |   |  |   |  | |( OO ) \u0027..`\u0027\u0027.) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"|  |\\\\    |    \\\\ |  | |  |   |  |   |  | | `-\u0027 /.-._)   \\\\ \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"|  | \\\\   |     `\u0027  \u0027-\u0027  \u0027   |  |  (\u0027  \u0027-\u0027(_.-\u0027 \\\\       / \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"`--\u0027  `--\u0027       `-----\u0027    `--\u0027    `-----\u0027     `-----\u0027  \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    // ASCII art code adapted from https://patorjk.com/software/taag/#p\u003ddisplay\u0026f\u003dGhost\u0026t\u003dBye (for the text bye)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    // Slight modifications made to make it easier on the eyes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    // and for casper (the big friendly ghost) see below"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    // @@author {R-Ramana}-reused"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    // https://www.asciiart.eu/cartoons/casper"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String GOODBYE_ART \u003d LS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \".-. .-\u0027)                 (\u0027-.                .,,cccd$$$$$$$$$$$ccc,\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"\\\\  ( OO )              _(  OO)           ,cc$$$$$$$$$$$$$$$$$$$$$$$$$cc,\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \";-----.\\\\  ,--.   ,--.(,------.         ,d$$$$$$$$$$$$$$$$\\\"J$$$$$$$$$$$$$$c,\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"| .-.  |   \\\\  `.\u0027  /  |  .---\u0027       d$$$$$$$$$$$$$$$$$$,$\\\" ,,`?$$$$$$$$$$$$L\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"| \u0027-\u0027 /  .-\u0027)     /   |  |         ,$$$$$$$$$$$$$$$$$$$$$\u0027,J$$$$$$$$$$$$$$$$$b\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"| .-. `.(OO  \\\\   /   (|  \u0027--.    ,$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$i `$h\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"| |  \\\\  ||   /  /\\\\_   |  .--\u0027    $$$$$$$$$$$$$$$$$$$$$$$$$P\u0027  \\\"$$$$$$$$$$$h $$\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"| \u0027--\u0027  /`-./  /.__)  |  `---.  ;$$$$$$$$$$$$$$$$$$$$$$$$F,$$$h,?$$$$$$$$$$h$F\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"`------\u0027   `--\u0027       `------\u0027 `$$$$$$$$$$$$$$$$$$$$$$$F:??$$$:)$$$$P\\\",. $$F\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                ?$$$$$$$$$$$$$$$$$$$$$$(   `$$ J$$F\\\"d$$F,$F\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                 ?$$$$$$$$$$$$$$$$$$$$$h,  :P\u0027J$$F  ,$F,$\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                  ?$$$$$$$$$$$$$$$$$$$$$$$ccd$$`$h, \\\",d$\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                   \\\"$$$$$$$$$$$$$$$$$$$$$$$$\\\",cdc $$$$\\\"\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                           ,uu,      `?$$$$$$$$$$$$$$$$$$$$$$$$$$$c$$$$h\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                     .,d$$$$$$$cc,   `$$$$$$$$$$$$$$$$??$$$$$$$$$$$$$$$,\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                   ,d$$$$$$$$$$$$$$$bcccc,,??$$$$$$ccf `\\\"??$$$$??$$$$$$$\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                  d$$$$$$$$$$$$$$$$$$$$$$$$$h`?$$$$$$h`:...  d$$$$$$$$P\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                 d$$$$$$$$$$$$$$$$$$$$$$$$$$$$`$$$$$$$hc,,cd$$$$$$$$P\\\"\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"             \u003d$$?$$$$$$$$P\u0027 ?$$$$$$$$$$$$$$$$$;$$$$$$$$$???????\\\",,\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                \u003d$$$$$$F       `\\\"?????$$$$$$$$$$$$$$$$$$$$$$$$$$$$$bc\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                d$$F\\\"?$$k ,ccc$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$i\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"        .     ,ccc$$c`\\\"\\\"u$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$P\\\",$$$$$$$$$$$$h\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"     ,d$$$L  J$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\\\" `\\\"\\\"$$$??$$$$$$$\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"   ,d$$$$$$c,\\\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F       `?J$$$$$$$\u0027\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"  ,$$$$$$$$$$h`$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F           ?$$$$$$$P\\\"\\\"\u003d,\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \" ,$$$F?$$$$$$$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F              3$$$$II\\\"?$h,\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \" $$$$$`$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$P\\\"               ;$$$??$$$,\\\"?\\\"\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \" $$$$F ?$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$P\\\",z\u0027                3$$h   ?$F\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"        `?$$$$$$$$$$$$$$$??$$$$$$$$$PF\\\"\u0027,d$P\\\"                  \\\"?$F\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"            \\\"\\\"\\\"\\\"\\\"\\\"\\\"         ,z$$$$$$$$$$$$$P\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                  J$$$$$$$$$$$$$$F\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                 ,$$$$$$$$$$$$$$F\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                 :$$$$$c?$$$$PF\u0027\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                 `$$$$$$$P\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                  `?$$$$F\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getNotusLogo() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return NOTUS_LOGO;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getGoodbyeArt() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return GOODBYE_ART;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 113
    }
  },
  {
    "path": "src/main/java/seedu/notus/ui/Formatter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.RecurringEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Reminder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static com.diogonunes.jcolor.Ansi.POSTFIX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static com.diogonunes.jcolor.Ansi.PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static com.diogonunes.jcolor.Ansi.RESET;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static com.diogonunes.jcolor.Ansi.colorize;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import com.diogonunes.jcolor.Attribute;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a Formatter object. Handles and standardise the format of all the information."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class Formatter {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * A platform independent line separator."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String ROW_SPLIT \u003d \"-\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLUMN_START \u003d \"| \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String COLUMN_END \u003d \" |\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String EMPTY_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String CONTINUATION \u003d \"...\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String TITLE \u003d \"Title: \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String NOTE_INDEX \u003d \"Note index: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String CONTENT \u003d \"Content: \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final char EMPTY_CHAR \u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Maximum number of characters within a row."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final int MAX_ROW_LENGTH \u003d 100;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Maximum length of message to within a row, minus the start and end formatting."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final int MAX_MESSAGE_LENGTH \u003d MAX_ROW_LENGTH - COLUMN_START.length() - COLUMN_END.length();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Length of a ansi defined color."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final int ANSI_PREFIX_LENGTH \u003d 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Maximum length of a note\u0027s content to display."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final int CONTENT_CUTOFF \u003d MAX_MESSAGE_LENGTH - 50;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    //@@author R-Ramana"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Method compiles the ArrayList items and appends the items to a String."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return noteString StringBuilder containing the notes ready to be printed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String formatNotes(String pinnedHeader, String unpinnedHeader,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                                     ArrayList\u003cNote\u003e pinned, ArrayList\u003cNote\u003e unpinned, Notebook notebook) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String formattedString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        formattedString \u003d formatNotes(pinnedHeader, pinned, notebook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        formattedString \u003d formattedString.concat(formatNotes(unpinnedHeader, unpinned, notebook));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return formattedString;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    //@@author R-Ramana"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Method compiles the ArrayList items and appends the items to a String."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param notes ArrayList of notes to obtain note title/tags from"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return noteString StringBuilder containing the notes ready to be printed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String formatNotes(String header, ArrayList\u003cNote\u003e notes, Notebook notebook) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String formattedString \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        formattedString \u003d formattedString.concat(generatesHeader(header));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (Note note: notes) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            String colorIndex;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            String colorTitle;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            int noteIndex \u003d notebook.getNoteIndex(note);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (noteIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteIndex \u003d notebook.getArchiveNoteIndex(note);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorIndex \u003d colorize(NOTE_INDEX + noteIndex, Attribute.CYAN_TEXT());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorTitle \u003d colorize(TITLE + note.getTitle() + EMPTY_SPACE + note.getTagsName(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    Attribute.YELLOW_TEXT());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            formattedString \u003d formattedString.concat(encloseRow(colorIndex)).concat(encloseRow(colorTitle));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            int truncatedContentLength \u003d Math.min(note.getContent().get(0).length(), CONTENT_CUTOFF);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            String truncatedContent \u003d note.getContent()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .get(0)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .substring(0, truncatedContentLength)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .concat(CONTINUATION);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            formattedString \u003d formattedString.concat(encloseRow(CONTENT + truncatedContent))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .concat(generatesRowSplit());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return encloseTopAndBottom(formattedString);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Narzyl"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String formatNote(String header, Note note) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String formattedString \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        header \u003d header.concat(note.getTitle() + \" \" + note.getTagsName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        formattedString \u003d formattedString.concat(generatesHeader(header));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String line : note.getContent()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            formattedString \u003d formattedString.concat(encloseRow(line));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return encloseTopAndBottom(formattedString);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArrayList\u003cString\u003e formatMonthTimetable(String month, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e timetable) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        results.add(month);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInteger\u003e days \u003d new ArrayList\u003c\u003e(timetable.keySet());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        days.sort(Integer::compareTo);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Integer day : days) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cEvent\u003e dailyEvents \u003d timetable.get(day);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Event event : dailyEvents) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                ArrayList\u003cString\u003e tempResults \u003d formatEvent(event);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                String title \u003d tempResults.get(0).concat(event.getTagsName());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                tempResults.set(0, title);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                results.addAll(tempResults);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                results.add(\" \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        results.remove(results.size() - 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes an array list of events and converts it to a formatted, non-indexed string for output."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param header Success message."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param year Year of timetable"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param month Month of timetable"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timetable Events to be printed"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Formatted string of non-indexed events in timetable"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String formatTimetable(String header, int year, int month,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                                         HashMap\u003cMonth, HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e\u003e timetable) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e eventsStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (month !\u003d 0) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            eventsStrings.add(header + String.format(\" %d-%d\", year, month));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Month currMonth \u003d Month.of(month);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e monthEvents \u003d timetable.get(currMonth);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            assert monthEvents !\u003d null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            eventsStrings.addAll(formatMonthTimetable(currMonth.name(), monthEvents));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            eventsStrings.add(header + \" \" + year);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cMonth\u003e months \u003d new ArrayList\u003c\u003e(timetable.keySet());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            months.sort(Month::compareTo);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Month currMonth : months) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                eventsStrings.addAll(formatMonthTimetable(currMonth.name(), timetable.get(currMonth)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                eventsStrings.add(\" \");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            eventsStrings.remove(eventsStrings.size() - 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return formatString(eventsStrings, true);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes an array list of events and converts it to a formatted, indexed string for output."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param header Success message."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param events Events to be printed"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Formatted string of indexed events in timetable"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String formatTimetable(String header, ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e eventsStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsStrings.add(header);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e eventStringRepresentation;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            eventStringRepresentation \u003d formatEvent(event);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            String title \u003d String.format(\"%d. %s %s\", i++, eventStringRepresentation.get(0), event.getTagsName());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            eventStringRepresentation.set(0, title);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            eventsStrings.addAll(eventStringRepresentation);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return formatString(eventsStrings, true);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    //@@author brandonywl"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Formats a provided event to an ArrayList format."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param event Event to be formatted"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of Strings to represent the Event."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static ArrayList\u003cString\u003e formatEvent(Event event) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cString\u003e reminders \u003d event.getReminderPeriodsString();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (reminders.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            reminders.add(\"None\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String reminderString \u003d \"Reminders:\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (String reminder : reminders) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            reminderString \u003d reminderString.concat(\" \" + reminder);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        result.add(\"Event: \" + event.getTitle());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        result.add(\"Date: \" + event.getStartDate().toString()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + EMPTY_SPACE.repeat(4) + \"Time: \" + event.getStartTime().toString());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        result.add(reminderString);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String repeatingString \u003d \"Repeating: \";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String endRecurrenceDateString \u003d \"\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (event instanceof RecurringEvent) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            String recurrenceType \u003d ((RecurringEvent) event).getRecurrenceType();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            RecurringEvent recurringEvent \u003d (RecurringEvent) event;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceDateString \u003d recurrenceType.concat(recurringEvent.getEndRecurrenceString());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceDateString \u003d \"False\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        result.add(repeatingString + endRecurrenceDateString);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    //@@author brandonywl"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provides a wrapper around formatEvent to add a header at the head of the ArrayList."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param event Event to be formatted"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param header Header to be placed at the front."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of Strings to represent the Event."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static String formatEventString(String header, Event event) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d formatEvent(event);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        result.add(0, header);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return formatString(result, true);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    //@@author brandonywl"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Converts a header and an ArrayList of reminders into a formatted string to be printed."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param header Success message to print."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminders Reminders to be printed"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return String representation of all reminders to be shown."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static String formatReminders(String header, ArrayList\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        result.add(header);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Reminder reminder : reminders) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            result.addAll(formatReminder(reminder));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            result.add(\" \");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        result.remove(result.size() - 1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return formatString(result, true);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    //@@author brandonywl"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Formats a provided event to an ArrayList format."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param reminder Reminder to be formatted."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of Strings to represent the Reminder."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static ArrayList\u003cString\u003e formatReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event \u003d reminder.getEvent();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        result.add(\"Event: \" + event.getTitle());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        result.add(\"Date: \" + event.getStartDate().toString()"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + EMPTY_SPACE.repeat(4) + \"Time: \" + event.getStartTime().toString());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    //@@author Chongjx"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Formats a string to be printed out."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param message String to be formatted."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Formatted message."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String formatString(String message) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return encloseTopAndBottom(encloseRow(message));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Formats an arraylist of strings to be printed out. Each element in the list will be printed in a newline."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param messages  Arraylist of strings to be formatted."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param hasHeader Determines if there is a header. Header MUST be the first element in the list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Formatted message."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String formatString(ArrayList\u003cString\u003e messages, boolean hasHeader) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String formattedString \u003d \"\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (hasHeader) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            formattedString \u003d generatesHeader(messages.get(0));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (int i \u003d 1; i \u003c messages.size(); ++i) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                formattedString \u003d formattedString.concat(encloseRow(messages.get(i)));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String s : messages) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                formattedString \u003d formattedString.concat(encloseRow(s));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return encloseTopAndBottom(formattedString);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Formats a array of strings to be printed out. Each element in the list will be printed in a newline."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param messages  Array of strings to be formatted."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param hasHeader Determines if there is a header. Header MUST be the first element in the list."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Formatted message."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static String formatString(String[] messages, boolean hasHeader) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String formattedString \u003d \"\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (hasHeader) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            formattedString \u003d generatesHeader(messages[0]);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (int i \u003d 1; i \u003c messages.length; ++i) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                formattedString \u003d formattedString.concat(encloseRow(messages[i]));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String s : messages) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                formattedString \u003d formattedString.concat(encloseRow(s));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return encloseTopAndBottom(formattedString);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Generates a header row with the format."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param header Header message"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Formatted header."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static String generatesHeader(String header) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return encloseRow(header) + generatesRowSplit();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Generates a row of pre-defined characters as to segregate row contents."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return A row of defined characters."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static String generatesRowSplit() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return ROW_SPLIT.repeat(MAX_ROW_LENGTH) + LS;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Encloses the top and bottom of the formatted message."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param message Formatted message to be enclosed."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Enclosed message."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static String encloseTopAndBottom(String message) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return generatesRowSplit() + message + generatesRowSplit();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Encloses the sides of the message."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param message Message to be enclosed."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Enclosed message."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static String encloseRow(String message) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int numBlanks;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Array list to store startIndex, endIndex and the color of the string"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cInteger\u003e coloredStringStartIndexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cInteger\u003e coloredStringEndIndexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e stringColorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int numAsciiCode \u003d getNumAsciiCode(message, coloredStringStartIndexList, coloredStringEndIndexList,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                stringColorList);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Calculate the number of space needed to fill up if the message length is less than the MAX_MESSAGE_LENGTH"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        numBlanks \u003d MAX_MESSAGE_LENGTH - message.length() + numAsciiCode;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Adds empty space to the message"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (numBlanks \u003e\u003d 0) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return COLUMN_START + message + EMPTY_SPACE.repeat(numBlanks) + COLUMN_END + LS;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            int startIndexOfNextLine \u003d MAX_MESSAGE_LENGTH;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            boolean cutOffWordIsColored \u003d false;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String truncatedColor \u003d RESET;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Checks if the start index for the next line lines between any colored word."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (int i \u003d 0; i \u003c coloredStringStartIndexList.size(); ++i) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // If the message contains any ansi escape code, shift the start index to print more letters since they"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // will be removed when printing"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (startIndexOfNextLine \u003e coloredStringStartIndexList.get(i)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        \u0026\u0026 startIndexOfNextLine \u003e coloredStringEndIndexList.get(i)) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    startIndexOfNextLine +\u003d ANSI_PREFIX_LENGTH + RESET.length();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                } else if (startIndexOfNextLine \u003e coloredStringStartIndexList.get(i)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        \u0026\u0026 startIndexOfNextLine \u003c\u003d coloredStringEndIndexList.get(i)) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    startIndexOfNextLine +\u003d ANSI_PREFIX_LENGTH;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    cutOffWordIsColored \u003d true;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    truncatedColor \u003d stringColorList.get(i);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String preservedMessage;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String truncatedMessage;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // If the cutoff is in the middle of a colored word, shift all the way to the space directly before it."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (cutOffWordIsColored) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                while (message.charAt(startIndexOfNextLine) !\u003d EMPTY_CHAR) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    --startIndexOfNextLine;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // Split the strings and enclose individual string"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // Add the color RESET to the end of the first line"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                preservedMessage \u003d message.substring(0, startIndexOfNextLine).concat(RESET);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // Add the color to the front of the second line"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                truncatedMessage \u003d truncatedColor + message.substring(startIndexOfNextLine);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // Split the strings and enclose individual string"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                preservedMessage \u003d message.substring(0, startIndexOfNextLine);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                truncatedMessage \u003d message.substring(startIndexOfNextLine);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return encloseRow(preservedMessage) + encloseRow(truncatedMessage);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns the number of ascii code that appear within the message. Also match the start and end of index of each"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param message                     String of the message to check."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param coloredStringStartIndexList Arraylist of index to mark the start of a color."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param coloredStringEndIndexList   Arraylist of index to mark the end of a color."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param stringColorList             Arraylist of string to store the color present."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Number of Ascii code that appeared."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static int getNumAsciiCode(String message,"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                                       ArrayList\u003cInteger\u003e coloredStringStartIndexList,"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                                       ArrayList\u003cInteger\u003e coloredStringEndIndexList,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                                       ArrayList\u003cString\u003e stringColorList) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int numAsciiCode \u003d 0;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Stack is used to match the PREFIX and POSTFIX of each color. Possible patterns:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // 1. Individual string has its own color."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // [PREFIX]string[POSTFIX] [PREFIX]string[POSTFIX]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // 2. Individual string color has its own color but is enclosed by another color."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // [PREFIX][PREFIX]string[POSTFIX] [PREFIX]string[POSTFIX][POSTFIX]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // 3. String enclosed by nested colors"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // [PREFIX][PREFIX]PREFIX]string[POSTFIX][POSTFIX][POSTFIX]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Stack\u003cInteger\u003e coloredStringStartIndexStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Stack\u003cString\u003e stringColorStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Count the number of colored string in the message."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] temp \u003d message.split(EMPTY_SPACE);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int messageLength \u003d 0;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (String s : temp) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Check if it contains the RESET color"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (s.contains(RESET)) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String checkString \u003d s;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String stringBeforeReset;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String stringWithReset;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                int cutOffIndex \u003d 0;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // While it contains RESET, trim it out"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                while (checkString.contains(RESET)) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    int resetIndex \u003d checkString.indexOf(RESET);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    // If there are string before the RESET"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    if (resetIndex \u003e 0) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        stringBeforeReset \u003d checkString.substring(0, resetIndex - 1);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        stringWithReset \u003d checkString.substring(resetIndex);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        stringBeforeReset \u003d \"\";"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        stringWithReset \u003d checkString;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    cutOffIndex +\u003d stringBeforeReset.length();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    // If there is a color string that is not closed"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    if (stringBeforeReset.contains(PREFIX)) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        int offsetSet \u003d stringBeforeReset.indexOf(POSTFIX);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        numAsciiCode +\u003d offsetSet + 1;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        // Directly add to the list"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        coloredStringStartIndexList.add(messageLength);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        stringColorList.add(checkString.substring(0, checkString.indexOf(POSTFIX) + 1));"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    } else if (coloredStringStartIndexStack.size() \u003e 0) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        // Match it with the latest color in the stack"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        coloredStringStartIndexList.add(coloredStringStartIndexStack.pop());"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        stringColorList.add(stringColorStack.pop());"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    numAsciiCode +\u003d RESET.length();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    coloredStringEndIndexList.add(messageLength + cutOffIndex);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    checkString \u003d stringWithReset.substring(RESET.length());"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else if (s.contains(PREFIX) \u0026\u0026 !s.contains(RESET)) { // is an ansi defined color"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                int offsetSet \u003d s.indexOf(POSTFIX);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                numAsciiCode +\u003d offsetSet + 1;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // Add them into the stack first"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                coloredStringStartIndexStack.push(messageLength);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                stringColorStack.push(s.substring(0, s.indexOf(POSTFIX) + 1));"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Increment the message length by each string array, also account for the space"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            messageLength +\u003d s.length() + 1;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return numAsciiCode;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 267,
      "R-Ramana": 62,
      "brandonywl": 91,
      "Nazryl": 12,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/notus/ui/InterfaceManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author Narzyl"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a InterfaceManager. Manages the input and output of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class InterfaceManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public InterfaceManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public InterfaceManager(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the command based on user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return user input command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserCommandInput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a message with a default format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message Message to be printed out."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prints(String message) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 6,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/CommandMessage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "package seedu.notus.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import com.diogonunes.jcolor.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.AddNoteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.ArchiveNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.CreateTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.DeleteEventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.DeleteNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.DeleteTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.EditEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.EditNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.ListEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.ListNoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.ListTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.PinCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.RemindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.TagEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.TagNoteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.UnarchiveNoteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.ViewNoteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.timetable.RecurringEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static com.diogonunes.jcolor.Ansi.colorize;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_ADD_LINE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_DELETE_LINE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_LINE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_PIN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_REMIND_ADD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_REMIND_CLEAR;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_REMIND_DROP;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_STOP_RECURRING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Contains Command Line Interface (CLI) messages the commands will display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class CommandMessage {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    static final Attribute CYAN \u003d Attribute.BRIGHT_CYAN_TEXT();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    static final Attribute WHITE \u003d Attribute.BRIGHT_WHITE_TEXT();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    static final Attribute GREEN \u003d Attribute.GREEN_TEXT();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    static final Attribute RED \u003d Attribute.RED_TEXT();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /** Command Usages. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String ADD_E_COMMAND_USAGE \u003d AddEventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Adds an event to the timetable. Parameters:\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TIMING + \" TIMING (Format: \" + DateTimeManager.DATE_FORMAT + \") \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_RECURRING"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + String.format(\" Frequency (%s, %s, %s, %s)] \","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            RecurringEvent.DAILY_RECURRENCE_TYPE, RecurringEvent.WEEKLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            RecurringEvent.MONTHLY_RECURRENCE_TYPE, RecurringEvent.YEARLY_RECURRENCE_TYPE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_REMIND + \" [Days before (Default: 1)]\" + \"] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_STOP_RECURRING + \" TIMING (Format: \" + DateTimeManager.DATE_FORMAT + \")]\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String ADD_N_COMMAND_USAGE \u003d AddNoteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Adds a note to notebook. Parameters: \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG TAG_COLOR \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1 TAG_COLOR...] \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_PIN + \" PIN]\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String ARCHIVE_N_COMMAND_USAGE \u003d ArchiveNoteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Archives a note. Parameters: \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE] \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX]\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String CREATE_T_COMMAND_USAGE \u003d CreateTagCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Creates a tag. Parameters: \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG NAME [TAG COLOR] (Available colors: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + colorize(Tag.COLOR_WHITE_STRING, Attribute.BRIGHT_WHITE_TEXT()) + \", \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + colorize(Tag.COLOR_RED_STRING, Attribute.BRIGHT_RED_TEXT()) + \", \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + colorize(Tag.COLOR_GREEN_STRING, Attribute.BRIGHT_GREEN_TEXT()) + \", \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + colorize(Tag.COLOR_BLUE_STRING, Attribute.BRIGHT_BLUE_TEXT()) + \", \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + colorize(Tag.COLOR_YELLOW_STRING, Attribute.BRIGHT_YELLOW_TEXT()) + \", \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + colorize(Tag.COLOR_MAGENTA_STRING, Attribute.BRIGHT_MAGENTA_TEXT()) + \", \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + colorize(Tag.COLOR_CYAN_STRING, Attribute.BRIGHT_CYAN_TEXT())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + colorize(\")\", Attribute.BRIGHT_WHITE_TEXT());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String DELETE_E_COMMAND_USAGE \u003d DeleteEventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Deletes an event. Parameters: \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String DELETE_N_COMMAND_USAGE \u003d DeleteNoteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Deletes a note. Parameters: \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE or \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String DELETE_T_COMMAND_USAGE \u003d DeleteTagCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Deletes a tag. Parameters: \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1...]\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_E_COMMAND_USAGE \u003d EditEventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Edits an event in the timetable. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"Parameters: \" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE] \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TIMING + \" DATE_TIME] \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_RECURRING + \" RECURRING] \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_REMIND_ADD + \" REMIND]\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_REMIND_DROP + \" REMIND]\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_REMIND_CLEAR + \"]\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_RECURRING + \"]\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_STOP_RECURRING + \"](Only works when event is / set to a recurring type.)\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_N_COMMAND_USAGE \u003d EditNoteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Edits a note. Parameters: \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE] \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"([\" + PREFIX_DELIMITER + PREFIX_ADD_LINE + \" INDEX STRING] OR \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_LINE + \" LINE_INDEX CONTENTS] OR \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_DELETE_LINE + \" INDEX]) \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_CONTENT + \" CONTENT] \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG TAG_COLOR \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1 TAG_COLOR...] \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"Only use one type of /add, /ln or /del per edit.\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EXIT_COMMAND_USAGE \u003d ExitCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Exits the program.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String FIND_N_COMMAND_USAGE \u003d FindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Finds a note. Parameters: KEYWORDS\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String LIST_E_COMMAND_USAGE \u003d ListEventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": List all the events in the Timetable. Parameters: \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TIMING + \" YYYY or YYYY-MM]\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String LIST_N_COMMAND_USAGE \u003d ListNoteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Lists all the notes in the Notebook. Parameters: \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1...] \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[/sort up OR down]\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String LIST_T_COMMAND_USAGE \u003d ListTagCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Lists all the tags.\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String PIN_N_COMMAND_USAGE \u003d PinCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Pins or unpins a note. Parameters: \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX] \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE]\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String REMIND_E_COMMAND_USAGE \u003d RemindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Shows the reminders for today.\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String TAG_E_COMMAND_USAGE \u003d TagEventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Tags or untags an event. Parameters: \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG TAG_COLOR \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1 TAG_COLOR...]\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String TAG_N_COMMAND_USAGE \u003d TagNoteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Tags or untags a note. Parameters: \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG TAG_COLOR \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1 TAG_COLOR...]\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String UNARCHIVE_N_COMMAND_USAGE \u003d UnarchiveNoteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Un-archives a note. Parameters: \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE] \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX]\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String VIEW_N_COMMAND_USAGE \u003d ViewNoteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \": Views a note. Parameters: \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX] \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE]\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String[] HELP_COMMAND_USAGE \u003d {\"The recognized commands and their usages are listed below. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"Parameters listed in brackets, [ ], represent optional inputs.\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(ADD_E_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(ADD_N_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(ARCHIVE_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(CREATE_T_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(DELETE_E_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(DELETE_N_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(DELETE_T_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(EDIT_E_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(EDIT_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(EXIT_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(FIND_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(LIST_E_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(LIST_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(LIST_T_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(PIN_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(REMIND_E_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(TAG_E_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(TAG_N_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(UNARCHIVE_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(VIEW_N_COMMAND_USAGE, CYAN)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    };"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /** General successful messages. */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"Bye!\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /** General unsuccessful messages. */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String INDEX_OUT_OF_RANGE_MESSAGE \u003d colorize(\"The index you specified is out of range. \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"Please check and specify a valid index value.\", RED);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /** Event related messages. */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String PROCESSING_EDIT_MESSAGE \u003d \"Editing event:\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String REMINDERS_MESSAGE \u003d \"Here are the reminders for today!\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String NO_REMINDERS_MESSAGE \u003d \"No reminders today!\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String LIST_EVENT_SUCCESSFUL_MESSAGE \u003d \"These are the stored events: \";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String LIST_EVENT_SUCCESSFUL_TIME_PERIOD_MESSAGE \u003d \"These are the events \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"in the specified time period: \";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String ADD_EVENT_SUCCESSFUL_MESSAGE \u003d colorize(\"Added the following event:\", GREEN);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String DELETE_EVENT_SUCCESSFUL_MESSAGE \u003d colorize(\"Event deleted\", GREEN);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_TITLE_MESSAGE \u003d colorize(\"Title edited!\", GREEN);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_START_DATE_MESSAGE \u003d colorize(\"Start Date edited!\", GREEN);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_REMINDER_MESSAGE \u003d colorize(\"Reminders edited!\", GREEN);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_RECURRENCE_MESSAGE \u003d colorize(\"Recurrence type edited!\", GREEN);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_RECURRENCE_DATE_MESSAGE \u003d colorize(\"End recurrence date edited!\", GREEN);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String DELETE_EVENT_UNSUCCESSFUL_MESSAGE \u003d colorize(\"Event failed to delete\", RED);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_EVENT_UNSUCCESSFUL_MESSAGE \u003d colorize(\"Perhaps try editing something!\", RED);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_WARNING_REMINDER_MESSAGE \u003d colorize(\"There was no changes made. \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"Perhaps you tried to add a reminder that already exists or delete reminders that do not exist.\", RED);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_WARNING_RECURRENCE_MESSAGE \u003d colorize(\"The event is of the same recurrence type. \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"No changes are made to it\u0027s recurrence type.\", RED);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_WARNING_RECURRENCE_ON_NON_RECURRENCE_MESSAGE \u003d colorize(\"You attempted to put a \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"recurrence date on a non-recurring event. No recurrence date was set.\", RED);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String LIST_EVENT_UNSUCCESSFUL_MESSAGE \u003d colorize(\"There are no events in the timetable!\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            RED);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String LIST_EVENT_UNSUCCESSFUL_TIME_PERIOD_MESSAGE \u003d colorize(\"Failed to find any events \""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"in the specified time period.\", RED);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /** Note related messages. */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String PINNED_NOTES_MESSAGE \u003d \"Here are the list of pinned notes:\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String UNPINNED_NOTES_MESSAGE \u003d \"Here are the list of unpinned notes:\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String ARCHIVE_NOTES_MESSAGE \u003d \"Here are the list of archived notes:\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String LIST_NOTES_MESSAGE \u003d \"Here are the list of notes:\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String ADD_NOTE_SUCCESSFUL_MESSAGE \u003d colorize(\"New note added: \", GREEN);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String DELETE_NOTE_SUCCESSFUL_MESSAGE \u003d colorize(\"Note deleted: \", GREEN);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String ARCHIVE_NOTE_SUCCESSFUL_MESSAGE \u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(\"The following note has been archived: \", GREEN);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String FIND_NOTE_SUCCESSFUL_MESSAGE \u003d colorize(\"Here are the matching notes:\", GREEN);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EDIT_NOTE_SUCCESSFUL_MESSAGE \u003d colorize(\"Edited note successfully: \", GREEN);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String VIEW_NOTE_SUCCESSFUL_MESSAGE \u003d colorize(\"Here\u0027s the note you\u0027re looking for: \","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            GREEN);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String UNARCHIVE_NOTE_SUCCESSFUL_MESSAGE \u003d colorize(\"The following note has been unarchived: \","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            GREEN);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String NOTE_UNSUCCESSFUL_MESSAGE \u003d colorize(\"This note already exists in the notebook! \", RED);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String NOTE_DOES_NOT_EXIST_MESSAGE \u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(\"This note does not exist in the notebook! \", RED);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String FIND_NOTE_UNSUCCESSFUL_MESSAGE \u003d colorize(\"There are no matching notes. \""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"Please try another search query.\", RED);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String SAME_NOTE_TITLE_UNSUCCESSFUL_MESSAGE \u003d colorize(\"This note has the same title\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \" as the new title! \", RED);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String INVALID_LINE_UNSUCCESSFUL_MESSAGE \u003d colorize(\"Invalid line! \", RED);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String INVALID_TAG_MESSAGE \u003d colorize(\"Your tags return no result.\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \" Please try an alternative tag or check your spellings\", RED);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String EMPTY_NOTEBOOK_MESSAGE \u003d colorize(\"The notebook is empty!\", RED);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /** Storage related messages. */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String FILE_WRITE_UNSUCCESSFUL_MESSAGE \u003d colorize(\"Unable to write to file\", RED);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /** Tag related messages. */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String HEADER_CREATE_TAG \u003d \"Creating tag...\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String HEADER_DELETE_TAG \u003d \"Deleting tags...\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String TAG_HEADER \u003d \"Tagging...\";"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String CREATE_TAG_SUCCESSFUL_MESSAGE \u003d colorize(\"Created a tag! \", GREEN);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String DELETE_TAG_SUCCESSFUL_MESSAGE \u003d colorize(\"Deleted the tag! \", GREEN);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String TAG_MESSAGE \u003d colorize(\"Added the tag! \", GREEN);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String UNTAG_MESSAGE \u003d colorize(\"Removed the tag! \", GREEN);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String LIST_TAG_MESSAGE \u003d colorize(\"Here are the list of tags!\", GREEN);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String CREATE_TAG_UNSUCCESSFUL_MESSAGE \u003d colorize(\"Tag already exists! \", RED);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String DELETE_TAG_UNSUCCESSFUL_MESSAGE \u003d colorize(\"The tag does not exist! \", RED);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String NO_TAG_MESSAGE \u003d colorize(\"There are no tags!\", RED);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 265
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/DateTimeManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Represents a DateTimeManager. Manages the date and time info."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class DateTimeManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Parses a user input into the relevant datetime format specified in the manager."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param input User input to be parsed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return DateTime representation of the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException Occurs when the format of the input is wrong and in the specified format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static LocalDateTime dateTimeParser(String input) throws SystemException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            dateTime \u003d LocalDateTime.parse(input, FORMATTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(SystemException.ExceptionType.EXCEPTION_INVALID_TIMING_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static String getMonthName(LocalDate date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.getMonth().name();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "brandonywl": 35
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/PrefixSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class PrefixSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Prefix definitions. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_DELIMITER \u003d \"/\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Shared prefix. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_TITLE \u003d \"t\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_INDEX \u003d \"i\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Note related prefix. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_TAG \u003d \"tag\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_PIN \u003d \"pin\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_CONTENT \u003d \"c\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_LINE \u003d \"ln\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_SORT \u003d \"sort\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String PREFIX_ARCHIVE \u003d \"archive\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Event related prefix. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_TIMING \u003d \"timing\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_RECURRING \u003d \"repeat\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_REMIND \u003d \"remind\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_REMIND_ADD \u003d \"remind-add\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_REMIND_DROP \u003d \"remind-drop\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_REMIND_CLEAR \u003d \"remind-clear\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_STOP_RECURRING \u003d \"stop\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String STRING_SPLIT_DELIMITER \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String STRING_SORT_ASCENDING \u003d \"up\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String STRING_SORT_DESCENDING \u003d \"down\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String SUFFIX_INDEX \u003d \". \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String TIMING_SPLIT_DELIMITER \u003d \"-\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Note content related prefix. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_END \u003d \"end\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_DELETE_LINE \u003d \"del\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_ADD_LINE \u003d \"add\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 20,
      "R-Ramana": 1,
      "brandonywl": 8,
      "Nazryl": 13
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseAddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.DailyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.MonthlyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.RecurringEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.WeeklyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.YearlyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.util.DateTimeManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_STOP_RECURRING;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Represents a parser object specifically to parse message for AddEventCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class ParseAddEventCommand extends Parser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ParseAddEventCommand(String userMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Takes a user string designated to add an event and prepares it by extracting relevant information from the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * provided required and optional tags. It requires a title tag and a timing tag (/t and /timing). Other tags allow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * for it to be recurring and to set reminders of the event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Takes the format \"add-e /t {Title} /timing {YYYY-MM-DD HH:MM} [/rem [How much earlier to remind]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * [/rec {How often to re-occur}] [/stop {YYYY-MM-DD HH:MM}]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Returns an AddEventCommand to be executed by NotUS."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException Information provided by the tags are blank, wrong or do not have a default value."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // add-e eventTitle /t timing /rec occurrence /rem time before (default same day)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime dateTime \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Not set yet. Has no prefix for this."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime recurringEndTime \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        boolean toRemind \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        boolean isRecurring \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String recurringType \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                ExceptionType exception;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TITLE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_TAG:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_TIMING:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TIMING;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    String timingString \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    dateTime \u003d DateTimeManager.dateTimeParser(timingString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_REMIND:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    toRemind \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (infoDetails.length \u003d\u003d 1 || infoDetails[1].isBlank()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        reminderSchedule.put(Event.REMINDER_DAY, new ArrayList\u003c\u003e(List.of(1)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    reminderSchedule \u003d handleReminderParsing(infoDetails[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_RECURRING:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    isRecurring \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_RECURRING_TYPE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        recurringType \u003d checkBlank(infoDetails[1], exception).toLowerCase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        recurringType \u003d RecurringEvent.DAILY_RECURRENCE_TYPE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_STOP_RECURRING:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_RECURRING_END_TIME;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    String endTimingString \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    recurringEndTime \u003d DateTimeManager.dateTimeParser(endTimingString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            title \u003d checkBlank(title, ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TIMING);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (isRecurring) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate date \u003d (recurringEndTime !\u003d null) ? recurringEndTime.toLocalDate() : null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            switch (recurringType) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.DAILY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new DailyEvent(title, dateTime, toRemind, date, reminderSchedule, tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.WEEKLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new WeeklyEvent(title, dateTime, toRemind, date, reminderSchedule, tags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.MONTHLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new MonthlyEvent(title, dateTime, toRemind, date, reminderSchedule, tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.YEARLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new YearlyEvent(title, dateTime, toRemind, date, reminderSchedule, tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_INVALID_RECURRING_TYPE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            event \u003d new Event(title, dateTime, toRemind, false, reminderSchedule, tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 140
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseAddNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.command.AddNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_PIN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Represents a parser object specifically to parse message for AddNoteCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class ParseAddNoteCommand extends Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public ParseAddNoteCommand(String userMessage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Parses userInput into Note before adding into Notebook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return Returns an AddNoteCommand to be executed by NotUS."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @throws SystemException if an error occurs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cString\u003e content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        boolean isPinned \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        boolean isArchived \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Get prefix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_TAG:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_PIN:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isPinned \u003d Boolean.parseBoolean(checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_PIN));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_ARCHIVE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isArchived \u003d Boolean.parseBoolean(checkBlank(infoDetails[1],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                            ExceptionType.EXCEPTION_MISSING_ARCHIVE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            title \u003d checkBlank(title, ExceptionType.EXCEPTION_MISSING_TITLE_PREFIX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Add to note"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            note \u003d tags.isEmpty() ? new Note(title, content, isPinned, isArchived) :"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    new Note(title, content, isPinned, isArchived, tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return new AddNoteCommand(note);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "Nazryl": 76
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseArchiveOrUnarchiveNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.ArchiveNoteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.UnarchiveNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Represents a parser object specifically to parse message for ArchiveNoteCommand or UnarchiveNoteCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class ParseArchiveOrUnarchiveNoteCommand extends Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    boolean isArchive;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ParseArchiveOrUnarchiveNoteCommand(String userMessage, boolean isArchive) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isArchive \u003d isArchive;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Prepares userInput before archiving."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * User can archive or unarchive either via integer value of index or String value of title."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return Returns an ArchiveNoteCommand or UnarchiveNoteCommand to be executed by NotUS."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @throws SystemException if an error occurs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String prefix;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        boolean isIndex \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // Get prefix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    isIndex \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    index \u003d Integer.parseInt(checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_INDEX));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    if (isArchive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        return new ArchiveNoteCommand(index - 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        return new UnarchiveNoteCommand(index - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    if (isArchive) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        return new ArchiveNoteCommand(title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        return new UnarchiveNoteCommand(title);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (isIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INPUT_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 82
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseCreateOrDeleteTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.CreateTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.DeleteTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a parser object specifically to parse message for CreateTagCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class ParseCreateOrDeleteTagCommand extends Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    boolean isCreate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ParseCreateOrDeleteTagCommand(String userMessage, boolean isCreate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isCreate \u003d isCreate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Parses the userMessage to an arrayList of tags that is to be created or deleted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Returns a CreateTagCommand or DeleteTagCommand to be executed by NotUS."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException for missing tag prefix or tag name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String prefix \u003d infoDetails[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (prefix.equalsIgnoreCase(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Ensures that there is at least 1 tag to be created or deleted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG_PREFIX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (isCreate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new CreateTagCommand(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new DeleteTagCommand(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 62
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseDeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.command.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Represents a parser object specifically to parse message for DeleteEventCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class ParseDeleteEventCommand extends Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ParseDeleteEventCommand(String userMessage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Parses the variables in userMessage to a form that is used in DeleteEventCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Returns a DeleteEventCommand to be executed by Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException When the index is not numeric (e.g. index \u003d 1%s)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            index \u003d Integer.parseInt(checkBlank(userMessage, ExceptionType.EXCEPTION_MISSING_INDEX));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Convert from human-readable index to index in array."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new DeleteEventCommand(index - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 44
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseDeleteNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author Narzyl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.notus.command.DeleteNoteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parser object specifically to parse message for DeleteNoteCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseDeleteNoteCommand extends Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseDeleteNoteCommand(String userMessage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the into an int or string for DeleteNoteCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Returns a DeleteNoteCommand to be executed by NotUS."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws SystemException if an error occurs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String prefix;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isIndex \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            // Get prefix"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    isIndex \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    index \u003d Integer.parseInt(checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_INDEX));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    return new DeleteNoteCommand(index - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    return new DeleteNoteCommand(title);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INPUT_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseEditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.command.EditEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.RecurringEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.util.DateTimeManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_REMIND_ADD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_REMIND_CLEAR;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_REMIND_DROP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_STOP_RECURRING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Represents a parser object specifically to parse message for EditEventCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class ParseEditEventCommand extends Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ParseEditEventCommand(String userMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String newTitle \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime startDateTime \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Not set yet. Has no prefix for this."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime endDateTime \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String recurringType \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String reminderTodo \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String remindersString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endRecurrenceDate \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                ExceptionType exception;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TITLE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    newTitle \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_TIMING:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TIMING;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    String timingString \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    startDateTime \u003d DateTimeManager.dateTimeParser(timingString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_INDEX;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    String indexString \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        index \u003d Integer.parseInt(indexString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    } catch (NumberFormatException exception1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_REMIND_ADD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (!reminderTodo.isBlank()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_EDIT_REMINDER_SET);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    reminderTodo \u003d EditEventCommand.REMINDER_TYPE_ADD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_EDIT_REMINDERS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    remindersString \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    reminderSchedule \u003d handleReminderParsing(remindersString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_REMIND_CLEAR:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (!reminderTodo.isBlank()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_EDIT_REMINDER_SET);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    reminderTodo \u003d EditEventCommand.REMINDER_TYPE_CLEAR;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    // Ignore if there are any reminder timings set after /remind-clear"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_REMIND_DROP:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (!reminderTodo.isBlank()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_EDIT_REMINDER_SET);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    reminderTodo \u003d EditEventCommand.REMINDER_TYPE_DROP;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_EDIT_REMINDERS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    remindersString \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    reminderSchedule \u003d handleReminderParsing(remindersString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_RECURRING:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_EDIT_RECURRING_TYPE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    String recurringString \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    switch (recurringString) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    // Fall through for all cases"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    case RecurringEvent.NO_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    case RecurringEvent.DAILY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    case RecurringEvent.WEEKLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    case RecurringEvent.MONTHLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    case RecurringEvent.YEARLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        recurringType \u003d recurringString;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_EDIT_RECURRING_TYPE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_STOP_RECURRING:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_INVALID_END_RECURRENCE_TIMING_FORMAT;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    String endRecurrenceDateString \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    endRecurrenceDate \u003d DateTimeManager.dateTimeParser(endRecurrenceDateString).toLocalDate();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX_PREFIX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new EditEventCommand(index - 1, newTitle, startDateTime,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                reminderTodo, reminderSchedule, recurringType, endRecurrenceDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 135
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseEditNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.command.EditNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_ADD_LINE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_DELETE_LINE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_LINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Represents a parser object specifically to parse message for EditNoteCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class ParseEditNoteCommand extends Parser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public ParseEditNoteCommand(String userMessage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Parses userInput into Note before editing into Notebook."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return Result of the add note command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @throws SystemException if an error occurs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String prefixClashMode \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        boolean isArchived \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        boolean isInput \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        boolean isChangesCheck \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note note;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cString\u003e content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Map\u003cInteger, String\u003e addLists \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Map\u003cInteger, String\u003e editLists \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Map\u003cInteger, String\u003e deleteLists \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Get prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    index \u003d Integer.parseInt(checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_INDEX));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    index--;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isChangesCheck \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_ADD_LINE:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    if (prefixClashMode.isBlank() || prefixClashMode.equals(PREFIX_ADD_LINE)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        addLists \u003d addToLists(PREFIX_ADD_LINE, addLists, infoDetails[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        addLists \u003d sortByKey(addLists);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        prefixClashMode \u003d PREFIX_ADD_LINE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        isChangesCheck \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_CLASH_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_LINE:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    if (prefixClashMode.isBlank() || prefixClashMode.equals(PREFIX_LINE)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        editLists \u003d addToLists(PREFIX_LINE, editLists, infoDetails[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        prefixClashMode \u003d PREFIX_LINE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        isChangesCheck \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_CLASH_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_DELETE_LINE:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    if (prefixClashMode.isBlank() || prefixClashMode.equals(PREFIX_DELETE_LINE)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        deleteLists \u003d addToLists(PREFIX_DELETE_LINE, deleteLists, infoDetails[1]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        deleteLists \u003d sortByKey(deleteLists);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        prefixClashMode \u003d PREFIX_DELETE_LINE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        isChangesCheck \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_CLASH_FORMAT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_CONTENT:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isInput \u003d true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isChangesCheck \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_TAG:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isChangesCheck \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (!isChangesCheck) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_PREFIX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            note \u003d tags.isEmpty() ? new Note(title, content, null, isArchived) :"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    new Note(title, content, null, isArchived, tags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return new EditNoteCommand(index, note, addLists, editLists, deleteLists, isInput);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX_PREFIX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "Nazryl": 135
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Represents a parser object specifically to parse message for FindCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class ParseFindCommand extends Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ParseFindCommand(String userMessage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Ensures that the user does not leave input blank after entering the find command word."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return Returns a FindCommand to be executed by NotUS."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @throws SystemException for missing keyword."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Logger loggerFind \u003d Logger.getLogger(\"ParserPrepareFind\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        setupLogger(loggerFind, \"FindCommandParser.log\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            userMessage \u003d checkBlank(userMessage, ExceptionType.EXCEPTION_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            loggerFind.log(Level.INFO, \"If no null pointer, keyword is trimmed.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            loggerFind.log(Level.INFO, \"Null pointer exception caught.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        loggerFind.log(Level.INFO, \"Will execute FindCommand\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return new FindCommand(userMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 41
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseListEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.command.ListEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.TIMING_SPLIT_DELIMITER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Represents a parser object specifically to parse message for ListEventCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class ParseListEventCommand extends Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ParseListEventCommand(String userMessage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (userMessage \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return new ListEventCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfoDetails \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            String details \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            int year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            int month;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (splitInfoDetails.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TIMING_PREFIX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (String[] infoDetails : splitInfoDetails) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (PREFIX_TIMING.equalsIgnoreCase(prefix)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    ExceptionType exception \u003d ExceptionType.EXCEPTION_INVALID_LIST_TIMING_FORMAT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    details \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                String[] timings \u003d details.split(TIMING_SPLIT_DELIMITER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (timings.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    year \u003d Integer.parseInt(timings[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    if (year \u003c\u003d 1000 || year \u003e 3000) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_SEARCH_DATE_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        return new ListEventCommand(year);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    year \u003d Integer.parseInt(timings[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    month \u003d Integer.parseInt(timings[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (year \u003c\u003d ListEventCommand.SMALLEST_YEAR || year \u003e\u003d ListEventCommand.LARGEST_YEAR"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        || month \u003c\u003d ListEventCommand.SMALLEST_MONTH || month \u003e\u003d ListEventCommand.LARGEST_MONTH) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_SEARCH_DATE_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_INVALID_LIST_TIMING_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return new ListEventCommand(year, month);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 68
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseListNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.command.ListNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.STRING_SORT_ASCENDING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.STRING_SORT_DESCENDING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " * Represents a parser object specifically to parse message for ListNoteCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class ParseListNoteCommand extends Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ParseListNoteCommand(String userMessage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Returns a ListNote Command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * ListNoteCommand is overloaded, so depending on the user input i.e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * list-n /tag TAG up/down"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * tags and up/down are optional parameters for users to input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * up/down is to sort the list alphabetically either A-Z or Z-A"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return Returns a ListNoteCommand to be executed by NotUS."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // If no optional parameters, return default display of list note"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (userMessage \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String tagName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String sort;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        boolean isArchive \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Boolean isAscending \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cString\u003e tagsName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        boolean isTag \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                ExceptionType exception;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                case PREFIX_TAG:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    isTag \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TAG;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    tagName \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    tagsName.add(tagName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                case PREFIX_SORT:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    isTag \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_SORT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    sort \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    if (sort.equalsIgnoreCase(STRING_SORT_ASCENDING)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        isAscending \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    } else if (sort.equalsIgnoreCase(STRING_SORT_DESCENDING)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        isAscending \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_SORT_TYPE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                case PREFIX_ARCHIVE:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    isTag \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    isArchive \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (isTag) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_SORT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (isArchive) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return new ListNoteCommand(true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // No optional parameters case as it is already accounted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Minimally if no tag, will have up/down and vice versa"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (tagsName.isEmpty() \u0026\u0026 isAscending \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else if (tagsName.isEmpty() \u0026\u0026 isAscending !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return new ListNoteCommand(isAscending);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else if (!tagsName.isEmpty() \u0026\u0026 isAscending \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return new ListNoteCommand(tagsName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return new ListNoteCommand(isAscending, tagsName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 106
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParsePinCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.command.PinCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Represents a parser object specifically to parse message for ParsePinCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class ParsePinCommand extends Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public ParsePinCommand(String userMessage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        boolean isTitle \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                ExceptionType exception;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    isTitle \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TITLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], exception);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return new PinCommand(title);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_INDEX;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    index \u003d Integer.parseInt(checkBlank(infoDetails[1], exception));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return new PinCommand(index - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            if (isTitle) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        throw new SystemException(ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "prachi2023": 62
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.TagEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.TagNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a parser object specifically to parse message for ParseTagNoteCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class ParseTagCommand extends Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    boolean isNote;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ParseTagCommand(String userMessage, boolean isNote) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isNote \u003d isNote;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Parses the userMessage into an arrayList of tags that is be tagged or untagged from the object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Returns a TagCommand to be executed by NotUS."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException for invalid index input, missing tag prefix or tag name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int index \u003d NULL_INDEX;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                case PREFIX_TAG:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    ExceptionType exception \u003d ExceptionType.EXCEPTION_MISSING_INDEX;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    index \u003d Integer.parseInt(checkBlank(infoDetails[1].trim(), exception));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG_PREFIX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX_PREFIX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (isNote) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new TagNoteCommand(index - 1, tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new TagEventCommand(index - 1, tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 78
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParseViewNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.command.ViewNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " * Represents a parser object specifically to parse message for ParseViewNoteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "public class ParseViewNoteCommand extends Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public ParseViewNoteCommand(String userMessage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        super(userMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public Command parse() throws SystemException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        boolean isTitle \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                ExceptionType exception;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    isTitle \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_TITLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1],exception);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return new ViewNoteCommand(title);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    isTitle \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    exception \u003d ExceptionType.EXCEPTION_MISSING_INDEX;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    index \u003d Integer.parseInt(checkBlank(infoDetails[1], exception));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    return new ViewNoteCommand(index - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_PREFIX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            if (isTitle) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        throw new SystemException(ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "prachi2023": 63
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.PREFIX_DELETE_LINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.STRING_SPLIT_DELIMITER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.notus.util.PrefixSyntax.TIMING_SPLIT_DELIMITER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected static final int CONTAINS_TAG_COLOR_INFO \u003d 2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected static final int NULL_INDEX \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected String userMessage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    protected static final String[] INSTRUCTIONS_INPUT_CONTENTS \u003d {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        \"Enter Note:\", \"*/del to delete previous line*\", \"*/end on a new line to end note input*\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    //@@author Chongjx"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Parser(String userMessage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.userMessage \u003d userMessage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public abstract Command parse() throws SystemException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Splits the userMessage into the respective info by the delimiter."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userMessage Original string of the user message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Split strings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws NullPointerException when the userMessage is empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    static ArrayList\u003cString[]\u003e splitInfoDetails(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String[] splitMessage \u003d userMessage.split(PREFIX_DELIMITER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitMessageContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Splits the prefix and the remaining content"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String s : splitMessage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                splitMessageContent.add(s.split(STRING_SPLIT_DELIMITER, 2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Remove the first element as it is always empty"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            splitMessageContent.remove(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return splitMessageContent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_MESSAGE_AFTER_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    //@@author brandonywl"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Checks if an input string if blank. If it is, throw the provided system exception. If it is not, return that"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * string trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param input Input to be checked."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param exceptionType ExceptionType to be thrown."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Trimmed non-blank string."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException Occurs when input is blank."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    static String checkBlank(String input, ExceptionType exceptionType) throws SystemException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(exceptionType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return input.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    //@@author brandonywl"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provides a parser method for converting user input to a reminder schedule for add and edit event commands."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param inputTimeUnitString String to be parsed after /remind"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Returns a reminder schedule that maps the unit (day/week) to map how many days/week before a reminder"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException Wrong reminder format input or number format errors."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    static HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e handleReminderParsing("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            String inputTimeUnitString) throws SystemException  {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String[] timePeriodUnitStrings  \u003d inputTimeUnitString.split(STRING_SPLIT_DELIMITER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (String timePeriodUnitString : timePeriodUnitStrings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            String[] timePeriodUnit \u003d timePeriodUnitString.split(TIMING_SPLIT_DELIMITER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (timePeriodUnit.length !\u003d 2) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_INVALID_REMINDER_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            int timePeriod;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            String timeUnit;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                timePeriod \u003d Integer.parseInt(timePeriodUnit[0]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                timeUnit \u003d timePeriodUnit[1];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if ((!timeUnit.equalsIgnoreCase(Event.REMINDER_DAY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        \u0026\u0026 !timeUnit.equalsIgnoreCase(Event.REMINDER_WEEK)) || timePeriod \u003c 1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_REMINDER_FORMAT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                ExceptionType exception \u003d ExceptionType.EXCEPTION_EARLY_REMINDER;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                if (timeUnit.equalsIgnoreCase(Event.REMINDER_WEEK) \u0026\u0026 timePeriod \u003e 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    throw new SystemException(exception);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                } else if (timeUnit.equalsIgnoreCase(Event.REMINDER_DAY) \u0026\u0026 timePeriod \u003e 7) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    throw new SystemException(exception);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } catch (NumberFormatException exceptionNumFormat) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_INVALID_REMINDER_FORMAT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cInteger\u003e storedReminders \u003d reminderSchedule.get(timeUnit);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (storedReminders \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                storedReminders \u003d new ArrayList\u003c\u003e(List.of(timePeriod));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                storedReminders.add(timePeriod);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            reminderSchedule.put(timeUnit, storedReminders);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return reminderSchedule;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    //@@author Chongjx"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates and returns a Tag object based on the info provided."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagMessage info of the Tag. Contains tag name and may contain tag color."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return new Tag object."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException for missing tag name."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    static Tag handleTagPrefix(String[] tagMessage) throws SystemException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagName;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagColor \u003d \"\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagsInfo;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Ensures that the message is not blank."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagsInfo \u003d checkBlank(tagMessage[1], ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Split into the tag name and tag color."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] tagInfo \u003d tagsInfo.split(STRING_SPLIT_DELIMITER, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagName \u003d checkBlank(tagInfo[0], ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tagInfo.length \u003d\u003d CONTAINS_TAG_COLOR_INFO) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagColor \u003d tagInfo[1].trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return new Tag(tagName, tagColor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    //@@author Nazryl"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Used for input of note content and processing the input into a readable data."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return A string of converted content input."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @throws StringIndexOutOfBoundsException if an error occurs."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static ArrayList\u003cString\u003e inputContent() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        boolean isInputSuccess \u003d false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cString\u003e inputString;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            inputString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            System.out.println(Formatter.formatString(INSTRUCTIONS_INPUT_CONTENTS, true));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                // Type note"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    inputString.add(input.nextLine());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    // \"/del\" Delete previous line if there user makes a typo"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    if (inputString.get(inputString.size() - 1)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                            .equalsIgnoreCase(PREFIX_DELIMITER + PREFIX_DELETE_LINE)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        inputString.remove(inputString.size() - 1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        inputString.remove(inputString.size() - 1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                } while (!inputString.get(inputString.size() - 1)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        .equalsIgnoreCase(PREFIX_DELIMITER + PREFIX_END)); // \"/end\" to end input note"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                // Delete \"/end\" command when user ends the input"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                inputString.remove(inputString.size() - 1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                if (inputString.size() !\u003d 0) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isInputSuccess \u003d true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    System.out.println(SystemException.ExceptionType.EXCEPTION_CONTENT_MISSING);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                System.out.println(SystemException.ExceptionType.EXCEPTION_INVALID_END_INPUT);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                System.out.println(SystemException.ExceptionType.EXCEPTION_INVALID_DEL_INPUT);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } while (!isInputSuccess);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return inputString;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Reverse the map integers values for an easier flow of setting map."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param map Original string user inputs."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return Result of the add note command."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static Map\u003cInteger, String\u003e sortByKey(Map\u003cInteger, String\u003e map) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Map\u003cInteger, String\u003e reverseSortedMap \u003d new TreeMap\u003c\u003e(Collections.reverseOrder());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        reverseSortedMap.putAll(map);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return reverseSortedMap;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Adds on to the current type of lines that is to be added edit or delete."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param prefix type that is passed in."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param lists of list to be returned."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param infoDetail string user input values."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return lists of list containing the key and value."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @throws SystemException if integer is invalid."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static Map\u003cInteger, String\u003e addToLists(String prefix, Map\u003cInteger, String\u003e lists,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                                            String infoDetail) throws SystemException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String line \u003d checkBlank(infoDetail, ExceptionType.EXCEPTION_MISSING_LINE_CONTENT);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String[] lineInfo;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (prefix.equalsIgnoreCase(PREFIX_DELETE_LINE)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            lineInfo \u003d line.split(STRING_SPLIT_DELIMITER, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            lineInfo \u003d line.split(STRING_SPLIT_DELIMITER, 2);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        index \u003d Integer.parseInt(checkBlank(lineInfo[0], ExceptionType.EXCEPTION_MISSING_INDEX));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        if (prefix.equalsIgnoreCase(PREFIX_DELETE_LINE)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            lists.put(index - 1, \"\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            lists.put(index - 1, lineInfo[1]);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return lists;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    //@@author R-Ramana"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Set Up method for logging"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Takes in a Logger variable to ensure that separates loggers can be used"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * for the respective methods."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Sets up what to be printed to the console (only logs that are severe)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Sets up what to be printed to the file (logs that are of Level.INFO and above)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param logger A Logger variable to be used"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param logFileName Name to be given for .log file."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void setupLogger(Logger logger, String logFileName) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        logger.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        consoleHandler.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(logFileName);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger not working.\", error);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 98,
      "R-Ramana": 29,
      "brandonywl": 71,
      "Nazryl": 99
    }
  },
  {
    "path": "src/main/java/seedu/notus/util/parser/ParserManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.AddNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.AddEventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.ArchiveNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.CreateTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.DeleteNoteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.DeleteEventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.DeleteTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.EditNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.EditEventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.IncorrectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.ListNoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.ListEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.ListTagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.PinCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.RemindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.TagEventCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.TagNoteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.UnarchiveNoteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.ViewNoteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    //@@author Chongjx"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Parses userInput string into a Command to be executed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userInput Original string of the userInput."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] userCommandAndArguments \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String commandString \u003d userCommandAndArguments[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String userMessage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userMessage \u003d userCommandAndArguments[1].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (userMessage.isBlank()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                userMessage \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userMessage \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            switch (commandString.toLowerCase()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case AddNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseAddNoteCommand(userMessage).parse();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseAddEventCommand(userMessage).parse();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ArchiveNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseArchiveOrUnarchiveNoteCommand(userMessage, true).parse();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case UnarchiveNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseArchiveOrUnarchiveNoteCommand(userMessage, false).parse();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ListNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseListNoteCommand(userMessage).parse();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ListEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseListEventCommand(userMessage).parse();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ViewNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseViewNoteCommand(userMessage).parse();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case EditNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseEditNoteCommand(userMessage).parse();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseEditEventCommand(userMessage).parse();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case DeleteNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseDeleteNoteCommand(userMessage).parse();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseDeleteEventCommand(userMessage).parse();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseFindCommand(userMessage).parse();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case PinCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParsePinCommand(userMessage).parse();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case CreateTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseCreateOrDeleteTagCommand(userMessage, true).parse();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case DeleteTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseCreateOrDeleteTagCommand(userMessage, false).parse();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ListTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ListTagCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case TagNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseTagCommand(userMessage, true).parse();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case TagEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ParseTagCommand(userMessage, false).parse();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case RemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new RemindCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(SystemException.ExceptionType.EXCEPTION_INVALID_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new IncorrectCommand(exception.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 102
    }
  },
  {
    "path": "src/test/java/seedu/notus/NotusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class NotusTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/AddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.DailyEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Driver class of AddEventCommandTest to ensure that adding an event to a timetable is correct. Variables point to the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * same object in memory."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class AddEventCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Event event \u003d new DailyEvent(TEST_TITLE, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final Timetable TIMETABLE \u003d new Timetable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private StorageManager storageManager \u003d new StorageManager(TIMETABLE, null, null, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private AddEventCommand command \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Test adding an event to an empty timetable and check if it is referencing the same Event in the heap."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void execute_singleEvent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        command.setData(null, TIMETABLE, null, storageManager);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(command.timetable.getEvent(0) \u003d\u003d (event));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 4,
      "brandonywl": 44,
      "prachi2023": 2
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/AddNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TagManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author Narzyl"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class AddNoteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Notebook notebook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Timetable timetable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    TagManager tagManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the note can be added successfully."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_emptyNotebook_notebookContainsPerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /*notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        content.add(\"Encapsulation\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        content.add(\"Abstraction\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Note note \u003d new Note(\"Java OOP\", content, true, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddNoteCommand command \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            command \u003d new AddNoteCommand(note);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cNote\u003e checkBook \u003d notebook.getNotes();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(checkBook.contains(note));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, checkBook.size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(result.equals(Formatter.formatString(AddNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Formatter.formatNote(AddNoteCommand.COMMAND_SUCCESSFUL_MESSAGE, note), result);*/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the note cannot be added when the note"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * contains the same title."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCommand_notebookAlreadyContainsTitle_notebookUnmodified() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(timetable, null, notebook, tagManager);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        content.add(\"Encapsulation\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        content.add(\"Abstraction\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Note note \u003d new Note(\"Java OOP\", content, true, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        notebook.addNote(note);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddNoteCommand command \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            command \u003d new AddNoteCommand(note);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(result.contains(note.getTitle()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Formatter.formatString(NOTE_UNSUCCESSFUL_MESSAGE), result);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cNote\u003e checkBook \u003d notebook.getNotes();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(checkBook.contains(note));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, checkBook.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10,
      "R-Ramana": 1,
      "Nazryl": 8,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/ArchiveNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.notebook.NotebookStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.ui.FormatterStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.text.Normalizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_DOES_NOT_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "class ArchiveNoteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    int maxRowLength \u003d 100;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Notebook notebook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    ArrayList\u003cString\u003e content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    ArrayList\u003cTag\u003e tag \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    ArrayList\u003cTag\u003e tagSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Tag tagImpt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Tag tagCs2113;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Tag tagNus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagImpt \u003d new Tag(\"Impt\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagCs2113 \u003d new Tag(\"CEG\", Tag.COLOR_YELLOW_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagNus \u003d new Tag(\"NUS\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        content.add(\"default\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        content.add(\"hi how are you\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tag.add(tagImpt);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagSet.add(tagNus);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagSet.add(tagCs2113);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note testNote1 \u003d new Note(\"Default\", content, true, false, tag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note testNote2 \u003d new Note(\"TestNote1\", content, false, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note testNote3 \u003d new Note(\"TestNote2\", content, false, false, tagSet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Note testNote4 \u003d new Note(\"Random Text\", content, true, false, tagSet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_validIndex_returnsArchiveMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        /*int index \u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String title \u003d NotebookStub.getArchiveNoteTitle(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(COMMAND_SUCCESSFUL_MESSAGE + title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, index - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_invalidIndex_returnsInvalidIndexMessage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        /*int index \u003d 50;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String title \u003d NotebookStub.getArchiveNoteTitle(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(INDEX_OUT_OF_RANGE_MESSAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, index - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);*/"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_validTitle_returnsArchiveMessage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        /*String title \u003d \"random text\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(COMMAND_SUCCESSFUL_MESSAGE + title);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, title);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);*/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_existingNoteTitle_returnsNoNoteMessage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        /*String title \u003d \"random text\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.archiveNotes(title);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(COMMAND_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, title);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);*/"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_invalidTitle_returnsNoNotes() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String title \u003d \"rando\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, title);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String getCommandExecutionString(Notebook notebook, String keyword) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArchiveNoteCommand archiveCommand \u003d new ArchiveNoteCommand(keyword);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        archiveCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return archiveCommand.execute();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String getCommandExecutionString(Notebook notebook, int index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArchiveNoteCommand archiveCommand \u003d new ArchiveNoteCommand(index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        archiveCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return archiveCommand.execute();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 122
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/CreateTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TagManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class CreateTagCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagGreen;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagBlue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRedToYellow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagGreenToPurple;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRed \u003d new Tag(\"Red\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagGreen \u003d new Tag(\"Green\", Tag.COLOR_GREEN_STRING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagBlue  \u003d new Tag(\"Blue\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRedToYellow \u003d new Tag(\"Red\", Tag.COLOR_YELLOW_STRING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagGreenToPurple \u003d new Tag(\"Green\", Tag.COLOR_MAGENTA_STRING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void createTagCommand_createNonExistingTag_createsTag() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagRed));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagGreen));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagBlue));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void createTagCommand_CreateExistingTag_updatesTag() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedToYellow);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreenToPurple);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagRed));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagGreen));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagBlue));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTag(tagRedToYellow.getTagName()), tagRed);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTag(tagGreenToPurple.getTagName()), tagGreen);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void createTagCommand_createNonExistingAndExistingTag_createsTagAndUpdatesTag() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagRed));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagGreen));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(tagManager.getTagMap().containsKey(tagBlue));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedToYellow);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreenToPurple);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagRed));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagGreen));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().containsKey(tagBlue));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTag(tagRedToYellow.getTagName()), tagRed);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTag(tagGreenToPurple.getTagName()), tagGreen);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 3);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String getCommandExecutionString(TagManager tagManager, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        CreateTagCommand createTagCommand \u003d new CreateTagCommand(tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        createTagCommand.setData(null, null, tagManager, null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return createTagCommand.execute();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 106
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/DeleteNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TagManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Timetable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "class DeleteNoteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Notebook deletedNotebook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Notebook expectedNotebook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Notebook notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private TagManager tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private StorageManager storageManager \u003d new StorageManager(timetable, null, notebook, tagManager);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cString\u003e contentOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        contentOne.add(\"Encapsulation\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        contentOne.add(\"Abstraction\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cString\u003e contentTwo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        contentTwo.add(\"Core library\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        contentTwo.add(\"Standard library\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note javaNote \u003d new Note(\"Java OOP\", contentOne, true, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note cppNote \u003d new Note(\"C++ Standard Libraries\", contentTwo, false, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        AddNoteCommand command \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            command \u003d new AddNoteCommand(javaNote);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        deletedNotebook \u003d notebook;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            command \u003d new AddNoteCommand(cppNote);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        expectedNotebook \u003d notebook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Delete notes by index and String title of the note."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void execute_validIndex_personIsDeleted() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        /*assertDeletionSuccessfulInteger(1, notebook);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertDeletionSuccessfulString(\"Java OOP\", notebook);*/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Asserts that the note at the specified index can be deleted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * The Notebook passed in will not be modified."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param targetVisibleIndex of the item to be deleted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook           contains list of notes."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private void assertDeletionSuccessfulInteger(int targetVisibleIndex, Notebook notebook) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String deleteTarget \u003d notebook.getNotes().get(targetVisibleIndex).getTitle();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String expectedMessage \u003d DeleteNoteCommand.COMMAND_SUCCESSFUL_MESSAGE + deleteTarget;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        DeleteNoteCommand command \u003d createDeleteCommand(targetVisibleIndex, notebook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(Formatter.formatString(expectedMessage), result);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(deletedNotebook.getNotes(), notebook.getNotes());*/"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Asserts that the note at can be deleted with the note title."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * The Notebook passed in will not be modified."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param targetString of the item to be deleted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook     contains list of notes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private void assertDeletionSuccessfulString(String targetString, Notebook notebook) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cNote\u003e deletedListTitle \u003d (ArrayList\u003cNote\u003e) notebook.getNotes().stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                .filter((s) -\u003e s.getTitle().toLowerCase().contains(targetString.toLowerCase()))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String deleteTarget \u003d deletedListTitle.get(0).getTitle();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String expectedMessage \u003d DeleteNoteCommand.COMMAND_SUCCESSFUL_MESSAGE + deleteTarget;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        DeleteNoteCommand command \u003d createDeleteCommand(targetString, notebook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(Formatter.formatString(expectedMessage), result);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(deletedNotebook.getNotes(), notebook.getNotes());*/"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void execute_emptyAddressBook_returnsPersonNotFoundMessage() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        /*assertDeletionFailsDueToNoSuchPersonInteger(2, notebook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertDeletionFailsDueToNoSuchPersonString(\"ZZZ\", notebook);*/"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Creates a new delete command using index to delete."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param targetVisibleIndex of the item to be deleted."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook           contains list of notes."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private DeleteNoteCommand createDeleteCommand(int targetVisibleIndex, Notebook notebook) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        DeleteNoteCommand command \u003d new DeleteNoteCommand(targetVisibleIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Creates a new delete command using String to delete."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param targetVisibleString of the item to be deleted."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook            contains list of notes."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private DeleteNoteCommand createDeleteCommand(String targetVisibleString, Notebook notebook) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        DeleteNoteCommand command \u003d new DeleteNoteCommand(targetVisibleString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command.setData(notebook, timetable, tagManager, storageManager);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Asserts that the note at the specified index cannot be deleted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * due to note not existing in the notebook."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * The Notebook passed in will not be modified."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param visibleIndex of the item to be deleted."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook     contains list of notes."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private void assertDeletionFailsDueToNoSuchPersonInteger(int visibleIndex, Notebook notebook) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        /*DeleteNoteCommand command \u003d createDeleteCommand(visibleIndex, notebook);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(Formatter.formatString(DeleteNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE), result);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(expectedNotebook.getNotes(), notebook.getNotes());*/"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Asserts that the note at the specified index cannot be deleted"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * due to note not existing in the notebook."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * The Notebook passed in will not be modified."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param targetVisibleString of the item to be deleted."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param notebook            contains list of notes."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private void assertDeletionFailsDueToNoSuchPersonString(String targetVisibleString, Notebook notebook) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        /*DeleteNoteCommand command \u003d createDeleteCommand(targetVisibleString, notebook);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(Formatter.formatString(DeleteNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE), result);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertEquals(expectedNotebook.getNotes(), notebook.getNotes());*/"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10,
      "Nazryl": 165
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/DeleteTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TagManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.DELETE_TAG_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.HEADER_DELETE_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class DeleteTagCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRed;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagGreen;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagBlue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRedRef;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagGreenRef;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cString\u003e content;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note defaultNote;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRed \u003d new Tag(\"Red\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagGreen \u003d new Tag(\"Green\", Tag.COLOR_GREEN_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagBlue  \u003d new Tag(\"Blue\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRedRef \u003d new Tag(\"Red\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagGreenRef \u003d new Tag(\"Green\", Tag.COLOR_GREEN_STRING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        content.add(\"Default\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultNote \u003d new Note(\"Default\", content, false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void deleteTagCommand_deleteNonExistingTag_returnDefaultMessage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e expectedResult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedResult.add(HEADER_DELETE_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedResult.add(DELETE_TAG_UNSUCCESSFUL_MESSAGE + tagRed);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedResult.add(DELETE_TAG_UNSUCCESSFUL_MESSAGE + tagGreen);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedResult.add(DELETE_TAG_UNSUCCESSFUL_MESSAGE + tagBlue);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /*String result \u003d getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(Formatter.formatString(expectedResult, true), result);*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void deleteTagCommand_deleteExistingTag_deletesTag() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.createTag(tagRed, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.createTag(tagGreen, true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultNote.setTags(tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(defaultNote);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedRef);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreenRef);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Ensures the note is tagged properly"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultNote.getTags().size(), 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultNote.getTags().contains(tagRed));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultNote.getTags().contains(tagGreen));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().get(tagRed).contains(defaultNote));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().get(tagGreen).contains(defaultNote));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /*getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultNote.getTags().size(), 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 0);*/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void deleteTagCommand_deleteNonExistingAndExistingTag_deletesTagAndReturnDefaultMessage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.createTag(tagRed, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.createTag(tagGreen, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRed);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreen);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultNote.setTags(tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(defaultNote);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedRef);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagGreenRef);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Ensures the note is tagged properly"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultNote.getTags().size(), 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultNote.getTags().contains(tagRed));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultNote.getTags().contains(tagGreen));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().get(tagRed).contains(defaultNote));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(tagManager.getTagMap().get(tagGreen).contains(defaultNote));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /*getCommandExecutionString(tagManager, tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultNote.getTags().size(), 0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 0);*/"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String getCommandExecutionString(TagManager tagManger, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        deleteTagCommand.setData(null, null, tagManger, null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return deleteTagCommand.execute();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 129,
      "R-Ramana": 2
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/EditEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class EditEventCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/EditNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class EditNoteCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/FindCommandStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class FindCommandStub extends FindCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Constructs a FindCommand to find Notes in the Notebook given the keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param keywords to look for in the Notebook."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public FindCommandStub(String keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        super(keywords);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String execute(String keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (keywords.equals(\"test\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 21
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.tag.TagManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.ui.FormatterStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FIND_NOTE_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FIND_NOTE_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Notebook notebook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    TagManager tagManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    int maxRowLength \u003d 100;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    ArrayList\u003cTag\u003e tag \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Tag tagImpt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Note defaultNote;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Note testNote1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Note testNote2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Note testNote3;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cString\u003e content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        content.add(\"default\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tag.add(tagImpt);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        defaultNote \u003d new Note(\"Default\", content, false, false, tag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        testNote1 \u003d new Note(\"TestNote1\", content, true, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        testNote2 \u003d new Note(\"TestNote2\", content, false, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        testNote3 \u003d new Note(\"Song Lyrics\", content, true, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_keywordTest_returnsTestNote1AndTestNote2() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String keyword \u003d \"test\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notes.add(testNote1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notes.add(testNote2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatNotes(FIND_NOTE_SUCCESSFUL_MESSAGE, notes, notebook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, keyword);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_keywordNil_returnsNoMatch() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String keyword \u003d \"NIL\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(FIND_NOTE_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, keyword);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String getCommandExecutionString(Notebook notebook, String keyword) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(keyword);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        findCommand.setData(notebook, null, tagManager, null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return findCommand.execute();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 86
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import com.diogonunes.jcolor.Attribute;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static com.diogonunes.jcolor.Ansi.colorize;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.ADD_E_COMMAND_USAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.ADD_N_COMMAND_USAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.ARCHIVE_N_COMMAND_USAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.CREATE_T_COMMAND_USAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.DELETE_E_COMMAND_USAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.DELETE_N_COMMAND_USAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.DELETE_T_COMMAND_USAGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_E_COMMAND_USAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EDIT_N_COMMAND_USAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.EXIT_COMMAND_USAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.FIND_N_COMMAND_USAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.LIST_E_COMMAND_USAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.LIST_N_COMMAND_USAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.LIST_T_COMMAND_USAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.PIN_N_COMMAND_USAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.REMIND_E_COMMAND_USAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.TAG_E_COMMAND_USAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.TAG_N_COMMAND_USAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.UNARCHIVE_N_COMMAND_USAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.VIEW_N_COMMAND_USAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    static final Attribute CYAN \u003d Attribute.BRIGHT_CYAN_TEXT();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    static final Attribute WHITE \u003d Attribute.BRIGHT_WHITE_TEXT();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String HELP_STRING \u003d \"The recognized commands and their usages are listed below. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"Parameters listed in brackets, [ ], represent optional inputs.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String[] COMMANDS_USAGE \u003d {HELP_STRING,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(ADD_E_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(ADD_N_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(ARCHIVE_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(CREATE_T_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(DELETE_E_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(DELETE_N_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(DELETE_T_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(EDIT_E_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(EDIT_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(EXIT_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(FIND_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(LIST_E_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(LIST_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(LIST_T_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(PIN_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(REMIND_E_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(TAG_E_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(TAG_N_COMMAND_USAGE, CYAN),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(UNARCHIVE_N_COMMAND_USAGE, WHITE),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            colorize(VIEW_N_COMMAND_USAGE, CYAN)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void executeTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String helpCommand \u003d new HelpCommand().execute();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(Formatter.formatString(COMMANDS_USAGE, true), helpCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 68
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/ListEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ListEventCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/ListNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "////@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import com.diogonunes.jcolor.Attribute;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import seedu.notus.data.tag.TagManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import seedu.notus.ui.FormatterStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import static com.diogonunes.jcolor.Ansi.colorize;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import static seedu.notus.command.ListNoteCommand.COMMAND_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import static seedu.notus.command.ListNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE_EMPTY_NOTEBOOK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import static seedu.notus.command.ListNoteCommand.COMMAND_UNSUCCESSFUL_MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import static seedu.notus.command.ListNoteCommand.PINNED_NOTES_MESSAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import static seedu.notus.command.ListNoteCommand.UNPINNED_NOTES_MESSAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//import static seedu.notus.command.ListNoteCommand.ARCHIVE_NOTES_MESSAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//class ListNoteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    Notebook notebook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    TagManager tagManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    int maxRowLength \u003d 100;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    ArrayList\u003cNote\u003e noteArrayList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    ArrayList\u003cNote\u003e pinNotes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    ArrayList\u003cNote\u003e unpinnedNotes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    ArrayList\u003cTag\u003e tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    ArrayList\u003cTag\u003e tagSet;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    Note defaultNote;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    Note testNote1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    Note cs2113;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    Note songLyrics;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    Tag tagSports;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    Tag tagCs2113;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    Tag tagNus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void setup() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        unpinnedNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagSports \u003d new Tag(\"Sports\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagCs2113 \u003d new Tag(\"CEG\", Tag.COLOR_YELLOW_STRING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagNus \u003d new Tag(\"NUS\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ArrayList\u003cString\u003e content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        content.add(\"default\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ArrayList\u003cString\u003e contentOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        contentOne.add(\"testing\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ArrayList\u003cString\u003e contentTwo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        contentTwo.add(\"JavaDocs\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ArrayList\u003cString\u003e contentThree \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        contentThree.add(\"I like to move it move it\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        contentThree.add(\"I like to move it move it\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        contentThree.add(\"I like to... MOVE IT!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tag \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tag.add(tagSports);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagSet.add(tagCs2113);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagSet.add(tagNus);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        defaultNote \u003d new Note(\"Default\", content, false, false, tag);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        testNote1 \u003d new Note(\"TestNote1\", contentOne, true, false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        cs2113 \u003d new Note(\"CS2113\", contentTwo, true, false, tagSet);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        songLyrics \u003d new Note(\"Song Lyrics\", contentThree, false, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_noNotes_notebookIsEmpty() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatString(COMMAND_UNSUCCESSFUL_MESSAGE_EMPTY_NOTEBOOK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_noPinnedNotes_defaultList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(songLyrics);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList.add(defaultNote);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList.add(songLyrics);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(COMMAND_SUCCESSFUL_MESSAGE, noteArrayList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_SortUp_AscendingSortList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(songLyrics);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(cs2113);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        cs2113.togglePinned();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList.add(cs2113);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList.add(defaultNote);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList.add(songLyrics);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(COMMAND_SUCCESSFUL_MESSAGE, noteArrayList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook, (Boolean) true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_SortDown_DescendingSortList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(songLyrics);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(cs2113);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        cs2113.togglePinned();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList.add(songLyrics);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList.add(defaultNote);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList.add(cs2113);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(COMMAND_SUCCESSFUL_MESSAGE, noteArrayList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook, (Boolean) false);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_PinnedNotes_defaultList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(cs2113);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(cs2113);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(PINNED_NOTES_MESSAGE, UNPINNED_NOTES_MESSAGE,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//                pinNotes, unpinnedNotes, notebook);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_PinnedNotesSortUp_SortUpPinnedNotesList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(cs2113);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(cs2113);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(testNote1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(PINNED_NOTES_MESSAGE, UNPINNED_NOTES_MESSAGE,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//                pinNotes, unpinnedNotes, notebook);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook, (Boolean) true);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_PinnedNotesSortDown_SortDownPinnedNotesList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(cs2113);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(testNote1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(cs2113);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(PINNED_NOTES_MESSAGE, UNPINNED_NOTES_MESSAGE,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//                pinNotes, unpinnedNotes, notebook);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook, (Boolean) false);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_PinnedAndUnpinnedNotes_defaultList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(songLyrics);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(testNote1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        unpinnedNotes.add(songLyrics);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(PINNED_NOTES_MESSAGE, UNPINNED_NOTES_MESSAGE,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//                pinNotes, unpinnedNotes, notebook);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_PinnedAndUnpinnedNotesSortUp_TwoSortedUpList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(songLyrics);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(cs2113);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(cs2113);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(testNote1);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        unpinnedNotes.add(defaultNote);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        unpinnedNotes.add(songLyrics);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(PINNED_NOTES_MESSAGE, UNPINNED_NOTES_MESSAGE,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//                pinNotes, unpinnedNotes, notebook);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook, (Boolean) true);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_PinnedAndUnpinnedNotesSortDown_TwoSortedDownList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(songLyrics);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(cs2113);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(testNote1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(cs2113);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        unpinnedNotes.add(songLyrics);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        unpinnedNotes.add(defaultNote);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(PINNED_NOTES_MESSAGE, UNPINNED_NOTES_MESSAGE,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//                pinNotes, unpinnedNotes, notebook);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook, (Boolean) false);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_InvalidTag_NoResult() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(songLyrics);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(cs2113);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tags.add(\"heyya\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatString(COMMAND_UNSUCCESSFUL_MESSAGE_INVALID_TAG);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook, tags);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_ValidTagSortUp_NotesWithTag() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(songLyrics);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagManager.createTag(tagCs2113, false);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagManager.createTag(tagNus, false);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tags.add(\"NUS\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tags.add(\"CEG\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagManager.tagNote(songLyrics, tagCs2113);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagManager.tagNote(songLyrics, tagNus);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagManager.tagNote(testNote1, tagNus);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        pinNotes.add(testNote1);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        unpinnedNotes.add(songLyrics);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(PINNED_NOTES_MESSAGE, UNPINNED_NOTES_MESSAGE,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//                pinNotes, unpinnedNotes, notebook);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook, true, tags);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_ValidTag_NotesWithTag() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(songLyrics);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagManager.createTag(tagCs2113, false);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagManager.createTag(tagNus, false);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tags.add(\"NUS\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tags.add(\"CEG\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagManager.tagNote(songLyrics, tagCs2113);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        tagManager.tagNote(songLyrics, tagNus);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        unpinnedNotes.add(songLyrics);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(PINNED_NOTES_MESSAGE, UNPINNED_NOTES_MESSAGE,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//                pinNotes, unpinnedNotes, notebook);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook, tags);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    void execute_ArchivedNotes_ArchiveList() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        int index \u003d 2;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String title \u003d \"CS2113\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(defaultNote);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(songLyrics);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.addNote(cs2113);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.archiveNotes(index);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        notebook.archiveNotes(title);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList.add(testNote1);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        noteArrayList.add(cs2113);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String expected \u003d Formatter.formatNotes(ARCHIVE_NOTES_MESSAGE, noteArrayList);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        String actual \u003d getCommandExecutionString(notebook, true);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    private String getCommandExecutionString(Notebook notebook) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ListNoteCommand listNoteCommand \u003d new ListNoteCommand();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        listNoteCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        return listNoteCommand.execute();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    private String getCommandExecutionString(Notebook notebook, boolean isArchived) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ListNoteCommand listNoteCommand \u003d new ListNoteCommand(isArchived);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        listNoteCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        return listNoteCommand.execute();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    private String getCommandExecutionString(Notebook notebook, Boolean isAscendingOrder) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ListNoteCommand listNoteCommand \u003d new ListNoteCommand(isAscendingOrder);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        listNoteCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        return listNoteCommand.execute();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    private String getCommandExecutionString(Notebook notebook, Boolean isAscendingOrder, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ListNoteCommand listNoteCommand \u003d new ListNoteCommand(isAscendingOrder, tags);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        listNoteCommand.setData(notebook, null, tagManager, null);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        return listNoteCommand.execute();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    private String getCommandExecutionString(Notebook notebook, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        ListNoteCommand listNoteCommand \u003d new ListNoteCommand(tags);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        listNoteCommand.setData(notebook, null, tagManager, null);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//        return listNoteCommand.execute();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 369
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/ListTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ListTagCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/PinCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static seedu.notus.storage.StorageManager.FOLDER_DIR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static seedu.notus.storage.StorageManager.NOTES_DIR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_DOES_NOT_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "class PinCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Note notePinned;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Note noteNotPinned;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final ArrayList\u003cString\u003e NOTE_CONTENT \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE1_TITLE \u003d \"TestNote1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE2_TITLE \u003d \"TestNote2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String UNSUCCESFUL_MESSAGE \u003d Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        NOTE_CONTENT.add(\"This is a test note.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notePinned \u003d new Note(NOTE1_TITLE, NOTE_CONTENT, true, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        noteNotPinned \u003d new Note(NOTE2_TITLE, NOTE_CONTENT, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook.addNote(notePinned);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook.addNote(noteNotPinned);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputIndex_NoteExists_PinsAndUnpinsNotes() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        /*String note1Expected \u003d Formatter.formatString(NOTE1_TITLE + \" pinned: \" + \u0027N\u0027);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String note2Expected \u003d Formatter.formatString(NOTE2_TITLE + \" pinned: \" + \u0027Y\u0027);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note1Expected, getExecutionStringInputIndex(notebook, 0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note2Expected, getExecutionStringInputIndex(notebook, 1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertFalse(notePinned.getPinned());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertTrue(noteNotPinned.getPinned());*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputTitle_NoteExists_PinsAndUnpinsNotes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        /*String note1Expected \u003d Formatter.formatString(NOTE1_TITLE + \" pinned: \" + \u0027N\u0027);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String note2Expected \u003d Formatter.formatString(NOTE2_TITLE + \" pinned: \" + \u0027Y\u0027);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note1Expected, getExecutionStringInputTitle(notebook, NOTE1_TITLE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note2Expected, getExecutionStringInputTitle(notebook, NOTE2_TITLE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertFalse(notePinned.getPinned());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertTrue(noteNotPinned.getPinned());*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputIndex_NoteDoesNotExists_returnsUnsuccessful() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String expected \u003d Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(expected, getExecutionStringInputIndex(notebook, 5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(expected, getExecutionStringInputIndex(notebook, 3));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputTitle_NoteDoesNotExists_returnsUnsuccessful() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String expected \u003d Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(expected, getExecutionStringInputTitle(notebook, \"Title\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(expected, getExecutionStringInputTitle(notebook, \"Random\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String getExecutionStringInputIndex(Notebook notebook, int index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        PinCommand pinCommand \u003d new PinCommand(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        pinCommand.setData(notebook, null, null, storageManager);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return pinCommand.execute();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String getExecutionStringInputTitle(Notebook notebook, String title) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        PinCommand pinCommand \u003d new PinCommand(title);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        pinCommand.setData(notebook, null,null, storageManager);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return pinCommand.execute();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 7,
      "R-Ramana": 1,
      "prachi2023": 96,
      "Nazryl": 2
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/RemindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.DailyEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.timetable.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class RemindCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"No reminders today!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_1 \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_2 \u003d \"CS2113 Lecture\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_3 \u003d \"CS2113 Meeting\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_4 \u003d \"CS2113 Coding\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020,02,02,12,45);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private DailyEvent dailyEvent \u003d new DailyEvent(TEST_TITLE_4, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private RemindCommand command \u003d new RemindCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void execute_singleEvent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(dailyEvent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        command.setData(null, timetable, null, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        DailyEvent reminderEvent \u003d new DailyEvent(dailyEvent.getTitle(), TEST_DATE_TIME.plusDays(1),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String expected \u003d Formatter.formatReminders(COMMAND_SUCCESSFUL_MESSAGE, timetable.getReminders());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(expected, command.execute());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10,
      "brandonywl": 42
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/TagNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.TagManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.INDEX_OUT_OF_RANGE_MESSAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class TagNoteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRed;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagBlue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagRedRef;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagBlueRef;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note noTagNote;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note taggedNote;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cString\u003e content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        content.add(\"default\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRed \u003d new Tag(\"Red\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagBlue \u003d new Tag(\"Blue\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagRedRef \u003d new Tag(\"Red\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagBlueRef \u003d new Tag(\"Blue\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noTagNote \u003d new Note(\"Default\", content, false, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taggedNote \u003d new Note(\"TaggedNote\", content, false, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void tagCommand_invalidIndex_returnsUnsuccessfulMessage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(noTagNote);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(taggedNote);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, tagManager, storageManager, 3, tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(Formatter.formatString(INDEX_OUT_OF_RANGE_MESSAGE), result);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void tagCommand_tagNote_tagsNote() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /*tags.add(tagRed);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taggedNote.setTags(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(taggedNote);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(noTagNote);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(taggedNote);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        getCommandExecutionString(notebook, tagManager, storageManager, 0, tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noTagNote.getTags().size(), 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noTagNote.getTags().contains(tagRed));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().size(), 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().get(tagRed).size(), 2);*/"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void tagCommand_untagNote_untagsNote() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /*tags.add(tagRed);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taggedNote.setTags(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(taggedNote);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(noTagNote);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(taggedNote);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedRef);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlueRef);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        getCommandExecutionString(notebook, tagManager, storageManager, 1 , tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(taggedNote.getTags().size(), 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().get(tagRed).size(), 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().get(tagBlue).size(), 0);*/"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void tagCommand_tagAndUntagNote_tagsNoteAndUntagsNote() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /*tags.add(tagRed);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        taggedNote.setTags(tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagManager.rebindTags(taggedNote);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlue);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noTagNote.setTags(tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(noTagNote);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notebook.addNote(taggedNote);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagRedRef);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagBlueRef);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        getCommandExecutionString(notebook, tagManager, storageManager, 0, tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noTagNote.getTags().size(), 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().get(tagRed).size(), 2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(tagManager.getTagMap().get(tagBlue).size(), 1);*/"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String getCommandExecutionString(Notebook notebook, TagManager tagManager, StorageManager storageManager,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                                             int index, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        TagNoteCommand tagNoteCommand \u003d new TagNoteCommand(index, tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagNoteCommand.setData(notebook, null, tagManager, storageManager);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagNoteCommand.execute();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 140,
      "R-Ramana": 1,
      "prachi2023": 1
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/UnarchiveNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.notebook.NotebookStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.ui.FormatterStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.text.Normalizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "class UnarchiveNoteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    int maxRowLength \u003d 100;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    int index \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Notebook notebook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    ArrayList\u003cString\u003e content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    ArrayList\u003cTag\u003e tag \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    ArrayList\u003cTag\u003e tagSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Tag tagImpt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Tag tagCs2113;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Tag tagNus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Note testNote1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Note testNote2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Note testNote3;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    Note testNote4;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        content \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagImpt \u003d new Tag(\"Impt\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagCs2113 \u003d new Tag(\"CEG\", Tag.COLOR_YELLOW_STRING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagNus \u003d new Tag(\"NUS\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        content.add(\"default\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        content.add(\"hi how are you\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tag.add(tagImpt);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagSet.add(tagNus);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        tagSet.add(tagCs2113);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        testNote1 \u003d new Note(\"Default\", content, true, false, tag);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        testNote2 \u003d new Note(\"TestNote1\", content, false, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        testNote3 \u003d new Note(\"TestNote2\", content, false, false, tagSet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        testNote4 \u003d new Note(\"Random Text\", content, true, false, tagSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.addNote(testNote4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        /*notebook.archiveNotes(index - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.archiveNotes(\"random text\");*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_validIndex_returnsUnarchiveMessage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        /*int index \u003d 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String title \u003d NotebookStub.getUnarchiveNoteTitle(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(COMMAND_SUCCESSFUL_MESSAGE + title);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, index - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);*/"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_invalidIndex_returnsInvalidIndexMessage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        /*int index \u003d 50;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String title \u003d NotebookStub.getUnarchiveNoteTitle(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(INDEX_OUT_OF_RANGE_MESSAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, index - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);*/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_validTitle_returnsUnarchiveMessage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        /*String title \u003d \"random text\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(COMMAND_SUCCESSFUL_MESSAGE + title);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, title);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);*/"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_existingNoteTitle_returnsNoNoteMessage() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        /*String title \u003d \"random text\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        notebook.unarchiveNotes(title);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(COMMAND_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, title);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);*/"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void execute_invalidTitle_returnsNoNotes() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        /*String title \u003d \"rando\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String expected \u003d Formatter.formatString(COMMAND_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String result \u003d getCommandExecutionString(notebook, title);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expected, result);*/"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String getCommandExecutionString(Notebook notebook, String keyword) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        UnarchiveNoteCommand unarchiveCommand \u003d new UnarchiveNoteCommand(keyword);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        unarchiveCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return unarchiveCommand.execute();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String getCommandExecutionString(Notebook notebook, int index) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        UnarchiveNoteCommand unarchiveCommand \u003d new UnarchiveNoteCommand(index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        unarchiveCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return unarchiveCommand.execute();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 133
    }
  },
  {
    "path": "src/test/java/seedu/notus/command/ViewNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Notebook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.ui.Formatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.NOTE_DOES_NOT_EXIST_MESSAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.notus.util.CommandMessage.VIEW_NOTE_SUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "class ViewNoteCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Note noteWithoutTags;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Note noteWithTags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final ArrayList\u003cString\u003e NOTE1_CONTENT \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final ArrayList\u003cString\u003e NOTE2_CONTENT \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE1_TITLE \u003d \"TestNote1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String NOTE2_TITLE \u003d \"TestNote2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Tag tag1 \u003d new Tag(\"tag1\", \"PURPLE\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private Tag tag2 \u003d new Tag(\"tag2\", \"RED\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        NOTE1_CONTENT.add(\"This is a test note\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        NOTE2_CONTENT.add(\"This is a test note\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        NOTE2_CONTENT.add(\"With some lines\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        NOTE2_CONTENT.add(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        NOTE2_CONTENT.add(\"This is the end\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        tags.add(tag1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        tags.add(tag2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        noteWithoutTags \u003d new Note(NOTE1_TITLE, NOTE1_CONTENT, true, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        noteWithTags \u003d new Note(NOTE2_TITLE, NOTE2_CONTENT, false, false, tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook.addNote(noteWithoutTags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        notebook.addNote(noteWithTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputIndex_NoteExists_returnsContent() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String note1ExpectedOutput \u003d Formatter.formatNote(VIEW_NOTE_SUCCESSFUL_MESSAGE, noteWithoutTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String note2ExpectedOutput \u003d Formatter.formatNote(VIEW_NOTE_SUCCESSFUL_MESSAGE, noteWithTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note1ExpectedOutput, getExecutionStringInputIndex(notebook, 0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note2ExpectedOutput, getExecutionStringInputIndex(notebook, 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputTitle_NoteExists_returnsContent() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String note1ExpectedOutput \u003d Formatter.formatNote(VIEW_NOTE_SUCCESSFUL_MESSAGE, noteWithoutTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String note2ExpectedOutput \u003d Formatter.formatNote(VIEW_NOTE_SUCCESSFUL_MESSAGE, noteWithTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note1ExpectedOutput, getExecutionStringInputTitle(notebook, NOTE1_TITLE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(note2ExpectedOutput, getExecutionStringInputTitle(notebook, NOTE2_TITLE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputIndex_NoteDoesNotExists_returnsUnsuccessful() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String unsuccessfulMessage \u003d Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(unsuccessfulMessage, getExecutionStringInputIndex(notebook, 5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(unsuccessfulMessage, getExecutionStringInputIndex(notebook, 3));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void execute_inputTitle_NoteDoesNotExists_returnsUnsuccessful() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String unsuccessfulMessage \u003d Formatter.formatString(NOTE_DOES_NOT_EXIST_MESSAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(unsuccessfulMessage, getExecutionStringInputTitle(notebook, \"Title\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        assertEquals(unsuccessfulMessage, getExecutionStringInputTitle(notebook, \"Random\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String getExecutionStringInputIndex(Notebook notebook, int index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ViewNoteCommand viewNoteCommand \u003d new ViewNoteCommand(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        viewNoteCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return viewNoteCommand.execute();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String getExecutionStringInputTitle(Notebook notebook, String title) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        ViewNoteCommand viewNoteCommand \u003d new ViewNoteCommand(title);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        viewNoteCommand.setData(notebook, null, null, null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return viewNoteCommand.execute();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 11,
      "R-Ramana": 2,
      "prachi2023": 93
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/exception/SystemExceptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class SystemExceptionTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/notebook/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class NoteTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/notebook/NotebookStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class NotebookStub extends Notebook {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getArchiveNoteTitle(int index) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return \"Default\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (index \u003d\u003d 50) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getArchiveNoteTitle(String title) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (title \u003d\u003d \"rando\") {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return \"nil\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (title \u003d\u003d \"random text\") {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getUnarchiveNoteTitle(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return \"Default\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (index \u003d\u003d 50) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getUnarchiveNoteTitle(String title) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (title \u003d\u003d \"rando\") {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return \"nil\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (title \u003d\u003d \"random text\") {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "R-Ramana": 51
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/notebook/NotebookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class NotebookTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void addNote() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void deleteNote() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/tag/TagManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.notebook.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class TagManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagCS2113;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagImportant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagSchool;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagPersonal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag tagDefault;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note noteCS2113;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note noteJavaOop;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note noteMath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note notePersonal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note noteDefault;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager emptyTagManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager defaultTagManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagCS2113 \u003d new Tag(\"CS2113\", Tag.COLOR_BLUE_STRING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagImportant \u003d new Tag(\"Important\", Tag.COLOR_RED_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagSchool \u003d new Tag(\"School\", Tag.COLOR_YELLOW_STRING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagPersonal \u003d new Tag(\"Personal\", Tag.COLOR_WHITE_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagDefault \u003d new Tag(\"Default\", Tag.COLOR_WHITE_STRING);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e contentOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        contentOne.add(\"This is a fun mod!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e contentTwo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        contentTwo.add(\"Abstraction\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e contentThree \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        contentThree.add(\"1+1\u003d0\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e contentFour \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        contentFour.add(\"My name is ABC\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString\u003e contentFive \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        contentFive.add(\"Default\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagCS2113);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagImportant);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagSchool);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noteCS2113 \u003d new Note(\"CS2113\", contentOne, false, false, tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noteJavaOop \u003d new Note(\"Java OOP\", contentTwo, false, false, tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagSchool);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagImportant);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noteMath \u003d new Note(\"Math Note\", contentThree, false, false, tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags.add(tagPersonal);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notePersonal \u003d new Note(\"Personal Note\", contentFour, false, false, tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        noteDefault \u003d new Note(\"Default\", contentFive, false, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        emptyTagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.createTag(tagCS2113, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.createTag(tagImportant, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.createTag(tagSchool, true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.createTag(tagPersonal, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.createTag(tagDefault, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.rebindTags(noteCS2113);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.rebindTags(noteJavaOop);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.rebindTags(noteMath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.rebindTags(notePersonal);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void createTag_tagDoesNotExist_createsTagReturnTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.createTag(tagCS2113, true));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.createTag(tagImportant, true));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.createTag(tagSchool, true));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.createTag(tagPersonal, true));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().containsKey(tagCS2113));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().containsKey(tagImportant));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().containsKey(tagSchool));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().containsKey(tagPersonal));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void createTag_tagExist_returnFalse() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.createTag(tagCS2113, false));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.createTag(tagImportant, false));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.createTag(tagSchool, false));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.createTag(tagPersonal, false));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void getTag_tagDoesNotExist_returnNull() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNull(emptyTagManager.getTag(tagCS2113.getTagName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNull(emptyTagManager.getTag(tagImportant.getTagName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNull(emptyTagManager.getTag(tagSchool.getTagName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNull(emptyTagManager.getTag(tagPersonal.getTagName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void getTag_tagExist_returnTag() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTag(tagCS2113.getTagName()), tagCS2113);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTag(tagImportant.getTagName()), tagImportant);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTag(tagSchool.getTagName()), tagSchool);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTag(tagPersonal.getTagName()), tagPersonal);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void tagNote_tagExist_tagNote() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // noteDefault does not have tagDefault at this point"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteDefault.getTags().size(), 0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTagMap().get(tagDefault).size(), 0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Tags tagDefault to noteDefault"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.tagNote(noteDefault, tagDefault);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteDefault.getTags().size(), 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTagMap().get(tagDefault).size(), 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagDefault));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(noteDefault.getTags().contains(tagCS2113));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(noteDefault.getTags().contains(tagImportant));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Tags tagCS2113 to noteDefault"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.tagNote(noteDefault, tagCS2113);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteDefault.getTags().size(), 2);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTagMap().get(tagCS2113).size(), 3);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagDefault));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagCS2113));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(noteDefault.getTags().contains(tagImportant));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Tags tagImportant to noteDefault"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.tagNote(noteDefault, tagImportant);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteDefault.getTags().size(), 3);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(defaultTagManager.getTagMap().get(tagImportant).size(), 4);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagDefault));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagCS2113));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagImportant));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void tagNote_tagDoesNotExist_createsTagAndTagNote() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        emptyTagManager.createTag(tagDefault, true);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        emptyTagManager.tagNote(noteDefault, tagDefault);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().containsKey(tagDefault));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteDefault.getTags().size(), 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteDefault.getTags().contains(tagDefault));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(emptyTagManager.getTagMap().get(tagDefault).size(), 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(emptyTagManager.getTagMap().get(tagDefault).contains(noteDefault));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void removeTag_noteContainsTag_removeTag() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(noteCS2113.getTags().contains(tagCS2113));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultTagManager.getTagMap().get(tagCS2113).contains(noteCS2113));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        defaultTagManager.removeTag(noteCS2113, tagCS2113);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(noteCS2113.getTags().contains(tagCS2113));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.getTagMap().get(tagCS2113).contains(noteCS2113));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void deleteTag_tagDoesNotExist_returnFalse() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(emptyTagManager.deleteTag(tagCS2113));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(emptyTagManager.deleteTag(tagImportant));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(emptyTagManager.deleteTag(tagSchool));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(emptyTagManager.deleteTag(tagPersonal));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(emptyTagManager.deleteTag(tagDefault));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void deleteTag_ragExist_deletesTagReturnTrue() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNotEquals(noteCS2113.getTags().size(), 0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNotEquals(noteJavaOop.getTags().size(), 0);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNotEquals(noteMath.getTags().size(), 0);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertNotEquals(notePersonal.getTags().size(), 0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultTagManager.deleteTag(tagCS2113));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultTagManager.deleteTag(tagImportant));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultTagManager.deleteTag(tagSchool));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(defaultTagManager.deleteTag(tagPersonal));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.getTagMap().containsKey(tagCS2113));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.getTagMap().containsKey(tagImportant));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.getTagMap().containsKey(tagSchool));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertFalse(defaultTagManager.getTagMap().containsKey(tagPersonal));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteCS2113.getTags().size(), 0);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteJavaOop.getTags().size(), 0);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(noteMath.getTags().size(), 0);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertEquals(notePersonal.getTags().size(), 0);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    //public void listTags_emptyTags_returnDefaultMessage() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    //    assertEquals(emptyTagManager.listTags(), TagManager.STRING_TAG_EMPTY);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 216
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class TagTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/timetable/DailyEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Test Driver to test all functionality of DailyEvent Class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class DailyEventTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private DailyEvent event \u003d new DailyEvent(TEST_TITLE, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the time-step for DailyEvent is still correct (1 day)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void timeStep_singleDay_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate dateTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(dateTime.plusDays(1), event.timeStep(dateTime));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs when it should."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void toReoccur_twoTimeSteps_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testDate \u003d event.timeStep(startDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureDate \u003d event.timeStep(testDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testDate));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testFutureDate));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs 8 times in 1 week and 1 day."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getRecurrences_oneWeek_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.plusWeeks(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(8, (event.getRecurrences(startDate, endDate).size()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "brandonywl": 61
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/timetable/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Test Driver for all functionality of EventClass."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_RECURRING \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    Event event \u003d new Event(TEST_TITLE, TEST_DATE_TIME, TEST_REMINDER, TEST_RECURRING,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            reminderSchedule, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Test if you can get all the reminder dates that\u0027s needed from an event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getReminderDates() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cLocalDate\u003e reminderDates \u003d event.getReminderDates();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderDates.sort(LocalDate::compareTo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Collections.reverse(reminderDates);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cInteger\u003e timePeriods \u003d new ArrayList\u003c\u003e(TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timePeriods.sort(Integer::compareTo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Integer daysBefore : timePeriods) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate dateTime \u003d TEST_DATE_TIME.minusDays(daysBefore).toLocalDate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            assertReminderDate(dateTime, reminderDates.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Wrapper around assertEquals for code readbility."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param correctDate Expected date."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param generatedDate Actual date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void assertReminderDate(LocalDate correctDate, LocalDate generatedDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(correctDate, generatedDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 57
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/timetable/MonthlyEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Test Driver to test all functionality of MonthlyEvent Class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class MonthlyEventTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private MonthlyEvent event \u003d new MonthlyEvent(TEST_TITLE, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the time-step for MonthlyEvent is still correct (1 month)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void timeStep_singleMonth_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate dateTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(dateTime.plusMonths(1), event.timeStep(dateTime));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs when it should."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void toReoccur_twoTimeStepsOneDay_successSuccessFail() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testDate \u003d event.timeStep(startDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureDate \u003d event.timeStep(testDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureWrongDate \u003d testFutureDate.plusDays(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testDate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testFutureDate));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertFalse(event.toReoccur(testFutureWrongDate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs 5 times in 4 months."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getRecurrences_fourMonths_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.plusMonths(4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(5, (event.getRecurrences(startDate, endDate).size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "brandonywl": 64
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/timetable/TimetableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class TimetableTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_1 \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_2 \u003d \"CS2113 Lecture\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_3 \u003d \"CS2113 Meeting\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE_4 \u003d \"CS2113 Coding\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final DailyEvent dailyEvent \u003d new DailyEvent(TEST_TITLE_4, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final WeeklyEvent weeklyEvent \u003d new WeeklyEvent(TEST_TITLE_3, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final MonthlyEvent monthlyEvent \u003d new MonthlyEvent(TEST_TITLE_2, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final YearlyEvent yearlyEvent \u003d new YearlyEvent(TEST_TITLE_1, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Asserts storing of events in timetable in respective recurrence length is correct."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void addEvent_oneDailyThreeOthers_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d initializeTimetable();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(4, timetable.getEvents().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(1, timetable.getDailyEvents().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Assert that deleting an event would result in deleting the event from the total pool"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * as well as the sub-arraylist it should be in."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void deleteEvent_oneDailyThreeOthers_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d initializeTimetable();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.deleteEvent(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(3, timetable.getEvents().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(0, timetable.getDailyEvents().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Asserts that recurring events are displayed properly across the specified year."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getAllEvents_dailyEvent_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d initializeTimetable(dailyEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.withDayOfYear(1).toLocalDate();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.withDayOfYear(startDate.lengthOfYear());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(startDate.lengthOfYear() - TEST_DATE_TIME.getDayOfYear() + 1,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                timetable.getAllEvents(startDate, endDate).size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Assert that getReminders should work correctly."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Correct result should be 2, tomorrow\u0027s daily event and three day\u0027s from now daily event."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getReminders_dailyEvent_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d initializeTimetable(dailyEvent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(2, timetable.getReminders().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Method to initialize a timetable for testing purposes with 4 default events."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Instantiated Timetable with 4 default events."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Timetable initializeTimetable() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(dailyEvent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(weeklyEvent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(monthlyEvent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(yearlyEvent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Method to initialize a timetable for testing purposes with 1 event."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Instantiated Timetable with 1 event."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Timetable initializeTimetable(Event event) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(event);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 4,
      "brandonywl": 106
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/timetable/WeeklyEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Test Driver to test all functionality of WeeklyEvent Class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class WeeklyEventTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final WeeklyEvent event \u003d new WeeklyEvent(TEST_TITLE, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the time-step for WeeklyEvent is still correct (1 week)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void timeStep_oneWeek_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate dateTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(dateTime.plusWeeks(1), event.timeStep(dateTime));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs when it should."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void toReoccur_twoTimeStepsOneDay_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testDate \u003d event.timeStep(startDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureDate \u003d event.timeStep(testDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureWrongDate \u003d testFutureDate.plusDays(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testDate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testFutureDate));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertFalse(event.toReoccur(testFutureWrongDate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs 5 times in 4 weeks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getRecurrences_fourWeeks_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.plusWeeks(4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(5, (event.getRecurrences(startDate, endDate).size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "brandonywl": 64
    }
  },
  {
    "path": "src/test/java/seedu/notus/data/timetable/YearlyEventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Test Driver to test all functionality of YearlyEvent Class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class YearlyEventTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String TEST_TITLE \u003d \"CS2113 Tutorial\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final LocalDateTime TEST_DATE_TIME \u003d LocalDateTime.of(2020, 8, 27, 13,0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final boolean TEST_REMINDER \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cInteger\u003e TEST_TIME_PERIODS \u003d new ArrayList\u003c\u003e(List.of(1,3));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e reminderSchedule \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private final YearlyEvent event \u003d new YearlyEvent(TEST_TITLE, TEST_DATE_TIME,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            TEST_REMINDER, reminderSchedule, tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the time-step for YearlyEvent is still correct (1 year)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void timeStep_oneYear_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate dateTime \u003d LocalDate.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(dateTime.plusYears(1), event.timeStep(dateTime));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs when it should."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void toReoccur_twoTimeStepsOneDay_successSuccessFail() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testDate \u003d event.timeStep(startDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureDate \u003d event.timeStep(testDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate testFutureWrongDate \u003d testFutureDate.plusDays(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testDate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertTrue(event.toReoccur(testFutureDate));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertFalse(event.toReoccur(testFutureWrongDate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Tests if the event reoccurs 5 times in 4 years."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    void getRecurrences_fourYears_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        reminderSchedule.put(\"day\", TEST_TIME_PERIODS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d TEST_DATE_TIME.toLocalDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.plusYears(4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        assertEquals(5, (event.getRecurrences(startDate, endDate).size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "brandonywl": 65
    }
  },
  {
    "path": "src/test/java/seedu/notus/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "class StorageManagerTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void saveNotebook() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void saveAll() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void loadAll() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void saveNoteContent() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 4,
      "prachi2023": 20
    }
  },
  {
    "path": "src/test/java/seedu/notus/ui/AsciiArtTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.ui.AsciiArt.getGoodbyeArt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.ui.AsciiArt.getNotusLogo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.notus.ui.Formatter.LS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class AsciiArtTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    String expectedNotusLogo \u003d LS"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"     .-\u0027) _               .-\u0027) _                 .-\u0027)    \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"    ( OO ) )             (  OO) )               ( OO ).  \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \",--./ ,--,\u0027  .-\u0027),-----. /     \u0027._ ,--. ,--.   (_)---\\\\_) \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"|   \\\\ |  |\\\\ ( OO\u0027  .-.  \u0027|\u0027--...__)|  | |  |   /    _ |  \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"|    \\\\|  | )/   |  | |  |\u0027--.  .--\u0027|  | | .-\u0027) \\\\  :` `.  \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"|  .     |/ \\\\_) |  | |  |   |  |   |  | |( OO ) \u0027..`\u0027\u0027.) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"|  |\\\\    |    \\\\ |  | |  |   |  |   |  | | `-\u0027 /.-._)   \\\\ \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"|  | \\\\   |     `\u0027  \u0027-\u0027  \u0027   |  |  (\u0027  \u0027-\u0027(_.-\u0027 \\\\       / \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"`--\u0027  `--\u0027       `-----\u0027    `--\u0027    `-----\u0027     `-----\u0027  \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    final String expectedGoodbyeArt \u003d LS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \".-. .-\u0027)                 (\u0027-.                .,,cccd$$$$$$$$$$$ccc,\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"\\\\  ( OO )              _(  OO)           ,cc$$$$$$$$$$$$$$$$$$$$$$$$$cc,\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \";-----.\\\\  ,--.   ,--.(,------.         ,d$$$$$$$$$$$$$$$$\\\"J$$$$$$$$$$$$$$c,\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"| .-.  |   \\\\  `.\u0027  /  |  .---\u0027       d$$$$$$$$$$$$$$$$$$,$\\\" ,,`?$$$$$$$$$$$$L\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"| \u0027-\u0027 /  .-\u0027)     /   |  |         ,$$$$$$$$$$$$$$$$$$$$$\u0027,J$$$$$$$$$$$$$$$$$b\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"| .-. `.(OO  \\\\   /   (|  \u0027--.    ,$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$i `$h\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"| |  \\\\  ||   /  /\\\\_   |  .--\u0027    $$$$$$$$$$$$$$$$$$$$$$$$$P\u0027  \\\"$$$$$$$$$$$h $$\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"| \u0027--\u0027  /`-./  /.__)  |  `---.  ;$$$$$$$$$$$$$$$$$$$$$$$$F,$$$h,?$$$$$$$$$$h$F\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"`------\u0027   `--\u0027       `------\u0027 `$$$$$$$$$$$$$$$$$$$$$$$F:??$$$:)$$$$P\\\",. $$F\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                ?$$$$$$$$$$$$$$$$$$$$$$(   `$$ J$$F\\\"d$$F,$F\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                 ?$$$$$$$$$$$$$$$$$$$$$h,  :P\u0027J$$F  ,$F,$\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                  ?$$$$$$$$$$$$$$$$$$$$$$$ccd$$`$h, \\\",d$\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                   \\\"$$$$$$$$$$$$$$$$$$$$$$$$\\\",cdc $$$$\\\"\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                           ,uu,      `?$$$$$$$$$$$$$$$$$$$$$$$$$$$c$$$$h\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                     .,d$$$$$$$cc,   `$$$$$$$$$$$$$$$$??$$$$$$$$$$$$$$$,\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                   ,d$$$$$$$$$$$$$$$bcccc,,??$$$$$$ccf `\\\"??$$$$??$$$$$$$\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                  d$$$$$$$$$$$$$$$$$$$$$$$$$h`?$$$$$$h`:...  d$$$$$$$$P\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                 d$$$$$$$$$$$$$$$$$$$$$$$$$$$$`$$$$$$$hc,,cd$$$$$$$$P\\\"\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"             \u003d$$?$$$$$$$$P\u0027 ?$$$$$$$$$$$$$$$$$;$$$$$$$$$???????\\\",,\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                \u003d$$$$$$F       `\\\"?????$$$$$$$$$$$$$$$$$$$$$$$$$$$$$bc\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                d$$F\\\"?$$k ,ccc$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$i\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"        .     ,ccc$$c`\\\"\\\"u$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$P\\\",$$$$$$$$$$$$h\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"     ,d$$$L  J$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\\\" `\\\"\\\"$$$??$$$$$$$\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"   ,d$$$$$$c,\\\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F       `?J$$$$$$$\u0027\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"  ,$$$$$$$$$$h`$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F           ?$$$$$$$P\\\"\\\"\u003d,\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \" ,$$$F?$$$$$$$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F              3$$$$II\\\"?$h,\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \" $$$$$`$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$P\\\"               ;$$$??$$$,\\\"?\\\"\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \" $$$$F ?$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$P\\\",z\u0027                3$$h   ?$F\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"        `?$$$$$$$$$$$$$$$??$$$$$$$$$PF\\\"\u0027,d$P\\\"                  \\\"?$F\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"            \\\"\\\"\\\"\\\"\\\"\\\"\\\"         ,z$$$$$$$$$$$$$P\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                  J$$$$$$$$$$$$$$F\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                 ,$$$$$$$$$$$$$$F\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                 :$$$$$c?$$$$PF\u0027\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                 `$$$$$$$P\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + LS"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"                                  `?$$$$F\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void getNotusLogoTest() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String actual \u003d getNotusLogo();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expectedNotusLogo, actual);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    void getGoodbyeArtTest() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String actual \u003d getGoodbyeArt();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        assertEquals(expectedGoodbyeArt, actual);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 4,
      "R-Ramana": 117
    }
  },
  {
    "path": "src/test/java/seedu/notus/ui/FormatterStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.text.Normalizer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class FormatterStub extends Formatter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String formatString(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"Default\")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(\"The following note has been archived: \" + message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(\"The index you specified is out of range. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    + \"Please check and specify a valid index value.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"nil\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(\"This note does not exist in the notebook!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"random text\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(\"The following note has been archived: \" + message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"The notebook is empty!\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"Here are the list of notes:\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(message);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"Here are the list of pinned notes:\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"Here are the list of unpinned notes:\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                || message.equals(\"Here are the list of archived notes:\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(message);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.contains(\"Your tags return no result.\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(message);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.contains(\"There are no\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"test\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return Formatter.formatString(\"Here are the matching notes in your list:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String encloseRow(String message, boolean flag) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"Default\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return System.lineSeparator()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    + \"|| The following note has been unarchived: \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    + message"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    + \"                                                ||\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    + System.lineSeparator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (message.equals(\"random text\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    + \"|| The following note has been unarchived: \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    + message"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    + \"                                            ||\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    + System.lineSeparator();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 4,
      "R-Ramana": 74
    }
  },
  {
    "path": "src/test/java/seedu/notus/ui/FormatterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "public class FormatterTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String formatNotebook() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String formatNotebookTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String formatNote() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String formatTimetable() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String formatEvent() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String formatString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String formatStringTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static String generatesHeader() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static String generatesRowSplit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static String encloseTopAndBottom() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static String encloseRow() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1,
      "R-Ramana": 60
    }
  },
  {
    "path": "src/test/java/seedu/notus/ui/InterfaceManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class InterfaceManagerTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void getUserCommandInput() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void prints() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/DateTimeManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class DateTimeManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseAddEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class ParseAddEventCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 12
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseAddNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "class ParseAddNoteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "Nazryl": 13
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseArchiveOrUnarchiveNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "class ParseArchiveOrUnarchiveNoteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 13
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseCreateOrDeleteTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.CreateTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.DeleteTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ParseCreateOrDeleteTagCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_validMessage_returnNewCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/tag tag1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d parser.parse();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            assertTrue(command instanceof CreateTagCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d parser.parse();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            assertTrue(command instanceof DeleteTagCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/tag tag1 /tag tag2\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d parser.parse();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            assertTrue(command instanceof CreateTagCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d parser.parse();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            assertTrue(command instanceof DeleteTagCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_missingContent_throwException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(null, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_MESSAGE_AFTER_COMMAND.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(null, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_MESSAGE_AFTER_COMMAND.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_missingTagPrefix_throwException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG_PREFIX.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG_PREFIX.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \" \";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG_PREFIX.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG_PREFIX.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_missingTagDescription_throwException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/tag \";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/tag tag1/tag\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseCreateOrDeleteTagCommand(inputString, false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 139
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseDeleteEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class ParseDeleteEventCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 13
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseDeleteNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "class ParseDeleteNoteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "Nazryl": 13
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseEditEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class ParseEditEventCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 13
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseEditNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "//@@author Nazryl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "class ParseEditNoteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "Nazryl": 13
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseFindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "class ParseFindCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 13
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseListEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "//@@author brandonywl"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "class ParseListEventCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "brandonywl": 13
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseListNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "//@@author R-Ramana"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "class ParseListNoteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "R-Ramana": 13
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParsePinCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "class ParsePinCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "prachi2023": 13
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "//@@author Chongjx"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.TagEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.TagNoteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ParseTagCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ParseTagCommand parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_validMessage_returnNewCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/i 1 /tag tag1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d parser.parse();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            assertTrue(command instanceof TagNoteCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d parser.parse();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            assertTrue(command instanceof TagEventCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/tag tag1/i 1/tag tag2\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d parser.parse();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            assertTrue(command instanceof TagNoteCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d parser.parse();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            assertTrue(command instanceof TagEventCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            exception.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_missingContent_throwException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(null, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_MESSAGE_AFTER_COMMAND.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(null, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_MESSAGE_AFTER_COMMAND.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_missingTagPrefix_throwException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG_PREFIX.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG_PREFIX.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \" \";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG_PREFIX.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG_PREFIX.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_missingTagDescription_throwException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/tag \";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/tag tag1/tag\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_TAG.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_missingIndexPrefix_throwException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/tag tag1\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_INDEX_PREFIX.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_INDEX_PREFIX.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_missingIndex_throwException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/tag tag1 /i \";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_INDEX.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_INDEX.toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/i /tag tag1\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_INDEX.toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_MISSING_INDEX.toString();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_invalidIndex_throwException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/i 0\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_INVALID_INDEX_VALUE.toString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_INVALID_INDEX_VALUE.toString();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/i -5\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_INVALID_INDEX_VALUE.toString();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_INVALID_INDEX_VALUE.toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/i notNumber\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT.toString();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT.toString();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_invalidPrefix_throwException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/t title\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_INVALID_PREFIX.toString();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_INVALID_PREFIX.toString();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"/i 1 /tag tag1 /t title\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, true);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_INVALID_PREFIX.toString();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        parser \u003d new ParseTagCommand(inputString, false);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exception \u003d assertThrows(SystemException.class, () -\u003e parser.parse());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        expectedMessage \u003d ExceptionType.EXCEPTION_INVALID_PREFIX.toString();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 263
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParseViewNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "//@@author prachi2023"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.notus.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "class ParseViewNoteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private ParseCreateOrDeleteTagCommand parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private SystemException exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private String actualMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 2,
      "prachi2023": 14
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParserManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.AddNoteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.CreateTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.DeleteTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.IncorrectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.notus.command.TagNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ParserManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ParserManager parserManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    //@@author Nazryl"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    void parseCommand_validAddNoteString_returnAddNoteCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        inputString \u003d \"add-n /t note1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertTrue(command instanceof AddNoteCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        inputString \u003d \"add-n /tag cs2113/t note1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertTrue(command instanceof AddNoteCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    void parseCommand_invalidAddNoteString_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        inputString \u003d \"add-n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        inputString \u003d \"add-n \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        inputString \u003d \"add-n/t\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        inputString \u003d \"add-n /\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        inputString \u003d \"add-n /t\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        inputString \u003d \"add-n /tag tag 1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    //@@author Chongjx"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_validCreateTagString_returnCreateTagCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"create-t /tag tag1\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof CreateTagCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"create-t /tag tag1/tag tag2 red\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof CreateTagCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_invalidCreateTagString_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"create-t\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"create-t \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"create-t /tag\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"create-t /i\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_validDeleteTagString_returnDeleteTagCommand() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"delete-t /tag tag1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof DeleteTagCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"delete-t /tag tag1/tag tag2 red\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof DeleteTagCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_invalidDeleteTagString_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"delete-t\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"delete-t \";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"delete-t /tag\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"delete-t /i\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_validTagNoteString_returnTagNoteCommand() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"tag-n /tag tag1 /i 1\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof TagNoteCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"tag-n /i 1 /tag tag1 /tag tag2 red\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof TagNoteCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_invalidTagNoteString_returnIncorrect() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"tag-n /tag \";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"tag-n /i 1 \";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"tag-n /i 1 /tag \";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand_invalidString_returnIncorrectCommand() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Unrecognized commands"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"hello\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \"\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        inputString \u003d \" \";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command \u003d parserManager.parseCommand(inputString);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        assertTrue(command instanceof IncorrectCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 127,
      "Nazryl": 39
    }
  },
  {
    "path": "src/test/java/seedu/notus/util/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.notus.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 6,
      "Nazryl": 2
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 1
    }
  }
]
