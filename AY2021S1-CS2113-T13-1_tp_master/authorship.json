[
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | R Ramana | [Github](https://github.com/R-Ramana) | [Portfolio](docs/team/ramana.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jun Xiang | [Github](https://github.com/Chongjx) | [Portfolio](docs/team/junxiang.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Brandon Yeow | [Github](https://github.com/brandonywl) | [Portfolio](docs/team/brandon.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Prachi Goenka | [Github](https://github.com/prachi2023) | [Portfolio](docs/team/prachigoenka.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nazryl Lim | [Github](https://github.com/Nazryl/) | [Portfolio](docs/team/nazrylLim.md)"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 1,
      "Chongjx": 1,
      "brandonywl": 1,
      "prachi2023": 1,
      "Nazryl": 1,
      "-": 4
    }
  },
  {
    "path": "docs/team/brandon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "# Brandon - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/junxiang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "# Jun Xiang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 6
    }
  },
  {
    "path": "docs/team/nazrylLim.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "# Nazryl Lim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "## Education"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* National University of Singapore"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "## Work Experience"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* Work from home"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "## Accomplishments"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* CS2113 Student"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "* Work from home"
      }
    ],
    "authorContributionMap": {
      "Nazryl": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.TagManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.util.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Entry point of the NotUS application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private InterfaceManager interfaceManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Timetable timetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Initializes the required managers."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.interfaceManager \u003d new InterfaceManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Reads the user command and executes it until the user exits the program. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private void runCommandLoop() throws SystemException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            interfaceManager.prints(\"Enter command:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String userCommandText \u003d interfaceManager.getUserCommandInput();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            String result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            interfaceManager.prints(result);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        interfaceManager.prints(\"BYE\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Exits the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Runs the program until termination. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private void run() throws SystemException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        runCommandLoop();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String executeCommand(Command command) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        command.setData(notebook, timetable, tagManager);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String result \u003d command.execute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        //storageManager.saveAll(notebook, timetable);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Main entry-point for the application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static void main(String[] args) throws SystemException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /*String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());*/"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 66,
      "R-Ramana": 4,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.RecurringEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.util.DateTimeManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_STOP_RECURRING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * This class allows us to store relevant information regarding the events to add to the timetable and manipulate it"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * before executing it via the execute method."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Adds an event to the timetable. Parameters:\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TIMING + \" TIMING (Format: \" + DateTimeManager.DATEFORMAT + \") \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_RECURRING"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + String.format(\" Frequency (%s, %s, %s, %s)] \","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            RecurringEvent.DAILY_RECURRENCE_TYPE, RecurringEvent.WEEKLY_RECURRENCE_TYPE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            RecurringEvent.MONTHLY_RECURRENCE_TYPE, RecurringEvent.YEARLY_RECURRENCE_TYPE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_REMIND + \" [Days before (Default: 1)]\" + \"] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_STOP_RECURRING + \" TIMING (Format: \" + DateTimeManager.DATEFORMAT + \")]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor that takes in the event to be written to the timetable."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param event Event to be written to the timetable."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provides a description of how the command should be used."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return A string description of the command should be used."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        timetable.addEvent(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return \"Added the following!\" + InterfaceManager.LS + InterfaceManager.LS + event.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 56
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_PIN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Adds a Note into the Notebook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"New note added: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"This note already exists in the notebook! \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_WORD_EVENT \u003d \"add-e\"; TBR*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private static final String COMMAND_USAGE_NOTE \u003d COMMAND_WORD + \": Adds a note to notebook. Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG TAG_COLOR \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1 TAG_COLOR...] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_PIN + \" PIN]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private static final String COMMAND_USAGE_EVENT \u003d COMMAND_WORD_EVENT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            + \": Adds an event to timetable. Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DATETIME + \" DATE_TIME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_RECURRING + \" RECURRING] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            + \"[\" + PREFIX_REMIND + \" REMIND]\";TBR*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsageNote() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE_NOTE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsageEvent() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE_EVENT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }TBR*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs an AddNoteCommand to add a Note into the Notebook."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param note refers to the note to be added."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public AddNoteCommand(Note note) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Search for duplicates"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            ArrayList\u003cNote\u003e filteredTaskList \u003d (ArrayList\u003cNote\u003e) notebook.getNotes().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    .filter((s) -\u003e s.getTitle().equals(note.getTitle()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    .collect(toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (!filteredTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                throw new SystemException(SystemException.ExceptionType.valueOf(COMMAND_UNSUCCESSFUL_MESSAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Rebind the tags if there are duplicated tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagManager.rebindTags(note);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            notebook.addNote(note);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return COMMAND_SUCCESSFUL_MESSAGE + note.getTitle();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return exception.getMessage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 21,
      "R-Ramana": 12,
      "Nazryl": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.TagManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected Notebook notebook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected Timetable timetable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected TagManager tagManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected static final int NULL_INT \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Executes the command and returns the result. Method to be implemented by child class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public abstract String execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Sets the data that the command will operate on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notebook referenced Notebook data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param timetable referenced Timetable data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagManager referenced TagManager."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setData(Notebook notebook, Timetable timetable, TagManager tagManager) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.notebook \u003d notebook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagManager \u003d tagManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 37,
      "Nazryl": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CreateTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Tag.TagColor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Creates Tag for the notes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class CreateTagCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_RED_STRING \u003d TagColor.COLOR_RED.getColor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_GREEN_STRING \u003d TagColor.COLOR_GREEN.getColor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_BLUE_STRING \u003d TagColor.COLOR_BLUE.getColor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_YELLOW_STRING \u003d TagColor.COLOR_YELLOW.getColor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_PURPLE_STRING \u003d TagColor.COLOR_PURPLE.getColor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_CYAN_STRING \u003d TagColor.COLOR_CYAN.getColor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_WHITE_STRING \u003d TagColor.COLOR_WHITE.getColor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_RESET_STRING \u003d TagColor.COLOR_RESET.getColor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create-t\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Created a tag! \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"Tag already exists! \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Creates a tag. Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG NAME [TAG COLOR]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_RESET_STRING + InterfaceManager.LS + \"(Available colors: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_WHITE_STRING + Tag.COLOR_WHITE_STRING + \", \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_RED_STRING + Tag.COLOR_RED_STRING + \", \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_GREEN_STRING + Tag.COLOR_GREEN_STRING + \", \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_BLUE_STRING + Tag.COLOR_BLUE_STRING + \", \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_YELLOW_STRING + Tag.COLOR_YELLOW_STRING + \", \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_CYAN_STRING + Tag.COLOR_CYAN_STRING + \", \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_PURPLE_STRING + Tag.COLOR_PURPLE_STRING"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + COLOR_RESET_STRING + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a CreateTagCommand to create tag(s)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public CreateTagCommand(ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        boolean executeSuccessful;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String executeMessage \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Creates all the tags in the given list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            executeSuccessful \u003d tagManager.createTag(t, true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (executeSuccessful) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                executeMessage \u003d executeMessage.concat(COMMAND_SUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                executeMessage \u003d executeMessage.concat(COMMAND_UNSUCCESSFUL_MESSAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            executeMessage \u003d executeMessage.concat(tagManager.getTag(t.getTagName()) + InterfaceManager.LS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return executeMessage.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 55,
      "R-Ramana": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * This class allows us to store relevant information regarding the events to be deleted from the timetable and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * manipulate it before executing it via the execute method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Event deleted:\" + InterfaceManager.LS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Deletes an event. Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets how the command is expected to be used."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return String representation of how the command is to be used."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public DeleteEventCommand(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            event \u003d timetable.deleteEvent(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (SystemException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return COMMAND_SUCCESSFUL_MESSAGE + event.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Deletes a Note from the Notebook or an Event from the Timetable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Note deleted: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"This note does not exists in the notebook! \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String COMMAND_USAGE_NOTE \u003d COMMAND_WORD + \": Deletes a note. Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE or \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    private String title \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static String getCommandUsageNote() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return COMMAND_USAGE_NOTE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static String getCommandUsageEvent() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return COMMAND_USAGE_EVENT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    } TBR*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs a DeleteNoteCommand to delete a Note or an Event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the item to be deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public DeleteNoteCommand(int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs a DeleteNoteCommand to delete a Note or an Event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param title of the item to be deleted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public DeleteNoteCommand(String title) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        ArrayList\u003cNote\u003e deletedListTitle;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // If there is no title, delete note by index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (title.isBlank()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                String deletedTitle \u003d notebook.getNotes().get(index - 1).getTitle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                notebook.deleteNote(index - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return COMMAND_SUCCESSFUL_MESSAGE + deletedTitle;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                deletedListTitle \u003d (ArrayList\u003cNote\u003e) notebook.getNotes().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        .filter((s) -\u003e s.getTitle().toLowerCase().contains(title.toLowerCase()))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        .collect(toList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                notebook.deleteNote(deletedListTitle.get(0).getTitle());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return COMMAND_SUCCESSFUL_MESSAGE + deletedListTitle.get(0).getTitle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException | ClassCastException exception) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return COMMAND_UNSUCCESSFUL_MESSAGE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 18,
      "Nazryl": 58
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Deletes an existing Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class DeleteTagCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-t\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_SUCCESSFUL_MESSAGE \u003d \"Deleted the tag! \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_UNSUCCESSFUL_MESSAGE \u003d \"The tag does not exist! \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Deletes a tag. Parameters: TAG_NAME\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Constructs a DeleteNoteCommand to delete tag(s)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public DeleteTagCommand(ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        boolean executeSuccessful;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String executeMessage \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Deletes all the tags in the given list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag existingTag \u003d tagManager.getTag(t.getTagName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            executeSuccessful \u003d tagManager.deleteTag(t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (executeSuccessful) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                executeMessage \u003d executeMessage.concat(COMMAND_SUCCESSFUL_MESSAGE + existingTag);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                executeMessage \u003d executeMessage.concat(COMMAND_UNSUCCESSFUL_MESSAGE + t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            executeMessage \u003d executeMessage + InterfaceManager.LS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return executeMessage.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 45,
      "R-Ramana": 4,
      "Nazryl": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_LINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Edits a Note in the Notebook or an Event from the Timetable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD_NOTE \u003d \"edit-n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD_EVENT \u003d \"edit-e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE_NOTE \u003d COMMAND_WORD_NOTE + \": Edits a note in the notebook. Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            +  PREFIX_LINE + \" LINE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            +  PREFIX_CONTENT + \" CONTENT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG TAG_COLOR \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1 TAG_COLOR...]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE_EVENT \u003d COMMAND_WORD_EVENT + \": Edits an event in the timetable. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"Parameters: \" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DATETIME + \" DATE_TIME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_RECURRING + \" RECURRING] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_REMIND + \" REMIND]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private boolean isEditNote;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsageNote() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE_NOTE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsageEvent() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE_EVENT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs an EditCommand to edit a Note."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the Note to be edited."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param note to be edited."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public EditCommand(int index, Note note) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.event \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isEditNote \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs an EditCommand to edit an Event."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the Event to be edited."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param event to be edited."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public EditCommand(int index, Event event) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.note \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isEditNote \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 46,
      "R-Ramana": 21,
      "brandonywl": 11,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Exits the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Exits the program.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14,
      "R-Ramana": 5,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Finds Notes in the Notebook.(Possible to add find in event too)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Finds a note. Parameters: KEYWORDS\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a FindCommand to find Notes in the Notebook given the keyword."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param keywords to look for in the Notebook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public FindCommand(String keywords) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Filters and finds notes that has the title containing the user inputted keyword."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Stores the filtered notes in an ArrayList of Note"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return String containing the filtered list of notes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String notes \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e filteredNotes \u003d (ArrayList\u003cNote\u003e) notebook.getNotes().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .filter((s) -\u003e s.getTitle().contains(keywords))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredNotes.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            notes +\u003d (i + 1) + \".\" + filteredNotes.get(i).toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (filteredNotes.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return \"There are no matching notes. Please try another search query.\" + InterfaceManager.LS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return \"Here are the matching notes in your list:\" + InterfaceManager.LS + notes;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 33,
      "Chongjx": 21,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Tag.TagColor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Lists all the commands and usage."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_CYAN_STRING \u003d TagColor.COLOR_CYAN.getColor();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_WHITE_STRING \u003d TagColor.COLOR_WHITE.getColor();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_RESET_STRING \u003d TagColor.COLOR_RESET.getColor();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String HELP_STRING \u003d InterfaceManager.LS"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"The recognized commands and their usages are listed below. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"Parameters listed in brackets, [ ] represent optional inputs.\" + InterfaceManager.LS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return HELP_STRING + InterfaceManager.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                + AddNoteCommand.getCommandUsageNote() + InterfaceManager.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + AddEventCommand.getCommandUsage() + InterfaceManager.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + CreateTagCommand.getCommandUsage() + InterfaceManager.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                + DeleteNoteCommand.getCommandUsageNote() + InterfaceManager.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + DeleteEventCommand.getCommandUsage() + InterfaceManager.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + DeleteTagCommand.getCommandUsage() + InterfaceManager.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + EditCommand.getCommandUsageNote() + InterfaceManager.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + EditCommand.getCommandUsageEvent() + InterfaceManager.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + ExitCommand.getCommandUsage() + InterfaceManager.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + FindCommand.getCommandUsage() + InterfaceManager.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + ListEventCommand.getCommandUsage() + InterfaceManager.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + ListNoteCommand.getCommandUsage() + InterfaceManager.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + ListTagCommand.getCommandUsage() + InterfaceManager.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + PinCommand.getCommandUsage() + InterfaceManager.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + RemindCommand.getCommandUsage() + InterfaceManager.LS + COLOR_CYAN_STRING"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + TagCommand.getCommandUsage() + InterfaceManager.LS + COLOR_WHITE_STRING"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                + ViewNoteCommand.getCommandUsage() + InterfaceManager.LS + COLOR_RESET_STRING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 20,
      "Chongjx": 13,
      "brandonywl": 2,
      "Nazryl": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/IncorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Represents an incorrect command. Upon execution, produces a message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nazryl": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Lists all the Events in the Timetable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class ListEventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": List all the events in the Timetable.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    //private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": List all the events in the Timetable. Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    //        + \"[\" + PREFIX_DATETIME + \" DATE_TIME]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private boolean isListByDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets how the command is expected to be used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return String representation of how the command is to be used."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListEventCommand to list all the Events in the Timetable."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ListEventCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isListByDate \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListEventCommand to list all the Events in the Timetable."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param date of the Event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ListEventCommand(LocalDate date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isListByDate \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d timetable.getEvents();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        boolean first \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (!first) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                result +\u003d InterfaceManager.LS + InterfaceManager.LS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            first \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            result +\u003d String.format(\"%d.\", i++) + event.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 37,
      "R-Ramana": 6,
      "brandonywl": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Lists all the Notes in the Notebook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class ListNoteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Lists all the notes in the Notebook. Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TAG + \" TAG \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG1...] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[up/down]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private boolean isSorted;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private Boolean isAscendingOrder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListCommand to list all the Notes in the Notebook in a sorted order."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isAscendingOrder determines the order of the sorting of the Notes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand(Boolean isAscendingOrder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isSorted \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isAscendingOrder \u003d isAscendingOrder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListNoteCommand to list all the Notes in the Notebook in the default order."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ListNoteCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isSorted \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        this.isAscendingOrder \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListNoteCommand to list all the Notes in the Notebook that has the tag(s)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags tags of the Notes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ListNoteCommand to list all the Notes in the Notebook, that has the tag(s), in a sorted order."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isAscendingOrder order of the sort."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags tags of the Notes."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public ListNoteCommand(Boolean isAscendingOrder, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(isAscendingOrder);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Sorts the notes in alphabetical order and returns them if there is a up (A-Z) / down (Z-A) command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * If tags exist, maps the tags to the HashMap and gets the corresponding notes"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * For each tag, there will be an ArrayList of the respective notes."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * The method will then merge the notes in the ArrayLists into 1 large ArrayList."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * ArrayList is then sorted and returned for the respective up/down commands"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @returns noteString String containing the (filtered) notes (un)sorted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String noteString \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cNote\u003e sortedNotes \u003d (ArrayList\u003cNote\u003e) notebook.getNotes().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .filter((s) -\u003e s instanceof Note)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .sorted((a, b) -\u003e a.getTitle().toLowerCase().compareTo(b.getTitle().toLowerCase()))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (tags \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (isAscendingOrder \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                for (int i \u003d 0; i \u003c notebook.getNotes().size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    noteString +\u003d (i + 1) + \".\" + notebook.getNotes().get(i).toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteString \u003d getSortedString(noteString, sortedNotes);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            Map\u003cTag, ArrayList\u003cNote\u003e\u003e tag \u003d tagManager.getTagMap();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // Based on user inputted tags, will store the respective values in an ArrayList"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // E.g. if user input 2 tags, CS2113 and important, will have 2 ArrayList"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            //      1 for the values corresponding to CS2113 and the other for important tag"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            List\u003cArrayList\u003cNote\u003e\u003e values \u003d tags.stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .map(tag::get)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            for (int i \u003d 0; i \u003c values.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                for (int j \u003d 0; j \u003c values.get(i).size(); j++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    // Account for duplicates."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    // In case an item has both CS2113 and Important tag"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    if (!notes.contains(values.get(i).get(j))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        notes.add(values.get(i).get(j));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            // Sort the tagged notes"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            ArrayList\u003cNote\u003e sortedTaggedNotes \u003d (ArrayList\u003cNote\u003e) notes.stream()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .filter((s) -\u003e s instanceof Note)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .sorted((a, b) -\u003e a.getTitle().toLowerCase().compareTo(b.getTitle().toLowerCase()))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (isAscendingOrder \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    noteString +\u003d (i + 1) + \".\" + notes.get(i).toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteString \u003d getSortedString(noteString, sortedTaggedNotes);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return noteString;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Method compiles the ArrayList items and appends the items to a String."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * The ArrayList has already been sorted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Method returns either top to bottom or bottom to top to account for ascending/descending sorting"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @returns noteString String containing the notes sorted either ascending ot descending"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private String getSortedString(String noteString, ArrayList\u003cNote\u003e sortedNotes) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (!isAscendingOrder) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            int j \u003d 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            for (int i \u003d sortedNotes.size(); i \u003e 0; i--) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteString +\u003d (j) + \".\" + sortedNotes.get(i).toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else if (isAscendingOrder) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            for (int i \u003d 0; i \u003c sortedNotes.size(); i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                noteString +\u003d (i + 1) + \".\" + sortedNotes.get(i).toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return noteString;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 57,
      "R-Ramana": 110
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Lists all the Tags."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class ListTagCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-t\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Lists all the tags.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagManager.listTags();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 15,
      "R-Ramana": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PinCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Pins or unpins a Note in the Notebook."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class PinCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pin-n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Pins or unpins a note. Parameters: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX] \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private boolean isPinByIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a PinCommand to pin or unpin a Note in the Notebook by the index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the Note."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public PinCommand(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isPinByIndex \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a PinCommand to pin or unpin a Note in the Notebook by the title."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param title of the Note."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public PinCommand(String title) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d NULL_INT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isPinByIndex \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 11,
      "Chongjx": 37,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/RemindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Sets the reminder status of an Event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind-e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Set a reminder for an event. Parameters: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private boolean isToRemind;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a RemindCommand to set the reminder status of an Event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the Event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isToRemind the reminder status of the Event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public RemindCommand(int index, boolean isToRemind) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isToRemind \u003d isToRemind;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 9,
      "Chongjx": 25,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/TagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Tags or untags a Note."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String ADD_TAG_MESSAGE \u003d \"Added the tag to the note! \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String REMOVE_TAG_MESSAGE \u003d \"Removed the tag from the note! \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Tags or untags a note. Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + PREFIX_DELIMITER + PREFIX_TAG + \" TAG_NAME [TAG_COLOR]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a TagCommand to tag or untag a Note."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TagCommand(int index, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String executeMessage \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Note note \u003d notebook.getNotes().get(index - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (Tag t : tags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // Tries to get the tag from the database"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                Tag existingTag \u003d tagManager.getTag(t.getTagName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // Check if the note contains such tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (note.getTags().contains(existingTag)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tagManager.removeTag(note, existingTag);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    executeMessage \u003d executeMessage.concat(REMOVE_TAG_MESSAGE + existingTag + InterfaceManager.LS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    // Run the create tag in case existingTag is null, if it is not null, it updates the tag"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tagManager.createTag(t, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    existingTag \u003d tagManager.getTag(t.getTagName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tagManager.tagNote(note, existingTag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    executeMessage \u003d executeMessage.concat(ADD_TAG_MESSAGE + existingTag + InterfaceManager.LS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            executeMessage \u003d executeMessage + InterfaceManager.LS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            executeMessage \u003d \"Invalid index input!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return executeMessage.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 63,
      "R-Ramana": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ViewNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Views a specific Note in the Notebook."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class ViewNoteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view-n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Views a note. Parameters: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_INDEX + \" INDEX] \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            + \"[\" + PREFIX_DELIMITER + PREFIX_TITLE + \" TITLE]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private boolean isViewByIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static String getCommandUsage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return COMMAND_USAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ViewNoteCommand to view a Note by the index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param index of the Note."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ViewNoteCommand(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isViewByIndex \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a ViewNoteCommand to view a Note by the title."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param title of the Note."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ViewNoteCommand(String title) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.index \u003d NULL_INT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isViewByIndex \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-Ramana": 11,
      "Chongjx": 37,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/exception/SystemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Signals the different type of possible exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class SystemException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Types of exception. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public enum ExceptionType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_WRONG_PREFIX(\"Type of prefix not recognized!\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_DESCRIPTION(\"Missing description!\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TITLE_PREFIX(\"Missing title prefix!\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TITLE(\"Missing title!\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        EXCEPTION_DUPLICATE_NOTE(\"This note already exists in the notebook!\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_NOTE(\"This note does not exists in the notebook!\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_TIMING(\"This event does not have a timing specified!\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_RECURRING_END_TIME(\"Please specify until when do you want \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"this event to repeat.\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_WRONG_TIMING(\"Your input has a wrong format for the date time input. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"Please follow the yyyy-MM-dd HH:mm format with the \\\"-\\\" and \\\":\\\" in 24-Hour Clock format\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_MISSING_RECURRING_TYPE(\"Please indicate whether you would like to have the event \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"repeat daily, weekly, monthly or yearly\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_WRONG_RECURRING_TYPE(\"There are only the following recurring types: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"daily, weekly, monthly or yearly\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INDEX_OUT_OF_RANGE(\"The index you specified is out of range. Please specify \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + \"the index that is indicated when you print the event list\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TAG_PREFIX(\"Missing tag prefix!\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_TAG(\"Missing tag name!\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_INDEX_PREFIX(\"Missing index prefix!\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_INDEX(\"Missing index!\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_PIN(\"Missing pin!\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_MISSING_KEYWORD(\"No search query input. Please enter a keyword for search results.\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_INDEX_FORMAT(\"Invalid index format!\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        EXCEPTION_INVALID_INDEX_VALUE(\"Invalid index value!\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        EXCEPTION_FILE_CREATION_ERROR(\"Unable to create a file!\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        EXCEPTION_INVALID_END_INPUT(\"Input /end on a new line!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /** The exception message. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        private final String exceptionMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * Constructor of an ExceptionType."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * @param exceptionMessage The exception message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ExceptionType(String exceptionMessage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.exceptionMessage \u003d exceptionMessage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * Overrides the parent toString method."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         * @return The exception message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return exceptionMessage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public SystemException(ExceptionType exceptionType) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        super(exceptionType.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 43,
      "brandonywl": 14,
      "Nazryl": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/notebook/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a Note. Contains all the information of a note."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Boolean isPinned;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a Note object with its title, content and pinned status provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param title of the note."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param content of the note."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isPinned status of the note."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Note(String title, String content, Boolean isPinned) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isPinned \u003d isPinned;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Constructs a Note object with its title, content, pinned status and tags provided."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param title of the note."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param content of the note."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isPinned status of the note."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tags of the note."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Note(String title, String content, Boolean isPinned, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(title, content, isPinned);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Gets the title of note from existing data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return title of the note."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setContent(String content) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String getPinned() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return (isPinned ? \"Y\" : \"N\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setPinned(Boolean pinned) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        isPinned \u003d pinned;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return this.tags;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTags(ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 57,
      "Nazryl": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/notebook/Notebook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a Notebook object. Contains all the notes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Notebook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a new list of notes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Notebook() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a list of notes from existing data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notes of existing data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Notebook(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Gets a list of notes from existing data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return notes of existing data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return this.notes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public Note getNote(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return notes.get(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Adds a note into the notebook."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Removes a note from the timetable."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void deleteNote(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        notes.remove(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Removes a note from the timetable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void deleteNote(String title) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        notes.removeIf(note -\u003e note.getTitle().equals(title));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void setNotes(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        return notes.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 38,
      "prachi2023": 8,
      "Nazryl": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/notebook/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a tag with respective color bind to it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_RED_STRING \u003d \"RED\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_GREEN_STRING \u003d \"GREEN\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_BLUE_STRING \u003d \"BLUE\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_YELLOW_STRING \u003d \"YELLOW\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_PURPLE_STRING \u003d \"PURPLE\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_CYAN_STRING \u003d \"CYAN\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String COLOR_WHITE_STRING \u003d \"WHITE\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Types of color."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public enum TagColor {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_WHITE(\"\\u001B[30m\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_RED(\"\\u001B[31m\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_GREEN(\"\\u001B[32m\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_YELLOW(\"\\u001B[33m\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_BLUE(\"\\u001B[34m\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_PURPLE(\"\\u001B[35m\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        COLOR_CYAN(\"\\u001B[36m\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        COLOR_RESET(\"\\u001B[0m\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        private String color;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        TagColor(String color) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.color \u003d color;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        public String getColor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return color;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private TagColor tagColor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTagName(tagName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTagColor(TagColor.COLOR_RESET);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Overloaded constructor to take in the color of the tag."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName name of the tag."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagColor color of the tag."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Tag(String tagName, String tagColor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTagName(tagName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        setTagColor(tagColor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Getter function for the name of the tag. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Setter function for the name of the tag. */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTagName(String tagName) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Getter function for the color of the tag. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TagColor getTagColor() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagColor;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Setter function for the color of the tag. */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTagColor(TagColor tagColor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.tagColor \u003d tagColor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Setter function for the color of the tag. */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTagColor(String tagColor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        switch (tagColor.toUpperCase()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_RED_STRING:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_RED;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_GREEN_STRING:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_GREEN;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_BLUE_STRING:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_BLUE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_YELLOW_STRING:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_YELLOW;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_PURPLE_STRING:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_PURPLE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_CYAN_STRING:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_CYAN;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        case COLOR_WHITE_STRING:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_WHITE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            this.tagColor \u003d TagColor.COLOR_RESET;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Overrides the parent class toString function to return the tag with its tag color."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return tagName with its respective tag color."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return tagColor.color + \"[\" + tagName + \"]\" + TagColor.COLOR_RESET.color;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 110,
      "R-Ramana": 4,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/notebook/TagManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a TagManager. Manages the tags for the notes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class TagManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String STRING_TAG_EMPTY \u003d \"There are no tags!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String STRING_TAG_LIST \u003d \"Here are the available tags:\" + InterfaceManager.LS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Map\u003cTag, ArrayList\u003cNote\u003e\u003e tagMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public TagManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Map\u003cTag, ArrayList\u003cNote\u003e\u003e getTagMap() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns if a tag with the tag name exists."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName name of the Tag to check."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return true if Tag exists, false otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private boolean containsTag(String tagName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tagMap.keySet()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (t.getTagName().equalsIgnoreCase(tagName)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns the Tag that matches the tag name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName name of the Tag to check."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return the Tag if it exists, null otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Tag getTag(String tagName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tagMap.keySet()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (t.getTagName().equalsIgnoreCase(tagName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a Tag with the provided name."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName name of the Tag."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void createTag(String tagName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        boolean isTagExist \u003d containsTag(tagName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (!isTagExist) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagMap.put(new Tag(tagName), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a Tag with the provided name and color."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName name of the Tag."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagColor color of the Tag."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return true if new Tag is created, false otherwise."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public boolean createTag(String tagName, String tagColor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (!containsTag(tagName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagMap.put(new Tag(tagName, tagColor), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            getTag(tagName).setTagColor(tagColor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a Tag with the provided Tag."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag provided Tag."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param overridesColor determine if the tag color needs to be override."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return true if new Tag is created, false otherwise."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public boolean createTag(Tag tag, boolean overridesColor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Check if there exist a tag with the same tag name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Tag existingTag \u003d getTag(tag.getTagName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // If the tag does not exist, creates it."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (existingTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagMap.put(tag, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (overridesColor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                existingTag.setTagColor(tag.getTagColor());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /*public void tagNote(Note note, String tagName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        boolean isTagExist \u003d containsTag(tagName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if(!isTagExist) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            createTag(tagName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for(Tag t : tagMap.keySet()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if(t.getTagName().equalsIgnoreCase(tagName)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                //note.getTags().add(t);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tagMap.get(t).add(note);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Tags a Note with the provided name. Creates a new Tag if the Tag does not exist."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param note Note to be tagged."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName name of the Tag."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagColor color of the Tag."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void tagNote(Note note, String tagName, String tagColor) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        boolean isTagExist \u003d containsTag(tagName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (!isTagExist) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            createTag(tagName, tagColor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Tag tag \u003d getTag(tagName);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagNote(note, tag);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Tags a Note with the provided Tag."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param note Note to be tagged."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag Provided Tag."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void tagNote(Note note, Tag tag) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap.get(tag).add(note);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        note.getTags().add(tag);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Removes a Tag from the Note."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param note Note to be untagged."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName name of the Tag."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void removeTag(Note note, String tagName) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Tag tag \u003d getTag(tagName);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tag !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            removeTag(note, tag);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Removes a Tag from the Note."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param note Note to be untagged."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag to be removed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void removeTag(Note note, Tag tag) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap.remove(tag, note);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        note.getTags().remove(tag);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Deletes a Tag from the Map. Notes that have the Tag will be untagged."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagName name of the Tag to be deleted."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return true if there exist the tag and is deleted, false otherwise."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public boolean deleteTag(String tagName) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Tag tag \u003d getTag(tagName);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Note n : tagMap.get(tag)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            n.getTags().remove(tag);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap.remove(tag);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Deletes a Tag from the Map. Notes that have the Tag will be untagged."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tag to be deleted."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return true if there exist the tag and is deleted, false otherwise."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public boolean deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        Tag existingTag \u003d getTag(tag.getTagName());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (existingTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Note n : tagMap.get(existingTag)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            n.getTags().remove(existingTag);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        tagMap.remove(existingTag);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Lists all the Tags in the map."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return all the Tags as string."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String listTags() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagList;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tagMap.isEmpty()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return STRING_TAG_EMPTY;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else  {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagList \u003d STRING_TAG_LIST;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (Tag t : tagMap.keySet()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagList \u003d tagList.concat(t.toString() + InterfaceManager.LS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return tagList.trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Rebinds all the tags in the note to the existing tags in the database."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param note the note to have the tags rebind."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void rebindTags(Note note) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int numTagsToCheck \u003d note.getTags().size();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // loop through all the tags in notes"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (int i \u003d 0; i \u003c numTagsToCheck; ++i) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // always check against the tag of the first note"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag tag \u003d note.getTags().get(0);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // check if the tag exists in the database"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            Tag existingTag \u003d getTag(tag.getTagName());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            note.getTags().remove(tag);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (existingTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // if the tag does not exist in the database, create the tag and tag to note"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                createTag(tag, false);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tagNote(note, tag);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else if (!note.getTags().contains(existingTag)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                tagNote(note, existingTag);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 266
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/DailyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every day."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class DailyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of DailyEvent with a specified recurrence type and specified endRecurrence date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endRecurrence When the Event should stop re-occurring."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public DailyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.DAILY_RECURRENCE_TYPE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Constructor of DailyEvent with a specified recurrence type and default end time of recurrence (Year 3000)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of Event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of Event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the Event requires reminders."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public DailyEvent(String title, LocalDateTime dateTime, boolean isToRemind) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, RecurringEvent.DAILY_RECURRENCE_TYPE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent stepOneTimePeriod() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate date \u003d getDate().plusDays(TIME_STEP);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new DailyEvent(getTitle(), LocalDateTime.of(date, getTime()), getToRemind());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusDays(TIME_STEP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents an Event. Contains all the information of an Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    // Can be combined into LocalDateTime"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Boolean isToRemind;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Boolean isRecurring;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates an Event object with its title, date and time provided."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of the event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date of the event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param time Time of the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Event(String title, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isToRemind \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isRecurring \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates an Event object with its title, date, time, isToRemind and isRecurring provided."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of the event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date of the event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param time Time of the event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the event requires a reminder."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isRecurring Whether the event will re-occur."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDate date, LocalTime time, boolean isToRemind, boolean isRecurring) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(title, date, time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isToRemind \u003d isToRemind;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.isRecurring \u003d isRecurring;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Creates an Event object with its title, dateTime, isToRemind and isRecurring provided. Used as a default"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * constructor for user input events."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param title Title of the event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param dateTime DateTime of the event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isToRemind Whether the event requires a reminder."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param isRecurring Whether the event will re-occur."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event(String title, LocalDateTime dateTime, boolean isToRemind, boolean isRecurring) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, dateTime.toLocalDate(), dateTime.toLocalTime(), isToRemind, isRecurring);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean getToRemind() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return isToRemind;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void setToRemind(boolean toRemind) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        isToRemind \u003d toRemind;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean getRecurring() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return isRecurring;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public void setRecurring(boolean recurring) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        isRecurring \u003d recurring;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String titleString \u003d \"Event: \" + title;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String dateString \u003d \"Date: \" + date.toString() + \"\\tTime: \" + time.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String remindString \u003d \"Reminder: \" + isToRemind;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String repeatingString \u003d \"Repeating: \" + isRecurring;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String lineSeparator \u003d InterfaceManager.LS;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return titleString + lineSeparator + dateString + lineSeparator + remindString"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                + lineSeparator + repeatingString;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 69,
      "brandonywl": 39,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/MonthlyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every month."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class MonthlyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public MonthlyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.MONTHLY_RECURRENCE_TYPE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public MonthlyEvent(String title, LocalDateTime dateTime, boolean isToRemind) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, RecurringEvent.MONTHLY_RECURRENCE_TYPE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent stepOneTimePeriod() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate date \u003d timeStep(getDate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new MonthlyEvent(getTitle(), LocalDateTime.of(date, getTime()), getToRemind());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusMonths(TIME_STEP);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/RecurringEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public abstract class RecurringEvent extends Event {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private LocalDate endRecurrenceDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String recurrenceType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final LocalDate DEFAULT_END_RECURRENCE \u003d LocalDate.of(3000, 12, 31);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String DAILY_RECURRENCE_TYPE \u003d \"daily\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String WEEKLY_RECURRENCE_TYPE \u003d \"weekly\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String MONTHLY_RECURRENCE_TYPE \u003d \"monthly\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String YEARLY_RECURRENCE_TYPE \u003d \"yearly\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrenceDate,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                          String recurrenceType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (endRecurrenceDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceDate \u003d DEFAULT_END_RECURRENCE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.endRecurrenceDate \u003d endRecurrenceDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this.recurrenceType \u003d recurrenceType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent(String title, LocalDateTime dateTime, boolean isToRemind, String recurrenceType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        this(title, dateTime, isToRemind, DEFAULT_END_RECURRENCE, recurrenceType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Checks if the event should still re-occur at a specified date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to check."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Whether to re-occur or not."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public boolean checkAfterEndRecurrence(LocalDate date) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return (endRecurrenceDate.compareTo(date) \u003c 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Checks whether the current RecurringEvent object will re-occur between the start and end date (inclusive)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * and return an ArrayList that contains an event for all the times that it re-occurs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start date of the time period to check (inclusive)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End date of the time period to check (inclusive)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return ArrayList of this event at different dates at a specified interval within the time period."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getRecurrences(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalTime timing \u003d getTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        while (startDate.compareTo(endDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (checkAfterEndRecurrence(startDate)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return eventSet;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.of(startDate, timing);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            Event e \u003d new Event(getTitle(), dateTime, getToRemind(), false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            eventSet.add(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            startDate \u003d timeStep(startDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventSet;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String endRecurrenceString \u003d \"Until: \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!endRecurrenceDate.equals(DEFAULT_END_RECURRENCE)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceString +\u003d endRecurrenceDate.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            endRecurrenceString +\u003d \"Forever\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return super.toString() + String.format(\" (%s)\", recurrenceType) + InterfaceManager.LS + endRecurrenceString;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provide a time step of the current event by one time unit and return it as a immutable object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return RecurringEvent with one time step forward."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public abstract RecurringEvent stepOneTimePeriod();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Provides a time step of a specified date by one time unit and return it as a LocalDate object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param date Date to step forward"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Future date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public abstract LocalDate timeStep(LocalDate date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 93
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a TimeTable object. Contains all the events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e thisYearTimetable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cEvent\u003e nonRecurringEvents;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cDailyEvent\u003e dailyEvents;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cWeeklyEvent\u003e weeklyEvents;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cMonthlyEvent\u003e monthlyEvents;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private ArrayList\u003cYearlyEvent\u003e yearlyEvents;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a new list of events."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Timetable() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        nonRecurringEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        dailyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        weeklyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        monthlyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        yearlyEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates a list of events from existing data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param events from existing data."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Timetable(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void setEvents(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Adds an event into the timetable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param event to be added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (!event.getRecurring()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            nonRecurringEvents.add(event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (event instanceof DailyEvent) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                dailyEvents.add((DailyEvent) event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else if (event instanceof WeeklyEvent) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                weeklyEvents.add((WeeklyEvent) event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else if (event instanceof MonthlyEvent) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                monthlyEvents.add((MonthlyEvent) event);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else if (event instanceof YearlyEvent) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                yearlyEvents.add((YearlyEvent) event);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Removes an event from the timetable."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param index Index to be removed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException Occurs when index provides is less than 0 or \u003e\u003d size of the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public Event deleteEvent(int index) throws SystemException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (index \u003e\u003d events.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(SystemException.ExceptionType.EXCEPTION_INDEX_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event \u003d events.get(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        events.remove(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (event instanceof DailyEvent) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            dailyEvents.remove((DailyEvent) event);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (event instanceof WeeklyEvent) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            weeklyEvents.remove((WeeklyEvent) event);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (event instanceof MonthlyEvent) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            monthlyEvents.remove((MonthlyEvent) event);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else if (event instanceof YearlyEvent) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            yearlyEvents.remove((YearlyEvent) event);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            nonRecurringEvents.remove(event);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return today.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public int getDay(LocalDate date) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Gets the timetable for a specified month and year. Includes multiple recurrent events."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param year Year to check for timetable"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param month Month to check for timetable"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return A HashMap that maps the date to an ArrayList of all events that occurs on the day."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e getMonthTimetable(int year, int month) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        HashMap\u003cInteger, ArrayList\u003cEvent\u003e\u003e monthTimetable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(year, month, 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate endDate \u003d startDate.withDayOfMonth(startDate.lengthOfMonth());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        eventSet.addAll(getAllRecurringEvents(startDate, endDate, dailyEvents));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        eventSet.addAll(getAllRecurringEvents(startDate, endDate, weeklyEvents));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        eventSet.addAll(getAllRecurringEvents(startDate, endDate, monthlyEvents));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        eventSet.addAll(getAllRecurringEvents(startDate, endDate, yearlyEvents));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        eventSet.addAll(nonRecurringEvents);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        int numDays \u003d startDate.lengthOfMonth();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d numDays; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            monthTimetable.put(i, new ArrayList\u003cEvent\u003e());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (Event event : eventSet) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            int date \u003d event.getDate().getDayOfMonth();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cEvent\u003e eventList \u003d monthTimetable.get(date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            eventList.add(event);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            monthTimetable.put(date, eventList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return monthTimetable;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Given an ArrayList of events, get all events that will occur during the specified time period."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param startDate Start date of the period to check for recurrence. Inclusive of the date."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param endDate End date of the period to check for recurrence. Inclusive of the date."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param events List of events that are recurrent."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return An ArrayList of Events of all events that will occur between the two specified time periods."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getAllRecurringEvents(LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                                                  ArrayList\u003c? extends RecurringEvent\u003e events) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        for (RecurringEvent event : events) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            eventList.addAll(event.getRecurrences(startDate, endDate));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 48,
      "brandonywl": 108,
      "Nazryl": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/WeeklyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every week."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class WeeklyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public WeeklyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.WEEKLY_RECURRENCE_TYPE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public WeeklyEvent(String title, LocalDateTime dateTime, boolean isToRemind) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, RecurringEvent.WEEKLY_RECURRENCE_TYPE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent stepOneTimePeriod() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate date \u003d timeStep(getDate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new WeeklyEvent(getTitle(), LocalDateTime.of(date, getTime()), getToRemind());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusWeeks(TIME_STEP);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/timetable/YearlyEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " * Subclass of RecurringEvent that re-occurs every year."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "public class YearlyEvent extends RecurringEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private static final int TIME_STEP \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public YearlyEvent(String title, LocalDateTime dateTime, boolean isToRemind, LocalDate endRecurrence) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, endRecurrence, RecurringEvent.YEARLY_RECURRENCE_TYPE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public YearlyEvent(String title, LocalDateTime dateTime, boolean isToRemind) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        super(title, dateTime, isToRemind, DEFAULT_END_RECURRENCE, RecurringEvent.YEARLY_RECURRENCE_TYPE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public RecurringEvent stepOneTimePeriod() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDate date \u003d timeStep(getDate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new YearlyEvent(getTitle(), LocalDateTime.of(date, getTime()), getToRemind());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public LocalDate timeStep(LocalDate date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return date.plusYears(TIME_STEP);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandonywl": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a StorageManager. Manages the saving and loading of task list data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Default folders directory. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String FOLDER_DIR \u003d \"data\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String NOTES_DIR \u003d \"/notes\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** Default file path. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String NOTEBOOK_FILE_PATH \u003d \"notebook.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final String TIMETABLE_FILE_PATH \u003d \"timetable.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static final String DELIMITER \u003d \"|\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Saves all the Notes in the Notebook to the storage file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notebook The Notebook containing all the notes to be saved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static void saveNotebook(Notebook notebook) throws SystemException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        createDirectory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (int i \u003d 0; i \u003c notebook.getSize();i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                saveNoteContent(notebook.getNote(i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                saveNoteDetails(notebook.getNote(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                throw new SystemException(SystemException.ExceptionType.EXCEPTION_FILE_CREATION_ERROR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Saves all the Events in the Timetable to the storage file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param timetable The Timetable containing all the events to be saved."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void saveTimetable(Timetable timetable){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Saves all the Notes in the Notebook and the Events in the Timetable to the storage file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notebook The Notebook containing all the notes to be saved."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param timetable The Timetable containing all the events to be saved."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public void saveAll(Notebook notebook, Timetable timetable)throws SystemException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        saveNotebook(notebook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        saveTimetable(timetable);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Loads the Notebook and Timetable from the storage file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notebook The Notebook to be loaded into."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param timeTable The Timetable to be loaded into."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void loadAll(Notebook notebook, Timetable timeTable){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Saves an individual note to the storage file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param note The note to be saved"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    public static void saveNoteContent(Note note) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path \u003d FOLDER_DIR + NOTES_DIR + \"/\" + note.getTitle() + \".txt\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        createFile(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        FileWriter fwAppend \u003d new FileWriter(path, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.write(note.getContent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Saves the details of notes such as title, tags and pinned status to the notebook text file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param note Note of which details are to be saved to the file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static void saveNoteDetails(Note note) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String path \u003d FOLDER_DIR + \"/\" + NOTEBOOK_FILE_PATH;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        createFile(path);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        FileWriter fwAppend \u003d new FileWriter(path, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String noteDetails \u003d note.getTitle()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                            + DELIMITER"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                            + note.getPinned()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                            + DELIMITER"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                            + note.getTags()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                            + System.lineSeparator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.write(noteDetails);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        fwAppend.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Creates a directory path data/notes. In case both data and /notes do not exist."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static void createDirectory() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String dataPath \u003d FOLDER_DIR;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String notePath \u003d FOLDER_DIR + NOTES_DIR;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File dataDirectory \u003d new File(dataPath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File noteDirectory \u003d new File(notePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!dataDirectory.exists()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            dataDirectory.mkdir();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!noteDirectory.exists()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            noteDirectory.mkdir();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * Checks if a file exists. If it does not, creates file with the input path"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @param path path of file to be created"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     * @throws IOException thrown when directory does not exist. Unable to create file"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    private static void createFile(String path) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 52,
      "prachi2023": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/InterfaceManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.timetable.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a InterfaceManager. Manages the input and output of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class InterfaceManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public InterfaceManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public InterfaceManager(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns the command based on user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return user input command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public String getUserCommandInput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Prints a message with a default format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param message Message to be printed out."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public void prints(String message) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Prints the list of notes in the notebook."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param notebook Containing the notes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void prints(Notebook notebook) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Prints all the events in the timetable."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param timetable Containing all the events."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private void prints(Timetable timetable) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 64,
      "R-Ramana": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/DateTimeManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Represents a DateTimeManager. Manages the date and time info."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "public class DateTimeManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String DATEFORMAT \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(DATEFORMAT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Parses a user input into the relevant datetime format specified in the manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param input User input to be parsed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return DateTime representation of the user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException Occurs when the format of the input is wrong and in the specified format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static LocalDateTime dateTimeParser(String input) throws SystemException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            dateTime \u003d LocalDateTime.parse(input, FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(SystemException.ExceptionType.EXCEPTION_WRONG_TIMING);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 7,
      "brandonywl": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.CreateTagCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.DeleteTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.command.AddNoteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.command.DeleteNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.ListEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.ListNoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.ListTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.PinCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.RemindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.TagCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.command.ViewNoteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.exception.SystemException.ExceptionType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import seedu.duke.data.notebook.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.RecurringEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.DailyEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.WeeklyEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.MonthlyEvent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import seedu.duke.data.timetable.YearlyEvent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "import seedu.duke.ui.InterfaceManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELIMITER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_DELETE_LINE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_STOP_RECURRING;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.STRING_NEW_LINE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_PIN;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TIMING;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "import static seedu.duke.util.PrefixSyntax.STRING_SPLIT_DELIMITER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chongjx"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final int CONTAINS_TAG_COLOR_INFO \u003d 2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private static final int NULL_INDEX \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Parses userInput string into a Command to be executed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userInput Original string of the userInput."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] userCommandAndArguments \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String commandString \u003d userCommandAndArguments[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String userMessage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userMessage \u003d userCommandAndArguments[1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            userMessage \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            switch (commandString.toLowerCase()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            case AddNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return prepareAddNote(userMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return prepareAddEvent(userMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ListNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return prepareListNote(userMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ListEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return prepareListEvent(userMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ViewNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // return prepareViewNote(userMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case EditCommand.COMMAND_WORD_NOTE:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // return prepareEditNote(userMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case EditCommand.COMMAND_WORD_EVENT:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // return prepareEditEvent(userMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            case DeleteNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return prepareDeleteNote(userMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                return prepareDeleteEvent(userMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return prepareFind(userMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case PinCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // return preparePin(userMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case CreateTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return prepareCreateOrDeleteTag(userMessage, true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case DeleteTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return prepareCreateOrDeleteTag(userMessage, false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ListTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ListTagCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return prepareTag(userMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case RemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                // return prepareRemind(userMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return new IncorrectCommand(InterfaceManager.LS"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        + \"Invalid Command. Please try again or enter help to get a list of valid commands.\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                        + InterfaceManager.LS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (SystemException exception) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new IncorrectCommand(exception.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Splits the userMessage into the respective info by the delimiter."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userMessage Original string of the user message."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return Split strings."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws NullPointerException when the userMessage is empty."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private ArrayList\u003cString[]\u003e splitInfoDetails(String userMessage) throws NullPointerException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] splitMessage \u003d userMessage.split(PREFIX_DELIMITER);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cString[]\u003e splitMessageContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Splits the prefix and the remaining content"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (String s : splitMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            splitMessageContent.add(s.split(STRING_SPLIT_DELIMITER, 2));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Remove the first element as it is always empty"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        splitMessageContent.remove(0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return splitMessageContent;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Creates and returns a Tag object based on the info provided."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param tagMessage info of the Tag. Contains tag name and may contain tag color."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return new Tag object."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException for missing tag name."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Tag handleTagPrefix(String[] tagMessage) throws SystemException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagName;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String tagColor \u003d \"\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Ensures that the message is not blank."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (tagMessage[1].isBlank()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        // Split into the tag name and tag color."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        String[] tagInfo \u003d tagMessage[1].split(\" \", 2);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tagInfo[0].isBlank()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagName \u003d tagInfo[0].trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (tagInfo.length \u003d\u003d CONTAINS_TAG_COLOR_INFO) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            tagColor \u003d tagInfo[1].trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return new Tag(tagName, tagColor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Prepare userInput into Note before adding into Notebook."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param userMessage Original string user inputs."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return Result of the add note command"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @throws SystemException if an error occurs."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareAddNote(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Note note;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        boolean isPinned \u003d false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        boolean isInputSuccess \u003d false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String prefix \u003d infoDetails[0];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    if (infoDetails[1].isBlank()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    title \u003d infoDetails[1].trim();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_TAG:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_PIN:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    if (infoDetails[1].isBlank()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_MISSING_PIN);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    isPinned \u003d Boolean.parseBoolean(infoDetails[1].trim());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (title.isBlank()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Get Content"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                System.out.println(\"Enter Note:\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    content \u003d inputContent();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    isInputSuccess \u003d true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                } catch (StringIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    System.out.println(ExceptionType.EXCEPTION_INVALID_END_INPUT);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } while (!isInputSuccess);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Add to note"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            note \u003d tags.isEmpty() ? new Note(title, content, isPinned) : new Note(title, content, isPinned, tags);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            return new AddNoteCommand(note);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE_PREFIX);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Checks if an input string if blank. If it is, throw the provided system exception. If it is not, return that"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * string trimmed."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param input Input to be checked."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param e ExceptionType to be thrown"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Trimmed non-blank string"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException Occurs when input is blank."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private String checkBlank(String input, SystemException.ExceptionType e) throws SystemException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(e);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            return input.trim();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Takes a user string designated to add an event and prepares it by extracting relevant information from the"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * provided required and optional tags. It requires a title tag and a timing tag (/t and /timing). Other tags allow"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * for it to be recurring and to set reminders of the event."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Takes the format \"add-e /t {Title} /timing {YYYY-MM-DD HH:MM} [/rem [How much earlier to remind]]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * [/rec {How often to re-occur}] [/stop {YYYY-MM-DD HH:MM}]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param userMessage User input message"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Returns an AddEventCommand to be executed by Duke"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException Information provided by the tags are blank, wrong or do not have a default value."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Command prepareAddEvent(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // add-e eventTitle /t timing /rec occurrence /rem time before (default same day)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime dateTime \u003d null;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        LocalDateTime recurringEndTime \u003d null;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        boolean toRemind \u003d false;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        boolean isRecurring \u003d false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        String recurringType \u003d \"\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                String prefix \u003d infoDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                ExceptionType e;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    e \u003d ExceptionType.EXCEPTION_MISSING_TITLE;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    title \u003d checkBlank(infoDetails[1], e);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_TIMING:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    e \u003d ExceptionType.EXCEPTION_MISSING_TIMING;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    String timingString \u003d checkBlank(infoDetails[1], e);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    dateTime \u003d DateTimeManager.dateTimeParser(timingString);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_REMIND:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    toRemind \u003d true;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_RECURRING:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    isRecurring \u003d true;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    e \u003d ExceptionType.EXCEPTION_MISSING_RECURRING_TYPE;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        recurringType \u003d checkBlank(infoDetails[1], e).toLowerCase();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                        recurringType \u003d RecurringEvent.DAILY_RECURRENCE_TYPE;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                case PREFIX_STOP_RECURRING:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    e \u003d ExceptionType.EXCEPTION_MISSING_RECURRING_END_TIME;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    String endTimingString \u003d checkBlank(infoDetails[1], e);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    recurringEndTime \u003d DateTimeManager.dateTimeParser(endTimingString);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                    throw new SystemException(SystemException.ExceptionType.EXCEPTION_WRONG_PREFIX);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            if (title.isBlank()) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(SystemException.ExceptionType.EXCEPTION_MISSING_TITLE);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            } else if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(SystemException.ExceptionType.EXCEPTION_MISSING_TIMING);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TITLE_PREFIX);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        if (isRecurring) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            LocalDate date \u003d (recurringEndTime !\u003d null) ? recurringEndTime.toLocalDate() : null;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            switch (recurringType) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.DAILY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new DailyEvent(title, dateTime, toRemind, date);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.WEEKLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new WeeklyEvent(title, dateTime, toRemind, date);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.MONTHLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new MonthlyEvent(title, dateTime, toRemind, date);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            case RecurringEvent.YEARLY_RECURRENCE_TYPE:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                event \u003d new YearlyEvent(title, dateTime, toRemind, date);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_WRONG_RECURRING_TYPE);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            event \u003d new Event(title, dateTime, toRemind, isRecurring);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "brandonywl"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Used for input of note content and processing the input into a readable data."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return A string of converted content input"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @throws StringIndexOutOfBoundsException if an error occurs."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public String inputContent() throws StringIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        StringBuilder commandInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Type note"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            commandInput.append(input.nextLine());"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // Add next line when user press enter"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (!commandInput.toString().equals(PREFIX_END)) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                commandInput.append(STRING_NEW_LINE);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            // \"/del\" Delete previous line if there user makes mistakes"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (commandInput.toString().contains(PREFIX_DELETE_LINE)) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                deleteLine(commandInput, STRING_NEW_LINE + PREFIX_DELETE_LINE + STRING_NEW_LINE, 0);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                deleteLine(commandInput, STRING_NEW_LINE, 1);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } while (!commandInput.toString().contains(PREFIX_END)); // \"/end\" to end input note"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        // Delete \"/end\" command when user ends the edit"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        deleteLine(commandInput, STRING_NEW_LINE + PREFIX_END + STRING_NEW_LINE, 0);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        return commandInput.toString();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Delete the last line for mistakes made in inputContent()."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param commandInput Original string of the note content."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param characters String of character to be removed."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param noOfChar Number of character. 0 to remove new line, 1 to resume typing on the same line."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public void deleteLine(StringBuilder commandInput, String characters, int noOfChar) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        int lastChar \u003d commandInput.lastIndexOf(characters) + noOfChar;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        commandInput.delete(lastChar, commandInput.length());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * Prepare userInput into a int before deletion."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @param userMessage Original string user inputs."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @return Result of the delete note command"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     * @throws SystemException if an error occurs."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareDeleteNote(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int index \u003d NULL_INDEX;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        String prefix \u003d \"\";"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                prefix \u003d infoDetails[0];"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    if (infoDetails[1].isBlank()) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    index \u003d Integer.parseInt(infoDetails[1].trim());"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                case PREFIX_TITLE:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    if (infoDetails[1].isBlank()) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                        throw new SystemException(SystemException.ExceptionType.EXCEPTION_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    title \u003d infoDetails[1].trim();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            if (prefix.equalsIgnoreCase(PREFIX_TITLE)) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return new DeleteNoteCommand(title);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "                return new DeleteNoteCommand(index);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX_PREFIX);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Ensures that the user does not leave input blank after entering the find command word."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param userMessage user\u0027s input of the keyword."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return new FindCommand Command."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @throws SystemException for missing keyword."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareFind(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (userMessage.isBlank()) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        return new FindCommand(userMessage);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * Returns a ListNote Command."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * ListNoteCommand is overloaded, so depending on the user input i.e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * list-n /tag TAG up/down"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * tags and up/down are optional parameters for users to input"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * up/down is to sort the list alphabetically either A-Z or Z-A"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     *"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @param userMessage user\u0027s input of the keyword."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     * @return new ListNoteCommand Command."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "     */"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    private Command prepareListNote(String userMessage) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // If no optional parameters, return default display of list note"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (userMessage \u003d\u003d null) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        Boolean isAscending \u003d null;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        String[] words \u003d userMessage.split(\"\\\\S\");"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // May have multiple tags that need to be accounted for"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (userMessage.contains(\"/tag\")) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                if (words[i].equals(\"/tag\")) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                    tags.add(words[i + 1]);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        for (String word : words) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (word.equals(\"up\")) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                isAscending \u003d true;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            } else if (word.equals(\"down\")) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                isAscending \u003d false;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // No optional parameters case already accounted"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        // Minimally if no tag, will have up/down and vice versa"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            return new ListNoteCommand(isAscending);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            if (isAscending \u003d\u003d null) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return new ListNoteCommand(tags);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "                return new ListNoteCommand(isAscending, tags);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "            }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "        }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareListEvent(String userMessage) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return new ListEventCommand();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * Parses the variables in userMessage to a form that is used in DeleteEventCommand."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @param userMessage User Input without the action word"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @return Returns a DeleteEventCommand to be executed by Duke"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     * @throws SystemException When the index is not numeric (e.g. index \u003d 1%s)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    private Command prepareDeleteEvent(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            index \u003d Integer.parseInt(checkBlank(userMessage, SystemException.ExceptionType.EXCEPTION_MISSING_INDEX));"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        // Convert from human-readable index to index in array."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "        return new DeleteEventCommand(index - 1);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareViewNote(String userMessage) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "       return new ViewNoteCommand();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareEditNote(String userMessage) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "       return new EditCommand(index, note);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareEditEvent(String userMessage) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "       return new EditCommand(index, event);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command preparePin(String userMessage) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "       return new PinCommand(index);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    */"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns a CreateTagCommand or a DeleteTagCommand based on the user message."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userMessage Original string of the user message."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param isCreate determines the type of command (CreateTagCommand or DeleteTagCommand) to return."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return either a new CreateTagCommand or DeleteTagCommand."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException for missing tag prefix or tag name."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareCreateOrDeleteTag(String userMessage, boolean isCreate) throws SystemException {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String prefix \u003d infoDetails[0];"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                if (prefix.equalsIgnoreCase(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            // Ensures that there is at least 1 tag to be created or deleted."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG_PREFIX);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG_PREFIX);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        if (isCreate) {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new CreateTagCommand(tags);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            return new DeleteTagCommand(tags);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * Returns a TagCommand to tag a note."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @param userMessage Original string of the user message."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @return a new TagCommand."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     * @throws SystemException for invalid index input, missing tag prefix or tag name."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareTag(String userMessage) throws SystemException {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        int index \u003d NULL_INDEX;"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            ArrayList\u003cString[]\u003e splitInfo \u003d splitInfoDetails(userMessage);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            for (String[] infoDetails : splitInfo) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                String prefix \u003d infoDetails[0];"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                switch (prefix) {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                case PREFIX_TAG:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    Tag tag \u003d handleTagPrefix(infoDetails);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    tags.add(tag);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                case PREFIX_INDEX:"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    if (infoDetails[1].isBlank()) {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                        throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    index \u003d Integer.parseInt(infoDetails[1].trim());"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG_PREFIX);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            if (index \u003c\u003d NULL_INDEX) {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "                throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_VALUE);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NullPointerException exception) {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_TAG_PREFIX);"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_MISSING_INDEX);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "            throw new SystemException(ExceptionType.EXCEPTION_INVALID_INDEX_FORMAT);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "        return new TagCommand(index, tags);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    private Command prepareRemind(String userMessage) {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "       return new RemindCommand(index, isToRemind);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    */"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 279,
      "R-Ramana": 64,
      "brandonywl": 175,
      "Nazryl": 139
    }
  },
  {
    "path": "src/main/java/seedu/duke/util/PrefixSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "public class PrefixSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nazryl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_TITLE \u003d \"t\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_TAG \u003d \"tag\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_PIN \u003d \"pin\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_TIMING \u003d \"timing\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_RECURRING \u003d \"rec\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_REMIND \u003d \"rem\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "    public static final String PREFIX_STOP_RECURRING \u003d \"stop\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_END \u003d \"/end\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String PREFIX_DATETIME \u003d \"/d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_INDEX \u003d \"i\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String PREFIX_CONTENT \u003d \"/c\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-Ramana"
        },
        "content": "    public static final String PREFIX_LINE \u003d \"/ln\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String PREFIX_DELIMITER \u003d \"/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    public static final String STRING_SPLIT_DELIMITER \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String STRING_NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "    public static final String PREFIX_DELETE_LINE \u003d \"/del\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "R-Ramana": 3,
      "brandonywl": 4,
      "Nazryl": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "class AddNoteCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 9,
      "Nazryl": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/CreateTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class CreateTagCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeleteNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nazryl"
        },
        "content": "class DeleteNoteCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 9,
      "Nazryl": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeleteTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class DeleteTagCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListEventCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ListEventCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ListNoteCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ListTagCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/PinCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class PinCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/RemindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class RemindCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/TagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class TagCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ViewNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ViewNoteCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/exception/SystemExceptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class SystemExceptionTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/notebook/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class NoteTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/notebook/NotebookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class NotebookTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void addNote() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void deleteNote() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/notebook/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.notebook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class TagTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/timetable/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/timetable/TimetableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.data.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class TimetableTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void addEvent() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void deleteEvent() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.exception.SystemException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import seedu.duke.data.notebook.Notebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class StorageManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void saveNotebook() throws SystemException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Notebook notes \u003d new Notebook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String content \u003d \"Hello this is a test note\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                + \"With a few lines\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                + \"This is the end of the note\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            String title \u003d \"testNote_\" + i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            Boolean isPinned \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                isPinned \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            Note note \u003d new Note(title, content, isPinned);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            notes.addNote(note);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        StorageManager.saveNotebook(notes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void saveAll() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void loadAll() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prachi2023"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    void saveNoteContent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        String content \u003d \"Hello this is a test note\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + \"With a few lines\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "                        + \"This is the end of the note\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        Note note \u003d new Note(\"TestNote\", content, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            StorageManager.saveNoteContent(note);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "            System.out.println(\"Unable to create file\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prachi2023"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14,
      "prachi2023": 42
    }
  },
  {
    "path": "src/test/java/seedu/duke/ui/InterfaceManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class InterfaceManagerTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void getUserCommandInput() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void prints() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/util/DateTimeManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class DateTimeManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/util/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "package seedu.duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chongjx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    void parseCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 10
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandonywl"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chongjx"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "Chongjx": 3,
      "brandonywl": 1
    }
  }
]
